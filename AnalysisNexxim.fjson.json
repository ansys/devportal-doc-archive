{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.application.AnalysisNexxim", "body": "<h1>Source code for pyaedt.application.AnalysisNexxim</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.Analysis</span> <span class=\"kn\">import</span> <span class=\"n\">Analysis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Circuit</span> <span class=\"kn\">import</span> <span class=\"n\">ModelerNexxim</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">CircuitComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.PostProcessor</span> <span class=\"kn\">import</span> <span class=\"n\">CircuitPostProcessor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SolveSetup</span> <span class=\"kn\">import</span> <span class=\"n\">SetupCircuit</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FieldAnalysisCircuit</span><span class=\"p\">(</span><span class=\"n\">Analysis</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;FieldCircuitAnalysis class.</span>\n\n<span class=\"sd\">    This class is for circuit analysis setup in Nexxim.</span>\n\n<span class=\"sd\">    It is automatically initialized by a call from an application,</span>\n<span class=\"sd\">    such as HFSS or Q3D. See the application function for its</span>\n<span class=\"sd\">    parameter definitions.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">application</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">Analysis</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span> <span class=\"o\">=</span> <span class=\"n\">ModelerNexxim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span> <span class=\"o\">=</span> <span class=\"n\">CircuitPostProcessor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">push_down</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Push-down to the child component and reinitialize the Circuit object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        component_name : str or :class:`pyaedt.modeler.Object3d.CircuitComponent`</span>\n<span class=\"sd\">            Component to initialize.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">out_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"n\">CircuitComponent</span><span class=\"p\">):</span>\n            <span class=\"n\">out_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">component_name</span><span class=\"o\">.</span><span class=\"n\">component_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;RefDes&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;U&quot;</span> <span class=\"o\">==</span> <span class=\"n\">component_name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n            <span class=\"n\">out_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">component_name</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">component_name</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">component_name</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                    <span class=\"n\">out_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">component_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;RefDes&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">out_name</span> <span class=\"o\">=</span> <span class=\"n\">component_name</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"o\">.</span><span class=\"n\">SetActiveDesign</span><span class=\"p\">(</span><span class=\"n\">out_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"n\">out_name</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pop_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Pop-up to parent Circuit design and reinitialize Circuit object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">parent_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"o\">.</span><span class=\"n\">SetActiveDesign</span><span class=\"p\">(</span><span class=\"n\">parent_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"n\">parent_name</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Postprocessor.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.PostProcessor.CircuitPostProcessor`</span>\n<span class=\"sd\">            PostProcessor object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">existing_analysis_sweeps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analysis setups.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllSolutionSetups&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">existing_analysis_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analysis setups.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllSolutionSetups&quot;&quot;&quot;</span>\n        <span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetAllSolutionSetups</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">setups</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nominal_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nominal sweep.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">modeler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modeler object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setup_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Setup names.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllSolutionSetups&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetAllSolutionSetups</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">excitations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all excitation names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of excitation names. Excitations with multiple modes will return one</span>\n<span class=\"sd\">            excitation for each mode.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllPorts</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;IPort@&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetAllPorts</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;IPort@&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">ports</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_excitations_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Excitation names.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.27</span>\n<span class=\"sd\">           Use :func:`excitations` property instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            BoundarySetup Module object</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetAllPorts</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`get_excitations_name` is deprecated. Use `excitations` property instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_all_sparameter_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">excitation_names</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all S parameters for a list of exctitations.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        excitation_names : list, optional</span>\n<span class=\"sd\">            List of excitations. The default is ``[]``, in which case</span>\n<span class=\"sd\">            the S parameters for all excitations are to be provided.</span>\n<span class=\"sd\">            For example, ``[&quot;1&quot;, &quot;2&quot;]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of strings representing the S parameters of the excitations.</span>\n<span class=\"sd\">            For example, ``&quot;S(1,1)&quot;, &quot;S(1,2)&quot;, &quot;S(2,2)&quot;``.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">excitation_names</span><span class=\"p\">:</span>\n            <span class=\"n\">excitation_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n        <span class=\"n\">spar</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">excitation_names</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">excitation_names</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">while</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">excitation_names</span><span class=\"p\">):</span>\n                <span class=\"n\">spar</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;S(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">excitation_names</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]))</span>\n                <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">spar</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_all_return_loss_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">excitation_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">excitation_name_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of all return losses for a list of exctitations.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        excitation_names : list, optional</span>\n<span class=\"sd\">            List of excitations. The default is ``None``, in which case</span>\n<span class=\"sd\">            the return losses for all excitations are to be provided.</span>\n<span class=\"sd\">            For example ``[&quot;1&quot;, &quot;2&quot;]``.</span>\n<span class=\"sd\">        excitation_name_prefix : string, optional</span>\n<span class=\"sd\">             Prefix to add to the excitation names. The default is ``&quot;&quot;``,</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of strings representing the return losses of the excitations.</span>\n<span class=\"sd\">            For example ``[&quot;S(1, 1)&quot;, S(2, 2)]``</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetAllPorts</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">excitation_names</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">excitation_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">excitation_names</span><span class=\"p\">:</span>\n            <span class=\"n\">excitation_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n        <span class=\"k\">if</span> <span class=\"n\">excitation_name_prefix</span><span class=\"p\">:</span>\n            <span class=\"n\">excitation_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">excitation_names</span> <span class=\"k\">if</span> <span class=\"n\">excitation_name_prefix</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()]</span>\n        <span class=\"n\">spar</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">excitation_names</span><span class=\"p\">:</span>\n            <span class=\"n\">spar</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;S(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">spar</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_all_insertion_loss_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">trlist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reclist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tx_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">rx_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of all insertion losses from two lists of excitations (driver and receiver).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        trlist : list, optional</span>\n<span class=\"sd\">            List of drivers. The default is ``[]``. For example, ``[&quot;1&quot;]``.</span>\n<span class=\"sd\">        reclist : list, optional</span>\n<span class=\"sd\">            List of receivers. The default is ``[]``. The number of drivers equals</span>\n<span class=\"sd\">            the number of receivers. For example, ``[&quot;2&quot;]``.</span>\n<span class=\"sd\">        tx_prefix : str, optional</span>\n<span class=\"sd\">            Prefix to add to driver names. For example, ``&quot;DIE&quot;``. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        rx_prefix : str, optional</span>\n<span class=\"sd\">            Prefix to add to receiver names. For example, ``&quot;BGA&quot;``. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of strings representing insertion losses of the excitations.</span>\n<span class=\"sd\">            For example, ``[&quot;S(1,2)&quot;]``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetAllPorts</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">trlist</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">trlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">reclist</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">reclist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">spar</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">trlist</span><span class=\"p\">:</span>\n            <span class=\"n\">trlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span> <span class=\"k\">if</span> <span class=\"n\">tx_prefix</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">reclist</span><span class=\"p\">:</span>\n            <span class=\"n\">reclist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span> <span class=\"k\">if</span> <span class=\"n\">rx_prefix</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">trlist</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">reclist</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;The TX and RX lists should be the same length.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">trlist</span><span class=\"p\">,</span> <span class=\"n\">reclist</span><span class=\"p\">):</span>\n            <span class=\"n\">spar</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;S(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">spar</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_next_xtalk_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">trlist</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">tx_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of all the near end XTalks from a list of excitations (driver and receiver).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        trlist : list, optional</span>\n<span class=\"sd\">            List of drivers. The default is ``[]``. For example,</span>\n<span class=\"sd\">            ``[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]``.</span>\n<span class=\"sd\">        tx_prefix : str, optional</span>\n<span class=\"sd\">            Prefix to add to driver names. For example, ``&quot;DIE&quot;``.  The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of strings representing near end XTalks of the excitations.</span>\n<span class=\"sd\">            For example, ``[&quot;S(1, 2)&quot;, &quot;S(1, 3)&quot;, &quot;S(2, 3)&quot;]``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetAllPorts</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">trlist</span><span class=\"p\">:</span>\n            <span class=\"n\">trlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span> <span class=\"k\">if</span> <span class=\"n\">tx_prefix</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">trlist</span><span class=\"p\">:</span>\n            <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">trlist</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">while</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">trlist</span><span class=\"p\">):</span>\n                <span class=\"nb\">next</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;S(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">trlist</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]))</span>\n                <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"nb\">next</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_fext_xtalk_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">trlist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reclist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tx_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">rx_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">skip_same_index_couples</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of all the far end XTalks from two lists of exctitations (driver and receiver).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        trlist : list, optional</span>\n<span class=\"sd\">            List of drivers. The default is ``[]``. For example,</span>\n<span class=\"sd\">            ``[&quot;1&quot;, &quot;2&quot;]``.</span>\n<span class=\"sd\">        reclist : list, optional</span>\n<span class=\"sd\">            List of receiver. The default is ``[]``. For example,</span>\n<span class=\"sd\">            ``[&quot;3&quot;, &quot;4&quot;]``.</span>\n<span class=\"sd\">        tx_prefix : str, optional</span>\n<span class=\"sd\">            Prefix for driver names. For example, ``&quot;DIE&quot;``.  The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        rx_prefix : str, optional</span>\n<span class=\"sd\">            Prefix for receiver names. For examples, ``&quot;BGA&quot;`` The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        skip_same_index_couples : bool, optional</span>\n<span class=\"sd\">            Whether to skip driver and receiver couples with the same index position.</span>\n<span class=\"sd\">            The default is ``True``, in which case the drivers and receivers</span>\n<span class=\"sd\">            with the same index position are considered insertion losses and</span>\n<span class=\"sd\">            excluded from the list.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of strings representing the far end XTalks of the excitations.</span>\n<span class=\"sd\">            For example, ``[&quot;S(1, 4)&quot;, &quot;S(2, 3)&quot;]``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetAllPorts</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">trlist</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">trlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">reclist</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">reclist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">fext</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">trlist</span><span class=\"p\">:</span>\n            <span class=\"n\">trlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span> <span class=\"k\">if</span> <span class=\"n\">tx_prefix</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">reclist</span><span class=\"p\">:</span>\n            <span class=\"n\">reclist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span> <span class=\"k\">if</span> <span class=\"n\">rx_prefix</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">trlist</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">reclist</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">skip_same_index_couples</span> <span class=\"ow\">or</span> <span class=\"n\">reclist</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">trlist</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n                    <span class=\"n\">fext</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;S(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">fext</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the setup from the current design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Setup object.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">SetupCircuit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setupname</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">setuptype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a new setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str, optional</span>\n<span class=\"sd\">            Name of the new setup. The default is ``&quot;MySetupAuto&quot;``.</span>\n<span class=\"sd\">        setuptype : str, optional</span>\n<span class=\"sd\">            Type of the setup. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default type is applied.</span>\n<span class=\"sd\">        props : dict, optional</span>\n<span class=\"sd\">            Dictionary of properties with values. The default is ``{}``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        SetupCircuit</span>\n<span class=\"sd\">            Setup object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddLinearNetworkAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddDCAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddTransient</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddQuickEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddVerifEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddAMIAnalysis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">setuptype</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span>\n\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generate_unique_setup_name</span><span class=\"p\">(</span><span class=\"n\">setupname</span><span class=\"p\">)</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">SetupCircuit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setuptype</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">_setitem_without_update</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">])</span>\n            <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span>\n\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def mesh(self):</span>\n    <span class=\"c1\">#     return self._mesh</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def post(self):</span>\n    <span class=\"c1\">#     return self._post</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/application/AnalysisNexxim", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}