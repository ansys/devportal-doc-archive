{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.application.Analysis", "body": "<h1>Source code for pyaedt.application.Analysis</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains the ``analysis`` class.</span>\n\n<span class=\"sd\">It includes common classes for file management and messaging and all</span>\n<span class=\"sd\">calls to AEDT modules like the modeler, mesh, postprocessing, and setup.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tempfile</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.Design</span> <span class=\"kn\">import</span> <span class=\"n\">Design</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.JobManager</span> <span class=\"kn\">import</span> <span class=\"n\">update_hpc_option</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AXIS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">GRAVITY</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">PLANE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SETUPS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SOLUTIONS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">VIEW</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">CoordinateSystemAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">CoordinateSystemPlane</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">GravityDirection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">Plane</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">filter_tuple</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">MaxwellParameters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">NativeComponentObject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.DesignXPloration</span> <span class=\"kn\">import</span> <span class=\"n\">OptimizationSetups</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.DesignXPloration</span> <span class=\"kn\">import</span> <span class=\"n\">ParametricSetups</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.MaterialLib</span> <span class=\"kn\">import</span> <span class=\"n\">Materials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">SetupProps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SolveSetup</span> <span class=\"kn\">import</span> <span class=\"n\">Setup</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Analysis</span><span class=\"p\">(</span><span class=\"n\">Design</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Contains all common analysis functions.</span>\n\n<span class=\"sd\">    This class is inherited in the caller application and is accessible through it ( eg. ``hfss.method_name``).</span>\n\n\n<span class=\"sd\">    It is automatically initialized by a call from an application, such as HFSS or Q3D.</span>\n<span class=\"sd\">    See the application function for its parameter descriptions.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : str</span>\n<span class=\"sd\">        Application that is to initialize the call.</span>\n<span class=\"sd\">    projectname : str</span>\n<span class=\"sd\">        Name of the project to select or the full path to the project</span>\n<span class=\"sd\">        or AEDTZ archive to open.</span>\n<span class=\"sd\">    designname : str</span>\n<span class=\"sd\">        Name of the design to select.</span>\n<span class=\"sd\">    solution_type : str</span>\n<span class=\"sd\">        Solution type to apply to the design.</span>\n<span class=\"sd\">    setup_name : str</span>\n<span class=\"sd\">        Name of the setup to use as the nominal.</span>\n<span class=\"sd\">    specified_version : str</span>\n<span class=\"sd\">        Version of AEDT  to use.</span>\n<span class=\"sd\">    NG : bool</span>\n<span class=\"sd\">        Whether to run AEDT in the non-graphical mode.</span>\n<span class=\"sd\">    new_desktop_session : bool</span>\n<span class=\"sd\">        Whether to launch an instance of AEDT in a new thread, even if</span>\n<span class=\"sd\">        another instance of the ``specified_version`` is active on the</span>\n<span class=\"sd\">        machine.</span>\n<span class=\"sd\">    close_on_exit : bool</span>\n<span class=\"sd\">        Whether to release  AEDT on exit.</span>\n<span class=\"sd\">    student_version : bool</span>\n<span class=\"sd\">        Whether to enable the student version of AEDT.</span>\n<span class=\"sd\">    aedt_process_id : int, optional</span>\n<span class=\"sd\">        Only used when ``new_desktop_session = False``, specifies by process ID which instance</span>\n<span class=\"sd\">        of Electronics Desktop to point PyAEDT at.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">application</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">Design</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Design Loaded&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_materials</span> <span class=\"o\">=</span> <span class=\"n\">Materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Materials Loaded&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_available_variations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AvailableVariations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_setup</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">setup_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_names</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parametrics</span> <span class=\"o\">=</span> <span class=\"n\">ParametricSetups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizations</span> <span class=\"o\">=</span> <span class=\"n\">OptimizationSetups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_components</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SOLUTIONS</span> <span class=\"o\">=</span> <span class=\"n\">SOLUTIONS</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SETUPS</span> <span class=\"o\">=</span> <span class=\"n\">SETUPS</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AXIS</span> <span class=\"o\">=</span> <span class=\"n\">AXIS</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">PLANE</span> <span class=\"o\">=</span> <span class=\"n\">PLANE</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">VIEW</span> <span class=\"o\">=</span> <span class=\"n\">VIEW</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GRAVITY</span> <span class=\"o\">=</span> <span class=\"n\">GRAVITY</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">native_components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Native Component dictionary.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modules.Boundaries.NativeComponentObject`]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_components</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_components</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_native_data</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_components</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of output variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetOutputVariables()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ooutput_variable</span><span class=\"o\">.</span><span class=\"n\">GetOutputVariables</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Materials in the project.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.MaterialLib.Materials`</span>\n<span class=\"sd\">           Materials in the project.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_materials</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Position of the object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Position object.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">Position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">available_variations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Available variation object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.application.Analysis.Analysis.AvailableVariations`</span>\n<span class=\"sd\">            Available variation object.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_available_variations</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">CoordinateSystemAxis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Coordinate system axis constant.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.8</span>\n<span class=\"sd\">           Use :attr:`AXIS` instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.constants.AXIS`</span>\n<span class=\"sd\">            Coordinate system axis constants tuple (.X, .Y, .Z).</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">CoordinateSystemAxis</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">CoordinateSystemPlane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Coordinate system plane constants.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.8</span>\n<span class=\"sd\">           Use :attr:`PLANE` instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.constants.PLANE`</span>\n<span class=\"sd\">            Coordinate system plane constants tuple (.XY, .YZ, .XZ).</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">CoordinateSystemPlane</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">View</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Planes.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.8</span>\n<span class=\"sd\">           Use :attr:`VIEW` instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.constants.PLANE`</span>\n<span class=\"sd\">            Coordinate system plane string tuple (&quot;XY&quot;, &quot;YZ&quot;, &quot;XZ&quot;).</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Plane</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">GravityDirection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Gravity direction.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.8</span>\n<span class=\"sd\">           Use :attr:`GRAVITY` instead.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            Gravity direction tuple (XNeg, YNeg, ZNeg, XPos, YPos, ZPos).</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">GravityDirection</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">modeler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modeler.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Modeler.Modeler`</span>\n<span class=\"sd\">            Modeler object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mesh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Mesh.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Mesh.Mesh`</span>\n<span class=\"sd\">            Mesh object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mesh</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;PostProcessor.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.AdvancedPostProcessing.PostProcessor`</span>\n<span class=\"sd\">            PostProcessor object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analysis_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analysis setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the active or first analysis setup.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllSolutionSetups()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span>\n\n    <span class=\"nd\">@analysis_setup</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analysis_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">):</span>\n        <span class=\"n\">setup_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup_list</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">setup_name</span> <span class=\"ow\">in</span> <span class=\"n\">setup_list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Invalid setup name </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span> <span class=\"o\">=</span> <span class=\"n\">setup_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">existing_analysis_sweeps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Existing analysis sweeps.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of all analysis sweeps in the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GelAllSolutionNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSweeps</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setup_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span>\n        <span class=\"n\">sweep_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS3DLayout&quot;</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetAllSolutionNames</span><span class=\"p\">()</span>\n            <span class=\"n\">sweep_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">sweep_list</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;Adaptive Pass&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">sweep_list</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">setup_list</span><span class=\"p\">:</span>\n                <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span>\n                <span class=\"k\">if</span> <span class=\"n\">setuptype</span><span class=\"p\">:</span>\n                    <span class=\"n\">sweep_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">+</span> <span class=\"n\">setuptype</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">sweep_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GelAllSolutionNames</span><span class=\"p\">()</span>\n                <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Eigenmode&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSweeps</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">))</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">sw</span> <span class=\"ow\">in</span> <span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">+</span> <span class=\"n\">sw</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sweep_list</span><span class=\"p\">:</span>\n                        <span class=\"n\">sweep_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">+</span> <span class=\"n\">sw</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sweep_list</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nominal_adaptive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nominal adaptive sweep.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the nominal adaptive sweep.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GelAllSolutionNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSweeps</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nominal_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nominal sweep.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the last adaptive sweep if a sweep is available or</span>\n<span class=\"sd\">            the name of the nominal adaptive sweep if present.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GelAllSolutionNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSweeps</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_adaptive</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">existing_analysis_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Existing analysis setups.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of all analysis setups in the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSetups</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSetups</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">setups</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setup_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Setup names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of names of all analysis setups in the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSetups</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSetups</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">SimulationSetupTypes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Simulation setup types.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        SETUPS</span>\n<span class=\"sd\">            List of all simulation setup types categorized by application.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">SETUPS</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">SolutionTypes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Solution types.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        SOLUTIONS</span>\n<span class=\"sd\">            List of all solution type categorized by application.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">SOLUTIONS</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">excitations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all excitation names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of excitation names. Excitations with multiple modes will return one</span>\n<span class=\"sd\">            excitation for each mode.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetExcitations</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">list_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetExcitations</span><span class=\"p\">())</span>\n            <span class=\"k\">del</span> <span class=\"n\">list_names</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">list_names</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_excitations_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all excitation names.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.27</span>\n<span class=\"sd\">           Use :func:`excitations` property instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of excitation names. Excitations with multiple modes will return one</span>\n<span class=\"sd\">            excitation for each mode.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetExcitations</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`get_excitations_name` is deprecated. Use `excitations` property instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_traces_for_plot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">get_self_terms</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">get_mutual_terms</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">first_element_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">second_element_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">&quot;dB(S&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of traces of specified designs ready to use in plot reports.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        get_self_terms : bool, optional</span>\n<span class=\"sd\">            Whether to return self terms. The default is ``True``.</span>\n<span class=\"sd\">        get_mutual_terms : bool, optional</span>\n<span class=\"sd\">            Whether to return mutual terms. The default is ``True``.</span>\n<span class=\"sd\">        first_element_filter : str, optional</span>\n<span class=\"sd\">            Filter to apply to the first element of the equation.</span>\n<span class=\"sd\">            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.</span>\n<span class=\"sd\">        second_element_filter : str, optional</span>\n<span class=\"sd\">            Filter to apply to the second element of the equation.</span>\n<span class=\"sd\">            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.</span>\n<span class=\"sd\">        category : str</span>\n<span class=\"sd\">            Plot category name as in the report (including operator).</span>\n<span class=\"sd\">            The default is ``&quot;dB(S&quot;``,  which is the plot category name for capacitance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of traces of specified designs ready to use in plot reports.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Q3d</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = hfss(project_path)</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.get_traces_for_plot(first_element_filter=&quot;Bo?1&quot;,</span>\n<span class=\"sd\">        ...                           second_element_filter=&quot;GND*&quot;, category=&quot;dB(S&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">first_element_filter</span><span class=\"p\">:</span>\n            <span class=\"n\">first_element_filter</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;*&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">second_element_filter</span><span class=\"p\">:</span>\n            <span class=\"n\">second_element_filter</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;*&quot;</span>\n        <span class=\"n\">list_output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">end_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;)&quot;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">get_self_terms</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">end_str</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">filter_tuple</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">first_element_filter</span><span class=\"p\">,</span> <span class=\"n\">second_element_filter</span><span class=\"p\">):</span>\n                    <span class=\"n\">list_output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">get_mutual_terms</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el1</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">el2</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">el1</span> <span class=\"o\">!=</span> <span class=\"n\">el2</span><span class=\"p\">:</span>\n                        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"p\">,</span> <span class=\"n\">el1</span><span class=\"p\">,</span> <span class=\"n\">el2</span><span class=\"p\">,</span> <span class=\"n\">end_str</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">filter_tuple</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">first_element_filter</span><span class=\"p\">,</span> <span class=\"n\">second_element_filter</span><span class=\"p\">):</span>\n                            <span class=\"n\">list_output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">list_output</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyze_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analyze all setups in a design.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when simulation is finished.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">AnalyzeAll</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">list_of_variations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of active variations for input setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Setup name. The default is ``None``, in which case the nominal adaptive</span>\n<span class=\"sd\">            is used.</span>\n<span class=\"sd\">        sweep_name : str, optional</span>\n<span class=\"sd\">            Sweep name. The default is``None``, in which case the nominal adaptive</span>\n<span class=\"sd\">            is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of active variations for input setup.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ListVariations</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_sweep</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_adaptive</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;No Setup defined.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweep_name</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_sweep</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_adaptive</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">sweep_name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;No Sweep defined.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS3DLayout&quot;</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;2D Extractor&quot;</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">ListVariations</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\"> : </span><span class=\"si\">{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"p\">)))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ListVariations</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\"> : </span><span class=\"si\">{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"p\">)))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">analyze</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">export_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export all available reports to a file, including sNp, profile, and convergence.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        analyze : bool</span>\n<span class=\"sd\">            Whether to analyze before export. Solutions must be present for the design.</span>\n<span class=\"sd\">        export_folder : str, optional</span>\n<span class=\"sd\">            Full path to the project folder. The default is ``None``, in which case the</span>\n<span class=\"sd\">            working directory is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of all exported files.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllPortsList</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ExportProfile</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportToFile</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportConvergence</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportNetworkData</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">exported_files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">export_folder</span><span class=\"p\">:</span>\n            <span class=\"n\">export_folder</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span>\n        <span class=\"k\">if</span> <span class=\"n\">analyze</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analyze_all</span><span class=\"p\">()</span>\n        <span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSetups</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS3DLayout&quot;</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">excitations</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oexcitation</span><span class=\"o\">.</span><span class=\"n\">GetAllPortsList</span><span class=\"p\">())</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">excitations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetNumExcitations</span><span class=\"p\">(</span><span class=\"s2\">&quot;SignalLine&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">excitations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetNumExcitations</span><span class=\"p\">(</span><span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">excitations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetNumExcitations</span><span class=\"p\">()</span>\n        <span class=\"n\">reportnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">oreportsetup</span><span class=\"o\">.</span><span class=\"n\">GetAllReportNames</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">report_name</span> <span class=\"ow\">in</span> <span class=\"n\">reportnames</span><span class=\"p\">:</span>\n            <span class=\"n\">name_no_space</span> <span class=\"o\">=</span> <span class=\"n\">report_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">oreportsetup</span><span class=\"o\">.</span><span class=\"n\">UpdateReports</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">report_name</span><span class=\"p\">)])</span>\n            <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                <span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_</span><span class=\"si\">{1}</span><span class=\"s2\">_</span><span class=\"si\">{2}</span><span class=\"s2\">.csv&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span><span class=\"p\">,</span> <span class=\"n\">name_no_space</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">oreportsetup</span><span class=\"o\">.</span><span class=\"n\">ExportToFile</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">report_name</span><span class=\"p\">),</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Data: </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSweeps</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sweeps</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;LastAdaptive&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                <span class=\"n\">variation_array</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_of_variations</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">variation_array</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">.prof&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">))</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_profile</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">variation_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                        <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                    <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">.conv&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">))</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_convergence</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">variation_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                        <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;HFSS3DLayout&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Circuit&quot;</span><span class=\"p\">]:</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                                <span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">.s</span><span class=\"si\">{1}</span><span class=\"s2\">p&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">excitations</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">ExportNetworkData</span><span class=\"p\">(</span>\n                                <span class=\"n\">variation_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                                <span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">:</span><span class=\"si\">{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">)],</span>\n                                <span class=\"mi\">3</span><span class=\"p\">,</span>\n                                <span class=\"n\">export_path</span><span class=\"p\">,</span>\n                                <span class=\"p\">[</span><span class=\"s2\">&quot;All&quot;</span><span class=\"p\">],</span>\n                                <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"mi\">50</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span>\n                                <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                <span class=\"mi\">0</span><span class=\"p\">,</span>\n                                <span class=\"mi\">15</span><span class=\"p\">,</span>\n                                <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exported Touchstone: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"k\">except</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export SnP failed: no solutions found&quot;</span><span class=\"p\">)</span>\n\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">varCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">for</span> <span class=\"n\">variation</span> <span class=\"ow\">in</span> <span class=\"n\">variation_array</span><span class=\"p\">:</span>\n                        <span class=\"n\">varCount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_</span><span class=\"si\">{1}</span><span class=\"s2\">.prof&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">varCount</span><span class=\"p\">))</span>\n                        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_profile</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">variation</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                            <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_</span><span class=\"si\">{1}</span><span class=\"s2\">.conv&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">varCount</span><span class=\"p\">))</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_convergence</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">variation</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                            <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;HFSS3DLayout&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Circuit&quot;</span><span class=\"p\">]:</span>\n                            <span class=\"k\">try</span><span class=\"p\">:</span>\n                                <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                                    <span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_</span><span class=\"si\">{1}</span><span class=\"s2\">.s</span><span class=\"si\">{2}</span><span class=\"s2\">p&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">varCount</span><span class=\"p\">,</span> <span class=\"n\">excitations</span><span class=\"p\">)</span>\n                                <span class=\"p\">)</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export SnP: </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">))</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">ExportNetworkData</span><span class=\"p\">(</span>\n                                    <span class=\"n\">variation</span><span class=\"p\">,</span>\n                                    <span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">:</span><span class=\"si\">{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">)],</span>\n                                    <span class=\"mi\">3</span><span class=\"p\">,</span>\n                                    <span class=\"n\">export_path</span><span class=\"p\">,</span>\n                                    <span class=\"p\">[</span><span class=\"s2\">&quot;All&quot;</span><span class=\"p\">],</span>\n                                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                    <span class=\"mi\">50</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"mi\">0</span><span class=\"p\">,</span>\n                                    <span class=\"mi\">15</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"p\">)</span>\n                                <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exported Touchstone: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                            <span class=\"k\">except</span><span class=\"p\">:</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export SnP failed: no solutions found&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">exported_files</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_convergence</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export a solution convergence to a file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str</span>\n<span class=\"sd\">            Setup name. For example, ``&#39;Setup1&#39;``.</span>\n<span class=\"sd\">        variation_string : str</span>\n<span class=\"sd\">            Variation string with values. For example, ``&#39;radius=3mm&#39;``.</span>\n<span class=\"sd\">        file_path : str, optional</span>\n<span class=\"sd\">            Full path to the PROF file. The default is ``None``, in which</span>\n<span class=\"sd\">            case the working directory is used.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            File path if created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportConvergence</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; : &quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">file_path</span><span class=\"p\">:</span>\n            <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Convergence&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.prop&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">variation_string</span><span class=\"p\">:</span>\n            <span class=\"n\">val_str</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">val_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">))</span>\n            <span class=\"n\">variation_string</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">val_str</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;CGDataBlock&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;CG&quot;</span> <span class=\"o\">+</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportConvergence</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CG&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence to  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;RLDataBlock&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;RL&quot;</span> <span class=\"o\">+</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportConvergence</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;RL&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence to  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">break</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;Cap&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;CG&quot;</span> <span class=\"o\">+</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportConvergence</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CG&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence to  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;AC&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;ACRL&quot;</span> <span class=\"o\">+</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportConvergence</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AC RL&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence to  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;DC&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;DC&quot;</span> <span class=\"o\">+</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportConvergence</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DC RL&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence to  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportConvergence</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export Convergence to  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">file_path</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_native_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve Native Components data.&quot;&quot;&quot;</span>\n        <span class=\"n\">boundaries</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">data_vals</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span>\n                <span class=\"s2\">&quot;SubModelDefinitions&quot;</span>\n            <span class=\"p\">][</span><span class=\"s2\">&quot;NativeComponentDefinition&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data_vals</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data_vals</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                <span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"n\">NativeComponentObject</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"p\">,</span>\n                        <span class=\"n\">data_vals</span><span class=\"p\">[</span><span class=\"s2\">&quot;NativeComponentDefinitionProvider&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">],</span>\n                        <span class=\"n\">data_vals</span><span class=\"p\">[</span><span class=\"s2\">&quot;BasicComponentInfo&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;ComponentName&quot;</span><span class=\"p\">],</span>\n                        <span class=\"n\">data_vals</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">data_vals</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                        <span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                            <span class=\"n\">NativeComponentObject</span><span class=\"p\">(</span>\n                                <span class=\"bp\">self</span><span class=\"p\">,</span>\n                                <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s2\">&quot;NativeComponentDefinitionProvider&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">],</span>\n                                <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s2\">&quot;BasicComponentInfo&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;ComponentName&quot;</span><span class=\"p\">],</span>\n                                <span class=\"n\">ds</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"n\">boundaries</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">AvailableVariations</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Contains available variations.</span>\n\n<span class=\"sd\">            Parameters</span>\n<span class=\"sd\">            ----------</span>\n<span class=\"sd\">            app :</span>\n<span class=\"sd\">                Inherited parent object.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            object</span>\n<span class=\"sd\">                Parent object.</span>\n\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Variables.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            list of str</span>\n<span class=\"sd\">                List of names of independent variables.</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">independent_variables</span><span class=\"p\">]</span>\n\n        <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"nf\">variations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_sweep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Variations.</span>\n\n<span class=\"sd\">            Parameters</span>\n<span class=\"sd\">            ----------</span>\n<span class=\"sd\">            setup_sweep : str, optional</span>\n<span class=\"sd\">                Setup name with the sweep to search for variations on. The default is ``None``.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            list of lists</span>\n<span class=\"sd\">                List of variation families.</span>\n\n<span class=\"sd\">            References</span>\n<span class=\"sd\">            ----------</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; oModule.GetAvailableVariations</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_variation_strings</span><span class=\"p\">(</span><span class=\"n\">setup_sweep</span><span class=\"p\">)</span>\n            <span class=\"n\">families</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">vs</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">vs</span><span class=\"p\">:</span>\n                    <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">:</span>\n                        <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"p\">)</span>\n                        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">):</span>\n                            <span class=\"k\">if</span> <span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)]</span> <span class=\"o\">==</span> <span class=\"n\">el</span><span class=\"p\">:</span>\n                                <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n                            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">families</span>\n\n        <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"nf\">get_variation_strings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_sweep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Return variation strings.</span>\n\n<span class=\"sd\">            Parameters</span>\n<span class=\"sd\">            ----------</span>\n<span class=\"sd\">            setup_sweep : str, optional</span>\n<span class=\"sd\">                Setup name with the sweep to search for variations on. The default is ``None``.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            list of str</span>\n<span class=\"sd\">                List of variation families.</span>\n\n<span class=\"sd\">            References</span>\n<span class=\"sd\">            ----------</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; oModule.GetAvailableVariations</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_sweep</span><span class=\"p\">:</span>\n                <span class=\"n\">setup_sweep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">GetAvailableVariations</span><span class=\"p\">(</span><span class=\"n\">setup_sweep</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">nominal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Nominal.&quot;&quot;&quot;</span>\n            <span class=\"n\">families</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">:</span>\n                <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;Nominal&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">families</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">nominal_w_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Nominal with values.</span>\n\n<span class=\"sd\">            References</span>\n<span class=\"sd\">            ----------</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetChildObject(&#39;Variables&#39;).GetChildNames</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetVariableValue</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetNominalVariation&quot;&quot;&quot;</span>\n            <span class=\"n\">families</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">independent_variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n                <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">families</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">nominal_w_values_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Nominal independent with values in a dictionary.</span>\n\n<span class=\"sd\">            References</span>\n<span class=\"sd\">            ----------</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetChildObject(&#39;Variables&#39;).GetChildNames</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetVariableValue</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetNominalVariation&quot;&quot;&quot;</span>\n            <span class=\"n\">families</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">independent_variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n                <span class=\"n\">families</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">families</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">nominal_w_values_dict_w_dependent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Nominal  with values in a dictionary.</span>\n\n<span class=\"sd\">            References</span>\n<span class=\"sd\">            ----------</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetChildObject(&#39;Variables&#39;).GetChildNames</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetVariableValue</span>\n<span class=\"sd\">            &gt;&gt;&gt; oDesign.GetNominalVariation&quot;&quot;&quot;</span>\n            <span class=\"n\">families</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()):</span>\n                <span class=\"n\">families</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">families</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;List of all independent variables with `[&quot;All&quot;]` value.&quot;&quot;&quot;</span>\n            <span class=\"n\">families</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">:</span>\n                <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;All&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">families</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">AxisDir</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Contains constants for the axis directions.&quot;&quot;&quot;</span>\n\n        <span class=\"p\">(</span><span class=\"n\">XNeg</span><span class=\"p\">,</span> <span class=\"n\">YNeg</span><span class=\"p\">,</span> <span class=\"n\">ZNeg</span><span class=\"p\">,</span> <span class=\"n\">XPos</span><span class=\"p\">,</span> <span class=\"n\">YPos</span><span class=\"p\">,</span> <span class=\"n\">ZPos</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve setups.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of names of all setups.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSetups</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSetups</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">setups</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_nominal_variation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the nominal variation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of nominal variations.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_sweeps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve all sweeps for a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of names of all sweeps for the setup.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetSweeps</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSweeps</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">sweeps</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_parametric_results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">exportunits</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export a list of all parametric variations solved for a sweep to a CSV file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sweepname : str</span>\n<span class=\"sd\">            Name of the optimetrics sweep.</span>\n<span class=\"sd\">        filename : str</span>\n<span class=\"sd\">            Full path and name for the CSV file.</span>\n<span class=\"sd\">        exportunits : bool, optional</span>\n<span class=\"sd\">            Whether to export units with the value. The default is ``True``. When ``False``,</span>\n<span class=\"sd\">            only the value is exported.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportParametricResults</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ooptimetrics</span><span class=\"o\">.</span><span class=\"n\">ExportParametricResults</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">exportunits</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyze_from_initial_mesh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Revert the solution to the initial mesh and re-run the solve.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">           ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.RevertSetupToInitial</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.Analyze</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">RevertSetupToInitial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analyze_nominal</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyse_nominal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Solve the nominal design.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.0</span>\n<span class=\"sd\">           Use :func:`Analysis.analyze_nominal` instead.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`analyse_nominal` is deprecated. Use `analyze_nominal` instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analyze_nominal</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyze_nominal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num_cores</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">num_tasks</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">num_gpu</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">acf_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_auto_settings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Solve the nominal design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        num_cores : int, optional</span>\n<span class=\"sd\">            Number of simulation cores.</span>\n<span class=\"sd\">        num_tasks : int, optional</span>\n<span class=\"sd\">            Number of simulation tasks.</span>\n<span class=\"sd\">        num_gpu : int, optional</span>\n<span class=\"sd\">            Number of simulation graphic processing units to use.</span>\n<span class=\"sd\">        acf_file : str, optional</span>\n<span class=\"sd\">            Full path to the custom ACF file.</span>\n<span class=\"sd\">        use_auto_settings : bool, optional</span>\n<span class=\"sd\">            Either if use or not auto settings in task/cores. It is not supported by all Setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.Analyze</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analyze_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span><span class=\"p\">,</span> <span class=\"n\">num_cores</span><span class=\"p\">,</span> <span class=\"n\">num_tasks</span><span class=\"p\">,</span> <span class=\"n\">num_gpu</span><span class=\"p\">,</span> <span class=\"n\">acf_file</span><span class=\"p\">,</span> <span class=\"n\">use_auto_settings</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">generate_unique_setup_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a new setup with an unique name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Setup&quot;</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">while</span> <span class=\"n\">setup_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup_name</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">setuptype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``&quot;MySetupAuto&quot;``.</span>\n<span class=\"sd\">        setuptype : optional</span>\n<span class=\"sd\">            Type of the setup. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default type is applied.</span>\n<span class=\"sd\">        props : dict, optional</span>\n<span class=\"sd\">            Dictionary of analysis properties appropriate for the design and analysis.</span>\n<span class=\"sd\">            If no values are passed, default values are used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SolveSetup.Setup`</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertSetup</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Create a setup for SBR+ setup using advanced Doppler</span>\n<span class=\"sd\">        processing for automotive radar.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; import pyaedt</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = pyaedt.Hfss(solution_type=&#39;SBR+&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1 = hfss.create_setup(setupname=&#39;Setup1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;IsSbrRangeDoppler&quot;] = True</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerTimeVariable&quot;] = &quot;time_var&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerCenterFreq&quot;] = &quot;76.5GHz&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerRangeResolution&quot;] = &quot;0.15meter&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerRangePeriod&quot;] = &quot;100meter&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerVelocityResolution&quot;] = &quot;0.2m_per_sec&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerVelocityMin&quot;] = &quot;-30m_per_sec&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;SbrRangeDopplerVelocityMax&quot;] = &quot;30m_per_sec&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;DopplerRayDensityPerWavelength&quot;] = &quot;0.2&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.props[&quot;MaxNumberOfBounces&quot;] = &quot;3&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1.update()</span>\n<span class=\"sd\">        ...</span>\n<span class=\"sd\">        pyaedt info: Sweep was created correctly.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">props</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setuptype</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_setup</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generate_unique_setup_name</span><span class=\"p\">(</span><span class=\"n\">setupname</span><span class=\"p\">)</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">Setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setuptype</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;MaxDeltaS&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"n\">new_dict</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n                <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;MaxDeltaS&quot;</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaxDeltaE&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_dict</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n                <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">new_dict</span><span class=\"p\">)</span>\n                <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">boundary</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;Type&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SBR+&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"n\">user_domain</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                    <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"s2\">&quot;RadiationSetup&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                            <span class=\"n\">user_domain</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RadiationSetup&quot;</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_setups</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">field_setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_setups</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">user_domain</span> <span class=\"ow\">and</span> <span class=\"n\">user_domain</span> <span class=\"ow\">in</span> <span class=\"n\">field_setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                                <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">user_domain</span>\n                                <span class=\"k\">break</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user_domain</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_setups</span><span class=\"p\">:</span>\n                            <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_setups</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">user_domain</span><span class=\"p\">:</span>\n                        <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">user_domain</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Field Observation Domain not defined&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n                    <span class=\"n\">default_sbr_setup</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;RayDensityPerWavelength&quot;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MaxNumberOfBounces&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;EnableCWRays&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;RadiationSetup&quot;</span><span class=\"p\">:</span> <span class=\"n\">domain</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;EnableSBRSelfCoupling&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;UseSBRAdvOptionsGOBlockage&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;UseSBRAdvOptionsWedges&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PTDUTDSimulationSettings&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;None&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;SkipSBRSolveDuringAdaptivePasses&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;UseSBREnhancedRadiatedPowerCalculation&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;AdaptFEBIWithRadiation&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">new_dict</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">default_sbr_setup</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"n\">new_dict</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n                    <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">new_dict</span><span class=\"p\">)</span>\n                    <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">break</span>\n\n        <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n            <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.DeleteSetups</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Create a setup and then delete it.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; import pyaedt</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = pyaedt.Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; setup1 = hfss.create_setup(setupname=&#39;Setup1&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.delete_setup(setupname=&#39;Setup1&#39;)</span>\n<span class=\"sd\">        ...</span>\n<span class=\"sd\">        pyaedt info: Sweep was deleted correctly.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">setupname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">DeleteSetups</span><span class=\"p\">([</span><span class=\"n\">setupname</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">properties_dict</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modify a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n<span class=\"sd\">        properties_dict : dict</span>\n<span class=\"sd\">            Dictionary containing the property to update with the value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SolveSetup.Setup`</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_setup</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">Setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setuptype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">properties_dict</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setupname</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the setup from the current design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SolveSetup.Setup`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_setup</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">Setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setuptype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setupname</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_output_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">solution</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create or modify an output variable.</span>\n\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        variable : str</span>\n<span class=\"sd\">            Name of the variable.</span>\n<span class=\"sd\">        expression :</span>\n<span class=\"sd\">            Value for the variable.</span>\n<span class=\"sd\">        solution :</span>\n<span class=\"sd\">            Name of the solution in the format `&quot;setup_name : sweep_name&quot;`.</span>\n<span class=\"sd\">            If `None`, the first available solution is used. Default is `None`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">           ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.CreateOutputVariable</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oModule</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ooutput_variable</span>\n        <span class=\"k\">if</span> <span class=\"n\">solution</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">variable</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_variables</span><span class=\"p\">:</span>\n            <span class=\"n\">oModule</span><span class=\"o\">.</span><span class=\"n\">EditOutputVariable</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">oModule</span><span class=\"o\">.</span><span class=\"n\">CreateOutputVariable</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_output_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">solution</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the value of the output variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        variable : str</span>\n<span class=\"sd\">            Name of the variable.</span>\n<span class=\"sd\">        solution :</span>\n<span class=\"sd\">            Name of the solution in the format `&quot;setup_name : sweep_name&quot;`.</span>\n<span class=\"sd\">            If `None`, the first available solution is used. Default is `None`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Value of the output variable.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetNominalVariation</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetOutputVariableValue</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">variable</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_variables</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Output variable </span><span class=\"si\">{}</span><span class=\"s2\"> does not exist.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"p\">)</span>\n        <span class=\"n\">nominal_variation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">GetNominalVariation</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">solution</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ooutput_variable</span><span class=\"o\">.</span><span class=\"n\">GetOutputVariableValue</span><span class=\"p\">(</span>\n            <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">nominal_variation</span><span class=\"p\">,</span> <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span><span class=\"p\">,</span> <span class=\"p\">[]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object_material_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prop_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the material properties for a list of objects and return them in a dictionary.</span>\n\n<span class=\"sd\">        This high-level function ignores objects with no defined material properties.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_list : list, optional</span>\n<span class=\"sd\">            List of objects to get material properties for. The default is ``None``,</span>\n<span class=\"sd\">            in which case material properties are retrieved for all objects.</span>\n<span class=\"sd\">        prop_names : str or list</span>\n<span class=\"sd\">            Property or list of properties to export. The default is ``None``, in</span>\n<span class=\"sd\">            which case all properties are exported.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of objects with material properties.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">object_list</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">prop_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prop_names</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">prop_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prop_names</span><span class=\"p\">]</span>\n\n        <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n            <span class=\"n\">mat_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">material_name</span>\n            <span class=\"n\">mat_props</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_materials</span><span class=\"p\">[</span><span class=\"n\">mat_name</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop_names</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mat_props</span><span class=\"o\">.</span><span class=\"n\">_props</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                <span class=\"k\">for</span> <span class=\"n\">prop_name</span> <span class=\"ow\">in</span> <span class=\"n\">prop_names</span><span class=\"p\">:</span>\n                    <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">][</span><span class=\"n\">prop_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mat_props</span><span class=\"o\">.</span><span class=\"n\">_props</span><span class=\"p\">[</span><span class=\"n\">prop_name</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyze_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">num_cores</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">num_tasks</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">num_gpu</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">acf_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">use_auto_settings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analyze a design setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the setup, which can be an optimetric setup or a simple setup.</span>\n<span class=\"sd\">        num_cores : int, optional</span>\n<span class=\"sd\">            Number of simulation cores. The default is ``None.``</span>\n<span class=\"sd\">        num_tasks : int, optional</span>\n<span class=\"sd\">            Number of simulation tasks. The default is ``None.``</span>\n<span class=\"sd\">        num_gpu : int, optional</span>\n<span class=\"sd\">            Number of simulation graphics processing units. The default is ``None.``</span>\n<span class=\"sd\">        acf_file : str, optional</span>\n<span class=\"sd\">            Full path to custom ACF file. The default is ``None.``</span>\n<span class=\"sd\">        use_auto_settings : bool, optional</span>\n<span class=\"sd\">            Either if use or not auto settings in task/cores. It is not supported by all Setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">           ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.Analyze</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">set_custom_dso</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">active_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">GetRegistryString</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;Desktop/ActiveDSOConfigurations/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">acf_file</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">SetRegistryFromFile</span><span class=\"p\">(</span><span class=\"n\">acf_file</span><span class=\"p\">)</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">acf_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;ConfigName&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_registry_key</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;Desktop/ActiveDSOConfigurations/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">set_custom_dso</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n        <span class=\"k\">elif</span> <span class=\"n\">num_gpu</span> <span class=\"ow\">or</span> <span class=\"n\">num_tasks</span> <span class=\"ow\">or</span> <span class=\"n\">num_cores</span><span class=\"p\">:</span>\n            <span class=\"n\">config_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pyaedt_config&quot;</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pyaedt_dir</span><span class=\"p\">,</span> <span class=\"s2\">&quot;misc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pyaedt_local_config.acf&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session</span><span class=\"p\">:</span>\n                <span class=\"n\">target_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">gettempdir</span><span class=\"p\">(),</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.acf&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">target_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">config_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.acf&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span>\n                    <span class=\"k\">else</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">config_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.acf&quot;</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copy2</span><span class=\"p\">(</span><span class=\"n\">source_name</span><span class=\"p\">,</span> <span class=\"n\">target_name</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">num_cores</span><span class=\"p\">:</span>\n                <span class=\"n\">update_hpc_option</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NumCores&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_cores</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">num_gpu</span><span class=\"p\">:</span>\n                <span class=\"n\">update_hpc_option</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NumGPUs&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_gpu</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">num_tasks</span><span class=\"p\">:</span>\n                <span class=\"n\">update_hpc_option</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NumEngines&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_tasks</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">update_hpc_option</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ConfigName&quot;</span><span class=\"p\">,</span> <span class=\"n\">config_name</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">update_hpc_option</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DesignType&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Icepak&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">use_auto_settings</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">update_hpc_option</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;UseAutoSettings&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"n\">use_auto_settings</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session</span><span class=\"p\">:</span>\n                <span class=\"n\">remote_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">config_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.acf&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span>\n                    <span class=\"k\">else</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">config_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.acf&quot;</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session</span><span class=\"o\">.</span><span class=\"n\">filemanager</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">remote_name</span><span class=\"p\">)</span>\n                <span class=\"n\">target_name</span> <span class=\"o\">=</span> <span class=\"n\">remote_name</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">SetRegistryFromFile</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_registry_key</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;Desktop/ActiveDSOConfigurations/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"n\">config_name</span><span class=\"p\">)</span>\n                <span class=\"n\">set_custom_dso</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_setups</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solving design setup </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">Analyze</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">set_custom_dso</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_registry_key</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;Desktop/ActiveDSOConfigurations/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"n\">active_config</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error in Solving Setup </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solving Optimetrics&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ooptimetrics</span><span class=\"o\">.</span><span class=\"n\">SolveSetup</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">set_custom_dso</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_registry_key</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;Desktop/ActiveDSOConfigurations/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"n\">active_config</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error in Solving or Missing Setup  </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">set_custom_dso</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_registry_key</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;Desktop/ActiveDSOConfigurations/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span><span class=\"p\">,</span> <span class=\"n\">active_config</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Design setup </span><span class=\"si\">%s</span><span class=\"s2\"> solved correctly&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solve_in_batch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;local&quot;</span><span class=\"p\">,</span> <span class=\"n\">run_in_thread</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analyze a design setup in batch mode.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           To use this function, the project must be closed.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        filename : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``None``, which means that the active project</span>\n<span class=\"sd\">            is to be solved.</span>\n<span class=\"sd\">        machine : str, optional</span>\n<span class=\"sd\">            Name of the machine if remote.  The default is ``&quot;local&quot;``.</span>\n<span class=\"sd\">        run_in_thread : bool, optional</span>\n<span class=\"sd\">            Whether to submit the batch command as a thread. The default is</span>\n<span class=\"sd\">            ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">         bool</span>\n<span class=\"sd\">           ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">filename</span><span class=\"p\">:</span>\n            <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_file</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_project</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">machine</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;local&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># -Monitor option used as workaround for R2 BatchSolve not exiting properly at the end of the Batch job</span>\n            <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; -ng -BatchSolve -Monitor &quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; -ng -distribute -machinelist list=&quot;</span> <span class=\"o\">+</span> <span class=\"n\">machine</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; -Batchsolve &quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Batch Solve Options: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;posix&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">batch_run</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">desktop_install_dir</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/ansysedt&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">options</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">filename</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">batch_run</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">desktop_install_dir</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/ansysedt.exe&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">options</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">filename</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        check for existing solution directory and delete if present so we</span>\n<span class=\"sd\">        dont have old .asol files etc</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solving model in batch mode on &quot;</span> <span class=\"o\">+</span> <span class=\"n\">machine</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Batch Job command:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">batch_run</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">run_in_thread</span><span class=\"p\">:</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">thread_run</span><span class=\"p\">():</span>\n                <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n                <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"n\">batch_run</span><span class=\"p\">)</span>\n\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">thread_run</span><span class=\"p\">)</span>\n            <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"n\">batch_run</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Batch job finished.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">submit_job</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">clustername</span><span class=\"p\">,</span> <span class=\"n\">aedt_full_exe_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">numnodes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">numcores</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">wait_for_license</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">setting_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Submit a job to be solved on a cluster.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        clustername : str</span>\n<span class=\"sd\">            Name of the cluster to submit the job to.</span>\n<span class=\"sd\">        aedt_full_exe_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDT executable file. The default is ``None``, in which</span>\n<span class=\"sd\">            case ``&quot;/clustername/AnsysEM/AnsysEM2x.x/Win64/ansysedt.exe&quot;`` is used.</span>\n<span class=\"sd\">        numnodes : int, optional</span>\n<span class=\"sd\">            Number of nodes. The default is ``1``.</span>\n<span class=\"sd\">        numcores : int, optional</span>\n<span class=\"sd\">            Number of cores. The default is ``32``.</span>\n<span class=\"sd\">        wait_for_license : bool, optional</span>\n<span class=\"sd\">             Whether to wait for the license to be validated. The default is ``True``.</span>\n<span class=\"sd\">        setting_file : str, optional</span>\n<span class=\"sd\">            Name of the file to use as a template. The default value is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            ID of the job.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesktop.SubmitJob</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">project_file</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_file</span>\n        <span class=\"n\">project_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_path</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">aedt_full_exe_path</span><span class=\"p\">:</span>\n            <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetVersion</span><span class=\"p\">()[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;22.2&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">version_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;v&quot;</span> <span class=\"o\">+</span> <span class=\"n\">version</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">version_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;AnsysEM&quot;</span> <span class=\"o\">+</span> <span class=\"n\">version</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">clustername</span> <span class=\"o\">+</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;\\AnsysEM\\</span><span class=\"si\">{}</span><span class=\"s2\">\\Win64\\ansysedt.exe&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">version_name</span><span class=\"p\">)):</span>\n                <span class=\"n\">aedt_full_exe_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">clustername</span> <span class=\"o\">+</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">AnsysEM</span><span class=\"se\">\\\\\\\\</span><span class=\"si\">{}</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">Win64</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">ansysedt.exe&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">version_name</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">clustername</span> <span class=\"o\">+</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;\\AnsysEM\\</span><span class=\"si\">{}</span><span class=\"s2\">\\Linux64\\ansysedt&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">version_name</span><span class=\"p\">)):</span>\n                <span class=\"n\">aedt_full_exe_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\\\\\\\\\</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">clustername</span> <span class=\"o\">+</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">AnsysEM</span><span class=\"se\">\\\\\\\\</span><span class=\"si\">{}</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">Linux64</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">ansysedt&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">version_name</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;AEDT shared path does not exist. Please provide a full path.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">aedt_full_exe_path</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;AEDT shared path does not exist. Provide a full path.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"n\">aedt_full_exe_path</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_project</span><span class=\"p\">()</span>\n        <span class=\"n\">path_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n        <span class=\"n\">destination_reg</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Job_settings.areg&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setting_file</span><span class=\"p\">:</span>\n            <span class=\"n\">setting_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;..&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;misc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Job_Settings.areg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">setting_file</span><span class=\"p\">,</span> <span class=\"n\">destination_reg</span><span class=\"p\">)</span>\n\n        <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">destination_reg</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">setting_file</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t$begin&quot;</span> <span class=\"o\">==</span> <span class=\"n\">line</span><span class=\"p\">[:</span><span class=\"mi\">8</span><span class=\"p\">]:</span>\n                    <span class=\"n\">lin</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t$begin </span><span class=\"se\">\\\\</span><span class=\"s2\">&#39;</span><span class=\"si\">{}</span><span class=\"se\">\\\\</span><span class=\"s2\">&#39;</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">clustername</span><span class=\"p\">)</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lin</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t$end&quot;</span> <span class=\"o\">==</span> <span class=\"n\">line</span><span class=\"p\">[:</span><span class=\"mi\">6</span><span class=\"p\">]:</span>\n                    <span class=\"n\">lin</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t$end </span><span class=\"se\">\\\\</span><span class=\"s2\">&#39;</span><span class=\"si\">{}</span><span class=\"se\">\\\\</span><span class=\"s2\">&#39;</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">clustername</span><span class=\"p\">)</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lin</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"s2\">&quot;NumCores&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                    <span class=\"n\">lin</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\tNumCores=</span><span class=\"si\">{}</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">numcores</span><span class=\"p\">)</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lin</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"s2\">&quot;NumNodes=1&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                    <span class=\"n\">lin</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\tNumNodes=</span><span class=\"si\">{}</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">numnodes</span><span class=\"p\">)</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lin</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"s2\">&quot;ProductPath&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                    <span class=\"n\">lin</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\tProductPath =</span><span class=\"se\">\\\\</span><span class=\"s2\">&#39;</span><span class=\"si\">{}</span><span class=\"se\">\\\\</span><span class=\"s2\">&#39;</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">aedt_full_exe_path</span><span class=\"p\">)</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lin</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"s2\">&quot;WaitForLicense&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                    <span class=\"n\">lin</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">\t</span><span class=\"se\">\\\\</span><span class=\"s2\">\tWaitForLicense=</span><span class=\"si\">{}</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wait_for_license</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lin</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n        <span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">SubmitJob</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Job_settings.areg&quot;</span><span class=\"p\">),</span> <span class=\"n\">project_file</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_touchstone</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">solution_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">variations_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export the Touchstone file to a local folder.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        solution_name : str, optional</span>\n<span class=\"sd\">            Name of the solution that has been solved.</span>\n<span class=\"sd\">        sweep_name : str, optional</span>\n<span class=\"sd\">            Name of the sweep that has been solved.</span>\n<span class=\"sd\">            This parameter has to be ignored or set with same value as solution_name</span>\n<span class=\"sd\">        file_name : str, optional</span>\n<span class=\"sd\">            Full path and name for the Touchstone file. The default is ``None``,</span>\n<span class=\"sd\">            which exports the file to the working directory.</span>\n<span class=\"sd\">        variations : list, optional</span>\n<span class=\"sd\">            List of all parameter variations. For example, ``[&quot;$AmbientTemp&quot;, &quot;$PowerIn&quot;]``.</span>\n<span class=\"sd\">            The default is ``None``.</span>\n<span class=\"sd\">        variations_value : list, optional</span>\n<span class=\"sd\">            List of all parameter variation values. For example, ``[&quot;22cel&quot;, &quot;100&quot;]``.</span>\n<span class=\"sd\">            The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">variations</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"n\">variations_value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">variations_value</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">solution_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">nominal_sweep_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_sweep</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)]</span>\n            <span class=\"n\">solution_name</span> <span class=\"o\">=</span> <span class=\"n\">nominal_sweep_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_name</span> <span class=\"o\">=</span> <span class=\"n\">solution_name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">sweep_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">sol</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">solution_name</span> <span class=\"o\">==</span> <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">():</span>\n                        <span class=\"n\">sweep_name</span> <span class=\"o\">=</span> <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n                        <span class=\"k\">break</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Normalize the save path</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">file_name</span><span class=\"p\">:</span>\n            <span class=\"n\">appendix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">vv</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">,</span> <span class=\"n\">variations_value</span><span class=\"p\">):</span>\n                <span class=\"n\">appendix</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"n\">vv</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;.S&quot;</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;p&quot;</span>\n            <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">solution_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">sweep_name</span> <span class=\"o\">+</span> <span class=\"n\">appendix</span> <span class=\"o\">+</span> <span class=\"n\">ext</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">file_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;//&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exporting Touchstone &quot;</span> <span class=\"o\">+</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"n\">DesignVariations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">)):</span>\n            <span class=\"n\">DesignVariations</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;=&#39;&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">variations_value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&#39; &quot;</span>\n            <span class=\"c1\"># DesignVariations = &quot;$AmbientTemp=\\&#39;22cel\\&#39; $PowerIn=\\&#39;100\\&#39;&quot;</span>\n        <span class=\"c1\"># array containing &quot;SetupName:SolutionName&quot; pairs (note that setup and solution are separated by a colon)</span>\n        <span class=\"n\">SolutionSelectionArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">solution_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">sweep_name</span><span class=\"p\">]</span>\n        <span class=\"c1\"># 2=tab delimited spreadsheet (.tab), 3= touchstone (.sNp), 4= CitiFile (.cit),</span>\n        <span class=\"c1\"># 7=Matlab (.m), 8=Terminal Z0 spreadsheet</span>\n        <span class=\"n\">FileFormat</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"n\">OutFile</span> <span class=\"o\">=</span> <span class=\"n\">filename</span>  <span class=\"c1\"># full path of output file</span>\n        <span class=\"c1\"># array containin the frequencies to export, use [&quot;all&quot;] for all frequencies</span>\n        <span class=\"n\">FreqsArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">DoRenorm</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># perform renormalization before export</span>\n        <span class=\"n\">RenormImped</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>  <span class=\"c1\"># Real impedance value in ohm, for renormalization</span>\n        <span class=\"n\">DataType</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;S&quot;</span>  <span class=\"c1\"># Type: &quot;S&quot;, &quot;Y&quot;, or &quot;Z&quot; matrix to export</span>\n        <span class=\"n\">Pass</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>  <span class=\"c1\"># The pass to export. -1 = export all passes.</span>\n        <span class=\"n\">ComplexFormat</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># 0=Magnitude/Phase, 1=Real/Immaginary, 2=dB/Phase</span>\n        <span class=\"n\">DigitsPrecision</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>  <span class=\"c1\"># Touchstone number of digits precision</span>\n        <span class=\"n\">IncludeGammaImpedance</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># Include Gamma and Impedance in comments</span>\n        <span class=\"n\">NonStandardExtensions</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>  <span class=\"c1\"># Support for non-standard Touchstone extensions</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">ExportNetworkData</span><span class=\"p\">(</span>\n                <span class=\"n\">DesignVariations</span><span class=\"p\">,</span>\n                <span class=\"n\">SolutionSelectionArray</span><span class=\"p\">,</span>\n                <span class=\"n\">FileFormat</span><span class=\"p\">,</span>\n                <span class=\"n\">OutFile</span><span class=\"p\">,</span>\n                <span class=\"n\">FreqsArray</span><span class=\"p\">,</span>\n                <span class=\"n\">DoRenorm</span><span class=\"p\">,</span>\n                <span class=\"n\">RenormImped</span><span class=\"p\">,</span>\n                <span class=\"n\">DataType</span><span class=\"p\">,</span>\n                <span class=\"n\">Pass</span><span class=\"p\">,</span>\n                <span class=\"n\">ComplexFormat</span><span class=\"p\">,</span>\n                <span class=\"n\">DigitsPrecision</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">IncludeGammaImpedance</span><span class=\"p\">,</span>\n                <span class=\"n\">NonStandardExtensions</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportNetworkData</span><span class=\"p\">(</span>\n                <span class=\"n\">DesignVariations</span><span class=\"p\">,</span>\n                <span class=\"n\">SolutionSelectionArray</span><span class=\"p\">,</span>\n                <span class=\"n\">FileFormat</span><span class=\"p\">,</span>\n                <span class=\"n\">OutFile</span><span class=\"p\">,</span>\n                <span class=\"n\">FreqsArray</span><span class=\"p\">,</span>\n                <span class=\"n\">DoRenorm</span><span class=\"p\">,</span>\n                <span class=\"n\">RenormImped</span><span class=\"p\">,</span>\n                <span class=\"n\">DataType</span><span class=\"p\">,</span>\n                <span class=\"n\">Pass</span><span class=\"p\">,</span>\n                <span class=\"n\">ComplexFormat</span><span class=\"p\">,</span>\n                <span class=\"n\">DigitsPrecision</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">IncludeGammaImpedance</span><span class=\"p\">,</span>\n                <span class=\"n\">NonStandardExtensions</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Touchstone correctly exported to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">value_with_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Combine a number and a string containing the unit in a single string e.g. &quot;1.2mm&quot;.</span>\n<span class=\"sd\">        If the units are not specified, the model units are used.</span>\n<span class=\"sd\">        If value is a string (like containing an expression), it is returned as is.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value : float, int, str</span>\n<span class=\"sd\">            Value of the number or string containing an expression.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Units to combine with value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            String that combines the value and the units (e.g. &quot;1.2mm&quot;).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">units</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_rl_matrix</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">matrix_name</span><span class=\"p\">,</span>\n        <span class=\"n\">file_path</span><span class=\"p\">,</span>\n        <span class=\"n\">is_format_default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">is_exponential</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">default_adaptive</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">is_post_processed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export R/L matrix after solving.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        matrix_name : str</span>\n<span class=\"sd\">            Matrix name to be exported.</span>\n<span class=\"sd\">        file_path : str</span>\n<span class=\"sd\">            File path to export R/L matrix file.</span>\n<span class=\"sd\">        is_format_default : bool, optional</span>\n<span class=\"sd\">            Whether the exported format is default or not.</span>\n<span class=\"sd\">            If False the custom format is set (no exponential).</span>\n<span class=\"sd\">        width : int, optional</span>\n<span class=\"sd\">            Column width in exported .txt file.</span>\n<span class=\"sd\">        precision : int, optional</span>\n<span class=\"sd\">            Decimal precision number in exported *.txt file.</span>\n<span class=\"sd\">        is_exponential : bool, optional</span>\n<span class=\"sd\">            Whether the format number is exponential or not.</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup.</span>\n<span class=\"sd\">        default_adaptive : str, optional</span>\n<span class=\"sd\">            Adaptive type.</span>\n<span class=\"sd\">        is_post_processed : bool, optional</span>\n<span class=\"sd\">            Boolean to check if it is post processed. Default value is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;EddyCurrent&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;RL Matrix can only be exported if solution type is Eddy Current.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">matrix_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bound</span> <span class=\"k\">for</span> <span class=\"n\">bound</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">,</span> <span class=\"n\">MaxwellParameters</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"n\">matrix_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Matrix name to be exported must be provided.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">matrix_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">[</span>\n                <span class=\"n\">matrix</span>\n                <span class=\"k\">for</span> <span class=\"n\">matrix</span> <span class=\"ow\">in</span> <span class=\"n\">matrix_list</span>\n                <span class=\"k\">if</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">matrix_name</span> <span class=\"ow\">or</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">available_properties</span> <span class=\"k\">if</span> <span class=\"n\">matrix_name</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n            <span class=\"p\">]:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Matrix name doesn&#39;t exist, provide and existing matrix name.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Matrix list parameters is empty, can&#39;t export a valid matrix.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">file_path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;File path to export R/L matrix must be provided.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">elif</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;.txt&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;File extension must be .txt&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setup_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_adaptive</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">default_adaptive</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span>\n        <span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">+</span> <span class=\"n\">default_adaptive</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_format_default</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">ExportSolnData</span><span class=\"p\">(</span>\n                    <span class=\"n\">analysis_setup</span><span class=\"p\">,</span>\n                    <span class=\"n\">matrix_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">is_post_processed</span><span class=\"p\">,</span>\n                    <span class=\"n\">variations</span><span class=\"p\">,</span>\n                    <span class=\"n\">file_path</span><span class=\"p\">,</span>\n                    <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                    <span class=\"n\">is_format_default</span><span class=\"p\">,</span>\n                    <span class=\"n\">width</span><span class=\"p\">,</span>\n                    <span class=\"n\">precision</span><span class=\"p\">,</span>\n                    <span class=\"n\">is_exponential</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solutions are empty. Solve before exporting.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">ExportSolnData</span><span class=\"p\">(</span><span class=\"n\">analysis_setup</span><span class=\"p\">,</span> <span class=\"n\">matrix_name</span><span class=\"p\">,</span> <span class=\"n\">is_post_processed</span><span class=\"p\">,</span> <span class=\"n\">variations</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solutions are empty. Solve before exporting.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/application/Analysis", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}