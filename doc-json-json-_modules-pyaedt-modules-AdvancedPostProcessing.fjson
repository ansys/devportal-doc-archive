{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modules.AdvancedPostProcessing", "body": "<h1>Source code for pyaedt.modules.AdvancedPostProcessing</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains the `PostProcessor` class.</span>\n\n<span class=\"sd\">It contains all advanced postprocessing functionalities that require Python 3.x packages like NumPy and Matplotlib.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">ModelPlotter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.PostProcessor</span> <span class=\"kn\">import</span> <span class=\"n\">PostProcessor</span> <span class=\"k\">as</span> <span class=\"n\">Post</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;The NumPy module is required to run some functionalities of PostProcess.</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"s2\">&quot;Install with </span><span class=\"se\">\\n\\n</span><span class=\"s2\">pip install numpy</span><span class=\"se\">\\n\\n</span><span class=\"s2\">Requires CPython.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">IPython.display</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n        <span class=\"n\">ipython_available</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"n\">ipython_available</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<div class=\"viewcode-block\" id=\"PostProcessor\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor/#pyaedt.modules.AdvancedPostProcessing.PostProcessor\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PostProcessor</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Contains advanced postprocessing functionalities that require Python 3.x packages like NumPy and Matplotlib.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Basic usage demonstrated with an HFSS, Maxwell, or any other design:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; post = aedtapp.post</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.nb_display\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.nb_display/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.nb_display\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nb_display</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">show_axis</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">show_grid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">show_ruler</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Show the Jupyter Notebook display.</span>\n\n<span class=\"sd\">          .. note::</span>\n<span class=\"sd\">              .assign_curvature_extraction Jupyter Notebook is not supported by IronPython.</span>\n\n<span class=\"sd\">         Parameters</span>\n<span class=\"sd\">         ----------</span>\n<span class=\"sd\">         show_axis : bool, optional</span>\n<span class=\"sd\">             Whether to show the axes. The default is ``True``.</span>\n<span class=\"sd\">         show_grid : bool, optional</span>\n<span class=\"sd\">             Whether to show the grid. The default is ``True``.</span>\n<span class=\"sd\">         show_ruler : bool, optional</span>\n<span class=\"sd\">             Whether to show the ruler. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`IPython.core.display.Image`</span>\n<span class=\"sd\">            Jupyter notebook image.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">ipython_available</span><span class=\"p\">:</span>\n            <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_model_picture</span><span class=\"p\">(</span><span class=\"n\">show_axis</span><span class=\"o\">=</span><span class=\"n\">show_axis</span><span class=\"p\">,</span> <span class=\"n\">show_grid</span><span class=\"o\">=</span><span class=\"n\">show_grid</span><span class=\"p\">,</span> <span class=\"n\">show_ruler</span><span class=\"o\">=</span><span class=\"n\">show_ruler</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;The Ipython package is missing and must be installed.&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.get_efields_data\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.get_efields_data/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.get_efields_data\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_efields_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_sweep_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">ff_setup</span><span class=\"o\">=</span><span class=\"s2\">&quot;Infinite Sphere1&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;All&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Compute Etheta and EPhi.</span>\n\n<span class=\"sd\">        .. warning::</span>\n<span class=\"sd\">           This method requires NumPy to be installed on your machine.</span>\n\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_sweep_name : str, optional</span>\n<span class=\"sd\">            Name of the setup for computing the report. The default is ``&quot;&quot;``, in</span>\n<span class=\"sd\">            which case the nominal adaptive is applied.</span>\n<span class=\"sd\">        ff_setup : str, optional</span>\n<span class=\"sd\">            Far field setup. The default is ``&quot;Infinite Sphere1&quot;``.</span>\n<span class=\"sd\">        freq : str, optional</span>\n<span class=\"sd\">            The default is ``&quot;All&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        np.ndarray</span>\n<span class=\"sd\">            numpy array containing ``[theta_range, phi_range, Etheta, Ephi]``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_sweep_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_sweep_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">nominal_adaptive</span>\n        <span class=\"n\">results_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">all_sources</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_osolution</span><span class=\"o\">.</span><span class=\"n\">GetAllSources</span><span class=\"p\">()</span>\n        <span class=\"c1\"># assuming only 1 mode</span>\n        <span class=\"n\">all_sources_with_modes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:1&quot;</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">all_sources</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_sources_with_modes</span><span class=\"p\">):</span>\n            <span class=\"n\">edit_sources_ctxt</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">&quot;IncludePortPostProcessing:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SpecifySystemPower:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]]</span>\n            <span class=\"k\">for</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_sources_with_modes</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">m</span><span class=\"p\">:</span>  <span class=\"c1\"># set only 1 source to 1W, all the rest to 0</span>\n                    <span class=\"n\">mag</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">mag</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">edit_sources_ctxt</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">each</span><span class=\"p\">),</span> <span class=\"s2\">&quot;Magnitude:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">W&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">mag</span><span class=\"p\">),</span> <span class=\"s2\">&quot;Phase:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">)]</span>\n                <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_osolution</span><span class=\"o\">.</span><span class=\"n\">EditSources</span><span class=\"p\">(</span><span class=\"n\">edit_sources_ctxt</span><span class=\"p\">)</span>\n\n            <span class=\"n\">ctxt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Context:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">ff_setup</span><span class=\"p\">]</span>\n\n            <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Theta:=&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;All&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Phi:=&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;All&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Freq:=&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">freq</span><span class=\"p\">]]</span>\n\n            <span class=\"n\">trace_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rETheta&quot;</span>\n            <span class=\"n\">solnData</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_far_field_data</span><span class=\"p\">(</span>\n                <span class=\"n\">setup_sweep_name</span><span class=\"o\">=</span><span class=\"n\">setup_sweep_name</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">ff_setup</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">trace_name</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">solnData</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span>\n\n            <span class=\"n\">theta_vals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetSweepValues</span><span class=\"p\">(</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">)))</span>\n            <span class=\"n\">phi_vals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetSweepValues</span><span class=\"p\">(</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">)))</span>\n            <span class=\"c1\"># phi is outer loop</span>\n            <span class=\"n\">theta_unique</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">theta_vals</span><span class=\"p\">)</span>\n            <span class=\"n\">phi_unique</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"n\">phi_vals</span><span class=\"p\">)</span>\n            <span class=\"n\">theta_range</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">theta_vals</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">theta_vals</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">theta_unique</span><span class=\"p\">))</span>\n            <span class=\"n\">phi_range</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">phi_vals</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">phi_vals</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">phi_unique</span><span class=\"p\">))</span>\n            <span class=\"n\">real_theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetRealDataValues</span><span class=\"p\">(</span><span class=\"n\">trace_name</span><span class=\"p\">))</span>\n            <span class=\"n\">imag_theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetImagDataValues</span><span class=\"p\">(</span><span class=\"n\">trace_name</span><span class=\"p\">))</span>\n\n            <span class=\"n\">trace_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rEPhi&quot;</span>\n            <span class=\"n\">solnData</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_far_field_data</span><span class=\"p\">(</span>\n                <span class=\"n\">setup_sweep_name</span><span class=\"o\">=</span><span class=\"n\">setup_sweep_name</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">ff_setup</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">trace_name</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">solnData</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span>\n\n            <span class=\"n\">real_phi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetRealDataValues</span><span class=\"p\">(</span><span class=\"n\">trace_name</span><span class=\"p\">))</span>\n            <span class=\"n\">imag_phi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetImagDataValues</span><span class=\"p\">(</span><span class=\"n\">trace_name</span><span class=\"p\">))</span>\n\n            <span class=\"n\">Etheta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vectorize</span><span class=\"p\">(</span><span class=\"nb\">complex</span><span class=\"p\">)(</span><span class=\"n\">real_theta</span><span class=\"p\">,</span> <span class=\"n\">imag_theta</span><span class=\"p\">)</span>\n            <span class=\"n\">Ephi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vectorize</span><span class=\"p\">(</span><span class=\"nb\">complex</span><span class=\"p\">)(</span><span class=\"n\">real_phi</span><span class=\"p\">,</span> <span class=\"n\">imag_phi</span><span class=\"p\">)</span>\n            <span class=\"n\">source_name_without_mode</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;:1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">results_dict</span><span class=\"p\">[</span><span class=\"n\">source_name_without_mode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">theta_range</span><span class=\"p\">,</span> <span class=\"n\">phi_range</span><span class=\"p\">,</span> <span class=\"n\">Etheta</span><span class=\"p\">,</span> <span class=\"n\">Ephi</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">results_dict</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.get_model_plotter_geometries\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.get_model_plotter_geometries/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.get_model_plotter_geometries\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_model_plotter_geometries</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_as_separate_objects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_air_objects</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">force_opacity_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">array_coordinates</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">generate_mesh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">get_objects_from_aedt</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Initialize the Model Plotter object with actual modeler objects and return it.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list, optional</span>\n<span class=\"sd\">            Optional list of objects to plot. If `None` all objects will be exported.</span>\n<span class=\"sd\">        plot_as_separate_objects : bool, optional</span>\n<span class=\"sd\">            Plot each object separately. It may require more time to export from AEDT.</span>\n<span class=\"sd\">        plot_air_objects : bool, optional</span>\n<span class=\"sd\">            Plot also air and vacuum objects.</span>\n<span class=\"sd\">        force_opacity_value : float, optional</span>\n<span class=\"sd\">            Opacity value between 0 and 1 to be applied to all model.</span>\n<span class=\"sd\">            If `None` aedt opacity will be applied to each object.</span>\n<span class=\"sd\">        array_coordinates : list of list</span>\n<span class=\"sd\">            List of array element centers. The modeler objects will be duplicated and translated.</span>\n<span class=\"sd\">            List of [[x1,y1,z1], [x2,y2,z2]...].</span>\n<span class=\"sd\">        generate_mesh : bool, optional</span>\n<span class=\"sd\">            Whether to generate the mesh after importing objects. The default is ``True``.</span>\n<span class=\"sd\">        get_objects_from_aedt : bool, optional</span>\n<span class=\"sd\">            Whether to export objects from AEDT and initialize them. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.generic.plot.ModelPlotter`</span>\n<span class=\"sd\">            Model Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2021.2&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Object is supported from AEDT 2021 R2.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">get_objects_from_aedt</span><span class=\"p\">:</span>\n            <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_model_obj</span><span class=\"p\">(</span>\n                <span class=\"n\">obj_list</span><span class=\"o\">=</span><span class=\"n\">objects</span><span class=\"p\">,</span>\n                <span class=\"n\">export_as_single_objects</span><span class=\"o\">=</span><span class=\"n\">plot_as_separate_objects</span><span class=\"p\">,</span>\n                <span class=\"n\">air_objects</span><span class=\"o\">=</span><span class=\"n\">plot_air_objects</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ModelPlotter</span><span class=\"p\">()</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">off_screen</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">force_opacity_value</span><span class=\"p\">:</span>\n                <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">file</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">force_opacity_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">file</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">file</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">array_coordinates</span> <span class=\"o\">=</span> <span class=\"n\">array_coordinates</span>\n        <span class=\"k\">if</span> <span class=\"n\">generate_mesh</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">generate_geometry_mesh</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.plot_model_obj\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.plot_model_obj/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.plot_model_obj\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot_model_obj</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">export_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_as_separate_objects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_air_objects</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">force_opacity_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">clean_files</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">array_coordinates</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s2\">&quot;isometric&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Plot the model or a substet of objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list, optional</span>\n<span class=\"sd\">            Optional list of objects to plot. If `None` all objects will be exported.</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">            Show the plot after generation or simply return the</span>\n<span class=\"sd\">            generated Class for more customization before plot.</span>\n<span class=\"sd\">        export_path : str, optional</span>\n<span class=\"sd\">            If available, an image is saved to file. If `None` no image will be saved.</span>\n<span class=\"sd\">        plot_as_separate_objects : bool, optional</span>\n<span class=\"sd\">            Plot each object separately. It may require more time to export from AEDT.</span>\n<span class=\"sd\">        plot_air_objects : bool, optional</span>\n<span class=\"sd\">            Plot also air and vacuum objects.</span>\n<span class=\"sd\">        force_opacity_value : float, optional</span>\n<span class=\"sd\">            Opacity value between 0 and 1 to be applied to all model.</span>\n<span class=\"sd\">            If `None` aedt opacity will be applied to each object.</span>\n<span class=\"sd\">        clean_files : bool, optional</span>\n<span class=\"sd\">            Clean created files after plot. Cache is mainteined into the model object returned.</span>\n<span class=\"sd\">        array_coordinates : list of list</span>\n<span class=\"sd\">            List of array element centers. The modeler objects will be duplicated and translated.</span>\n<span class=\"sd\">            List of [[x1,y1,z1], [x2,y2,z2]...].</span>\n<span class=\"sd\">        view : str, optional</span>\n<span class=\"sd\">           View to export. Options are ``&quot;isometric&quot;``, ``&quot;xy&quot;``, ``&quot;xz&quot;``, ``&quot;yz&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;isometric&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.generic.plot.ModelPlotter`</span>\n<span class=\"sd\">            Model Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_plotter_geometries</span><span class=\"p\">(</span>\n            <span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"n\">objects</span><span class=\"p\">,</span>\n            <span class=\"n\">plot_as_separate_objects</span><span class=\"o\">=</span><span class=\"n\">plot_as_separate_objects</span><span class=\"p\">,</span>\n            <span class=\"n\">plot_air_objects</span><span class=\"o\">=</span><span class=\"n\">plot_air_objects</span><span class=\"p\">,</span>\n            <span class=\"n\">force_opacity_value</span><span class=\"o\">=</span><span class=\"n\">force_opacity_value</span><span class=\"p\">,</span>\n            <span class=\"n\">array_coordinates</span><span class=\"o\">=</span><span class=\"n\">array_coordinates</span><span class=\"p\">,</span>\n            <span class=\"n\">generate_mesh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">off_screen</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">show</span>\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;isometric&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">view</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;xy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;xz&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;yz&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">camera_position</span> <span class=\"o\">=</span> <span class=\"n\">view</span>\n        <span class=\"k\">elif</span> <span class=\"n\">view</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;isometric&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong view setup. It has to be one of xy, xz, yz, isometric.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">export_path</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">show</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">clean_files</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">clean_cache_and_files</span><span class=\"p\">(</span><span class=\"n\">clean_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.plot_field_from_fieldplot\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.plot_field_from_fieldplot/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.plot_field_from_fieldplot\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot_field_from_fieldplot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">plotname</span><span class=\"p\">,</span>\n        <span class=\"n\">project_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">meshplot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">imageformat</span><span class=\"o\">=</span><span class=\"s2\">&quot;jpg&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s2\">&quot;isometric&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Temperature&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">scale_min</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">scale_max</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_cad_objs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">log_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export a field plot to an image file (JPG or PNG) using Python PyVista.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           The PyVista module rebuilds the mesh and the overlap fields on the mesh.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        plotname : str</span>\n<span class=\"sd\">            Name of the field plot to export.</span>\n<span class=\"sd\">        project_path : str, optional</span>\n<span class=\"sd\">            Path for saving the image file. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        meshplot : bool, optional</span>\n<span class=\"sd\">            Whether to create and plot the mesh over the fields. The</span>\n<span class=\"sd\">            default is ``False``.</span>\n<span class=\"sd\">        imageformat : str, optional</span>\n<span class=\"sd\">            Format of the image file. Options are ``&quot;jpg&quot;``,</span>\n<span class=\"sd\">            ``&quot;png&quot;``, ``&quot;svg&quot;``, and ``&quot;webp&quot;``. The default is</span>\n<span class=\"sd\">            ``&quot;jpg&quot;``.</span>\n<span class=\"sd\">        view : str, optional</span>\n<span class=\"sd\">           View to export. Options are ``&quot;isometric&quot;``, ``&quot;xy&quot;``, ``&quot;xz&quot;``, ``&quot;yz&quot;``.</span>\n<span class=\"sd\">        plot_label : str, optional</span>\n<span class=\"sd\">            Type of the plot. The default is ``&quot;Temperature&quot;``.</span>\n<span class=\"sd\">        plot_folder : str, optional</span>\n<span class=\"sd\">            Plot folder to update before exporting the field.</span>\n<span class=\"sd\">            The default is ``None``, in which case all plot</span>\n<span class=\"sd\">            folders are updated.</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">            Export Image without plotting on UI.</span>\n<span class=\"sd\">        scale_min : float, optional</span>\n<span class=\"sd\">            Fix the Scale Minimum value.</span>\n<span class=\"sd\">        scale_max : float, optional</span>\n<span class=\"sd\">            Fix the Scale Maximum value.</span>\n<span class=\"sd\">        plot_cad_objs : bool, optional</span>\n<span class=\"sd\">            Whether to include objects in the plot. The default is ``True``.</span>\n<span class=\"sd\">        log_scale : bool, optional</span>\n<span class=\"sd\">            Whether to plot fields in log scale. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.generic.plot.ModelPlotter`</span>\n<span class=\"sd\">            Model Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">plot_folder</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ofieldsreporter</span><span class=\"o\">.</span><span class=\"n\">UpdateAllFieldsPlots</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ofieldsreporter</span><span class=\"o\">.</span><span class=\"n\">UpdateQuantityFieldsPlots</span><span class=\"p\">(</span><span class=\"n\">plot_folder</span><span class=\"p\">)</span>\n\n        <span class=\"n\">file_to_add</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_field_plot</span><span class=\"p\">(</span><span class=\"n\">plotname</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">)</span>\n\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_plotter_geometries</span><span class=\"p\">(</span><span class=\"n\">generate_mesh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">get_objects_from_aedt</span><span class=\"o\">=</span><span class=\"n\">plot_cad_objs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">off_screen</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">show</span>\n        <span class=\"k\">if</span> <span class=\"n\">file_to_add</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_field_from_file</span><span class=\"p\">(</span>\n                <span class=\"n\">file_to_add</span><span class=\"p\">,</span> <span class=\"n\">coordinate_units</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span> <span class=\"n\">show_edges</span><span class=\"o\">=</span><span class=\"n\">meshplot</span><span class=\"p\">,</span> <span class=\"n\">log_scale</span><span class=\"o\">=</span><span class=\"n\">log_scale</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">plot_label</span><span class=\"p\">:</span>\n                <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">plot_label</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;isometric&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">view</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;xy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;xz&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;yz&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">camera_position</span> <span class=\"o\">=</span> <span class=\"n\">view</span>\n        <span class=\"k\">elif</span> <span class=\"n\">view</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;isometric&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong view setup. It has to be one of xy, xz, yz, isometric.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">scale_min</span> <span class=\"ow\">and</span> <span class=\"n\">scale_max</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">range_min</span> <span class=\"o\">=</span> <span class=\"n\">scale_min</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">range_max</span> <span class=\"o\">=</span> <span class=\"n\">scale_max</span>\n        <span class=\"k\">if</span> <span class=\"n\">show</span> <span class=\"ow\">or</span> <span class=\"n\">project_path</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">imageformat</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.animate_fields_from_aedtplt\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.animate_fields_from_aedtplt/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.animate_fields_from_aedtplt\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">animate_fields_from_aedtplt</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">plotname</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">meshplot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">variation_variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">variation_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;0deg&quot;</span><span class=\"p\">],</span>\n        <span class=\"n\">project_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">export_gif</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a field plot to an image file (JPG or PNG) using PyVista.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           The PyVista module rebuilds the mesh and the overlap fields on the mesh.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        plotname : str</span>\n<span class=\"sd\">            Name of the plot or the name of the object.</span>\n<span class=\"sd\">        plot_folder : str, optional</span>\n<span class=\"sd\">            Name of the folder in which the plot resides. The default</span>\n<span class=\"sd\">            is ``None``.</span>\n<span class=\"sd\">        variation_variable : str, optional</span>\n<span class=\"sd\">            Variable to vary. The default is ``&quot;Phi&quot;``.</span>\n<span class=\"sd\">        variation_list : list, optional</span>\n<span class=\"sd\">            List of variation values with units. The default is</span>\n<span class=\"sd\">            ``[&quot;0deg&quot;]``.</span>\n<span class=\"sd\">        project_path : str, optional</span>\n<span class=\"sd\">            Path for the export. The default is ``&quot;&quot;`` which export file in working_directory.</span>\n<span class=\"sd\">        meshplot : bool, optional</span>\n<span class=\"sd\">             The default is ``False``. Valid from Version 2021.2.</span>\n<span class=\"sd\">        export_gif : bool, optional</span>\n<span class=\"sd\">             The default is ``False``.</span>\n<span class=\"sd\">                show=False,</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">             Generate the animation without showing an interactive plot.  The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.generic.plot.ModelPlotter`</span>\n<span class=\"sd\">            Model Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">plot_folder</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ofieldsreporter</span><span class=\"o\">.</span><span class=\"n\">UpdateAllFieldsPlots</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ofieldsreporter</span><span class=\"o\">.</span><span class=\"n\">UpdateQuantityFieldsPlots</span><span class=\"p\">(</span><span class=\"n\">plot_folder</span><span class=\"p\">)</span>\n\n        <span class=\"n\">fields_to_add</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">project_path</span><span class=\"p\">:</span>\n            <span class=\"n\">project_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">variation_list</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:FieldsPostProcessorTab&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FieldsReporter:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">plotname</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">variation_variable</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">]],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">fields_to_add</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_field_plot</span><span class=\"p\">(</span><span class=\"n\">plotname</span><span class=\"p\">,</span> <span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"n\">plotname</span> <span class=\"o\">+</span> <span class=\"n\">variation_variable</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_plotter_geometries</span><span class=\"p\">(</span><span class=\"n\">generate_mesh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">off_screen</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">show</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">fields_to_add</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_frames_from_file</span><span class=\"p\">(</span><span class=\"n\">fields_to_add</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">export_gif</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">gif_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.gif&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">show</span> <span class=\"ow\">or</span> <span class=\"n\">export_gif</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">animate</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.animate_fields_from_aedtplt_2\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.animate_fields_from_aedtplt_2/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.animate_fields_from_aedtplt_2\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">animate_fields_from_aedtplt_2</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">quantityname</span><span class=\"p\">,</span>\n        <span class=\"n\">object_list</span><span class=\"p\">,</span>\n        <span class=\"n\">plottype</span><span class=\"p\">,</span>\n        <span class=\"n\">meshplot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">intrinsic_dict</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n        <span class=\"n\">variation_variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">variation_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;0deg&quot;</span><span class=\"p\">],</span>\n        <span class=\"n\">project_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">export_gif</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">log_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a field plot to an animated gif file using PyVista.</span>\n\n<span class=\"sd\">         .. note::</span>\n<span class=\"sd\">            The PyVista module rebuilds the mesh and the overlap fields on the mesh.</span>\n\n<span class=\"sd\">        This method creates the plot and exports it.</span>\n<span class=\"sd\">        It is an alternative to the method :func:`animate_fields_from_aedtplt`,</span>\n<span class=\"sd\">        which uses an existing plot.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        quantityname : str</span>\n<span class=\"sd\">            Name of the plot or the name of the object.</span>\n<span class=\"sd\">        object_list : list, optional</span>\n<span class=\"sd\">            Name of the ``folderplot`` folder.</span>\n<span class=\"sd\">        plottype : str</span>\n<span class=\"sd\">            Type of the plot. Options are ``&quot;Surface&quot;``, ``&quot;Volume&quot;``, and</span>\n<span class=\"sd\">            ``&quot;CutPlane&quot;``.</span>\n<span class=\"sd\">        meshplot : bool, optional</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup (sweep) to use for the export. The default is</span>\n<span class=\"sd\">            ``None``.</span>\n<span class=\"sd\">        intrinsic_dict : dict, optional</span>\n<span class=\"sd\">            Intrinsic dictionary that is needed for the export.</span>\n<span class=\"sd\">            The default is ``{}``.</span>\n<span class=\"sd\">        variation_variable : str, optional</span>\n<span class=\"sd\">            Variable to vary. The default is ``&quot;Phi&quot;``.</span>\n<span class=\"sd\">        variation_list : list, option</span>\n<span class=\"sd\">            List of variation values with units. The default is</span>\n<span class=\"sd\">            ``[&quot;0deg&quot;]``.</span>\n<span class=\"sd\">        project_path : str, optional</span>\n<span class=\"sd\">            Path for the export. The default is ``&quot;&quot;`` which export file in working_directory.</span>\n<span class=\"sd\">        export_gif : bool, optional</span>\n<span class=\"sd\">            Whether to export to a GIF file. The default is ``False``,</span>\n<span class=\"sd\">            in which case the plot is exported to a JPG file.</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">            Generate the animation without showing an interactive plot.  The default is ``True``.</span>\n<span class=\"sd\">        zoom : float, optional</span>\n<span class=\"sd\">            Zoom factor.</span>\n<span class=\"sd\">        log_scale : bool, optional</span>\n<span class=\"sd\">            Whether to plot fields in log scale. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.generic.plot.ModelPlotter`</span>\n<span class=\"sd\">            Model Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">project_path</span><span class=\"p\">:</span>\n            <span class=\"n\">project_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span>\n\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">fields_to_add</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">variation_list</span><span class=\"p\">:</span>\n            <span class=\"n\">intrinsic_dict</span><span class=\"p\">[</span><span class=\"n\">variation_variable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">if</span> <span class=\"n\">plottype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Surface&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">plotf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_fieldplot_surface</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">quantityname</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">intrinsic_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">plottype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Volume&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">plotf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_fieldplot_volume</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">quantityname</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">intrinsic_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">plotf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_fieldplot_cutplane</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">quantityname</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">intrinsic_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">plotf</span><span class=\"p\">:</span>\n                <span class=\"n\">file_to_add</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">export_field_plot</span><span class=\"p\">(</span><span class=\"n\">plotf</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"n\">plotf</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"n\">file_to_add</span><span class=\"p\">:</span>\n                    <span class=\"n\">fields_to_add</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">file_to_add</span><span class=\"p\">)</span>\n                <span class=\"n\">plotf</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n            <span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_plotter_geometries</span><span class=\"p\">(</span><span class=\"n\">generate_mesh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">off_screen</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">show</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">fields_to_add</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_frames_from_file</span><span class=\"p\">(</span><span class=\"n\">fields_to_add</span><span class=\"p\">,</span> <span class=\"n\">log_scale</span><span class=\"o\">=</span><span class=\"n\">log_scale</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">export_gif</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">gif_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.gif&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">zoom</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">zoom</span> <span class=\"o\">=</span> <span class=\"n\">zoom</span>\n        <span class=\"k\">if</span> <span class=\"n\">show</span> <span class=\"ow\">or</span> <span class=\"n\">export_gif</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">animate</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.create_3d_plot\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.create_3d_plot/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.create_3d_plot\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_3d_plot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">solution_data</span><span class=\"p\">,</span> <span class=\"n\">nominal_sweep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nominal_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">primary_sweep</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">,</span> <span class=\"n\">secondary_sweep</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a 3D plot using Matplotlib.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        solution_data : :class:`pyaedt.modules.solutions.SolutionData`</span>\n<span class=\"sd\">            Input data for the solution.</span>\n<span class=\"sd\">        nominal_sweep : str, optional</span>\n<span class=\"sd\">            Name of the nominal sweep. The default is ``None``.</span>\n<span class=\"sd\">        nominal_value : str, optional</span>\n<span class=\"sd\">            Value for the nominal sweep. The default is ``None``.</span>\n<span class=\"sd\">        primary_sweep : str, optional</span>\n<span class=\"sd\">            Primary sweep. The default is ``&quot;Theta&quot;``.</span>\n<span class=\"sd\">        secondary_sweep : str, optional</span>\n<span class=\"sd\">            Secondary sweep. The default is ``&quot;Phi&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">         bool</span>\n<span class=\"sd\">             ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">nominal_value</span><span class=\"p\">:</span>\n            <span class=\"n\">solution_data</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"p\">[</span><span class=\"n\">nominal_sweep</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nominal_value</span>\n        <span class=\"k\">if</span> <span class=\"n\">nominal_value</span><span class=\"p\">:</span>\n            <span class=\"n\">solution_data</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span> <span class=\"o\">=</span> <span class=\"n\">primary_sweep</span>\n        <span class=\"k\">return</span> <span class=\"n\">solution_data</span><span class=\"o\">.</span><span class=\"n\">plot_3d</span><span class=\"p\">(</span><span class=\"n\">x_axis</span><span class=\"o\">=</span><span class=\"n\">primary_sweep</span><span class=\"p\">,</span> <span class=\"n\">y_axis</span><span class=\"o\">=</span><span class=\"n\">secondary_sweep</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"PostProcessor.plot_scene\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.AdvancedPostProcessing.PostProcessor.plot_scene/#pyaedt.modules.AdvancedPostProcessing.PostProcessor.plot_scene\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot_scene</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">frames_list</span><span class=\"p\">,</span> <span class=\"n\">output_gif_path</span><span class=\"p\">,</span> <span class=\"n\">norm_index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dy_rng</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">fps</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s2\">&quot;yz&quot;</span><span class=\"p\">,</span> <span class=\"n\">zoom</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Plot the current model 3D scene with overlapping animation coming from a file list and save the gif.</span>\n\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        frames_list : list or str</span>\n<span class=\"sd\">            File list containing animation frames to plot in csv format or</span>\n<span class=\"sd\">            path to a txt index file containing full path to csv files.</span>\n<span class=\"sd\">        output_gif_path : str</span>\n<span class=\"sd\">            Full path to output gif file.</span>\n<span class=\"sd\">        norm_index : int, optional</span>\n<span class=\"sd\">            Pick the frame to use to normalize your images.</span>\n<span class=\"sd\">            Data is already saved as dB : 100 for usual traffic scenes.</span>\n<span class=\"sd\">        dy_rng : int, optional</span>\n<span class=\"sd\">            Specify how many dB below you would like to specify the range_min.</span>\n<span class=\"sd\">            Tweak this a couple of times with small number of frames.</span>\n<span class=\"sd\">        fps : int, optional</span>\n<span class=\"sd\">            Frames per Second.</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">            Either if show or only export gif.</span>\n<span class=\"sd\">        view : str, optional</span>\n<span class=\"sd\">           View to export. Options are ``&quot;isometric&quot;``, ``&quot;xy&quot;``, ``&quot;xz&quot;``, and ``&quot;yz&quot;``.</span>\n<span class=\"sd\">           The default is ``&quot;isometric&quot;``.</span>\n<span class=\"sd\">        zoom : float, optional</span>\n<span class=\"sd\">            Default zoom. Default Value is `2`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">frames_list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">frames_list</span><span class=\"p\">):</span>\n            <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">frames_list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n                <span class=\"n\">temp_list</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n            <span class=\"n\">frames_paths_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">temp_list</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">frames_list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Path doesn&#39;t exists&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">frames_paths_list</span> <span class=\"o\">=</span> <span class=\"n\">frames_list</span>\n        <span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_plotter_geometries</span><span class=\"p\">(</span><span class=\"n\">generate_mesh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"n\">norm_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"n\">frames_paths_list</span><span class=\"p\">[</span><span class=\"n\">norm_index</span><span class=\"p\">],</span> <span class=\"n\">skiprows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">norm_val</span> <span class=\"o\">=</span> <span class=\"n\">norm_data</span><span class=\"p\">[:,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">v_max</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">norm_val</span><span class=\"p\">)</span>\n        <span class=\"n\">v_min</span> <span class=\"o\">=</span> <span class=\"n\">v_max</span> <span class=\"o\">-</span> <span class=\"n\">dy_rng</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add_frames_from_file</span><span class=\"p\">(</span><span class=\"n\">frames_paths_list</span><span class=\"p\">,</span> <span class=\"n\">log_scale</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">color_map</span><span class=\"o\">=</span><span class=\"s2\">&quot;jet&quot;</span><span class=\"p\">,</span> <span class=\"n\">header_lines</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Specifying the attributes of the scene through the ModelPlotter object</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">off_screen</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">show</span>\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;isometric&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">view</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;xy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;xz&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;yz&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">camera_position</span> <span class=\"o\">=</span> <span class=\"n\">view</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">range_min</span> <span class=\"o\">=</span> <span class=\"n\">v_min</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">range_max</span> <span class=\"o\">=</span> <span class=\"n\">v_max</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">show_grid</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">windows_size</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1920</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">]</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">show_legend</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">show_boundingbox</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">legend</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">frame_per_seconds</span> <span class=\"o\">=</span> <span class=\"n\">fps</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">zoom</span> <span class=\"o\">=</span> <span class=\"n\">zoom</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">color_bar</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">gif_file</span> <span class=\"o\">=</span> <span class=\"n\">output_gif_path</span>  <span class=\"c1\"># This gif may be a bit slower so we can speed it up a bit</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">animate</span><span class=\"p\">()</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/modules/AdvancedPostProcessing", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}