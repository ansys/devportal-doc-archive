{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.Primitives", "body": "<h1>Source code for pyaedt.modeler.Primitives</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains these Primitives classes: `Polyline` and `Primitives`.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.Variables</span> <span class=\"kn\">import</span> <span class=\"n\">Variable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">PLANE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_number</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.GeometryOperators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">FacePrimitive</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">Object3d</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">UserDefinedComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">_dim_arg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">_uname</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.MaterialLib</span> <span class=\"kn\">import</span> <span class=\"n\">Material</span>\n\n<span class=\"n\">default_materials</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;Icepak&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;air&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;vacuum&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Maxwell 3D&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;vacuum&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Maxwell 2D&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;vacuum&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;HFSS 3D Layout&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Mechanical&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">aedt_wait_time</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n\n<div class=\"viewcode-block\" id=\"PolylineSegment\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.PolylineSegment/#pyaedt.modeler.Primitives3D.PolylineSegment\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PolylineSegment</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Creates and manipulates a segment of a polyline.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    type : str</span>\n<span class=\"sd\">        Type of the object. Choices are ``&quot;Line&quot;``, ``&quot;Arc&quot;``, ``&quot;Spline&quot;``,</span>\n<span class=\"sd\">        and ``&quot;AngularArc&quot;``.</span>\n<span class=\"sd\">    num_seg : int, optional</span>\n<span class=\"sd\">        Number of segments for the types ``&quot;Arc&quot;``, ``&quot;Spline&quot;``, and</span>\n<span class=\"sd\">        ``&quot;AngularArc&quot;``.  The default is ``0``. For the type</span>\n<span class=\"sd\">        ``Line``, this parameter is ignored.</span>\n<span class=\"sd\">    num_points : int, optional</span>\n<span class=\"sd\">        Number of control points for the type ``Spline``. For other</span>\n<span class=\"sd\">        types, this parameter</span>\n<span class=\"sd\">        is defined automatically.</span>\n<span class=\"sd\">    arc_angle : float or str, optional</span>\n<span class=\"sd\">        Sweep angle in radians or a valid value string. For example,</span>\n<span class=\"sd\">        ``&quot;35deg&quot;`` or ``&quot;Specific</span>\n<span class=\"sd\">        to type AngularArc&quot;``.</span>\n<span class=\"sd\">    arc_center : list or str, optional</span>\n<span class=\"sd\">        List of values in model units or a valid value string. For</span>\n<span class=\"sd\">        example, a list of ``[x, y, z]`` coordinates or ``&quot;Specific to</span>\n<span class=\"sd\">        type AngularArc&quot;``.</span>\n<span class=\"sd\">    arc_plane : str, int optional</span>\n<span class=\"sd\">        Plane in which the arc sweep is performed in the active</span>\n<span class=\"sd\">        coordinate system ``&quot;XY&quot;``, ``&quot;YZ&quot;`` or ``&quot;ZX&quot;``. The default is</span>\n<span class=\"sd\">        ``None``, in which case the plane is determined automatically</span>\n<span class=\"sd\">        by the first coordinate for which the starting point and</span>\n<span class=\"sd\">        center point have the same value.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    See :class:`pyaedt.Primitives.Polyline`.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arc_angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arc_center</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">arc_plane</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n        <span class=\"n\">valid_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Arc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">type</span> <span class=\"ow\">in</span> <span class=\"n\">valid_types</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Segment type must be in </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">valid_types</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_seg</span> <span class=\"o\">=</span> <span class=\"n\">num_seg</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"n\">num_points</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Arc&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">type</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_angle</span> <span class=\"o\">=</span> <span class=\"n\">arc_angle</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">arc_center</span><span class=\"p\">:</span>\n                <span class=\"n\">arc_center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arc_center</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Arc center must be a list of length 3.&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_center</span> <span class=\"o\">=</span> <span class=\"n\">arc_center</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arc_plane</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">arc_plane</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;XY&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">arc_plane</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">ZX</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ZX&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YZ&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"n\">arc_plane</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Polyline\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.Polyline/#pyaedt.modeler.Primitives3D.Polyline\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Polyline</span><span class=\"p\">(</span><span class=\"n\">Object3d</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Creates and manipulates a polyline.</span>\n\n<span class=\"sd\">    The constructor for this class is intended to be called from the</span>\n<span class=\"sd\">    :func:`pyaedt.modeler.Primitives.Primitives.create_polyline` method.</span>\n<span class=\"sd\">    The documentation is provided there.</span>\n\n<span class=\"sd\">    The returned Polyline object exposes the methods for manipulating the polyline.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    primitives : :class:`pyaedt.modeler.Primitives3D.Primitives3D`</span>\n<span class=\"sd\">        Pointer to the parent Primitives object.</span>\n<span class=\"sd\">    src_object : optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    position_list : list, optional</span>\n<span class=\"sd\">        List of positions in the ``[x, y, z]`` format. The default is ``None``.</span>\n<span class=\"sd\">    segment_type : str or list, optional</span>\n<span class=\"sd\">        Define the list of segment types.</span>\n<span class=\"sd\">        Valid arguments are  ``&quot;Line&quot;``, ``&quot;Arc&quot;``, ``&quot;Spline&quot;``, ``&quot;AngularArc&quot;``.</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    cover_surface : bool, optional</span>\n<span class=\"sd\">        The default is ``False``.</span>\n<span class=\"sd\">    close_surface : bool, optional</span>\n<span class=\"sd\">        The default is ``False``.</span>\n<span class=\"sd\">    name : str, optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    matname : str, optional</span>\n<span class=\"sd\">        Name of the material. The default is ``None``.</span>\n<span class=\"sd\">    xsection_type : str, optional</span>\n<span class=\"sd\">        Type of the cross-section. Options are ``&quot;Line&quot;``, ``&quot;Circle&quot;``, ``&quot;Rectangle&quot;``,</span>\n<span class=\"sd\">        and ``&quot;Isosceles Trapezoid&quot;``. The default is ``None``.</span>\n<span class=\"sd\">    xsection_orient : str, optional</span>\n<span class=\"sd\">        Direction of the normal vector to the width of the cross-section.</span>\n<span class=\"sd\">        Options are ``&quot;X&quot;``, ``&quot;Y&quot;``, ``&quot;Z&quot;``, and ``&quot;Auto&quot;``. The</span>\n<span class=\"sd\">        default is ``None``.</span>\n<span class=\"sd\">    xsection_width : float or str, optional</span>\n<span class=\"sd\">        Width or diameter of the cross-section for all types. The default is</span>\n<span class=\"sd\">        ``1``.</span>\n<span class=\"sd\">    xsection_topwidth : float or str, optional</span>\n<span class=\"sd\">        Top width of the cross-section for the type ``&quot;Isosceles Trapezoid&quot;`` only.</span>\n<span class=\"sd\">        The default is ``1``.</span>\n<span class=\"sd\">    xsection_height : float or str, optional</span>\n<span class=\"sd\">        Height of the cross-section for the types ``&quot;Rectangle&quot;`` and ``&quot;Isosceles</span>\n<span class=\"sd\">        Trapezoid&quot;`` only. The default is ``1``.</span>\n<span class=\"sd\">    xsection_num_seg : int, optional</span>\n<span class=\"sd\">        Number of segments in the cross-section surface for the types ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">        ``&quot;Rectangle&quot;`` and ``&quot;Isosceles Trapezoid&quot;``. The default is ``0``.</span>\n<span class=\"sd\">        The value must be ``0`` or greater than ``2``.</span>\n<span class=\"sd\">    xsection_bend_type : str, optional</span>\n<span class=\"sd\">        Type of the bend. The default is ``None``, in which case the bend type</span>\n<span class=\"sd\">        is set to ``&quot;Corner&quot;``. For the type ``&quot;Circle&quot;``, the bend type</span>\n<span class=\"sd\">        should be set to ``&quot;Curved&quot;``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">primitives</span><span class=\"p\">,</span>\n        <span class=\"n\">src_object</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">segment_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cover_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_orient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_topwidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_height</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span> <span class=\"o\">=</span> <span class=\"n\">primitives</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">src_object</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span> <span class=\"o\">=</span> <span class=\"n\">src_object</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>  <span class=\"c1\"># This is conimg from</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"n\">src_object</span><span class=\"o\">.</span><span class=\"n\">id</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">=</span> <span class=\"n\">src_object</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_xsection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_crosssection_arguments</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">xsection_type</span><span class=\"p\">,</span>\n                <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"n\">xsection_orient</span><span class=\"p\">,</span>\n                <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">xsection_width</span><span class=\"p\">,</span>\n                <span class=\"n\">topwidth</span><span class=\"o\">=</span><span class=\"n\">xsection_topwidth</span><span class=\"p\">,</span>\n                <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">xsection_height</span><span class=\"p\">,</span>\n                <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">xsection_num_seg</span><span class=\"p\">,</span>\n                <span class=\"n\">bend_type</span><span class=\"o\">=</span><span class=\"n\">xsection_bend_type</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">position_list</span><span class=\"p\">]</span>\n            <span class=\"c1\"># When close surface or cover_surface are set to True, ensure the start point and end point are coincident,</span>\n            <span class=\"c1\"># and insert a line segment to achieve this if necessary</span>\n            <span class=\"k\">if</span> <span class=\"n\">cover_surface</span><span class=\"p\">:</span>\n                <span class=\"n\">close_surface</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span> <span class=\"o\">=</span> <span class=\"n\">close_surface</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_covered</span> <span class=\"o\">=</span> <span class=\"n\">cover_surface</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">segment_type</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_type</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n                    <span class=\"c1\"># self._segment_types = copy(segment_type)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">segment_type</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span> <span class=\"o\">=</span> <span class=\"n\">segment_type</span>\n\n            <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_point_segment_string_array</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">non_model</span><span class=\"p\">:</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;NonModel#&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">flag</span><span class=\"p\">)</span>\n\n            <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">m_Editor</span><span class=\"o\">.</span><span class=\"n\">CreatePolyline</span><span class=\"p\">,</span> <span class=\"n\">varg1</span><span class=\"p\">,</span> <span class=\"n\">varg2</span><span class=\"p\">)</span>\n\n            <span class=\"n\">Object3d</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">primitives</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">start_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the ``[x, y, z]`` coordinates for the starting point in the polyline</span>\n<span class=\"sd\">        object in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the starting point in the polyline</span>\n<span class=\"sd\">            object.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">end_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the ``[x, y, z]`` coordinates for the ending point in the polyline</span>\n<span class=\"sd\">        object in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the ending point in the polyline</span>\n<span class=\"sd\">            object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromObject</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Polyline Points.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positions</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">vertex_positions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the ``[x, y, z]`` coordinates for all vertex positions in the</span>\n<span class=\"sd\">        polyline object in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for all vertex positions in the</span>\n<span class=\"sd\">            polyline object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromObject</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">id_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">get_object_vertices</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"n\">position_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">id_list</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">position_list</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_pl_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">):</span>\n        <span class=\"n\">pt_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PLPoint&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">))</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">))</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">pt_data</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_point_segment_string_array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the parameter arrays for specifying the points and segments of a polyline</span>\n<span class=\"sd\">        used in the :class:`pyaedt.modeler.Primitives.Polyline` constructor.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">position_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positions</span>\n        <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span>\n\n        <span class=\"k\">assert</span> <span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"p\">),</span> <span class=\"s2\">&quot;The ``position_list`` argument must be a list of positions with at least one point.&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">segment_types</span><span class=\"p\">:</span>\n            <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">))]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">):</span>\n            <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">segment_types</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Convert all string-type entries in the segment_types list to PolylineSegments</span>\n            <span class=\"k\">for</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">seg</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">segment_types</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Invalid segment_types input of type </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># Add a closing point if needed  #TODO check for all combinations</span>\n        <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylineParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsPolylineCovered:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_covered</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsPolylineClosed:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># PointsArray</span>\n        <span class=\"n\">points_str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylinePoints&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">points_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n        <span class=\"c1\"># Segments Array</span>\n        <span class=\"n\">segment_str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylineSegments&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">pos_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">vertex_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">index_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">vertex_count</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">current_segment</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">if</span> <span class=\"n\">vertex_count</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># Check the special case of a closed polyline needing an additional Line segment</span>\n                        <span class=\"k\">if</span> <span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                            <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                            <span class=\"n\">current_segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">break</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">current_segment</span> <span class=\"o\">=</span> <span class=\"n\">segment_types</span><span class=\"p\">[</span><span class=\"n\">vertex_count</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Number of segments inconsistent with the number of points!&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">current_segment</span><span class=\"p\">:</span>\n                <span class=\"n\">seg_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_array</span><span class=\"p\">(</span>\n                    <span class=\"n\">current_segment</span><span class=\"p\">,</span> <span class=\"n\">start_index</span><span class=\"o\">=</span><span class=\"n\">index_count</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"n\">pos_count</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">segment_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">seg_str</span><span class=\"p\">)</span>\n\n                <span class=\"n\">pos_count_incr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">num_points</span><span class=\"p\">):</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n                        <span class=\"n\">points_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">extra_points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n                        <span class=\"n\">index_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pos_count</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">):</span>\n                            <span class=\"k\">if</span> <span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Arc&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span><span class=\"p\">:</span>\n                                <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                            <span class=\"k\">else</span><span class=\"p\">:</span>\n                                <span class=\"n\">err_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Insufficient points in position_list to complete the specified segment list&quot;</span>\n                                <span class=\"k\">raise</span> <span class=\"ne\">IndexError</span><span class=\"p\">(</span><span class=\"n\">err_str</span><span class=\"p\">)</span>\n                        <span class=\"n\">points_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"n\">pos_count</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]))</span>\n                        <span class=\"n\">pos_count_incr</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">index_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pos_count</span> <span class=\"o\">+=</span> <span class=\"n\">pos_count_incr</span>\n                <span class=\"n\">vertex_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">points_str</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">segment_str</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Poly Line Cross Section</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_xsection</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">varg1</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_segment_array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">segment_data</span><span class=\"p\">,</span> <span class=\"n\">start_index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a property array for a polyline segment for use in the</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Primitives.Polyline` constructor.</span>\n\n<span class=\"sd\">         Parameters</span>\n<span class=\"sd\">         ----------</span>\n<span class=\"sd\">         segment_data : :class:`pyaedt.modeler.Primitives.PolylineSegment` or str</span>\n<span class=\"sd\">             Pointer to the calling object that provides additional functionality</span>\n<span class=\"sd\">             or a string with the segment type ``Line`` or ``Arc``.</span>\n<span class=\"sd\">         start_index : int, string</span>\n<span class=\"sd\">             Starting vertex index of the segment within a compound polyline. The</span>\n<span class=\"sd\">             default is ``0``.</span>\n<span class=\"sd\">         start_point : list, optional</span>\n<span class=\"sd\">             Position of the first point for type ``AngularArc``. The default is</span>\n<span class=\"sd\">             ``None``. Float values are considered in model units.</span>\n\n<span class=\"sd\">         Returns</span>\n<span class=\"sd\">         ------</span>\n<span class=\"sd\">         list</span>\n<span class=\"sd\">             List of properties defining a polyline segment.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">segment_data</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">seg</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:PLSegment&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SegmentType:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;StartIndex:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">start_index</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;NoOfPoints:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">num_points</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">seg</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NoOfSegments:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">num_seg</span><span class=\"p\">)]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># from start-point and angle, calculate the mid- and end-points</span>\n            <span class=\"c1\"># Also identify the plane of the arc (&quot;YZ&quot;, &quot;ZX&quot;, &quot;XY&quot;)</span>\n            <span class=\"n\">plane_axes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s2\">&quot;ZX&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]}</span>\n            <span class=\"k\">assert</span> <span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Start-point must be defined for an AngularArc Segment&quot;</span>\n            <span class=\"n\">c_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">)</span>\n            <span class=\"n\">p0_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Accept the user input for the plane of rotation - let the modeler fail if invalid</span>\n                <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Compare the numeric values of start-point and center-point to determine the orientation plane</span>\n                <span class=\"k\">if</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                    <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">elif</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                    <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;ZX&quot;</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"s2\">&quot;ZX&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">elif</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n                    <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Start point and arc-center do not lie on a common base plane.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">mod_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n            <span class=\"n\">seg</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;ArcAngle:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_angle</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ArcCenterX:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">mod_units</span><span class=\"p\">)),</span>\n                <span class=\"s2\">&quot;ArcCenterY:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">mod_units</span><span class=\"p\">)),</span>\n                <span class=\"s2\">&quot;ArcCenterZ:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">mod_units</span><span class=\"p\">)),</span>\n                <span class=\"s2\">&quot;ArcPlane:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">plane_def</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"c1\"># Calculate the extra two points of the angular arc in the alpha-beta plane</span>\n            <span class=\"n\">alph_index</span> <span class=\"o\">=</span> <span class=\"n\">plane_def</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">beta_index</span> <span class=\"o\">=</span> <span class=\"n\">plane_def</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">c_alph</span> <span class=\"o\">=</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span>\n            <span class=\"n\">c_beta</span> <span class=\"o\">=</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span>\n            <span class=\"n\">p0_alph</span> <span class=\"o\">=</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p0_beta</span> <span class=\"o\">=</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">c_beta</span>\n\n            <span class=\"c1\"># rotate to generate the new points</span>\n            <span class=\"n\">arc_ang_rad</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">evaluate_expression</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">rot_angle</span> <span class=\"o\">=</span> <span class=\"n\">arc_ang_rad</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span>\n            <span class=\"n\">p1_alph</span> <span class=\"o\">=</span> <span class=\"n\">p0_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">p0_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">p1_beta</span> <span class=\"o\">=</span> <span class=\"n\">p0_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">p0_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">p2_alph</span> <span class=\"o\">=</span> <span class=\"n\">p1_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">p1_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">p2_beta</span> <span class=\"o\">=</span> <span class=\"n\">p1_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">p1_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Generate the  2 new points in XYZ</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p0_xyz</span><span class=\"p\">)</span>\n            <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p1_alph</span> <span class=\"o\">+</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p1_beta</span> <span class=\"o\">+</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p0_xyz</span><span class=\"p\">)</span>\n            <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p2_alph</span> <span class=\"o\">+</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p2_beta</span> <span class=\"o\">+</span> <span class=\"n\">c_beta</span>\n            <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">extra_points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">seg</span>\n\n<div class=\"viewcode-block\" id=\"Polyline.clone\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.Polyline.clone/#pyaedt.modeler.Primitives3D.Polyline.clone\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Clone a polyline object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        pyaedt.modeler.Primitives.Polyline</span>\n<span class=\"sd\">            Polyline object that was created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Copy</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Paste</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; primitives = self.aedtapp.modeler</span>\n<span class=\"sd\">        &gt;&gt;&gt; P1 = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P2 = P1.clone()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Paste</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_new_polyline</span><span class=\"p\">()</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_add_new_polyline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">new_objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">find_new_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_objects</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n        <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">new_objects</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">new_polyline</span> <span class=\"o\">=</span> <span class=\"n\">Polyline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"p\">,</span> <span class=\"n\">src_object</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">new_name</span><span class=\"p\">)</span>\n        <span class=\"n\">new_polyline</span><span class=\"o\">.</span><span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">new_polyline</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_polyline</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">new_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_polyline</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_polyline</span>\n\n<div class=\"viewcode-block\" id=\"Polyline.remove_vertex\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.Polyline.remove_vertex/#pyaedt.modeler.Primitives3D.Polyline.remove_vertex\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_vertex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">abstol</span><span class=\"o\">=</span><span class=\"mf\">1e-9</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Remove a vertex from an existing polyline by position.</span>\n\n<span class=\"sd\">        You must enter the exact position of the vertex as a list</span>\n<span class=\"sd\">        of ``[x, y, z]`` coordinates in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates specifying the vertex to remove.</span>\n<span class=\"sd\">        abstol : float, optional</span>\n<span class=\"sd\">            Absolute tolerance of the comparison of a specified position to the</span>\n<span class=\"sd\">            vertex positions. The default is ``1e-9``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DeletePolylinePoint</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Use floating point values for the vertex positions.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_vertex([0, 1, 2])</span>\n\n<span class=\"sd\">        Use string expressions for the vertex position.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_vertex([&quot;0mm&quot;, &quot;1mm&quot;, &quot;2mm&quot;])</span>\n\n<span class=\"sd\">        Use string expressions for the vertex position and include an absolute</span>\n<span class=\"sd\">        tolerance when searching for the vertex to be removed.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_vertex([&quot;0mm&quot;, &quot;1mm&quot;, &quot;2mm&quot;], abstol=1e-6)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_is_object_oriented_enabled</span><span class=\"p\">():</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"s2\">&quot;CreatePolyline:1&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">segments</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">GetChildNames</span><span class=\"p\">()</span>\n            <span class=\"n\">seg_id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">seg</span> <span class=\"ow\">in</span> <span class=\"n\">segments</span><span class=\"p\">:</span>\n                <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Point1&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">([</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]])</span>\n                <span class=\"n\">pos_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n                <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pos_xyz</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">abstol</span>\n                <span class=\"k\">if</span> <span class=\"n\">found_vertex</span><span class=\"p\">:</span>\n                    <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Point2&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">([</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]])</span>\n                <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pos_xyz</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">abstol</span>\n                <span class=\"k\">if</span> <span class=\"n\">found_vertex</span><span class=\"p\">:</span>\n                    <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">seg_id</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">pos_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">vertex_pos</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertex_positions</span><span class=\"p\">):</span>\n                <span class=\"c1\"># compare the specified point with the vertex data using an absolute tolerance</span>\n                <span class=\"c1\"># (default of math.isclose is 1e-9 which should be ok in almost all cases)</span>\n                <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vertex_pos</span><span class=\"p\">,</span> <span class=\"n\">pos_xyz</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">abstol</span>\n                <span class=\"k\">if</span> <span class=\"n\">found_vertex</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">ind</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertex_positions</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">seg_id</span> <span class=\"o\">=</span> <span class=\"n\">ind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">seg_id</span> <span class=\"o\">=</span> <span class=\"n\">ind</span>\n                        <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"k\">break</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">found_vertex</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Specified vertex </span><span class=\"si\">{}</span><span class=\"s2\"> not found in polyline </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DeletePolylinePoint</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Delete Point&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Segment Indices:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"n\">seg_id</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;At Start:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">at_start</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Polyline.remove_edges\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.Polyline.remove_edges/#pyaedt.modeler.Primitives3D.Polyline.remove_edges\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Remove a vertex from an existing polyline by position.</span>\n\n<span class=\"sd\">        You must enter the exact position of the vertex as a list</span>\n<span class=\"sd\">        of ``[x, y, z]`` coordinates in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edge_id : int or list of int</span>\n<span class=\"sd\">            One or more edge IDs within the total number of edges within the polyline.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DeletePolylinePoint</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_edges(edge_id=0)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">edge_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">edge_id</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DeletePolylinePoint</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Delete Point&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Segment Indices:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">edge_id</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;At Start:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid edge ID </span><span class=\"si\">{}</span><span class=\"s2\"> is specified on polyline </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Polyline.set_crosssection_properties\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.Polyline.set_crosssection_properties/#pyaedt.modeler.Primitives3D.Polyline.set_crosssection_properties\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_crosssection_properties</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">topwidth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the properties of an existing polyline object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        type : str, optional</span>\n<span class=\"sd\">            Types of the cross-sections. Options are ``&quot;Line&quot;``, ``&quot;Circle&quot;``, ``&quot;Rectangle&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Isosceles Trapezoid&quot;``. The default is ``None``.</span>\n<span class=\"sd\">        orient : str, optional</span>\n<span class=\"sd\">            Direction of the normal vector to the width of the cross-section.</span>\n<span class=\"sd\">            Options are ``&quot;X&quot;``, ``&quot;Y&quot;``, ``&quot;Z&quot;``, and ``&quot;Auto&quot;``. The default</span>\n<span class=\"sd\">            is ``None``, which sets the orientation to ``&quot;Auto&quot;``.</span>\n<span class=\"sd\">        width : float or str, optional</span>\n<span class=\"sd\">           Width or diameter of the cross-section for all types. The default is</span>\n<span class=\"sd\">           ``0``.</span>\n<span class=\"sd\">        topwidth : float or str</span>\n<span class=\"sd\">           Top width of the cross-section for the type ``&quot;Isosceles Trapezoid&quot;``</span>\n<span class=\"sd\">           only. The default is ``0``.</span>\n<span class=\"sd\">        height : float or str</span>\n<span class=\"sd\">            Height of the cross-section for the types ``&quot;Rectangle&quot;`` and `&quot;Isosceles</span>\n<span class=\"sd\">            Trapezoid&quot;`` only. The default is ``0``.</span>\n<span class=\"sd\">        num_seg : int, optional</span>\n<span class=\"sd\">            Number of segments in the cross-section surface for the types ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">            ``&quot;Rectangle&quot;``, and ``&quot;Isosceles Trapezoid&quot;``. The default is ``0``.</span>\n<span class=\"sd\">            The value must be ``0`` or greater than ``2``.</span>\n<span class=\"sd\">        bend_type : str, optional</span>\n<span class=\"sd\">            Type of the bend. The default is ``None``, in which case the bend type</span>\n<span class=\"sd\">            is set to ``&quot;Corner&quot;``. For the type ``&quot;Circle&quot;``, the bend type should be</span>\n<span class=\"sd\">            set to ``&quot;Curved&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.set_crosssection_properties(type=&quot;Circle&quot;, width=&quot;1mm&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Set the default section type to &quot;None&quot;</span>\n        <span class=\"n\">section_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_type</span><span class=\"p\">:</span>\n            <span class=\"n\">section_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;None&quot;</span>\n\n        <span class=\"c1\"># Set the default orientation to &quot;Auto&quot;</span>\n        <span class=\"n\">section_orient</span> <span class=\"o\">=</span> <span class=\"n\">orient</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_orient</span><span class=\"p\">:</span>\n            <span class=\"n\">section_orient</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Auto&quot;</span>\n\n        <span class=\"c1\"># Set the default bend-type to &quot;Corner&quot;</span>\n        <span class=\"n\">section_bend</span> <span class=\"o\">=</span> <span class=\"n\">bend_type</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_bend</span><span class=\"p\">:</span>\n            <span class=\"n\">section_bend</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Corner&quot;</span>\n\n        <span class=\"c1\"># Ensure number-of segments is valid</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_seg</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">num_seg</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Number of segments for a cross-section must be 0 or greater than 2.&quot;</span>\n\n        <span class=\"n\">model_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n\n        <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DCmdTab&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">arg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_type</span><span class=\"p\">])</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Orientation&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_orient</span><span class=\"p\">])</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Bend Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_bend</span><span class=\"p\">])</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Width/Diameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n        <span class=\"k\">if</span> <span class=\"n\">section_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Rectangle&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Height&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n        <span class=\"k\">elif</span> <span class=\"n\">section_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Circle&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Number of Segments&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"n\">section_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Isosceles Trapezoid&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Top Width&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">topwidth</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Height&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n        <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg3</span><span class=\"p\">)</span>\n        <span class=\"n\">arg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Polyline.insert_segment\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives.Polyline.insert_segment/#pyaedt.modeler.Primitives3D.Polyline.insert_segment\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">insert_segment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position_list</span><span class=\"p\">,</span> <span class=\"n\">segment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">segment_number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a segment to an existing polyline.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position_list : list</span>\n<span class=\"sd\">            List of positions of the points that define the segment to insert.</span>\n<span class=\"sd\">            Either the starting point or ending point of the segment list must</span>\n<span class=\"sd\">            match one of the vertices of the existing polyline.</span>\n<span class=\"sd\">        segment : str or :class:`pyaedt.modeler.Primitives.PolylineSegment`</span>\n<span class=\"sd\">            Definition of the segment to insert. For the types ``&quot;Line&quot;`` and ``&quot;Arc&quot;``,</span>\n<span class=\"sd\">            use their string values ``&quot;Line&quot;`` and ``&quot;Arc&quot;``. For the types ``&quot;AngularArc&quot;``</span>\n<span class=\"sd\">            and ``&quot;Spline&quot;``, use the :class:`pyaedt.modeler.Primitives.PolylineSegment`</span>\n<span class=\"sd\">            object to define the segment precisely.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.InsertPolylineSegment</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Check for a valid number of points</span>\n        <span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># define the segment type from the number of points given</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">segment</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">num_points</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">num_points</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Arc&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"n\">num_points</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">)</span>\n            <span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">num_points</span>\n\n        <span class=\"c1\"># Check whether start-point of the segment is in the existing vertices</span>\n        <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># End point does not exist e.g. for an AngularArc</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"n\">num_points</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">segment_id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">segment_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">num_vertices</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">vertex</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">==</span> <span class=\"n\">end_point</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">segment_id</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">segment_id</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">break</span>\n            <span class=\"c1\"># If start_point=[0, 0, 0] (a list of integers provided by the user), it won&#39;t be equal to vertex.position</span>\n            <span class=\"c1\"># that returns a list of float: [0., 0., 0.]. Thus we cast start_point as a list of floats.</span>\n            <span class=\"k\">elif</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">start_point</span><span class=\"p\">]:</span>\n                <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">segment_index</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">segment_index</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">break</span>\n            <span class=\"n\">segment_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">id_v</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">s_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">s_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">s_types</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s_types</span><span class=\"p\">,</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">):</span>\n                <span class=\"n\">id_v</span> <span class=\"o\">+=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">num_seg</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"n\">id_v</span> <span class=\"o\">&gt;</span> <span class=\"n\">segment_index</span><span class=\"p\">:</span>\n                    <span class=\"n\">id_v</span> <span class=\"o\">-=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">num_seg</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">break</span>\n        <span class=\"n\">segment_index</span> <span class=\"o\">-=</span> <span class=\"n\">id_v</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">segment_index</span> <span class=\"o\">&lt;</span> <span class=\"n\">num_vertices</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Vertex for the insert is not found.&quot;</span>\n        <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span>\n\n        <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Insert Polyline Segment&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Segment Indices:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">segment_index</span><span class=\"p\">])</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;At Start:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">at_start</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SegmentType:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Points and segment data</span>\n        <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylinePoints&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Line&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spline&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Arc&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">pt</span> <span class=\"ow\">in</span> <span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">num_points</span><span class=\"p\">]:</span>\n                <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">))</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">seg_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_array</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">extra_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">extra_points</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n            <span class=\"n\">varg1</span> <span class=\"o\">+=</span> <span class=\"n\">seg_str</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">:]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">InsertPolylineSegment</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DPolylineTab&quot;</span><span class=\"p\">]</span>\n\n            <span class=\"n\">varg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:Segment&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">segment_id</span><span class=\"p\">))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg3</span><span class=\"p\">)</span>\n\n            <span class=\"n\">varg4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg5</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Number of Segments&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg5</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg5</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">segment_number</span><span class=\"p\">))</span>\n\n            <span class=\"n\">varg4</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg5</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg4</span><span class=\"p\">)</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Primitives</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides common functionalities for primitives.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : :class:`pyaedt.modeler.Model3D.Modeler3D`, :class:`pyaedt.modeler.Model2D.Modeler2D`</span>\n<span class=\"sd\">        Pointer to the parent object.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Basic usage demonstrated with an HFSS design:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; prim = aedtapp.modeler</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_modeler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solid_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all solid objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_solids</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_names</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sheet_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all sheet objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_sheets</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sheet_names</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">line_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all line objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_lines</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line_names</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of points.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points_by_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dictionary containing all points where the keys are the name of the points.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_point_names</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unclassified_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all unclassified objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_unclassified</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">object_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_object_types</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solid_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all solid objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_solids</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sheet_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all sheet objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_sheets</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">line_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all line objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_lines</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unclassified_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all unclassified objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_unclassified</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">object_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all objects.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_object_types</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">user_defined_component_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all 3D component objects.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Get3DComponentDefinitionNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Get3DComponentInstanceNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">obs3d</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">comps3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Get3DComponentDefinitionNames</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">comp3d</span> <span class=\"ow\">in</span> <span class=\"n\">comps3d</span><span class=\"p\">:</span>\n                <span class=\"n\">obs3d</span> <span class=\"o\">+=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Get3DComponentInstanceNames</span><span class=\"p\">(</span><span class=\"n\">comp3d</span><span class=\"p\">))</span>\n            <span class=\"n\">udm</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;UserDefinedModels&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetChildTypes</span><span class=\"p\">():</span>\n                <span class=\"n\">udm</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetChildNames</span><span class=\"p\">(</span><span class=\"s2\">&quot;UserDefinedModels&quot;</span><span class=\"p\">))</span>\n            <span class=\"n\">obs3d</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">udm</span> <span class=\"o\">+</span> <span class=\"n\">obs3d</span><span class=\"p\">))</span>\n            <span class=\"n\">new_obs3d</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">obs3d</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">:</span>\n                <span class=\"n\">existing_components</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n                <span class=\"n\">new_obs3d</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">obs3d</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">existing_components</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">new_obs3d</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_obs3d</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">new_obs3d</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_obs3d</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_oproject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Project.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oproject</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_odesign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Design.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Material Manager that is used to manage materials in the project.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.MaterialLib.Materials`</span>\n<span class=\"sd\">            Material Manager that is used to manage materials in the project.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">defaultmaterial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Default material.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">default_materials</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_design_type</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Logger.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Version.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">modeler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modeler.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Model units.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of the names of all model objects.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_model_objects</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">non_model_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of objects of all non-model objects.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_model_objects</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">non_model_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of names of all non-model objects.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Non Model&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_consistency_report</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Summary of detected inconsistencies between the AEDT modeler and PyAEDT structures.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">obj_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n        <span class=\"n\">missing</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">obj_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">missing</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">non_existent</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">obj_names</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_names</span><span class=\"p\">:</span>\n                <span class=\"n\">non_existent</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Missing Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">missing</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Non-Existent Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">non_existent</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">report</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_change_component_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vPropChange</span><span class=\"p\">,</span> <span class=\"n\">names_list</span><span class=\"p\">):</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">names_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">vChangedProps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"n\">vPropChange</span><span class=\"p\">]</span>\n        <span class=\"n\">vPropServers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n            <span class=\"n\">vPropServers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"n\">vGeo3d</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:General&quot;</span><span class=\"p\">,</span> <span class=\"n\">vPropServers</span><span class=\"p\">,</span> <span class=\"n\">vChangedProps</span><span class=\"p\">]</span>\n        <span class=\"n\">vOut</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span> <span class=\"n\">vGeo3d</span><span class=\"p\">]</span>\n        <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">,</span> <span class=\"n\">vOut</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_change_geometry_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vPropChange</span><span class=\"p\">,</span> <span class=\"n\">names_list</span><span class=\"p\">):</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">names_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">vChangedProps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"n\">vPropChange</span><span class=\"p\">]</span>\n        <span class=\"n\">vPropServers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n            <span class=\"n\">vPropServers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"n\">vGeo3d</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DAttributeTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">vPropServers</span><span class=\"p\">,</span> <span class=\"n\">vChangedProps</span><span class=\"p\">]</span>\n        <span class=\"n\">vOut</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span> <span class=\"n\">vGeo3d</span><span class=\"p\">]</span>\n        <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">,</span> <span class=\"n\">vOut</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;NAME:Name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">vPropChange</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_change_point_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vPropChange</span><span class=\"p\">,</span> <span class=\"n\">names_list</span><span class=\"p\">):</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">names_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">vChangedProps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"n\">vPropChange</span><span class=\"p\">]</span>\n        <span class=\"n\">vPropServers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n            <span class=\"n\">vPropServers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"n\">vGeo3d</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DPointTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">vPropServers</span><span class=\"p\">,</span> <span class=\"n\">vChangedProps</span><span class=\"p\">]</span>\n        <span class=\"n\">vOut</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span> <span class=\"n\">vGeo3d</span><span class=\"p\">]</span>\n        <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">,</span> <span class=\"n\">vOut</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;NAME:Name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">vPropChange</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update any :class:`pyaedt.modeler.Object3d.Object3d` derivatives</span>\n<span class=\"sd\">        that have potentially been modified by a modeler operation.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        obj : int, str, or :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Object to be updated after a modeler operation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">           Updated 3D object.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve_object</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">value_in_object_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert one or more strings for numerical lengths to floating point values.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value : string or list of strings</span>\n<span class=\"sd\">            One or more strings for numerical lengths. For example, ``&quot;10mm&quot;``</span>\n<span class=\"sd\">            or ``[&quot;10mm&quot;, &quot;12mm&quot;, &quot;14mm&quot;]``. When a a list is given, the entire</span>\n<span class=\"sd\">            list is converted.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float or list of floats</span>\n<span class=\"sd\">            Defined in object units :attr:`pyaedt.modeler.Primitives.Polyline.object_units`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Convert to a list if a scalar is presented</span>\n\n        <span class=\"n\">scalar</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n            <span class=\"n\">scalar</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"n\">numeric_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">):</span>\n                <span class=\"n\">num_val</span> <span class=\"o\">=</span> <span class=\"n\">element</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"c1\"># element is an existing variable</span>\n                <span class=\"n\">si_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">evaluate_expression</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n                <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">meter&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">si_value</span><span class=\"p\">))</span>\n                <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">rescale_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                <span class=\"n\">num_val</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Inputs to value_in_object_units must be strings or numbers.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">numeric_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num_val</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">scalar</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">numeric_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">numeric_list</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">does_object_exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;Check to see if an object exists.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object : str, int</span>\n<span class=\"sd\">            Object name or object ID.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">object</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"nb\">object</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_region</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pad_percent</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an air region.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pad_percent : float or list of floats, optional</span>\n<span class=\"sd\">            If a float, use padding in percent for all dimensions. The default is ``300``.</span>\n<span class=\"sd\">            If a list of floats, interpret as adding for ``[&quot;+X&quot;, &quot;+Y&quot;, &quot;+Z&quot;, &quot;-X&quot;, &quot;-Y&quot;, &quot;-Z&quot;]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Region object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRegion</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Region&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">pad_percent</span><span class=\"p\">):</span>\n            <span class=\"n\">pad_percent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pad_percent</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">6</span>\n\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:RegionParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;+X&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;+Y&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;+Z&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-X&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-Y&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-Z&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">pval</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n            <span class=\"n\">pvalstr</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pval</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;PaddingType:=&quot;</span>\n            <span class=\"n\">qvalstr</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pval</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Padding:=&quot;</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pvalstr</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Percentage Offset&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">qvalstr</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pad_percent</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:Attributes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Region&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Flags:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Wireframe#&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Color:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;(143 175 143)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Transparency:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mf\">0.75</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;PartCoordinateSystem:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;UDMId:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;MaterialValue:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;&quot;air&quot;&#39;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SurfaceMaterialValue:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;&quot;&quot;&#39;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SolveInside:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IsMaterialEditable:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;UseMaterialAppearance:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IsLightweight:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateRegion</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"s2\">&quot;Region&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"n\">non_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n\n        <span class=\"sd\">&quot;&quot;&quot;Create an object from one or multiple edges.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edge : list, int or :class:`pyaedt.modeler.Object3d.FacePrimitive`</span>\n<span class=\"sd\">            Face ID or :class:`pyaedt.modeler.Object3d.FacePrimitive` object or Face List.</span>\n<span class=\"sd\">        non_model : bool, optional</span>\n<span class=\"sd\">            Either if create the new object as model or non-model. The default is `False`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d` or list of :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D objects.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateObjectFromFaces</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edge_ids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge_id</span> <span class=\"ow\">in</span> <span class=\"n\">edge_ids</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_find_object_from_edge_id</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"n\">obj_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">edge_id</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"n\">obj_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Model&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">non_model</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;NonModel&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n                <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:BodyFromEdgeToParameters&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Edges:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"n\">varg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n            <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateObjectFromEdges</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">,</span> <span class=\"n\">varg3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;CreateGroupsForNewObjects:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n            <span class=\"n\">new_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">new_object</span> <span class=\"ow\">in</span> <span class=\"n\">new_object_name</span><span class=\"p\">:</span>\n                <span class=\"n\">new_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_objects</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">new_objects</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">new_objects</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error creating object from edges.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_object_from_face</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"n\">non_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an object from one or multiple face.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face : list, int or :class:`pyaedt.modeler.Object3d.FacePrimitive`</span>\n<span class=\"sd\">            Face ID or :class:`pyaedt.modeler.Object3d.FacePrimitive` object or Face List.</span>\n<span class=\"sd\">        non_model : bool, optional</span>\n<span class=\"sd\">            Either if create the new object as model or non-model. Default is `False`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d` or list of :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D objects.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateObjectFromFaces</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">face_ids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">face_id</span> <span class=\"ow\">in</span> <span class=\"n\">face_ids</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_find_object_from_face_id</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"n\">obj_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">face_id</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"n\">obj_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Model&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">non_model</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;NonModel&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n                <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:BodyFromFaceToParameters&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;FacesToDetach:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"n\">varg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n            <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateObjectFromFaces</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">,</span> <span class=\"n\">varg3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;CreateGroupsForNewObjects:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n            <span class=\"n\">new_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">new_object</span> <span class=\"ow\">in</span> <span class=\"n\">new_object_name</span><span class=\"p\">:</span>\n                <span class=\"n\">new_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_objects</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">new_objects</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">new_objects</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error creating object from faces.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_polyline</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">position_list</span><span class=\"p\">,</span>\n        <span class=\"n\">segment_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cover_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_orient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_topwidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_height</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Draw a polyline object in the 3D modeler.</span>\n\n<span class=\"sd\">        This method retrieves the</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Primitives.Polyline` object, which has</span>\n<span class=\"sd\">        additional methods for manipulating the polyline. For example,</span>\n<span class=\"sd\">        you can use</span>\n<span class=\"sd\">        :func:`pyaedt.modeler.Primitives.Polyline.insert_segment` to</span>\n<span class=\"sd\">        insert a segment or</span>\n<span class=\"sd\">        :attr:`pyaedt.modeler.Primitives.Polyline.id` to retrieve the</span>\n<span class=\"sd\">        ID of the polyline object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position_list : list</span>\n<span class=\"sd\">            Array of positions of each point of the polyline.  A</span>\n<span class=\"sd\">            position is a list of 2D or 3D coordinates. Position</span>\n<span class=\"sd\">            coordinate values can be numbers or valid AEDT string</span>\n<span class=\"sd\">            expressions. For example, ``[0, 1, 2]``, ``[&quot;0mm&quot;, &quot;5mm&quot;,</span>\n<span class=\"sd\">            &quot;1mm&quot;]``, or ``[&quot;x1&quot;, &quot;y1&quot;, &quot;z1&quot;]``.</span>\n<span class=\"sd\">        segment_type : str or PolylineSegment or list, optional</span>\n<span class=\"sd\">            The default behavior is to connect all points as</span>\n<span class=\"sd\">            ``&quot;Line&quot;`` segments. The default is ``None``. For a</span>\n<span class=\"sd\">            string, ``&quot;Line&quot;`` or ``&quot;Arc&quot;`` is valid. For a</span>\n<span class=\"sd\">            ``&quot;PolylineSegment&quot;``, for ``&quot;Line&quot;,`` ``&quot;Arc&quot;``,</span>\n<span class=\"sd\">            ``&quot;Spline&quot;``, or ``&quot;AngularArc&quot;``, a list of segment types</span>\n<span class=\"sd\">            (str or</span>\n<span class=\"sd\">            :class:`pyaedt.modeler.Primitives.PolylineSegment`) is</span>\n<span class=\"sd\">            valid for a compound polyline.</span>\n<span class=\"sd\">        cover_surface : bool, optional</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        close_surface : bool, optional</span>\n<span class=\"sd\">            The default is ``False``, which automatically joins the</span>\n<span class=\"sd\">            starting and ending points.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the polyline. The default is ``None``.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default material is assigned.</span>\n<span class=\"sd\">        xsection_type : str, optional</span>\n<span class=\"sd\">            Type of the cross-section. Options are ``&quot;Line&quot;``, ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">            ``&quot;Rectangle&quot;``, and ``&quot;Isosceles Trapezoid&quot;``. The default is ``None``.</span>\n<span class=\"sd\">        xsection_orient : str, optional</span>\n<span class=\"sd\">            Direction of the normal vector to the width of the cross-section.</span>\n<span class=\"sd\">            Options are ``&quot;X&quot;``, ``&quot;Y&quot;``, ``&quot;Z&quot;``, and ``&quot;Auto&quot;``. The default is</span>\n<span class=\"sd\">            ``None``, which sets the direction to ``&quot;Auto&quot;``.</span>\n<span class=\"sd\">        xsection_width : float or str, optional</span>\n<span class=\"sd\">            Width or diameter of the cross-section for all  types. The</span>\n<span class=\"sd\">            default is ``1``.</span>\n<span class=\"sd\">        xsection_topwidth : float or str, optional</span>\n<span class=\"sd\">            Top width of the cross-section for type ``&quot;Isosceles Trapezoid&quot;`` only.</span>\n<span class=\"sd\">            The default is ``1``.</span>\n<span class=\"sd\">        xsection_height : float or str</span>\n<span class=\"sd\">            Height of the cross-section for type ``&quot;Rectangle&quot;`` or ``&quot;Isosceles</span>\n<span class=\"sd\">            Trapezoid&quot;`` only. The default is ``1``.</span>\n<span class=\"sd\">        xsection_num_seg : int, optional</span>\n<span class=\"sd\">            Number of segments in the cross-section surface for type ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">            ``&quot;Rectangle&quot;``, or ``&quot;Isosceles Trapezoid&quot;``. The default is ``0``. The</span>\n<span class=\"sd\">            value must be ``0`` or greater than ``2``.</span>\n<span class=\"sd\">        xsection_bend_type : str, optional</span>\n<span class=\"sd\">            Type of the bend for the cross-section. The default is</span>\n<span class=\"sd\">            ``None``, in which case the bend type is set to</span>\n<span class=\"sd\">            ``&quot;Corner&quot;``. For the type ``&quot;Circle&quot;``, the bend type</span>\n<span class=\"sd\">            should be set to ``&quot;Curved&quot;``.</span>\n<span class=\"sd\">        non_model : bool, optional</span>\n<span class=\"sd\">            Either if the polyline will be created as model or unmodel object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        pyaedt.modeler.Primitives.Polyline</span>\n<span class=\"sd\">           Polyline object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreatePolyline</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Set up the desktop environment.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.desktop import Desktop</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.maxwell import Maxwell3d</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.Primitives import PolylineSegment</span>\n<span class=\"sd\">        &gt;&gt;&gt; desktop=Desktop(specified_version=&quot;2021.2&quot;, new_desktop_session=False)</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp = Maxwell3D()</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp.modeler.model_units = &quot;mm&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; modeler = aedtapp.modeler</span>\n\n<span class=\"sd\">        Define some test data points.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; test_points = [[&quot;0mm&quot;, &quot;0mm&quot;, &quot;0mm&quot;], [&quot;100mm&quot;, &quot;20mm&quot;, &quot;0mm&quot;],</span>\n<span class=\"sd\">        ...                [&quot;71mm&quot;, &quot;71mm&quot;, &quot;0mm&quot;], [&quot;0mm&quot;, &quot;100mm&quot;, &quot;0mm&quot;]]</span>\n\n<span class=\"sd\">        The default behavior assumes that all points are to be</span>\n<span class=\"sd\">        connected by line segments.  Optionally specify the name.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P1 = modeler.create_polyline(test_points, name=&quot;PL_line_segments&quot;)</span>\n\n<span class=\"sd\">        Specify that the first segment is a line and the last three</span>\n<span class=\"sd\">        points define a three-point arc.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P2 = modeler.create_polyline(test_points, segment_type=[&quot;Line&quot;, &quot;Arc&quot;], name=&quot;PL_line_plus_arc&quot;)</span>\n\n<span class=\"sd\">        Redraw the 3-point arc alone from the last three points and</span>\n<span class=\"sd\">        additionally specify five segments using ``PolylineSegment``.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P3 = modeler.create_polyline(test_points[1:],</span>\n<span class=\"sd\">        ...                               segment_type=PolylineSegment(type=&quot;Arc&quot;, num_seg=7),</span>\n<span class=\"sd\">        ...                               name=&quot;PL_segmented_arc&quot;)</span>\n\n<span class=\"sd\">        Specify that the four points form a spline and add a circular</span>\n<span class=\"sd\">        cross-section with a diameter of 1 mm.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P4 = modeler.create_polyline(test_points, segment_type=&quot;Spline&quot;, name=&quot;PL_spline&quot;,</span>\n<span class=\"sd\">        ...                               xsection_type=&quot;Circle&quot;, xsection_width=&quot;1mm&quot;)</span>\n\n<span class=\"sd\">        Use the `PolylineSegment` object to specify more detail about</span>\n<span class=\"sd\">        the individual segments.  Create a center point arc starting</span>\n<span class=\"sd\">        from the position ``test_points[1]``, rotating about the</span>\n<span class=\"sd\">        center point position ``test_points[0]`` in the XY plane.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; start_point = test_points[1]</span>\n<span class=\"sd\">        &gt;&gt;&gt; center_point = test_points[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; segment_def = PolylineSegment(type=&quot;AngularArc&quot;, arc_center=center_point, arc_angle=&quot;90deg&quot;, arc_plane=&quot;XY&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; modeler.create_polyline(start_point, segment_type=segment_def, name=&quot;PL_center_point_arc&quot;)</span>\n\n<span class=\"sd\">        Create a spline using a list of variables for the coordinates of the points.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; x0, y0, z0 = &quot;0&quot;, &quot;0&quot;, &quot;1&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; x1, y1, z1 = &quot;1&quot;, &quot;3&quot;, &quot;1&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; x2, y2, z2 = &quot;2&quot;, &quot;2&quot;, &quot;1&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; P5 = modeler.create_polyline(position_list = [[x0, y0, z0], [x1, y1, z1], [x2, y2, z2]],</span>\n<span class=\"sd\">        ...                                 segment_type=&quot;Spline&quot;, name=&quot;polyline_with_variables&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_polyline</span> <span class=\"o\">=</span> <span class=\"n\">Polyline</span><span class=\"p\">(</span>\n            <span class=\"n\">primitives</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">position_list</span><span class=\"p\">,</span>\n            <span class=\"n\">segment_type</span><span class=\"o\">=</span><span class=\"n\">segment_type</span><span class=\"p\">,</span>\n            <span class=\"n\">cover_surface</span><span class=\"o\">=</span><span class=\"n\">cover_surface</span><span class=\"p\">,</span>\n            <span class=\"n\">close_surface</span><span class=\"o\">=</span><span class=\"n\">close_surface</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"n\">xsection_type</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_orient</span><span class=\"o\">=</span><span class=\"n\">xsection_orient</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"n\">xsection_width</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_topwidth</span><span class=\"o\">=</span><span class=\"n\">xsection_topwidth</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_height</span><span class=\"o\">=</span><span class=\"n\">xsection_height</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_num_seg</span><span class=\"o\">=</span><span class=\"n\">xsection_num_seg</span><span class=\"p\">,</span>\n            <span class=\"n\">xsection_bend_type</span><span class=\"o\">=</span><span class=\"n\">xsection_bend_type</span><span class=\"p\">,</span>\n            <span class=\"n\">non_model</span><span class=\"o\">=</span><span class=\"n\">non_model</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_polyline</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_spiral_on_face</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"n\">poly_width</span><span class=\"p\">,</span> <span class=\"n\">filling_factor</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Spiral Polyline inside a face.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face : int or str or :class:`pyaedt.modeler.Object3d.FacePrimitive`</span>\n<span class=\"sd\">        poly_width : float</span>\n<span class=\"sd\">        filling_factor : float</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Polyline`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"n\">FacePrimitive</span><span class=\"p\">):</span>\n            <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"n\">face</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_faces</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_vertices</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n        <span class=\"n\">vertex_coordinates</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">:</span>\n            <span class=\"n\">vertex_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n\n        <span class=\"n\">centroid</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_center</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n\n        <span class=\"n\">segments_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">vc</span> <span class=\"ow\">in</span> <span class=\"n\">vertex_coordinates</span><span class=\"p\">:</span>\n            <span class=\"n\">segments_lengths</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"n\">centroid</span><span class=\"p\">))</span>\n\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">segments_lengths</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">poly_width</span> <span class=\"o\">*</span> <span class=\"n\">filling_factor</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">n_points</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">n_points</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">n_points</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n\n        <span class=\"n\">inner_points</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">vc</span> <span class=\"ow\">in</span> <span class=\"n\">vertex_coordinates</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">)]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>  <span class=\"c1\"># loop for x, y, z</span>\n                <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">centroid</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">n_points</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_points</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">delta</span> <span class=\"o\">*</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n            <span class=\"n\">inner_points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)</span>\n\n        <span class=\"n\">poly_points_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_points</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">inner_points</span><span class=\"p\">:</span>\n                <span class=\"n\">poly_points_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">])</span>\n\n        <span class=\"k\">del</span> <span class=\"n\">poly_points_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># fmt: on</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">poly_points_list</span><span class=\"p\">,</span> <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">,</span> <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"n\">poly_width</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_existing_polyline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a polyline object to manipulate it.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        src_object : :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            An existing polyline object in the 3D Modeler.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        Polyline</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Polyline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">src_object</span><span class=\"o\">=</span><span class=\"nb\">object</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_udp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">udp_dll_name</span><span class=\"p\">,</span> <span class=\"n\">udp_parameters_list</span><span class=\"p\">,</span> <span class=\"n\">upd_library</span><span class=\"o\">=</span><span class=\"s2\">&quot;syslib&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a user-defined primitive (UDP).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        udp_dll_name : str</span>\n<span class=\"sd\">            Name of the UDP DLL or Python file. The default for the file format</span>\n<span class=\"sd\">            is ``&quot;.dll&quot;``.</span>\n<span class=\"sd\">        udp_parameters_list :</span>\n<span class=\"sd\">            List of the UDP parameters.</span>\n<span class=\"sd\">        upd_library : str, optional</span>\n<span class=\"sd\">            Name of the UDP library. The default is ``&quot;syslib&quot;``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the component. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            UDP object created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateUserDefinedPart</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_udp = self.aedtapp.modeler.create_udp(udp_dll_name=&quot;RMxprt/ClawPoleCore&quot;,</span>\n<span class=\"sd\">        ...                                          udp_parameters_list=my_udpPairs,</span>\n<span class=\"sd\">        ...                                          upd_library=&quot;syslib&quot;)</span>\n<span class=\"sd\">        &lt;class &#39;pyaedt.modeler.Object3d.Object3d&#39;&gt;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;.dll&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">udp_dll_name</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;.py&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">udp_dll_name</span><span class=\"p\">:</span>\n            <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:UserDefinedPrimitiveParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;DllName:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">udp_dll_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.dll&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Library:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">upd_library</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:UserDefinedPrimitiveParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DllName:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">udp_dll_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Library:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">upd_library</span><span class=\"p\">]</span>\n\n        <span class=\"n\">vArgParamVector</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ParamVector&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">udp_parameters_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">vArgParamVector</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Pair&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">vArgParamVector</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Pair&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">])</span>\n\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vArgParamVector</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_name</span><span class=\"p\">,</span> <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">udp_dll_name</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n        <span class=\"n\">obj_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateUserDefinedPart</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_udp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">operation_name</span><span class=\"p\">,</span> <span class=\"n\">udp_parameters_list</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update an existing geometrical object that was originally created using a user-defined primitive (UDP).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_name : str</span>\n<span class=\"sd\">            Name of the object to update.</span>\n<span class=\"sd\">        operation_name : str</span>\n<span class=\"sd\">            Name of the operation used to create the object.</span>\n<span class=\"sd\">        udp_parameters_list : list</span>\n<span class=\"sd\">            List of the UDP parameters to update and their value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateUserDefinedPart</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; self.aedtapp.modeler.update_udp(object_name=&quot;ClawPoleCore&quot;,</span>\n<span class=\"sd\">        ...                                 operation_name=&quot;CreateUserDefinedPart&quot;,</span>\n<span class=\"sd\">        ...                                 udp_parameters_list=[[&quot;Length&quot;,&quot;110mm&quot;], [&quot;DiaGap&quot;,&quot;125mm&quot;]])</span>\n<span class=\"sd\">        True</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">prop_servers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">prop_servers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">:</span><span class=\"si\">{1}</span><span class=\"s2\">:1&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">operation_name</span><span class=\"p\">))</span>\n\n        <span class=\"n\">cmd_tab</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DCmdTab&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">cmd_tab</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prop_servers</span><span class=\"p\">)</span>\n\n        <span class=\"n\">changed_props</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">udp_parameters_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">changed_props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:</span><span class=\"si\">{0}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">changed_props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">])</span>\n\n        <span class=\"n\">cmd_tab</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">changed_props</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cmd_tab</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete objects or groups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list, optional</span>\n<span class=\"sd\">            List of objects or group names. The default is ``None``,</span>\n<span class=\"sd\">            in which case all objects are deleted.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Delete</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">objects</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n        <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)):</span>\n                <span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;No objects to delete&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"nb\">slice</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">))</span>\n        <span class=\"n\">num_objects</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">)</span>\n        <span class=\"n\">remaining</span> <span class=\"o\">=</span> <span class=\"n\">num_objects</span>\n        <span class=\"k\">while</span> <span class=\"n\">remaining</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"nb\">slice</span><span class=\"p\">]</span>\n            <span class=\"n\">objects_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">objects_str</span><span class=\"p\">]</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to delete </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">objects_str</span><span class=\"p\">))</span>\n            <span class=\"n\">remaining</span> <span class=\"o\">-=</span> <span class=\"nb\">slice</span>\n            <span class=\"k\">if</span> <span class=\"n\">remaining</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">:]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_object_types</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Deleted </span><span class=\"si\">{}</span><span class=\"s2\"> Objects: </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num_objects</span><span class=\"p\">,</span> <span class=\"n\">objects_str</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_objects_containing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">contained_string</span><span class=\"p\">,</span> <span class=\"n\">case_sensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete all objects with a given prefix.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        contained_string : str</span>\n<span class=\"sd\">            Prefix in the names of the objects to delete.</span>\n<span class=\"sd\">        case_sensitive : bool, optional</span>\n<span class=\"sd\">            Whether the prefix is case-senstive. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Delete</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span>\n        <span class=\"n\">num_del</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">objnames</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">case_sensitive</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">contained_string</span> <span class=\"ow\">in</span> <span class=\"n\">el</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n                    <span class=\"n\">num_del</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">contained_string</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n                    <span class=\"n\">num_del</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Deleted </span><span class=\"si\">%s</span><span class=\"s2\"> objects&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_del</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_model_bounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the model&#39;s bounding box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of 6 float values ``[min_x, min_y, min_z, max_x, max_y, max_z]``</span>\n<span class=\"sd\">            for the bounding box.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_obj_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the object ID from an object name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objname : str</span>\n<span class=\"sd\">            Name of the object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            Object ID.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">objname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">objname</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object_from_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the object from an object name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objname : str</span>\n<span class=\"sd\">            Name of the object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object returned.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">objname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_obj_id</span><span class=\"p\">(</span><span class=\"n\">objname</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_objects_w_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stringname</span><span class=\"p\">,</span> <span class=\"n\">case_sensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve all objects with a given string in their names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        stringname : str</span>\n<span class=\"sd\">            String to search object names for.</span>\n<span class=\"sd\">        case_sensitive : bool, optional</span>\n<span class=\"sd\">            Whether the string is case-sensitive. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of object names with the given string.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">list_objs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">case_sensitive</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">stringname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"n\">list_objs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">stringname</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n                    <span class=\"n\">list_objs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">list_objs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Refresh this object.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_point_names</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_currentId</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_all_ids</span><span class=\"p\">()</span>\n        <span class=\"c1\"># self._refresh_all_ids_from_aedt_file()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cleanup_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Clean up objects that no longer exist in the modeler because</span>\n<span class=\"sd\">        they were removed by previous operations.</span>\n\n<span class=\"sd\">        This method also updates object IDs that may have changed via</span>\n<span class=\"sd\">        a modeler operation such as :func:`pyaedt.modeler.Model3D.Modeler3D.unite`</span>\n<span class=\"sd\">        or :func:`pyaedt.modeler.Model2D.Modeler2D.unite`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">           Dictionary of updated object IDs.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_object_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">new_object_id_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">all_objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n        <span class=\"n\">all_unclassified</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_names</span>\n        <span class=\"k\">for</span> <span class=\"n\">old_id</span><span class=\"p\">,</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">all_objects</span> <span class=\"ow\">or</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">all_unclassified</span><span class=\"p\">:</span>\n                <span class=\"n\">updated_id</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># By calling the object property we get the new id</span>\n                <span class=\"n\">new_object_id_dict</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">updated_id</span>\n                <span class=\"n\">new_object_dict</span><span class=\"p\">[</span><span class=\"n\">updated_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">new_object_dict</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span> <span class=\"o\">=</span> <span class=\"n\">new_object_id_dict</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Remove a point.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the point to be removed.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">points_by_name</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">])</span>\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">points_by_name</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_new_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Find any new objects in the modeler that were created</span>\n<span class=\"sd\">        by previous operations.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of new objects.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">new_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_objects</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_new_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add objects that have been created in the modeler by</span>\n<span class=\"sd\">        previous operations.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of added objects.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">added_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n                <span class=\"n\">added_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n                <span class=\"n\">added_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">added_objects</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_new_user_defined_component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add 3D components and user-defined models that have been created in the modeler by</span>\n<span class=\"sd\">        previous operations.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of added components.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">added_component</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">comp_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_component_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">comp_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_user_defined_component</span><span class=\"p\">(</span><span class=\"n\">comp_name</span><span class=\"p\">)</span>\n            <span class=\"n\">added_component</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">comp_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">added_component</span>\n\n    <span class=\"c1\"># TODO Eliminate this - check about import_3d_cad</span>\n    <span class=\"c1\"># Should no longer be a problem</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refresh_all_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Refresh all IDs.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_new_objects</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_new_user_defined_component</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_objects_by_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">materialname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of the IDs for objects of a specified material.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        materialname : str</span>\n<span class=\"sd\">            Name of the material.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of IDs for objects of the specified material.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetObjectsByMaterial</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">obj_lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">material_name</span> <span class=\"o\">==</span> <span class=\"n\">materialname</span>\n                <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">material_name</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&quot;&#39;</span> <span class=\"o\">+</span> <span class=\"n\">materialname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&quot;&#39;</span>\n            <span class=\"p\">):</span>\n                <span class=\"n\">obj_lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj_lst</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_closest_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start_obj</span><span class=\"p\">,</span> <span class=\"n\">end_obj</span><span class=\"p\">,</span> <span class=\"n\">port_direction</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the two closest edges that are not perpendicular for two objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        start_obj : str</span>\n<span class=\"sd\">            Name of the starting object.</span>\n<span class=\"sd\">        end_obj : str</span>\n<span class=\"sd\">            Name of the ending object.</span>\n<span class=\"sd\">        port_direction : str, optional</span>\n<span class=\"sd\">            Direction of the port to which to give edges precedence when more than two couples</span>\n<span class=\"sd\">            are at the same distance. For example, for a coax or microstrip, precedence is given</span>\n<span class=\"sd\">            to the edges that are on the given axis direction, such as ``&quot;XNeg&quot;``. Options are</span>\n<span class=\"sd\">            ``&quot;XNeg&quot;``, ``&quot;XPos&quot;``, ``&quot;YNeg&quot;``, ``&quot;YPos`&quot;``, ``&quot;ZNeg&quot;``, and ``&quot;ZPos&quot;``.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List with two edges if present.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">start_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve_object</span><span class=\"p\">(</span><span class=\"n\">start_obj</span><span class=\"p\">)</span>\n        <span class=\"n\">end_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve_object</span><span class=\"p\">(</span><span class=\"n\">end_obj</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">port_direction</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_x</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_x</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">if</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_x</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_x</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_x</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_x</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">if</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_x</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_x</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_y</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_y</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">if</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_y</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_y</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_y</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_y</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">if</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_y</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_y</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_z</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_z</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">if</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_z</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">bottom_face_z</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_z</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_z</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">if</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_z</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">top_face_z</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edge_start_list</span><span class=\"p\">:</span>\n            <span class=\"n\">edge_start_list</span> <span class=\"o\">=</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edge_stop_list</span><span class=\"p\">:</span>\n            <span class=\"n\">edge_stop_list</span> <span class=\"o\">=</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"n\">mindist</span> <span class=\"o\">=</span> <span class=\"mf\">1e6</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-12</span>\n        <span class=\"n\">pos_tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-6</span>\n        <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">actual_point</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">is_parallel</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">edge_start_list</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices_i</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">vertices_i</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">start_obj</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">edges_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">in</span> <span class=\"n\">edges_ids</span><span class=\"p\">:</span>\n                            <span class=\"n\">vertices_i</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">)</span>\n                            <span class=\"k\">break</span>\n            <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">vertex2_i</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># normal segment edge</span>\n                <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                <span class=\"n\">vertex2_i</span> <span class=\"o\">=</span> <span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                <span class=\"n\">start_midpoint</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                    <span class=\"n\">start_midpoint</span> <span class=\"o\">=</span> <span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">start_midpoint</span> <span class=\"o\">=</span> <span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">for</span> <span class=\"n\">el1</span> <span class=\"ow\">in</span> <span class=\"n\">edge_stop_list</span><span class=\"p\">:</span>\n                <span class=\"n\">vertices_j</span> <span class=\"o\">=</span> <span class=\"n\">el1</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">vertices_j</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">end_obj</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                            <span class=\"n\">edges_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">]</span>\n                            <span class=\"k\">if</span> <span class=\"n\">el1</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">in</span> <span class=\"n\">edges_ids</span><span class=\"p\">:</span>\n                                <span class=\"n\">vertices_j</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">)</span>\n                                <span class=\"k\">break</span>\n                <span class=\"n\">vertex1_j</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">vertex2_j</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># normal segment edge</span>\n                    <span class=\"n\">vertex1_j</span> <span class=\"o\">=</span> <span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                    <span class=\"n\">vertex2_j</span> <span class=\"o\">=</span> <span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                    <span class=\"n\">end_midpoint</span> <span class=\"o\">=</span> <span class=\"n\">el1</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n                <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                        <span class=\"n\">end_midpoint</span> <span class=\"o\">=</span> <span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">end_midpoint</span> <span class=\"o\">=</span> <span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"n\">parallel_edges</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">vect</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">if</span> <span class=\"n\">vertex1_i</span> <span class=\"ow\">and</span> <span class=\"n\">vertex1_j</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span>\n                        <span class=\"nb\">abs</span><span class=\"p\">(</span>\n                            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span>\n                                <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">),</span>\n                                <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">),</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"o\">&lt;</span> <span class=\"n\">tol</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"k\">continue</span>  <span class=\"c1\"># skip perperndicular edges</span>\n                    <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_parallel</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">,</span> <span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">):</span>\n                        <span class=\"n\">parallel_edges</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"n\">vert_dist_sum</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">arrays_positions_sum</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">]</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">vect</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">distance_vector</span><span class=\"p\">(</span><span class=\"n\">start_midpoint</span><span class=\"p\">,</span> <span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">vert_dist_sum</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">arrays_positions_sum</span><span class=\"p\">([</span><span class=\"n\">start_midpoint</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">end_midpoint</span><span class=\"p\">])</span>\n\n                <span class=\"c1\"># dist = abs(_v_norm(vect))</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">parallel_edges</span><span class=\"p\">:</span>\n                    <span class=\"n\">pd1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">)</span>\n                    <span class=\"n\">pd2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">pd1</span> <span class=\"o\">&lt;</span> <span class=\"n\">pd2</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_projection_inside</span><span class=\"p\">(</span>\n                        <span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">,</span> <span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">pd1</span> <span class=\"o\">&gt;=</span> <span class=\"n\">pd2</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_projection_inside</span><span class=\"p\">(</span>\n                        <span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">,</span> <span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"k\">continue</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">actual_point</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">el1</span><span class=\"p\">]</span>\n                    <span class=\"n\">is_parallel</span> <span class=\"o\">=</span> <span class=\"n\">parallel_edges</span>\n                    <span class=\"n\">actual_point</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">find_point_on_plane</span><span class=\"p\">([</span><span class=\"n\">start_midpoint</span><span class=\"p\">,</span> <span class=\"n\">end_midpoint</span><span class=\"p\">],</span> <span class=\"n\">port_direction</span><span class=\"p\">)</span>\n                    <span class=\"n\">mindist</span> <span class=\"o\">=</span> <span class=\"n\">vert_dist_sum</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_point</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">find_point_on_plane</span><span class=\"p\">([</span><span class=\"n\">start_midpoint</span><span class=\"p\">,</span> <span class=\"n\">end_midpoint</span><span class=\"p\">],</span> <span class=\"n\">port_direction</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">port_direction</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">new_point</span> <span class=\"o\">-</span> <span class=\"n\">actual_point</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n                        <span class=\"n\">port_direction</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">actual_point</span> <span class=\"o\">-</span> <span class=\"n\">new_point</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">el1</span><span class=\"p\">]</span>\n                        <span class=\"n\">is_parallel</span> <span class=\"o\">=</span> <span class=\"n\">parallel_edges</span>\n                        <span class=\"n\">actual_point</span> <span class=\"o\">=</span> <span class=\"n\">new_point</span>\n                        <span class=\"n\">mindist</span> <span class=\"o\">=</span> <span class=\"n\">vert_dist_sum</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">new_point</span> <span class=\"o\">-</span> <span class=\"n\">actual_point</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"ow\">and</span> <span class=\"n\">vert_dist_sum</span> <span class=\"o\">-</span> <span class=\"n\">mindist</span> <span class=\"o\">&lt;</span> <span class=\"n\">pos_tol</span><span class=\"p\">:</span>\n                        <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">el1</span><span class=\"p\">]</span>\n                        <span class=\"n\">is_parallel</span> <span class=\"o\">=</span> <span class=\"n\">parallel_edges</span>\n                        <span class=\"n\">actual_point</span> <span class=\"o\">=</span> <span class=\"n\">new_point</span>\n                        <span class=\"n\">mindist</span> <span class=\"o\">=</span> <span class=\"n\">vert_dist_sum</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">port_direction</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">actual_point</span> <span class=\"o\">-</span> <span class=\"n\">new_point</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"ow\">and</span> <span class=\"n\">vert_dist_sum</span> <span class=\"o\">-</span> <span class=\"n\">mindist</span> <span class=\"o\">&lt;</span> <span class=\"n\">pos_tol</span><span class=\"p\">:</span>\n                        <span class=\"n\">edge_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">el1</span><span class=\"p\">]</span>\n                        <span class=\"n\">is_parallel</span> <span class=\"o\">=</span> <span class=\"n\">parallel_edges</span>\n                        <span class=\"n\">actual_point</span> <span class=\"o\">=</span> <span class=\"n\">new_point</span>\n                        <span class=\"n\">mindist</span> <span class=\"o\">=</span> <span class=\"n\">vert_dist_sum</span>\n        <span class=\"k\">return</span> <span class=\"n\">edge_list</span><span class=\"p\">,</span> <span class=\"n\">is_parallel</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_equivalent_parallel_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edgelist</span><span class=\"p\">,</span> <span class=\"n\">portonplane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">startobj</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create two new edges that are parallel and equal to the smallest edge given a parallel couple of edges.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edgelist : list</span>\n<span class=\"sd\">            List of two parallel edges.</span>\n<span class=\"sd\">        portonplane : bool, optional</span>\n<span class=\"sd\">            Whether edges are to be on the plane orthogonal to the axis direction.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        axisdir : int, optional</span>\n<span class=\"sd\">            Axis direction. Choices are ``0`` through ``5``. The default is ``0``.</span>\n<span class=\"sd\">        startobj : str, optional</span>\n<span class=\"sd\">             Name of the starting object. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        endobject : str, optional</span>\n<span class=\"sd\">             Name of the ending object. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of two created edges.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_from_name</span><span class=\"p\">(</span><span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_from_name</span><span class=\"p\">(</span><span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"k\">if</span> <span class=\"n\">l1</span> <span class=\"o\">&lt;</span> <span class=\"n\">l2</span><span class=\"p\">:</span>\n            <span class=\"n\">orig_edge</span> <span class=\"o\">=</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">dest_edge</span> <span class=\"o\">=</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">orig_edge</span> <span class=\"o\">=</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">dest_edge</span> <span class=\"o\">=</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"n\">first_edge</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">orig_edge</span><span class=\"p\">)</span>\n        <span class=\"n\">second_edge</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">orig_edge</span><span class=\"p\">)</span>\n        <span class=\"n\">ver1</span> <span class=\"o\">=</span> <span class=\"n\">orig_edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n        <span class=\"n\">ver2</span> <span class=\"o\">=</span> <span class=\"n\">dest_edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ver2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ver1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">a1</span> <span class=\"o\">=</span> <span class=\"n\">ver2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">a2</span> <span class=\"o\">=</span> <span class=\"n\">ver2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">vect</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">distance_vector</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">portonplane</span><span class=\"p\">:</span>\n                <span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"c1\"># TODO: can we avoid this translate operation - is there another way to check ?</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">second_edge</span><span class=\"p\">,</span> <span class=\"n\">vect</span><span class=\"p\">)</span>\n            <span class=\"n\">p_check</span> <span class=\"o\">=</span> <span class=\"n\">second_edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">p_check2</span> <span class=\"o\">=</span> <span class=\"n\">second_edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n        <span class=\"c1\"># elif len(ver2) == 1:  # for circular edges with one vertex</span>\n        <span class=\"c1\">#     p_check = first_edge.vertices[0].position</span>\n        <span class=\"c1\">#     p_check2 = second_edge.vertices[0].position</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">first_edge</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">second_edge</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">obj_check</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">p_check</span><span class=\"p\">)</span>\n        <span class=\"n\">obj_check2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">p_check2</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if (startobj in obj_check and endobject in obj_check2) or (startobj in obj_check2 and endobject in obj_check):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">startobj</span> <span class=\"ow\">in</span> <span class=\"n\">obj_check</span> <span class=\"ow\">or</span> <span class=\"n\">endobject</span> <span class=\"ow\">in</span> <span class=\"n\">obj_check</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">startobj</span> <span class=\"ow\">in</span> <span class=\"n\">obj_check2</span> <span class=\"ow\">or</span> <span class=\"n\">endobject</span> <span class=\"ow\">in</span> <span class=\"n\">obj_check2</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">l1</span> <span class=\"o\">&lt;</span> <span class=\"n\">l2</span><span class=\"p\">:</span>\n                <span class=\"n\">return_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">first_edge</span><span class=\"p\">,</span> <span class=\"n\">second_edge</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">return_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">second_edge</span><span class=\"p\">,</span> <span class=\"n\">first_edge</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">return_edges</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">second_edge</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">first_edge</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object_faces</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partId</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the face IDs of a given object ID or object name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partId : int or str</span>\n<span class=\"sd\">            Object ID or object name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of faces IDs.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetFaceIDs</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">)</span>\n            <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oFaceIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">partId</span><span class=\"p\">]</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oFaceIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">oFaceIDs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partId</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the edge IDs of a given object ID or object name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partId : int or str</span>\n<span class=\"sd\">            Object ID or object name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of edge IDs.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetEdgeIDsFromObject</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEdgeIDsFromObject</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">)</span>\n            <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oEdgeIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">partId</span><span class=\"p\">]</span>\n            <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEdgeIDsFromObject</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oEdgeIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">oEdgeIDs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_face_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partId</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the edge IDs of a given face name or face ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partId : int or str</span>\n<span class=\"sd\">            Object ID or object name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of edge IDs.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetEdgeIDsFromFace</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEdgeIDsFromFace</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">)</span>\n        <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oEdgeIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">oEdgeIDs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object_vertices</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partID</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the vertex IDs of a given object name or object ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partID : int or str</span>\n<span class=\"sd\">            Object ID or object name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of vertex IDs.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromObject</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">partID</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexIDsFromObject</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"p\">)</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oVertexIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">partID</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">partID</span><span class=\"p\">]</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexIDsFromObject</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oVertexIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">oVertexIDs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_face_vertices</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the vertex IDs of a given face ID or face name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face_id : int or str</span>\n<span class=\"sd\">            Object ID or object name, which is available</span>\n<span class=\"sd\">            using the methods :func:`pyaedt.modeler.Primitives3D.Primitives3D.get_object_vertices`</span>\n<span class=\"sd\">            or :func:`pyaedt.modeler.Primitives2D.Primitives2D.get_object_vertices`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of vertex IDs.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromFace</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexIDsFromFace</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oVertexIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">oVertexIDs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edge_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edgeID</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the length of an edge.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edgeID : int</span>\n<span class=\"sd\">            ID of the edge.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Edge length.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">vertexID</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">edgeID</span><span class=\"p\">)</span>\n        <span class=\"n\">pos1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertexID</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertexID</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"n\">pos2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertexID</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">pos2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">length</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edgeID</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the vertex IDs of a given edge ID or edge name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edgeID : int, str</span>\n<span class=\"sd\">            Object ID or object name, which is available using the</span>\n<span class=\"sd\">            methods :func:`pyaedt.modeler.Primitives3D.Primitives3D.get_object_vertices`</span>\n<span class=\"sd\">            or :func:`pyaedt.modeler.Primitives2D.Primitives2D.get_object_vertices`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of vertex IDs.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromEdge</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexIDsFromEdge</span><span class=\"p\">(</span><span class=\"n\">edgeID</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">oVertexIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">oVertexIDs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">oVertexIDs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_vertex_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertex_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a vector of vertex coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        vertex_id : int or str</span>\n<span class=\"sd\">            ID or name of the vertex.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates indicating the position.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexPosition</span><span class=\"p\">(</span><span class=\"n\">vertex_id</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pos</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_face_area</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the area of a given face ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face_id : int</span>\n<span class=\"sd\">            ID of the face.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Value for the face area.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetFaceArea</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceArea</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">area</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_face_center</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the center position for a given planar face ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face_id : int</span>\n<span class=\"sd\">            ID of the face.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            A list of ``[x, y, z]`` coordinates for the</span>\n<span class=\"sd\">            planar face center position.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetFaceCenter</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceCenter</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Non Planar Faces doesn&#39;t provide any Face Center&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">center</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_mid_points_on_dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sheet</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve midpoints on a given axis direction.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sheet :</span>\n\n<span class=\"sd\">        axisdir : int</span>\n<span class=\"sd\">            Axis direction. Choices are ``0`` through ``5``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edgesid</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_edges</span><span class=\"p\">(</span><span class=\"n\">sheet</span><span class=\"p\">)</span>\n        <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">midpoint_array</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ed</span> <span class=\"ow\">in</span> <span class=\"n\">edgesid</span><span class=\"p\">:</span>\n            <span class=\"n\">midpoint_array</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"n\">ed</span><span class=\"p\">))</span>\n        <span class=\"n\">point0</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">point1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">midpoint_array</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">point0</span><span class=\"p\">:</span>\n                <span class=\"n\">point0</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n                <span class=\"n\">point1</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">elif</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">point0</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">point0</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]:</span>\n                <span class=\"n\">point0</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">elif</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">point1</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">point1</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]:</span>\n                <span class=\"n\">point1</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n        <span class=\"k\">return</span> <span class=\"n\">point0</span><span class=\"p\">,</span> <span class=\"n\">point1</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partID</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the midpoint coordinates of a given edge ID or edge name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partID : int or str</span>\n<span class=\"sd\">            Object ID  or object name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of midpoint coordinates. If the edge is not a segment with</span>\n<span class=\"sd\">            two vertices, an empty list is returned.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">partID</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">partID</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">partID</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">partID</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">partID</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">object_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_vertices</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">vertex1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">vertex2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">midpoint</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">get_mid_point</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">,</span> <span class=\"n\">vertex2</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">midpoint</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">include_non_model</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the names of the objects that are in contact with a given point.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the point.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Units, such as ``&quot;m&quot;``. The default is ``None``, in which case the</span>\n<span class=\"sd\">            model units are used.</span>\n<span class=\"sd\">        include_non_model : bool, optional</span>\n<span class=\"sd\">            Either if include or not non model objects.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of object names.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetBodyNamesByPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">list_of_bodies</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetBodyNamesByPosition</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">include_non_model</span><span class=\"p\">:</span>\n            <span class=\"n\">non_models</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">non_model_names</span><span class=\"p\">]</span>\n            <span class=\"n\">list_of_bodies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">list_of_bodies</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">non_models</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">list_of_bodies</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edgeid_from_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get an edge ID from a position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the position.</span>\n<span class=\"sd\">        obj_name : str, optional</span>\n<span class=\"sd\">            Name of the object. The default is ``None``, in which case all</span>\n<span class=\"sd\">            objects are searched.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Units for the position, such as ``&quot;m&quot;``. The default is ``None``,</span>\n<span class=\"sd\">            in which case the model units are used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Edge ID of the first object touching this position.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">obj_name</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n\n        <span class=\"n\">edgeID</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:EdgeParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;BodyName:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n            <span class=\"n\">vArg1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">edgeID</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEdgeByPosition</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">edgeID</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edgeids_from_vertexid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertexid</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve edge IDs for a vertex ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        vertexid : int</span>\n<span class=\"sd\">            Vertex ID.</span>\n<span class=\"sd\">        obj_name :</span>\n<span class=\"sd\">            Name of the object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of edge IDs for the vertex ID.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetEdgeIDsFromObject</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromEdge</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edgeID</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_edges</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"n\">vertx</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">vertexid</span> <span class=\"ow\">in</span> <span class=\"n\">vertx</span><span class=\"p\">:</span>\n                <span class=\"n\">edgeID</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">edgeID</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_faceid_from_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a face ID from a position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the position.</span>\n<span class=\"sd\">        obj_name : str, optional</span>\n<span class=\"sd\">            Name of the object. The default is ``None``, in which case all</span>\n<span class=\"sd\">            objects are searched.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Units, such as ``&quot;m&quot;``. The default is ``None``, in which case the</span>\n<span class=\"sd\">            model units are used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            Face ID of the first object touching this position.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetFaceByPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">obj_name</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:FaceParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;BodyName:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n            <span class=\"n\">vArg1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceByPosition</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">face_id</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Not Found, keep looking</span>\n                <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edges_on_bounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sheets</span><span class=\"p\">,</span> <span class=\"n\">return_colinear</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the edges of the sheets passed in the input that are lying on the bounding box.</span>\n\n<span class=\"sd\">        This method creates new lines for the detected edges and returns the IDs of these lines.</span>\n<span class=\"sd\">        If required, only colinear edges are returned.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sheets : int, str, or list</span>\n<span class=\"sd\">            ID or name for one or more sheets.</span>\n<span class=\"sd\">        return_colinear : bool, optional</span>\n<span class=\"sd\">            Whether to return only colinear edges. The default is ``True``.</span>\n<span class=\"sd\">            If ``False``, all edges on the bounding box are returned.</span>\n<span class=\"sd\">        tol : float, optional</span>\n<span class=\"sd\">            Geometric tolerance. The default is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of edge IDs lying on the bounding box.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">port_sheets</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">sheets</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n\n        <span class=\"n\">candidate_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">port_sheets</span><span class=\"p\">:</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n            <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n                <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n                <span class=\"n\">v_flag</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">for</span> <span class=\"n\">vertex</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">:</span>\n                    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                    <span class=\"n\">xyz_flag</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"ow\">or</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                        <span class=\"n\">xyz_flag</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"ow\">or</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                        <span class=\"n\">xyz_flag</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"ow\">or</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                        <span class=\"n\">xyz_flag</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">xyz_flag</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                        <span class=\"n\">v_flag</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">v_flag</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                        <span class=\"k\">break</span>\n                <span class=\"k\">if</span> <span class=\"n\">v_flag</span><span class=\"p\">:</span>\n                    <span class=\"n\">candidate_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">return_colinear</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">candidate_edges</span>\n\n        <span class=\"n\">selected_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">edge_i</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">candidate_edges</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"n\">edge_i</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">midpoint_i</span> <span class=\"o\">=</span> <span class=\"n\">edge_i</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">edge_j</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">candidate_edges</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:]):</span>\n                <span class=\"n\">midpoint_j</span> <span class=\"o\">=</span> <span class=\"n\">edge_j</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n                <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">get_triangle_area</span><span class=\"p\">(</span><span class=\"n\">midpoint_i</span><span class=\"p\">,</span> <span class=\"n\">midpoint_j</span><span class=\"p\">,</span> <span class=\"n\">vertex1_i</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">area</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n                    <span class=\"n\">selected_edges</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">edge_i</span><span class=\"p\">,</span> <span class=\"n\">edge_j</span><span class=\"p\">])</span>\n                    <span class=\"k\">break</span>\n        <span class=\"n\">selected_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">selected_edges</span><span class=\"p\">))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">selected_edges</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">aedt_wait_time</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">selected_edges</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edges_for_circuit_port_from_sheet</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sheet</span><span class=\"p\">,</span> <span class=\"n\">XY_plane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">YZ_plane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">XZ_plane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">allow_perpendicular</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve two edge IDs that are suitable for a circuit port from a sheet.</span>\n\n<span class=\"sd\">        One edge belongs to the sheet passed in the input, and the second edge</span>\n<span class=\"sd\">        is the closest edge&#39;s coplanar to the first edge (aligned to the XY, YZ,</span>\n<span class=\"sd\">        or XZ plane). This method creates new lines for the detected edges and returns</span>\n<span class=\"sd\">        the IDs of these lines.</span>\n\n<span class=\"sd\">        This method accepts one or more sheet objects as input,</span>\n<span class=\"sd\">        while the method :func:`Primitives.get_edges_for_circuit_port`</span>\n<span class=\"sd\">        accepts a face ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sheet : int, str, or list</span>\n<span class=\"sd\">            ID or name for one or more sheets.</span>\n<span class=\"sd\">        XY_plane : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be on the XY plane.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        YZ_plane : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be on the YZ plane.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        XZ_plane : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be on the XZ plane.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        allow_perpendicular : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be perpendicular.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        tol : float, optional</span>\n<span class=\"sd\">            Geometric tolerance. The default is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of edge IDs.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tol2</span> <span class=\"o\">=</span> <span class=\"n\">tol</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n        <span class=\"n\">port_sheet</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">sheet</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">port_sheet</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">port_sheet</span> <span class=\"o\">=</span> <span class=\"n\">port_sheet</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">port_edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_edges</span><span class=\"p\">(</span><span class=\"n\">port_sheet</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># find the bodies to exclude</span>\n        <span class=\"n\">port_sheet_midpoint</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_center</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_faces</span><span class=\"p\">(</span><span class=\"n\">port_sheet</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">Position</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">port_sheet_midpoint</span><span class=\"p\">)</span>\n        <span class=\"n\">list_of_bodies</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># select all edges</span>\n        <span class=\"n\">all_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">solids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_names</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">list_of_bodies</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">solid</span> <span class=\"ow\">in</span> <span class=\"n\">solids</span><span class=\"p\">:</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_edges</span><span class=\"p\">(</span><span class=\"n\">solid</span><span class=\"p\">)</span>\n            <span class=\"n\">all_edges</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">all_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">all_edges</span><span class=\"p\">))</span>  <span class=\"c1\"># remove duplicates</span>\n\n        <span class=\"c1\"># select edges coplanar to port edges (aligned to XY, YZ, or XZ plane)</span>\n        <span class=\"n\">ux</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n        <span class=\"n\">uy</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n        <span class=\"n\">uz</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n        <span class=\"n\">midpoints</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">candidate_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ei</span> <span class=\"ow\">in</span> <span class=\"n\">port_edges</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">ei</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># maybe a circle</span>\n                <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">area_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_area</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_faces</span><span class=\"p\">(</span><span class=\"n\">port_sheet</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"n\">area_i</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">area_i</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol2</span><span class=\"p\">:</span>  <span class=\"c1\"># degenerated face</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">center_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_center</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_faces</span><span class=\"p\">(</span><span class=\"n\">port_sheet</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">center_i</span><span class=\"p\">:</span>  <span class=\"c1\"># non planar face</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">radius_i</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">center_i</span><span class=\"p\">)</span>\n                <span class=\"n\">area_i_eval</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">radius_i</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n                <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">area_i</span> <span class=\"o\">-</span> <span class=\"n\">area_i_eval</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol2</span><span class=\"p\">:</span>  <span class=\"c1\"># it is a circle</span>\n                    <span class=\"n\">vertex2_i</span> <span class=\"o\">=</span> <span class=\"n\">center_i</span>\n                    <span class=\"n\">midpoints</span><span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">center_i</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># not a circle</span>\n                    <span class=\"k\">continue</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># normal segment edge</span>\n                <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">vertex2_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">midpoints</span><span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"n\">ei</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># undetermined edge --&gt; skip</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">for</span> <span class=\"n\">ej</span> <span class=\"ow\">in</span> <span class=\"n\">all_edges</span><span class=\"p\">:</span>\n                <span class=\"n\">vertices_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">ej</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># edge is an arc, not supported</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># normal segment edge</span>\n                    <span class=\"n\">vertex1_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"n\">vertex2_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># undetermined edge --&gt; skip</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"ow\">not</span> <span class=\"n\">allow_perpendicular</span>\n                    <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span>\n                        <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span>\n                            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">),</span>\n                            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"o\">&lt;</span> <span class=\"n\">tol</span>\n                <span class=\"p\">):</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"n\">normal1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span>\n                    <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">),</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex1_j</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">normal1_norm</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">YZ_plane</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">ux</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">normal1_norm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">elif</span> <span class=\"n\">XZ_plane</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">uy</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">normal1_norm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">elif</span> <span class=\"n\">XY_plane</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">uz</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">normal1_norm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"n\">vec1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">vec1</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol2</span><span class=\"p\">:</span>  <span class=\"c1\"># the 4th point is coplanar</span>\n                    <span class=\"n\">candidate_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ej</span><span class=\"p\">)</span>\n\n        <span class=\"n\">minimum_distance</span> <span class=\"o\">=</span> <span class=\"n\">tol</span><span class=\"o\">**-</span><span class=\"mi\">1</span>\n        <span class=\"n\">selected_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ei</span> <span class=\"ow\">in</span> <span class=\"n\">midpoints</span><span class=\"p\">:</span>\n            <span class=\"n\">midpoint_i</span> <span class=\"o\">=</span> <span class=\"n\">midpoints</span><span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">ej</span> <span class=\"ow\">in</span> <span class=\"n\">candidate_edges</span><span class=\"p\">:</span>\n                <span class=\"n\">midpoint_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"n\">ej</span><span class=\"p\">)</span>\n                <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">midpoint_i</span><span class=\"p\">,</span> <span class=\"n\">midpoint_j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"n\">minimum_distance</span><span class=\"p\">:</span>\n                    <span class=\"n\">minimum_distance</span> <span class=\"o\">=</span> <span class=\"n\">d</span>\n                    <span class=\"n\">selected_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">,</span> <span class=\"n\">ej</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">selected_edges</span><span class=\"p\">:</span>\n            <span class=\"n\">new_edge1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">selected_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">aedt_wait_time</span><span class=\"p\">)</span>\n            <span class=\"n\">new_edge2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">selected_edges</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">selected_edges</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edges_for_circuit_port</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_id</span><span class=\"p\">,</span> <span class=\"n\">XY_plane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">YZ_plane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">XZ_plane</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">allow_perpendicular</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve two edge IDs suitable for the circuit port.</span>\n\n<span class=\"sd\">        One edge belongs to the face ID passed in the input, and the second edge</span>\n<span class=\"sd\">        is the closest edge&#39;s coplanar to the first edge (aligned to the XY, YZ,</span>\n<span class=\"sd\">        or XZ plane). This method creates new lines for the detected edges and returns</span>\n<span class=\"sd\">        the IDs of these lines.</span>\n\n<span class=\"sd\">        This method accepts a face ID in the input, while the `get_edges_for_circuit_port_from_port`</span>\n<span class=\"sd\">        method accepts one or more sheet objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face_id :</span>\n<span class=\"sd\">            ID of the face.</span>\n<span class=\"sd\">        XY_plane : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be on the XY plane.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        YZ_plane : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be on the YZ plane.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        XZ_plane : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be on the XZ plane.</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        allow_perpendicular : bool, optional</span>\n<span class=\"sd\">            Whether the edge&#39;s pair are to be perpendicular.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        tol : float, optional</span>\n<span class=\"sd\">            Geometric tolerance. The default is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of edge IDs.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tol2</span> <span class=\"o\">=</span> <span class=\"n\">tol</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n        <span class=\"n\">port_edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_edges</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># find the bodies to exclude</span>\n        <span class=\"n\">port_sheet_midpoint</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_center</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n        <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">Position</span><span class=\"p\">(</span><span class=\"n\">port_sheet_midpoint</span><span class=\"p\">)</span>\n        <span class=\"n\">list_of_bodies</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># select all edges</span>\n        <span class=\"n\">all_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">solids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_names</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">list_of_bodies</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">solid</span> <span class=\"ow\">in</span> <span class=\"n\">solids</span><span class=\"p\">:</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_edges</span><span class=\"p\">(</span><span class=\"n\">solid</span><span class=\"p\">)</span>\n            <span class=\"n\">all_edges</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">)</span>\n        <span class=\"n\">all_edges</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">all_edges</span><span class=\"p\">))</span>  <span class=\"c1\"># remove duplicates</span>\n\n        <span class=\"c1\"># select edges coplanar to port edges (aligned to XY, YZ, or XZ plane)</span>\n        <span class=\"n\">ux</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n        <span class=\"n\">uy</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n        <span class=\"n\">uz</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n        <span class=\"n\">midpoints</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">candidate_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ei</span> <span class=\"ow\">in</span> <span class=\"n\">port_edges</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">ei</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># maybe a circle</span>\n                <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">area_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_area</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">area_i</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">area_i</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol2</span><span class=\"p\">:</span>  <span class=\"c1\"># degenerated face</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">center_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_center</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">center_i</span><span class=\"p\">:</span>  <span class=\"c1\"># non planar face</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">radius_i</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">center_i</span><span class=\"p\">)</span>\n                <span class=\"n\">area_i_eval</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">radius_i</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n                <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">area_i</span> <span class=\"o\">-</span> <span class=\"n\">area_i_eval</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol2</span><span class=\"p\">:</span>  <span class=\"c1\"># it is a circle</span>\n                    <span class=\"n\">vertex2_i</span> <span class=\"o\">=</span> <span class=\"n\">center_i</span>\n                    <span class=\"n\">midpoints</span><span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">center_i</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># not a circle</span>\n                    <span class=\"k\">continue</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># normal segment edge</span>\n                <span class=\"n\">vertex1_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">vertex2_i</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_i</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">midpoints</span><span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"n\">ei</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># undetermined edge --&gt; skip</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">for</span> <span class=\"n\">ej</span> <span class=\"ow\">in</span> <span class=\"n\">all_edges</span><span class=\"p\">:</span>\n                <span class=\"n\">vertices_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_vertices</span><span class=\"p\">(</span><span class=\"n\">ej</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># edge is an arc, not supported</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># normal segment edge</span>\n                    <span class=\"n\">vertex1_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"n\">vertex2_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"n\">vertices_j</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># undetermined edge --&gt; skip</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"ow\">not</span> <span class=\"n\">allow_perpendicular</span>\n                    <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span>\n                        <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span>\n                            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">),</span>\n                            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_j</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"o\">&lt;</span> <span class=\"n\">tol</span>\n                <span class=\"p\">):</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"n\">normal1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span>\n                    <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_i</span><span class=\"p\">),</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex1_j</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">normal1_norm</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">YZ_plane</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">ux</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">normal1_norm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">elif</span> <span class=\"n\">XZ_plane</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">uy</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">normal1_norm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">elif</span> <span class=\"n\">XY_plane</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">uz</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">normal1_norm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"n\">vec1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">vertex1_i</span><span class=\"p\">,</span> <span class=\"n\">vertex2_j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">normal1</span><span class=\"p\">,</span> <span class=\"n\">vec1</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol2</span><span class=\"p\">:</span>  <span class=\"c1\"># the 4th point is coplanar</span>\n                    <span class=\"n\">candidate_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ej</span><span class=\"p\">)</span>\n\n        <span class=\"n\">minimum_distance</span> <span class=\"o\">=</span> <span class=\"n\">tol</span><span class=\"o\">**-</span><span class=\"mi\">1</span>\n        <span class=\"n\">selected_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ei</span> <span class=\"ow\">in</span> <span class=\"n\">midpoints</span><span class=\"p\">:</span>\n            <span class=\"n\">midpoint_i</span> <span class=\"o\">=</span> <span class=\"n\">midpoints</span><span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">ej</span> <span class=\"ow\">in</span> <span class=\"n\">candidate_edges</span><span class=\"p\">:</span>\n                <span class=\"n\">midpoint_j</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"n\">ej</span><span class=\"p\">)</span>\n                <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">midpoint_i</span><span class=\"p\">,</span> <span class=\"n\">midpoint_j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"n\">minimum_distance</span><span class=\"p\">:</span>\n                    <span class=\"n\">minimum_distance</span> <span class=\"o\">=</span> <span class=\"n\">d</span>\n                    <span class=\"n\">selected_edges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ei</span><span class=\"p\">,</span> <span class=\"n\">ej</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">selected_edges</span><span class=\"p\">:</span>\n            <span class=\"n\">new_edge1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">selected_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">aedt_wait_time</span><span class=\"p\">)</span>\n            <span class=\"n\">new_edge2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">selected_edges</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">selected_edges</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_closest_edgeid_to_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the edge ID closest to a given position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x,y,z]`` coordinates for the position.</span>\n<span class=\"sd\">        units :</span>\n<span class=\"sd\">            Units for the position, such as ``&quot;m&quot;``. The default is ``None``, which means the model units are used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            Edge ID of the edge closest to this position.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">Position</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">bodies</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"c1\"># the function searches in all bodies, not efficient</span>\n        <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_faceid_from_position</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"o\">=</span><span class=\"n\">bodies</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_edges</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">)</span>\n        <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"mf\">1e6</span>\n        <span class=\"n\">selected_edge</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"n\">midpoint</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_midpoint</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;mm&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">units</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;meter&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">midpoint</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">midpoint</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;meter&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">units</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">midpoint</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">midpoint</span><span class=\"p\">]</span>\n            <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">midpoint</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">position</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">.</span><span class=\"n\">Z</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"n\">distance</span><span class=\"p\">:</span>\n                <span class=\"n\">selected_edge</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">d</span>\n        <span class=\"k\">return</span> <span class=\"n\">selected_edge</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_resolve_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">Object3d</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">object</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_model_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve all model objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        model : bool, optional</span>\n<span class=\"sd\">            Whether to retrieve all model objects. The default is ``True``. When ``False``,</span>\n<span class=\"sd\">            all non-model objects are retrieved.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of retrieved objects.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">list_objs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"o\">==</span> <span class=\"n\">model</span><span class=\"p\">:</span>\n                <span class=\"n\">list_objs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">list_objs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"p\">,</span> <span class=\"n\">defaultmatname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check for a material name.</span>\n\n<span class=\"sd\">        If a material name exists, it is assigned. Otherwise, the material</span>\n<span class=\"sd\">        specified as the default is assigned.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        matname : str</span>\n<span class=\"sd\">            Name of the material.</span>\n<span class=\"sd\">        defaultmatname : str</span>\n<span class=\"sd\">            Name of the default material to assign if ``metname`` does not exist.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str or bool</span>\n<span class=\"sd\">            String if a material name, Boolean if the material is a dielectric.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">matname</span><span class=\"p\">,</span> <span class=\"n\">Material</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">matname</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">.</span><span class=\"n\">is_dielectric</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">matname</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">matname</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"p\">[</span><span class=\"n\">matname</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"p\">[</span><span class=\"n\">matname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"p\">[</span><span class=\"n\">matname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">is_dielectric</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"p\">[</span><span class=\"n\">matname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Material </span><span class=\"si\">%s</span><span class=\"s2\"> doesn not exists. Assigning default material&quot;</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">defaultmatname</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">material_keys</span><span class=\"p\">[</span><span class=\"n\">defaultmatname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">is_dielectric</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">defaultmatname</span><span class=\"p\">,</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_solids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solids&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Get Solids is failing&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># In IronPython True is returned when no sheets are present</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_sheets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sheets&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Get Sheets is failing&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># In IronPython True is returned when no sheets are present</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_lines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lines&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Get Lines is failing&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># In IronPython True is returned when no lines are present</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Points&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Get Points is failing&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># In IronPython True is returned when no points are present</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_unclassified</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Unclassified&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unclassified is failing&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">test</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># In IronPython True is returned when no unclassified are present</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_object_types</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_solids</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_sheets</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_lines</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_points</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_refresh_unclassified</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solids</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sheets</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unclassified</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">Object3d</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">new_id</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">new_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">o</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_id</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_user_defined_component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"n\">native_component_properties</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_native_component_properties</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">native_component_properties</span><span class=\"p\">:</span>\n                <span class=\"n\">component_type</span> <span class=\"o\">=</span> <span class=\"n\">native_component_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;NativeComponentDefinitionProvider&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">UserDefinedComponent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">native_component_properties</span><span class=\"p\">,</span> <span class=\"n\">component_type</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">UserDefinedComponent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">o</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_point_names</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">point</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">point</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_refresh_all_ids_from_aedt_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;ModelSetup&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Groups&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">groups</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;ToplevelParts&quot;</span><span class=\"p\">][</span>\n                <span class=\"s2\">&quot;GeometryPart&quot;</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;ToplevelParts&quot;</span><span class=\"p\">][</span>\n            <span class=\"s2\">&quot;GeometryPart&quot;</span>\n        <span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                <span class=\"n\">attribs</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">attribs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span>\n                    <span class=\"s2\">&quot;ToplevelParts&quot;</span>\n                <span class=\"p\">][</span><span class=\"s2\">&quot;GeometryPart&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span><span class=\"p\">:</span>\n                <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_part_coordinate_system</span> <span class=\"o\">=</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;PartCoordinateSystem&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;NonModel&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;Flags&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_model</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_model</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;Wireframe&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;Flags&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_wireframe</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_wireframe</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">groupname</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n                <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">groups</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;GroupId&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s2\">&quot;GroupID&quot;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">groupname</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n\n                <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_m_groupName</span> <span class=\"o\">=</span> <span class=\"n\">groupname</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_color</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_color</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_surface_material</span> <span class=\"o\">=</span> <span class=\"n\">attribs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SurfaceMaterialValue&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_surface_material</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_surface_material</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_surface_material</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;MaterialValue&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">attribs</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"n\">attribs</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaterialValue&quot;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"n\">attribs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;MaterialName&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n                <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">_is_updated</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">matname</span><span class=\"p\">:</span>\n            <span class=\"n\">matname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defaultmaterial</span>\n\n        <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">is_dielectric</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_material</span><span class=\"p\">(</span><span class=\"n\">matname</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defaultmaterial</span><span class=\"p\">)</span>\n\n        <span class=\"n\">solve_inside</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_dielectric</span><span class=\"p\">:</span>\n            <span class=\"n\">solve_inside</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">material_keys</span><span class=\"p\">[</span><span class=\"n\">material</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">material_appearance</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(132 132 193)&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">material</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;vacuum&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;air&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;glass&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;water_distilled&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;water_fresh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;water_sea&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">transparency</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">transparency</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:Attributes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Flags:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">flags</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Color:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">color</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Transparency:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">transparency</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;PartCoordinateSystem:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SolveInside:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">solve_inside</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2019.3&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;MaterialValue:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">material</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">),</span>\n                <span class=\"s2\">&quot;UDMId:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SurfaceMaterialValue:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Steel-oxidised-surface&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;MaterialName:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2021.2&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;ShellElement:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ShellElementThickness:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;IsMaterialEditable:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;UseMaterialAppearance:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;IsLightweight:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">args</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_crosssection_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">topwidth</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"p\">,</span> <span class=\"n\">bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate the properties array for the polyline cross-section.&quot;&quot;&quot;</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylineXSection&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Set the default section type to &quot;None&quot;</span>\n        <span class=\"n\">section_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_type</span><span class=\"p\">:</span>\n            <span class=\"n\">section_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;None&quot;</span>\n\n        <span class=\"c1\"># Set the default orientation to &quot;Auto&quot;</span>\n        <span class=\"n\">section_orient</span> <span class=\"o\">=</span> <span class=\"n\">orient</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_orient</span><span class=\"p\">:</span>\n            <span class=\"n\">section_orient</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Auto&quot;</span>\n\n        <span class=\"c1\"># Set the default bend-type to &quot;Corner&quot;</span>\n        <span class=\"n\">section_bend</span> <span class=\"o\">=</span> <span class=\"n\">bend_type</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_bend</span><span class=\"p\">:</span>\n            <span class=\"n\">section_bend</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Corner&quot;</span>\n\n        <span class=\"c1\"># Ensure number-of segments is valid</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_seg</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">num_seg</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Number of segments for a cross-section must be 0 or greater than 2.&quot;</span>\n\n        <span class=\"n\">model_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionType:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_type</span><span class=\"p\">]</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionOrient:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_orient</span><span class=\"p\">]</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionWidth:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)]</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionTopWidth:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">topwidth</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)]</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionHeight:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)]</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionNumSegments:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num_seg</span><span class=\"p\">)]</span>\n        <span class=\"n\">arg_str</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;XSectionBendType:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_bend</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">arg_str</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">units</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">xpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">ypos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ypos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">xpos</span><span class=\"p\">,</span> <span class=\"n\">ypos</span><span class=\"p\">,</span> <span class=\"n\">zpos</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_str_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theList</span><span class=\"p\">):</span>\n        <span class=\"n\">szList</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">theList</span><span class=\"p\">:</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">szList</span><span class=\"p\">):</span>\n                <span class=\"n\">szList</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;,&quot;</span>\n            <span class=\"n\">szList</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">szList</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_find_object_from_edge_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lval</span><span class=\"p\">):</span>\n        <span class=\"n\">objList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">objListSheets</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sheet_names</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objListSheets</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">objList</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">objListSheets</span><span class=\"p\">)</span>\n        <span class=\"n\">objListSolids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_names</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objListSolids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">objList</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">objListSolids</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objList</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEdgeIDsFromObject</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">lval</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">obj</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_find_object_from_face_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lval</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">objList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">objListSheets</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sheet_names</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objListSheets</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">objList</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">objListSheets</span><span class=\"p\">)</span>\n            <span class=\"n\">objListSolids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_names</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objListSolids</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">objList</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">objListSolids</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objList</span><span class=\"p\">:</span>\n                <span class=\"n\">face_ids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">lval</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">face_ids</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_native_component_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get properties of native component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">           List of names for native components.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">native_comp_properties</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">comps3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Get3DComponentDefinitionNames</span><span class=\"p\">()</span>\n        <span class=\"n\">component_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">comp3d</span> <span class=\"ow\">in</span> <span class=\"n\">comps3d</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Get3DComponentInstanceNames</span><span class=\"p\">(</span><span class=\"n\">comp3d</span><span class=\"p\">):</span>\n                <span class=\"n\">component_name</span> <span class=\"o\">=</span> <span class=\"n\">comp3d</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">component_name</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">native_comp_entry</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span>\n                    <span class=\"s2\">&quot;SubModelDefinitions&quot;</span>\n                <span class=\"p\">][</span><span class=\"s2\">&quot;NativeComponentDefinition&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">native_comp_entry</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">native_comp_entry</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">)):</span>\n                        <span class=\"n\">native_comp_entry</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">native_comp_entry</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">native_comp_entry</span><span class=\"p\">:</span>\n                        <span class=\"n\">native_comp_name</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;SubmodelDefinitionName&quot;</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">native_comp_name</span> <span class=\"o\">==</span> <span class=\"n\">component_name</span><span class=\"p\">:</span>\n                            <span class=\"n\">native_comp_properties</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n                            <span class=\"k\">break</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Native component properties were not retrieved from the AEDT file.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">native_comp_properties</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partId</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the object ``Object3D`` for a given object ID or object name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partId : int or str</span>\n<span class=\"sd\">            Object ID or object name from the 3D modeler.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Returns None if the part ID or the object name is not found.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">partId</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">partId</span><span class=\"p\">]]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">partId</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">[</span><span class=\"n\">partId</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">,</span> <span class=\"n\">Object3d</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">partId</span><span class=\"p\">,</span> <span class=\"n\">UserDefinedComponent</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">partId</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/Primitives", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}