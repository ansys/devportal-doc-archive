{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.Modeler", "body": "<h1>Source code for pyaedt.modeler.Modeler</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains these classes: `BaseCoordinateSystem`, `FaceCoordinateSystem`, `CoordinateSystem`, `Modeler`,</span>\n<span class=\"sd\">`Position`, and `SweepOptions`.</span>\n\n<span class=\"sd\">This modules provides functionalities for the 3D Modeler, 2D Modeler,</span>\n<span class=\"sd\">3D Layout Modeler, and Circuit Modeler.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AEDT_UNITS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.DataHandlers</span> <span class=\"kn\">import</span> <span class=\"n\">_dict2arg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">PropsManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_pythonver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.GeometryOperators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">EdgePrimitive</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">FacePrimitive</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">Object3d</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">VertexPrimitive</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CsProps</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;AEDT Cooardinate System Internal Parameters.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_cs</span><span class=\"o\">.</span><span class=\"n\">auto_update</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_cs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_cs</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Update of </span><span class=\"si\">%s</span><span class=\"s2\"> Failed. Check needed arguments&quot;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cs_object</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">)):</span>\n                    <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">CsProps</span><span class=\"p\">(</span><span class=\"n\">cs_object</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_cs</span> <span class=\"o\">=</span> <span class=\"n\">cs_object</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setitem_without_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ListsProps</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;AEDT Lists Internal Parameters.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_lists</span><span class=\"o\">.</span><span class=\"n\">auto_update</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_lists</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_lists</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Update of </span><span class=\"si\">%s</span><span class=\"s2\"> Failed. Check needed arguments&quot;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cs_object</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">)):</span>\n                    <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">CsProps</span><span class=\"p\">(</span><span class=\"n\">cs_object</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pyaedt_lists</span> <span class=\"o\">=</span> <span class=\"n\">cs_object</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setitem_without_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseCoordinateSystem</span><span class=\"p\">(</span><span class=\"n\">PropsManager</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Base methods common to FaceCoordinateSystem and CoordinateSystem.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    modeler :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n<span class=\"sd\">    props : dict, optional</span>\n<span class=\"sd\">        Dictionary of properties. The default is ``None``.</span>\n<span class=\"sd\">    name : optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span> <span class=\"o\">=</span> <span class=\"n\">modeler</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dimension argument.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value :</span>\n\n<span class=\"sd\">        units : optional</span>\n<span class=\"sd\">             The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">units</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete the coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Clean all coordinate systems of the design.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Maxwell2d</span>\n<span class=\"sd\">        &gt;&gt;&gt; app = Maxwell2d()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cs_copy = [i for i in app.modeler.coordinate_systems]</span>\n<span class=\"sd\">        &gt;&gt;&gt; [i.delete() for i in cs_copy]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;ref_cs&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">cs</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">)):</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">[</span><span class=\"n\">cs</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Coordinate system does not exist&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_as_working_cs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the coordinate system as the working coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetWCS</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SetWCS Parameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Working Coordinate System:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;RegionDepCSOk:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update properties of the coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the coordinate system.</span>\n<span class=\"sd\">        arg : list</span>\n<span class=\"sd\">            List of the properties to update. For example,</span>\n<span class=\"sd\">            ``[&quot;NAME:ChangedProps&quot;, [&quot;NAME:Mode&quot;, &quot;Value:=&quot;, &quot;Axis/Position&quot;]]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of changed properties of the coordinate system.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DCSTab&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">arg</span><span class=\"p\">]]</span>\n        <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">newname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Rename the coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        newname : str</span>\n<span class=\"sd\">            New name for the coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">newname</span><span class=\"p\">]])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">newname</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"n\">BaseCoordinateSystem</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages face coordinate system data and execution.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    modeler :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n<span class=\"sd\">    props : dict, optional</span>\n<span class=\"sd\">        Dictionary of properties. The default is ``None``.</span>\n<span class=\"sd\">    name : optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    face_id : int</span>\n<span class=\"sd\">        Id of the face where the Face Coordinate System is laying.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">face_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">BaseCoordinateSystem</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"n\">face_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">CsProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;KernelVersion&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;KernelVersion&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_part_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Internally get the part name which the face belongs to&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_id</span><span class=\"p\">:</span>\n            <span class=\"c1\"># face_id has not been defined yet</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">face</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_id</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># part has not been found</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_face_paramenters</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Internal named array for paramenteers of the face coordinate system.&quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Name:FaceCSParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_attributes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Internal named array for attributes of the face coordinate system.&quot;&quot;&quot;</span>\n        <span class=\"n\">coordinateSystemAttributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Attributes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PartName:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_part_name</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">coordinateSystemAttributes</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">axis_position</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">always_move_to_end</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a face coordinate system.</span>\n<span class=\"sd\">        The face coordinate has always the Z axis parallel to face normal.</span>\n<span class=\"sd\">        The X and Y axis lie on the face plane.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face : int, FacePrimitive</span>\n<span class=\"sd\">            Face where the coordinate system is defined.</span>\n<span class=\"sd\">        origin : int, FacePrimitive, EdgePrimitive, VertexPrimitive</span>\n<span class=\"sd\">            Specify the coordinate system origin. The origin must belong to the face where the</span>\n<span class=\"sd\">            coordinate system is defined.</span>\n<span class=\"sd\">            If a face is specified, the origin is placed on the face center. It must be the same as ``face``.</span>\n<span class=\"sd\">            If an edge is specified, the origin is placed on the edge midpoint.</span>\n<span class=\"sd\">            If a vertex is specified, the origin is placed on the vertex.</span>\n<span class=\"sd\">        axis_position : int, FacePrimitive, EdgePrimitive, VertexPrimitive</span>\n<span class=\"sd\">            Specify where the X or Y axis is pointing. The position must belong to the face where the</span>\n<span class=\"sd\">            coordinate system is defined.</span>\n<span class=\"sd\">            Select which axis is considered with the option ``axix``.</span>\n<span class=\"sd\">            If a face is specified, the position is placed on the face center. It must be the same as ``face``.</span>\n<span class=\"sd\">            If an edge is specified, the position is placed on the edce midpoint.</span>\n<span class=\"sd\">            If a vertex is specified, the position is placed on the vertex.</span>\n<span class=\"sd\">        axis : str, optional</span>\n<span class=\"sd\">            Select which axis is considered for positioning. Possible values are ``&quot;X&quot;`` and ``&quot;Y&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;X&quot;``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the coordinate system. The default is ``None``.</span>\n<span class=\"sd\">        offset : list, optional</span>\n<span class=\"sd\">            List of the ``[x, y]`` coordinates specifying the offset of the coordinate system origin.</span>\n<span class=\"sd\">            The offset specified in the face coordinate system reference.</span>\n<span class=\"sd\">            The default is ``[0, 0]``.</span>\n<span class=\"sd\">        rotation : float, optional</span>\n<span class=\"sd\">            Rotation angle of the coordinate system around its Z axis. Angle is in degrees.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        always_move_to_end : bool, optional</span>\n<span class=\"sd\">            If ``True`` the Face Coordinate System creation operation will always be moved to the end of subsequent</span>\n<span class=\"sd\">            objects operation. This will guarantee that the coordinate system will remain solidal with the object</span>\n<span class=\"sd\">            face. If ``False`` the option &quot;Always Move CS to End&quot; is set to off. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">face_id</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unable to find reference face.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"n\">face_id</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">origin_id</span> <span class=\"o\">=</span> <span class=\"n\">origin</span>\n            <span class=\"n\">o_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_type_from_id</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">origin_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">origin_id</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unable to find origin reference.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">o_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_type_from_object</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">o_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Face&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">origin_position_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;FaceCenter&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">o_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Edge&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">origin_position_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;EdgeCenter&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">o_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Vertex&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">origin_position_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;OnVertex&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;origin must identify either Face or Edge or Vertex.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">axis_position</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">axis_position_id</span> <span class=\"o\">=</span> <span class=\"n\">axis_position</span>\n            <span class=\"n\">o_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_type_from_id</span><span class=\"p\">(</span><span class=\"n\">axis_position</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">axis_position_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">axis_position</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">axis_position_id</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unable to find origin reference.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">o_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_type_from_object</span><span class=\"p\">(</span><span class=\"n\">axis_position</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">o_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Face&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">axis_position_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;FaceCenter&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">o_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Edge&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">axis_position_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;EdgeCenter&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">o_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Vertex&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">axis_position_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;OnVertex&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;axis_position must identify either Face or Edge or Vertex.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">axis</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;X&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">axis</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;axis must be either &#39;X&#39; or &#39;Y&#39;.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Face_CS&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">offset</span><span class=\"p\">:</span>\n            <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"n\">originParameters</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;IsAttachedToEntity&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;EntityID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">origin_id</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;FacetedBodyTriangleIndex&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;TriangleVertexIndex&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;PositionType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">origin_position_type</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;UParam&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;VParam&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XPosition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0&quot;</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YPosition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0&quot;</span>\n        <span class=\"n\">originParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;ZPosition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0&quot;</span>\n\n        <span class=\"n\">positioningParameters</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;IsAttachedToEntity&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;EntityID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">axis_position_id</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;FacetedBodyTriangleIndex&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;TriangleVertexIndex&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;PositionType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">axis_position_type</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;UParam&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;VParam&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XPosition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0&quot;</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YPosition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0&quot;</span>\n        <span class=\"n\">positioningParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;ZPosition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0&quot;</span>\n\n        <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Origin&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">originParameters</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;MoveToEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">always_move_to_end</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">face_id</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;AxisPosn&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">positioningParameters</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;WhichAxis&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">axis</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;ZRotationAngle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;deg&quot;</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XOffset&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">offset</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YOffset&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">offset</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;AutoAxis&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">CsProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateFaceCS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_face_paramenters</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_type_from_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the entity type from the id&quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">obj_id</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;3dObject&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">face</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">obj_id</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"s2\">&quot;Face&quot;</span>\n                <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">face</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">obj_id</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"s2\">&quot;Edge&quot;</span>\n                    <span class=\"k\">for</span> <span class=\"n\">vertex</span> <span class=\"ow\">in</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">obj_id</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"s2\">&quot;Vertex&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot find entity id </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">obj_id</span><span class=\"p\">))</span>  <span class=\"c1\"># pragma: no cover</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_type_from_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the entity type from the object&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">FacePrimitive</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Face&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">EdgePrimitive</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Edge&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">VertexPrimitive</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Vertex&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Object3d</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;3dObject&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot detect the entity type.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Z Rotation angle&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;ZRotationAngle&quot;</span><span class=\"p\">]]]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;Z Rotation angle&#39; parameter must be a string in the format &#39;10deg&#39;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Position Offset XY&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XOffset&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YOffset&quot;</span><span class=\"p\">]],</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;XOffset&#39; and &#39;YOffset&#39; parameters must be a string in the format &#39;1.3mm&#39;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Axis&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;WhichAxis&quot;</span><span class=\"p\">]]])</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;WhichAxis&#39; parameter must be either &#39;X&#39; or &#39;Y&#39;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<div class=\"viewcode-block\" id=\"CoordinateSystem\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Modeler.CoordinateSystem/#pyaedt.modeler.Model3D.CoordinateSystem\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">CoordinateSystem</span><span class=\"p\">(</span><span class=\"n\">BaseCoordinateSystem</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages coordinate system data and execution.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    modeler :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n<span class=\"sd\">    props : dict, optional</span>\n<span class=\"sd\">        Dictionary of properties. The default is ``None``.</span>\n<span class=\"sd\">    name : optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">BaseCoordinateSystem</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">CsProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quaternion</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;KernelVersion&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;KernelVersion&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"CoordinateSystem.update\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Modeler.CoordinateSystem.update/#pyaedt.modeler.Model3D.CoordinateSystem.update\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Reference CS&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span><span class=\"p\">]])</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Mode&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]]])</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Mode must be &#39;Axis/Position&#39;, &#39;Euler Angle ZYZ&#39; or &#39;Euler Angle ZXZ&#39;, not </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Origin&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;OriginX&quot;</span><span class=\"p\">]),</span>\n                <span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;OriginY&quot;</span><span class=\"p\">]),</span>\n                <span class=\"s2\">&quot;Z:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;OriginZ&quot;</span><span class=\"p\">]),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Axis/Position&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:X Axis&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]),</span>\n                    <span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]),</span>\n                    <span class=\"s2\">&quot;Z:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]),</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Y Point&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]),</span>\n                    <span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]),</span>\n                    <span class=\"s2\">&quot;Z:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]),</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Phi&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)])</span>\n\n            <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Theta&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)])</span>\n\n            <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Psi&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)])</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"CoordinateSystem.change_cs_mode\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Modeler.CoordinateSystem.change_cs_mode/#pyaedt.modeler.Model3D.CoordinateSystem.change_cs_mode\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change_cs_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode_type</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Change the mode of the coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        mode_type : int, optional</span>\n<span class=\"sd\">            Type of the mode. Options are:</span>\n\n<span class=\"sd\">            * ``0`` - Axis/Position</span>\n<span class=\"sd\">            * ``1`` - Euler Angle ZXZ</span>\n<span class=\"sd\">            * ``2`` - Euler Angle ZYZ</span>\n\n<span class=\"sd\">            The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">legacy_update</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">mode_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>  <span class=\"c1\"># &quot;Axis/Position&quot;</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Euler Angle ZXZ&quot;</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Euler Angle ZYZ&quot;</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Axis/Position&quot;</span>\n                <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">quaternion_to_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quaternion</span><span class=\"p\">)</span>\n                <span class=\"n\">xaxis</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n                <span class=\"n\">ypoint</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xaxis</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xaxis</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xaxis</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ypoint</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ypoint</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ypoint</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;axis&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">mode_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># &quot;Euler Angle ZXZ&quot;</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Euler Angle ZYZ&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZXZ&quot;</span>\n                <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">quaternion_to_euler_zxz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quaternion</span><span class=\"p\">)</span>\n                <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n                <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n                <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zxz&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Axis/Position&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZXZ&quot;</span>\n                <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">quaternion_to_euler_zxz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quaternion</span><span class=\"p\">)</span>\n                <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n                <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n                <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">)</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zxz&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">mode_type</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># &quot;Euler Angle ZYZ&quot;</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Euler Angle ZXZ&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZYZ&quot;</span>\n                <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">quaternion_to_euler_zyz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quaternion</span><span class=\"p\">)</span>\n                <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n                <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n                <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zyz&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Axis/Position&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZYZ&quot;</span>\n                <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">quaternion_to_euler_zyz</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quaternion</span><span class=\"p\">)</span>\n                <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n                <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n                <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">deg&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">)</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zyz&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;mode_type=0 for &quot;Axis/Position&quot;, =1 for &quot;Euler Angle ZXZ&quot;, =2 for &quot;Euler Angle ZYZ&quot;&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"n\">legacy_update</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"CoordinateSystem.create\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Modeler.CoordinateSystem.create/#pyaedt.modeler.Model3D.CoordinateSystem.create\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;axis&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s2\">&quot;iso&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">x_pointing</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">y_pointing</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">psi</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        origin : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the origin of the coordinate system.</span>\n<span class=\"sd\">            The default is ``None``, in which case ``[0, 0, 0]`` is used.</span>\n<span class=\"sd\">        reference_cs : str, optional</span>\n<span class=\"sd\">            Name of the reference coordinate system. The default is ``&quot;Global&quot;``.</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the coordinate system. The default is ``None``.</span>\n<span class=\"sd\">        mode : str, optional</span>\n<span class=\"sd\">            Definition mode. Options are ``&quot;view&quot;``, ``&quot;axis&quot;``, ``&quot;zxz&quot;``, ``&quot;zyz&quot;``,</span>\n<span class=\"sd\">            and ``&quot;axisrotation&quot;``. The default is ``&quot;axis&quot;``.</span>\n\n<span class=\"sd\">            * If ``mode=&quot;view&quot;``, specify ``view``.</span>\n<span class=\"sd\">            * If ``mode=&quot;axis&quot;``, specify ``x_pointing`` and ``y_pointing``.</span>\n<span class=\"sd\">            * If ``mode=&quot;zxz&quot;`` or ``mode=&quot;zyz&quot;``, specify ``phi``, ``theta``, and ``psi``.</span>\n<span class=\"sd\">            * If ``mode=&quot;axisrotation&quot;``, specify ``theta`` and ``u``.</span>\n\n<span class=\"sd\">            Parameters not needed by the specified mode are ignored.</span>\n<span class=\"sd\">            For back compatibility, ``view=&quot;rotate&quot;`` is the same as ``mode=&quot;axis&quot;``.</span>\n<span class=\"sd\">            The mode ``&quot;axisrotation&quot;`` is a coordinate system parallel</span>\n<span class=\"sd\">            to the global coordinate system centered in the global origin.</span>\n\n<span class=\"sd\">        view : str, optional</span>\n<span class=\"sd\">            View for the coordinate system if ``mode=&quot;view&quot;``. Options are</span>\n<span class=\"sd\">            ``&quot;XY&quot;``, ``&quot;XZ&quot;``, ``&quot;XY&quot;``, ``&quot;iso&quot;``, ``None``, and ``&quot;rotate&quot;``</span>\n<span class=\"sd\">            (obsolete). The default is ``&quot;iso&quot;``.</span>\n\n<span class=\"sd\">            .. note::</span>\n<span class=\"sd\">               Because the ``&quot;rotate&quot;`` option is obsolete, use ``mode=&quot;axis&quot;`` instead.</span>\n\n<span class=\"sd\">        x_pointing : list, optional</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates specifying the X axis</span>\n<span class=\"sd\">            pointing in the local coordinate system if ``mode=&quot;axis&quot;``.</span>\n<span class=\"sd\">            The default is ``[1, 0, 0]``.</span>\n<span class=\"sd\">        y_pointing : list, optional</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates specifying the Y axis</span>\n<span class=\"sd\">            pointing in the local coordinate system if ``mode=&quot;axis&quot;``.</span>\n<span class=\"sd\">            The default is ``[0, 1, 0]``.</span>\n<span class=\"sd\">        phi : float, optional</span>\n<span class=\"sd\">            Euler angle phi in degrees if ``mode=&quot;zxz&quot;`` or ``mode=&quot;zyz&quot;``.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        theta : float, optional</span>\n<span class=\"sd\">            Euler angle theta or rotation angle in degrees if ``mode=&quot;zxz&quot;``,</span>\n<span class=\"sd\">            ``mode=&quot;zyz&quot;``, or ``mode=&quot;axisrotation&quot;``. The default is ``0``.</span>\n<span class=\"sd\">        psi : float, optional</span>\n<span class=\"sd\">            Euler angle psi in degrees if ``mode=&quot;zxz&quot;`` or ``mode=&quot;zyz&quot;``.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        u : list</span>\n<span class=\"sd\">            List of the ``[ux, uy, uz]`` coordinates for the rotation axis</span>\n<span class=\"sd\">            if ``mode=&quot;zxz&quot;``. The default is ``[1, 0, 0]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">origin</span><span class=\"p\">:</span>\n            <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">x_pointing</span><span class=\"p\">:</span>\n            <span class=\"n\">x_pointing</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">y_pointing</span><span class=\"p\">:</span>\n            <span class=\"n\">y_pointing</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">u</span><span class=\"p\">:</span>\n            <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;rotate&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># legacy compatibility</span>\n            <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;axis&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;CS&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">originX</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">originY</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">originZ</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">orientationParameters</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;OriginX&quot;</span><span class=\"p\">:</span> <span class=\"n\">originX</span><span class=\"p\">,</span> <span class=\"s2\">&quot;OriginY&quot;</span><span class=\"p\">:</span> <span class=\"n\">originY</span><span class=\"p\">,</span> <span class=\"s2\">&quot;OriginZ&quot;</span><span class=\"p\">:</span> <span class=\"n\">originZ</span><span class=\"p\">})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">mode</span>\n        <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;view&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Axis/Position&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;XZ&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">view</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;iso&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-2mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mm&quot;</span>\n                <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0mm&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;With mode = &#39;view&#39;, specify view = &#39;XY&#39;, &#39;XZ&#39;, &#39;XY&#39;, &#39;iso&#39; &quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;axis&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Axis/Position&quot;</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">x_pointing</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">x_pointing</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">x_pointing</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">y_pointing</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">y_pointing</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">((</span><span class=\"n\">y_pointing</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;zxz&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZXZ&quot;</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;zyz&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZYZ&quot;</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;axisrotation&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n            <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">axis_angle_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">th</span><span class=\"p\">)</span>\n            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">quaternion_to_euler_zyz</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Euler Angle ZYZ&quot;</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">orientationParameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Specify the mode = &#39;view&#39;, &#39;axis&#39;, &#39;zxz&#39;, &#39;zyz&#39;, &#39;axisrotation&#39; &quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">CsProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">orientationParameters</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateRelativeCS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_orientation</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"c1\"># this workaround is necessary because the reference CS is ignored at creation, it needs to be modified later</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span> <span class=\"o\">=</span> <span class=\"n\">reference_cs</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">quaternion</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Quaternion computed based on specific axis mode.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;axis&quot;</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;view&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisXvec&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisYvec&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;XAxisZvec&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisXvec&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisYvec&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">y3</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;YAxisZvec&quot;</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x1</span>\n            <span class=\"n\">x_pointing_num</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x2</span>\n            <span class=\"n\">x_pointing_num</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x3</span>\n            <span class=\"n\">x_pointing_num</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y1</span>\n            <span class=\"n\">y_pointing_num</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y2</span>\n            <span class=\"n\">y_pointing_num</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y3</span>\n            <span class=\"n\">y_pointing_num</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">pointing_to_axis</span><span class=\"p\">(</span><span class=\"n\">x_pointing_num</span><span class=\"p\">,</span> <span class=\"n\">y_pointing_num</span><span class=\"p\">)</span>\n            <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">axis_to_euler_zyz</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quaternion</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">euler_zyz_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">)</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;zxz&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quaternion</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">euler_zxz_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">)</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;zyz&quot;</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;axisrotation&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Psi&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quaternion</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">euler_zyz_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">)</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quaternion</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_orientation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Internal named array for orientation of the coordinate system.&quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Name:RelativeCSParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_attributes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Internal named array for attributes of the coordinate system.&quot;&quot;&quot;</span>\n        <span class=\"n\">coordinateSystemAttributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Attributes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">coordinateSystemAttributes</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Lists</span><span class=\"p\">(</span><span class=\"n\">PropsManager</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages Lists data and execution.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    modeler :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n<span class=\"sd\">    props : dict, optional</span>\n<span class=\"sd\">        Dictionary of properties. The default is ``None``.</span>\n<span class=\"sd\">    name : optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span> <span class=\"o\">=</span> <span class=\"n\">modeler</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">ListsProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the List.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># self._change_property(self.name, [&quot;NAME:ChangedProps&quot;, [&quot;NAME:Reference CS&quot;, &quot;Value:=&quot;, self.ref_cs]])</span>\n        <span class=\"n\">object_list_new</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_list_verification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;List&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Object&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">object_list_new</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">object_list_new</span><span class=\"p\">)</span>\n        <span class=\"n\">argument1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">argument2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:GeometryEntityListParameters&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;EntityType:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">],</span>\n            <span class=\"s2\">&quot;EntityList:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">object_list_new</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">EditEntityList</span><span class=\"p\">(</span><span class=\"n\">argument1</span><span class=\"p\">,</span> <span class=\"n\">argument2</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Input List not correct for the type &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">object_list</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Object&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a List.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_list : list</span>\n<span class=\"sd\">            List of ``[&quot;Obj1&quot;, &quot;Obj2&quot;]`` objects or face ID if type is &quot;Face&quot;.</span>\n<span class=\"sd\">            The default is ``None``, in which case all objects are selected.</span>\n<span class=\"sd\">        name : list, str</span>\n<span class=\"sd\">            List of names. The default is ``None``.</span>\n<span class=\"sd\">        type : str, optional</span>\n<span class=\"sd\">            List type. Options are ``&quot;Object&quot;``, ``&quot;Face&quot;``. The default is ``&quot;Object&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"nb\">type</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;List&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">object_list_new</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_list_verification</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">object_list_new</span><span class=\"p\">:</span>\n            <span class=\"n\">olist</span> <span class=\"o\">=</span> <span class=\"n\">object_list_new</span>\n            <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Object&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">olist</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">object_list_new</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateEntityList</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:GeometryEntityListParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EntityType:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EntityList:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">olist</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Attributes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;List&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">object_list_new</span>\n\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">get_entitylist_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">ListsProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">user_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete the List.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">user_lists</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">newname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Rename the List.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        newname : str</span>\n<span class=\"sd\">            New name for the List.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">argument</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Geometry3DListTab&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">newname</span><span class=\"p\">]],</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">newname</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_list_verification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">list_type</span><span class=\"p\">):</span>\n        <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">object_list_new</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">list_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Object&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">]</span>\n            <span class=\"n\">check</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span> <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">obj_names</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">check</span><span class=\"p\">:</span>\n                <span class=\"n\">object_list_new</span> <span class=\"o\">=</span> <span class=\"n\">check</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">list_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Face&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">object_list_new</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">isnumeric</span><span class=\"p\">():</span>\n                        <span class=\"n\">object_list_new</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">))</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">:</span>\n                            <span class=\"n\">obj_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">element</span><span class=\"p\">]</span>\n                            <span class=\"k\">for</span> <span class=\"n\">sel</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">:</span>\n                                <span class=\"k\">if</span> <span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">obj_id</span><span class=\"p\">:</span>\n                                    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                                        <span class=\"n\">object_list_new</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n                                    <span class=\"k\">break</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">object_list_new</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">object_list_new</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Modeler</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides the `Modeler` application class that other `Modeler` classes inherit.</span>\n\n<span class=\"sd\">    This class is inherited in the caller application and is accessible through the modeler variable</span>\n<span class=\"sd\">    object( eg. ``hfss.modeler``).</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Maxwell2d</span>\n<span class=\"sd\">    &gt;&gt;&gt; app = Maxwell2d()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_modeler = app.modeler</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n\n    <span class=\"c1\"># Properties derived from internal parent data</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_desktop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Desktop.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_desktop</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Logger.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_odesign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Design.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_oimportexport</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Import/Export.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">projdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Project directory.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_path</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GeometryModeler</span><span class=\"p\">(</span><span class=\"n\">Modeler</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages the main AEDT Modeler functionalities for geometry-based designs.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app :</span>\n<span class=\"sd\">        Inherited parent object.</span>\n<span class=\"sd\">    is3d : bool, optional</span>\n<span class=\"sd\">        Whether the model is 3D. The default is ``True``.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">is3d</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odefinition_manager</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odefinition_manager</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_omaterial_manager</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">omaterial_manager</span>\n        <span class=\"n\">Modeler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO Refactor this as a dictionary with names as key</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_lists</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is3d</span> <span class=\"o\">=</span> <span class=\"n\">is3d</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Coordinate Systems.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_coordinate_systems</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_coordinates_data</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_coordinate_systems</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">user_lists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;User Lists.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_lists</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_lists</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_lists_data</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_lists</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">oeditor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Aedt oEditor Module.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor = oDesign.SetActiveEditor(&quot;3D Modeler&quot;)&quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oeditor</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Material library used in the project.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.MaterialLib.Materials`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_convert_list_to_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_list</span><span class=\"p\">,</span> <span class=\"n\">convert_objects_ids_to_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert a list to IDs.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.5.0</span>\n<span class=\"sd\">           Use :func:`pyaedt.application.modeler.convert_to_selections` instead.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_list : list</span>\n<span class=\"sd\">           List of object IDs.</span>\n<span class=\"sd\">        convert_objects_ids_to_name : bool, optional</span>\n<span class=\"sd\">             Whether to convert the object IDs to object names.</span>\n<span class=\"sd\">             The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of object names.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`_convert_list_to_ids` is deprecated. Use `convert_to_selections` instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n\n        <span class=\"n\">output_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n            <span class=\"n\">input_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">input_list</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">input_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Object3d</span><span class=\"p\">:</span>\n                <span class=\"n\">output_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">input_list</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">EdgePrimitive</span> <span class=\"ow\">or</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">FacePrimitive</span> <span class=\"ow\">or</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">VertexPrimitive</span><span class=\"p\">:</span>\n                <span class=\"n\">output_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">input_list</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">int</span> <span class=\"ow\">and</span> <span class=\"n\">convert_objects_ids_to_name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                    <span class=\"n\">output_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">output_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">output_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">output_list</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_coordinates_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">coord</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">id2name</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">}</span>\n        <span class=\"n\">name2refid</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;ModelSetup&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">:</span>\n            <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryOperations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;CoordinateSystems&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">cs</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                        <span class=\"k\">if</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;OperationType&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;CreateRelativeCoordinateSystem&quot;</span><span class=\"p\">:</span>\n                            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;RelativeCSParameters&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">cs_id</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">id2name</span><span class=\"p\">[</span><span class=\"n\">cs_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                            <span class=\"n\">name2refid</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;ReferenceCoordSystemID&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">CoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                            <span class=\"k\">if</span> <span class=\"s2\">&quot;ZXZ&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]:</span>\n                                <span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zxz&quot;</span>\n                            <span class=\"k\">elif</span> <span class=\"s2\">&quot;ZYZ&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]:</span>\n                                <span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zyz&quot;</span>\n                            <span class=\"k\">else</span><span class=\"p\">:</span>\n                                <span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;axis&quot;</span>\n                        <span class=\"k\">elif</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;OperationType&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;CreateFaceCoordinateSystem&quot;</span><span class=\"p\">:</span>\n                            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">cs_id</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">id2name</span><span class=\"p\">[</span><span class=\"n\">cs_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                            <span class=\"n\">op_id</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">][</span><span class=\"s2\">&quot;PlaceHolderOperationID&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">geometry_part</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span>\n                                <span class=\"s2\">&quot;GeometryOperations&quot;</span>\n                            <span class=\"p\">][</span><span class=\"s2\">&quot;ToplevelParts&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryPart&quot;</span><span class=\"p\">]</span>\n                            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">geometry_part</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">geometry_part</span><span class=\"p\">[</span><span class=\"s2\">&quot;Operations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;FaceCSHolderOperation&quot;</span><span class=\"p\">]</span>\n                                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                    <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                        <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                                    <span class=\"k\">for</span> <span class=\"n\">iop</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"p\">:</span>\n                                        <span class=\"k\">if</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                            <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                            <span class=\"k\">break</span>\n                            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">geometry_part</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                                <span class=\"k\">for</span> <span class=\"n\">gp</span> <span class=\"ow\">in</span> <span class=\"n\">geometry_part</span><span class=\"p\">:</span>\n                                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">gp</span><span class=\"p\">[</span><span class=\"s2\">&quot;Operations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;FaceCSHolderOperation&quot;</span><span class=\"p\">]</span>\n                                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                        <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                            <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                                        <span class=\"k\">for</span> <span class=\"n\">iop</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"p\">:</span>\n                                            <span class=\"k\">if</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                                <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                                <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                                <span class=\"k\">break</span>\n                    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">cs</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">]:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;OperationType&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;CreateRelativeCoordinateSystem&quot;</span><span class=\"p\">:</span>\n                                <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;RelativeCSParameters&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">cs_id</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">id2name</span><span class=\"p\">[</span><span class=\"n\">cs_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                                <span class=\"n\">name2refid</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;ReferenceCoordSystemID&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">CoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                <span class=\"k\">if</span> <span class=\"s2\">&quot;ZXZ&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]:</span>\n                                    <span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zxz&quot;</span>\n                                <span class=\"k\">elif</span> <span class=\"s2\">&quot;ZYZ&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">]:</span>\n                                    <span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;zyz&quot;</span>\n                                <span class=\"k\">else</span><span class=\"p\">:</span>\n                                    <span class=\"n\">coord</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;axis&quot;</span>\n                            <span class=\"k\">elif</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;OperationType&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;CreateFaceCoordinateSystem&quot;</span><span class=\"p\">:</span>\n                                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">cs_id</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">id2name</span><span class=\"p\">[</span><span class=\"n\">cs_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                                <span class=\"n\">op_id</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;PlaceHolderOperationID&quot;</span><span class=\"p\">]</span>\n                                <span class=\"n\">geometry_part</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span>\n                                    <span class=\"s2\">&quot;GeometryOperations&quot;</span>\n                                <span class=\"p\">][</span><span class=\"s2\">&quot;ToplevelParts&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryPart&quot;</span><span class=\"p\">]</span>\n                                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">geometry_part</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">geometry_part</span><span class=\"p\">[</span><span class=\"s2\">&quot;Operations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;FaceCSHolderOperation&quot;</span><span class=\"p\">]</span>\n                                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                        <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                            <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                                        <span class=\"k\">for</span> <span class=\"n\">iop</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"p\">:</span>\n                                            <span class=\"k\">if</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                                <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                                <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                                <span class=\"k\">break</span>\n                                <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">geometry_part</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                                    <span class=\"k\">for</span> <span class=\"n\">gp</span> <span class=\"ow\">in</span> <span class=\"n\">geometry_part</span><span class=\"p\">:</span>\n                                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                                            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">gp</span><span class=\"p\">[</span><span class=\"s2\">&quot;Operations&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;FaceCSHolderOperation&quot;</span><span class=\"p\">]</span>\n                                        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                                            <span class=\"k\">continue</span>\n                                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                            <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                                <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                                <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                                            <span class=\"k\">for</span> <span class=\"n\">iop</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"p\">:</span>\n                                                <span class=\"k\">if</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">op_id</span><span class=\"p\">:</span>\n                                                    <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">iop</span><span class=\"p\">[</span><span class=\"s2\">&quot;FaceCSParameters&quot;</span><span class=\"p\">]</span>\n                                                    <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                                                    <span class=\"k\">break</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n            <span class=\"k\">for</span> <span class=\"n\">cs</span> <span class=\"ow\">in</span> <span class=\"n\">coord</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">,</span> <span class=\"n\">CoordinateSystem</span><span class=\"p\">):</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span> <span class=\"o\">=</span> <span class=\"n\">id2name</span><span class=\"p\">[</span><span class=\"n\">name2refid</span><span class=\"p\">[</span><span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]]</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"k\">pass</span>\n        <span class=\"n\">coord</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">coord</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_lists_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve user object list data.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        [Dict with List information]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">design_lists</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;GeometryOperations&quot;</span>\n            <span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;GeometryEntityLists&quot;</span>\n            <span class=\"n\">key3</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;GeometryEntityListOperation&quot;</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">entity_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModelSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryCore&quot;</span><span class=\"p\">][</span><span class=\"n\">key1</span><span class=\"p\">][</span><span class=\"n\">key2</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">entity_list</span><span class=\"p\">:</span>\n                    <span class=\"n\">geom_entry</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">entity_list</span><span class=\"p\">[</span><span class=\"n\">key3</span><span class=\"p\">])</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">geom_entry</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">)):</span>\n                        <span class=\"n\">geom_entry</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">geom_entry</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">geom_entry</span><span class=\"p\">:</span>\n                        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Attributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n                        <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">]</span>\n                        <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;GeometryEntityListParameters&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;EntityType&quot;</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Object&quot;</span><span class=\"p\">:</span>\n                            <span class=\"n\">name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                            <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;GeometryEntityListParameters&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;EntityList&quot;</span><span class=\"p\">]:</span>\n                                <span class=\"n\">element_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByID</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">))</span>\n                                <span class=\"n\">name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">element_name</span><span class=\"p\">)</span>\n                            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;List&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name_list</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;List&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;GeometryEntityListParameters&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;EntityList&quot;</span><span class=\"p\">]</span>\n                        <span class=\"n\">design_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Lists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lists were not retrieved from AEDT file&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">design_lists</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">owner</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">instance</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Model units as a string. For example ``&quot;mm&quot;``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelUnits</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SetModelUnits</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetModelUnits</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@model_units</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">units</span> <span class=\"ow\">in</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Invalid units string </span><span class=\"si\">{0}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetModelUnits</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Units Parameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Units:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Rescale:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">selections</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Selections.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetSelections</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetSelections</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">obounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Bounding box.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetModelBoundingBox</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fit_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Fit all.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.FitAll</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FitAll</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dimension</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dimensions.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Dimensionality, which is either ``&quot;2D&quot;`` or ``&quot;3D&quot;``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.Is2D</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Is2D</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;2D&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;3D&quot;</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;2D&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;3D&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">design_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Design type.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetDesignType</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">geometry_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Geometry mode.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetGeometryMode&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">GetGeometryMode</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solid_bodies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of Object Names.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            Non-model objects are also returned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list os str</span>\n<span class=\"sd\">            List of object names with the object name as the key.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetObjectsInGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dimension</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;3D&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solids&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sheets&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_find_perpendicular_points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face</span><span class=\"p\">):</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">face</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">vertex</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexIDsFromFace</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)):</span>\n                <span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexPosition</span><span class=\"p\">(</span><span class=\"n\">vertex</span><span class=\"p\">))])</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Automatic A-B Assignment can be done only on face with more than 2 vertices.&quot;</span>\n        <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">a_end</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">b_end</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-10</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"n\">edge1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">v2</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">v2</span> <span class=\"o\">!=</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n                    <span class=\"n\">edge2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">edge1</span><span class=\"p\">,</span> <span class=\"n\">edge2</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                        <span class=\"n\">a_end</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n                        <span class=\"n\">b_end</span> <span class=\"o\">=</span> <span class=\"n\">v2</span>\n                        <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">a_end</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">a_end</span><span class=\"p\">:</span>\n            <span class=\"n\">a_end</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">b_end</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">a_end</span><span class=\"p\">,</span> <span class=\"n\">b_end</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">a_end</span><span class=\"p\">,</span> <span class=\"n\">b_end</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cover_lines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selection</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Cover a closed line and transform it to sheet.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        selection : str, int</span>\n<span class=\"sd\">            Polyline object to cover.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CoverLines</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">obj_to_cover</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CoverLines</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">obj_to_cover</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_coordinate_system</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;axis&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s2\">&quot;iso&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">x_pointing</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">y_pointing</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">psi</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        origin : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the origin of the</span>\n<span class=\"sd\">            coordinate system.  The default is ``None``, in which case</span>\n<span class=\"sd\">            ``[0, 0, 0]`` is used.</span>\n<span class=\"sd\">        reference_cs : str, optional</span>\n<span class=\"sd\">            Name of the reference coordinate system. The default is</span>\n<span class=\"sd\">            ``&quot;Global&quot;``.</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the coordinate system. The default is ``None``.</span>\n<span class=\"sd\">        mode : str, optional</span>\n<span class=\"sd\">            Definition mode. Options are ``&quot;view&quot;``, ``&quot;axis&quot;``,</span>\n<span class=\"sd\">            ``&quot;zxz&quot;``, ``&quot;zyz&quot;``, and ``&quot;axisrotation&quot;``. The default</span>\n<span class=\"sd\">            is ``&quot;axis&quot;``.  Enumerator ``pyaedt.generic.constants.CSMODE`` can be used.</span>\n\n<span class=\"sd\">            * If ``mode=&quot;view&quot;``, specify ``view``.</span>\n<span class=\"sd\">            * If ``mode=&quot;axis&quot;``, specify ``x_pointing`` and ``y_pointing``.</span>\n<span class=\"sd\">            * If ``mode=&quot;zxz&quot;`` or ``mode=&quot;zyz&quot;``, specify ``phi``, ``theta``, and ``psi``.</span>\n<span class=\"sd\">            * If ``mode=&quot;axisrotation&quot;``, specify ``theta`` and ``u``.</span>\n\n<span class=\"sd\">            Parameters not needed by the specified mode are ignored.</span>\n<span class=\"sd\">            For back compatibility, ``view=&quot;rotate&quot;`` is the same as</span>\n<span class=\"sd\">            ``mode=&quot;axis&quot;``.  The default mode, ``&quot;axisrotation&quot;``, is</span>\n<span class=\"sd\">            a coordinate system parallel to the global coordinate</span>\n<span class=\"sd\">            system centered in the global origin.</span>\n\n<span class=\"sd\">        view : str, int optional</span>\n<span class=\"sd\">            View for the coordinate system if ``mode=&quot;view&quot;``. Options</span>\n<span class=\"sd\">            are ``&quot;XY&quot;``, ``&quot;XZ&quot;``, ``&quot;XY&quot;``, ``&quot;iso&quot;``, ``None``, and</span>\n<span class=\"sd\">            ``&quot;rotate&quot;`` (obsolete). The default is ``&quot;iso&quot;``.</span>\n<span class=\"sd\">            Enumerator ``pyaedt.generic.constants.VIEW`` can be used.</span>\n\n<span class=\"sd\">            .. note::</span>\n<span class=\"sd\">               Because the ``&quot;rotate&quot;`` option is obsolete, use</span>\n<span class=\"sd\">               ``mode=&quot;axis&quot;`` instead.</span>\n\n<span class=\"sd\">        x_pointing : list, optional</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates specifying the X axis</span>\n<span class=\"sd\">            pointing in the global coordinate system if ``mode=&quot;axis&quot;``.</span>\n<span class=\"sd\">            The default is ``[1, 0, 0]``.</span>\n<span class=\"sd\">        y_pointing : list, optional</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates specifying the Y axis</span>\n<span class=\"sd\">            pointing in the global coordinate system if ``mode=&quot;axis&quot;``.</span>\n<span class=\"sd\">            The default is ``[0, 1, 0]``.</span>\n<span class=\"sd\">        phi : float, optional</span>\n<span class=\"sd\">            Euler angle phi in degrees if ``mode=&quot;zxz&quot;`` or ``mode=&quot;zyz&quot;``.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        theta : float, optional</span>\n<span class=\"sd\">            Euler angle theta or rotation angle in degrees if ``mode=&quot;zxz&quot;``,</span>\n<span class=\"sd\">            ``mode=&quot;zyz&quot;``, or ``mode=&quot;axisrotation&quot;``. The default is ``0``.</span>\n<span class=\"sd\">        psi : float, optional</span>\n<span class=\"sd\">            Euler angle psi in degrees if ``mode=&quot;zxz&quot;`` or ``mode=&quot;zyz&quot;``.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        u : list</span>\n<span class=\"sd\">            List of the ``[ux, uy, uz]`` coordinates for the rotation axis</span>\n<span class=\"sd\">            if ``mode=&quot;zxz&quot;``. The default is ``[1, 0, 0]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Modeler.CoordinateSystem`</span>\n<span class=\"sd\">            Coordinate System Object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRelativeCS</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">cs_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">cs_names</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;A coordinate system with the specified name already exists!&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"n\">CoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">cs</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n                <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"n\">origin</span><span class=\"p\">,</span>\n                <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"n\">reference_cs</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n                <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">view</span><span class=\"p\">,</span>\n                <span class=\"n\">x_pointing</span><span class=\"o\">=</span><span class=\"n\">x_pointing</span><span class=\"p\">,</span>\n                <span class=\"n\">y_pointing</span><span class=\"o\">=</span><span class=\"n\">y_pointing</span><span class=\"p\">,</span>\n                <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">,</span>\n                <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span>\n                <span class=\"n\">psi</span><span class=\"o\">=</span><span class=\"n\">psi</span><span class=\"p\">,</span>\n                <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">cs</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_face_coordinate_system</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">axis_position</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">always_move_to_end</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a face coordinate system.</span>\n<span class=\"sd\">        The face coordinate has always the Z axis parallel to face normal.</span>\n<span class=\"sd\">        The X and Y axis lie on the face plane.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face : int, FacePrimitive</span>\n<span class=\"sd\">            Face where the coordinate system is defined.</span>\n<span class=\"sd\">        origin : int, FacePrimitive, EdgePrimitive, VertexPrimitive</span>\n<span class=\"sd\">            Specify the coordinate system origin. The origin must belong to the face where the</span>\n<span class=\"sd\">            coordinate system is defined.</span>\n<span class=\"sd\">            If a face is specified, the origin is placed on the face center. It must be the same as ``face``.</span>\n<span class=\"sd\">            If an edge is specified, the origin is placed on the edge midpoint.</span>\n<span class=\"sd\">            If a vertex is specified, the origin is placed on the vertex.</span>\n<span class=\"sd\">        axis_position : int, FacePrimitive, EdgePrimitive, VertexPrimitive</span>\n<span class=\"sd\">            Specify where the X or Y axis is pointing. The position must belong to the face where the</span>\n<span class=\"sd\">            coordinate system is defined.</span>\n<span class=\"sd\">            Select which axis is considered with the option ``axix``.</span>\n<span class=\"sd\">            If a face is specified, the position is placed on the face center. It must be the same as ``face``.</span>\n<span class=\"sd\">            If an edge is specified, the position is placed on the edce midpoint.</span>\n<span class=\"sd\">            If a vertex is specified, the position is placed on the vertex.</span>\n<span class=\"sd\">        axis : str, optional</span>\n<span class=\"sd\">            Select which axis is considered for positioning. Possible values are ``&quot;X&quot;`` and ``&quot;Y&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;X&quot;``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the coordinate system. The default is ``None``.</span>\n<span class=\"sd\">        offset : list, optional</span>\n<span class=\"sd\">            List of the ``[x, y]`` coordinates specifying the offset of the coordinate system origin.</span>\n<span class=\"sd\">            The offset specified in the face coordinate system reference.</span>\n<span class=\"sd\">            The default is ``[0, 0]``.</span>\n<span class=\"sd\">        rotation : float, optional</span>\n<span class=\"sd\">            Rotation angle of the coordinate system around its Z axis. Angle is in degrees.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        always_move_to_end : bool, optional</span>\n<span class=\"sd\">            If ``True`` the Face Coordinate System creation operation will always be moved to the end of subsequent</span>\n<span class=\"sd\">            objects operation. This will guarantee that the coordinate system will remain solidal with the object</span>\n<span class=\"sd\">            face. If ``False`` the option &quot;Always Move CS to End&quot; is set to off. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Modeler.FaceCoordinateSystem`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">cs_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">cs_names</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;A coordinate system with the specified name already exists!&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"n\">FaceCoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">cs</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n                <span class=\"n\">face</span><span class=\"o\">=</span><span class=\"n\">face</span><span class=\"p\">,</span>\n                <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"n\">origin</span><span class=\"p\">,</span>\n                <span class=\"n\">axis_position</span><span class=\"o\">=</span><span class=\"n\">axis_position</span><span class=\"p\">,</span>\n                <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"n\">offset</span><span class=\"p\">,</span>\n                <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"n\">rotation</span><span class=\"p\">,</span>\n                <span class=\"n\">always_move_to_end</span><span class=\"o\">=</span><span class=\"n\">always_move_to_end</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">cs</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">global_to_cs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">ref_cs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Transform a point from the global coordinate system to another coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        point : list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates to transform.</span>\n<span class=\"sd\">        ref_cs : str</span>\n<span class=\"sd\">            Name of the destination reference system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the transformed ``[x, y, z]`` coordinates.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Point must be in format [x, y, z].&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">point</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Point must be in format [x, y, z].&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ref_cs</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">point</span>\n        <span class=\"n\">cs_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">ref_cs</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cs_names</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Specified coordinate system does not exist in the design.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">get_total_transformation</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">cs</span><span class=\"p\">):</span>\n            <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">cs_names</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">)</span>\n            <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">quaternion</span>\n            <span class=\"n\">ox</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;OriginX&quot;</span><span class=\"p\">],</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n                <span class=\"n\">variable_manager</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">oy</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;OriginY&quot;</span><span class=\"p\">],</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n                <span class=\"n\">variable_manager</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">oz</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;OriginZ&quot;</span><span class=\"p\">],</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n                <span class=\"n\">variable_manager</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ox</span><span class=\"p\">,</span> <span class=\"n\">oy</span><span class=\"p\">,</span> <span class=\"n\">oz</span><span class=\"p\">]</span>\n            <span class=\"n\">refcs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span>\n            <span class=\"k\">if</span> <span class=\"n\">refcs</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">get_total_transformation</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">refcs</span><span class=\"p\">)</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">q_rotation_inv</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">),</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">p2</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">get_total_transformation</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">ref_cs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the working coordinate system to another coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str, FaceCoordinateSystem, CoordinateSystem</span>\n<span class=\"sd\">            Name of the coordinate system to set as the working coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SetWCS</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">BaseCoordinateSystem</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetWCS</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SetWCS Parameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Working Coordinate System:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;RegionDepCSOk:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetWCS</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SetWCS Parameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Working Coordinate System:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;RegionDepCSOk:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_objects_deformation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign deformation objects to a Workbench link.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list</span>\n<span class=\"sd\">            List of the deformation objects to assign to the Workbench link.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.SetObjectDeformation</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Enabling deformation feedback&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">SetObjectDeformation</span><span class=\"p\">([</span><span class=\"s2\">&quot;EnabledObjects:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to enable the deformation dependence&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Successfully enabled deformation feedback&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_objects_temperature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">ambient_temp</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">create_project_var</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign temperatures to objects.</span>\n\n<span class=\"sd\">        The materials assigned to the objects must have a thermal modifier.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list</span>\n<span class=\"sd\">            List of objects.</span>\n<span class=\"sd\">        ambient_temp : float, optional</span>\n<span class=\"sd\">            Ambient temperature. The default is ``22``.</span>\n<span class=\"sd\">        create_project_var : bool, optional</span>\n<span class=\"sd\">            Whether to create a project variable for the ambient temperature.</span>\n<span class=\"sd\">            The default is ``False``. If ``True,`` ``$AmbientTemp`` is created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.SetObjectTemperature</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Set model temperature and enabling Thermal Feedback&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">create_project_var</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;$AmbientTemp&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ambient_temp</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;cel&quot;</span>\n            <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$AmbientTemp&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ambient_temp</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;cel&quot;</span>\n        <span class=\"n\">vargs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:TemperatureSettings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IncludeTemperatureDependence:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;EnableFeedback:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Temperatures:=&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">vargs2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">material_name</span>\n            <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">check_thermal_modifier</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">th</span><span class=\"p\">:</span>\n                <span class=\"n\">vargs2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n                <span class=\"n\">vargs2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">vargs2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vargs1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vargs2</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">SetObjectTemperature</span><span class=\"p\">(</span><span class=\"n\">vargs1</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to enable the temperature dependence&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Assigned Objects Temperature&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_sheet_from_object_closest_edge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">startobj</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"n\">portonplane</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a sheet from the edge closest to the object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        startobj : str</span>\n<span class=\"sd\">            Name of the starting object.</span>\n<span class=\"sd\">        endobject : str</span>\n<span class=\"sd\">            Name of the ending object.</span>\n<span class=\"sd\">        axisdir : int</span>\n<span class=\"sd\">           Axis direction. Options are ``0`` through ``5``.</span>\n<span class=\"sd\">        portonplane : bool</span>\n<span class=\"sd\">            Whether edges are to be on the plane orthogonal to the axis</span>\n<span class=\"sd\">            direction.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the sheet.</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of float values of the first edge midpoint.</span>\n<span class=\"sd\">            Point in ``[x, y, z]`` coordinates.</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of float values of the second edge midpoint.</span>\n<span class=\"sd\">            Point in ``[x, y, z]`` coordinates.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">parallel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_closest_edges</span><span class=\"p\">(</span><span class=\"n\">startobj</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">)</span>\n        <span class=\"n\">port_edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_equivalent_parallel_edges</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">portonplane</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"n\">startobj</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">port_edges</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">port_edges</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">port_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">out</span><span class=\"p\">:</span>\n                <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"n\">port_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n        <span class=\"n\">edge_0</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">edge_1</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">sheet_name</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">point0</span> <span class=\"o\">=</span> <span class=\"n\">edge_0</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n        <span class=\"n\">point1</span> <span class=\"o\">=</span> <span class=\"n\">edge_1</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">port_edges</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">point0</span><span class=\"p\">,</span> <span class=\"n\">point1</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_point_around</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"p\">,</span> <span class=\"n\">startposition</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">plane</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Find the point around an object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objectname : str</span>\n<span class=\"sd\">            Name of the object.</span>\n<span class=\"sd\">        startposition : list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the starting</span>\n<span class=\"sd\">            position of the object.</span>\n<span class=\"sd\">        offset :</span>\n<span class=\"sd\">            Offset to apply.</span>\n<span class=\"sd\">        plane : str</span>\n<span class=\"sd\">            Coordinate plane of the arc. Choices are ``&quot;YZ&quot;``,</span>\n<span class=\"sd\">            ``&quot;ZX&quot;``, and ``&quot;XY&quot;``.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the point.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">plane</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"n\">angle</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">360</span><span class=\"p\">:</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">startposition</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">startposition</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">objectname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">startposition</span><span class=\"p\">):</span>\n                    <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"mi\">400</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">angle</span> <span class=\"o\">+=</span> <span class=\"mi\">90</span>\n        <span class=\"k\">elif</span> <span class=\"n\">plane</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"n\">angle</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">360</span><span class=\"p\">:</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">startposition</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">startposition</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">objectname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">startposition</span><span class=\"p\">):</span>\n                    <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"mi\">400</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">angle</span> <span class=\"o\">+=</span> <span class=\"mi\">90</span>\n        <span class=\"k\">elif</span> <span class=\"n\">plane</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"n\">angle</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">360</span><span class=\"p\">:</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">startposition</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">startposition</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">offset</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">objectname</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bodynames_from_position</span><span class=\"p\">(</span><span class=\"n\">startposition</span><span class=\"p\">):</span>\n                    <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"mi\">400</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">angle</span> <span class=\"o\">+=</span> <span class=\"mi\">90</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_sheet_to_ground</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"p\">,</span> <span class=\"n\">groundname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sheet_dim</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a sheet between an object and a ground plane.</span>\n\n<span class=\"sd\">        The ground plane must be bigger than the object and perpendicular</span>\n<span class=\"sd\">        to one of the three axes.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objectname : str</span>\n<span class=\"sd\">            Name of the object.</span>\n<span class=\"sd\">        groundname : str, optional</span>\n<span class=\"sd\">            Name of the ground. The default is ``None``, in which case the</span>\n<span class=\"sd\">            bounding box is used.</span>\n<span class=\"sd\">        axisdir : int, optional</span>\n<span class=\"sd\">            Axis direction. Options are ``0`` through ``5``. The default is ``0``.</span>\n<span class=\"sd\">        sheet_dim : optional</span>\n<span class=\"sd\">            Sheet dimension in millimeters. The default is ``1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            ID of the sheet created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreatePolyline</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_cent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1e6</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_cent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"mf\">1e6</span><span class=\"p\">]</span>\n        <span class=\"n\">face_ob</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">objectname</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n            <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"o\">.</span><span class=\"n\">center</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">center</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"n\">axisdir</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">obj_cent</span><span class=\"p\">[</span><span class=\"n\">axisdir</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n                <span class=\"n\">obj_cent</span> <span class=\"o\">=</span> <span class=\"n\">center</span>\n                <span class=\"n\">face_ob</span> <span class=\"o\">=</span> <span class=\"n\">face</span>\n            <span class=\"k\">elif</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"n\">axisdir</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">obj_cent</span><span class=\"p\">[</span><span class=\"n\">axisdir</span><span class=\"p\">]:</span>\n                <span class=\"n\">obj_cent</span> <span class=\"o\">=</span> <span class=\"n\">center</span>\n                <span class=\"n\">face_ob</span> <span class=\"o\">=</span> <span class=\"n\">face</span>\n        <span class=\"n\">vertx</span> <span class=\"o\">=</span> <span class=\"n\">face_ob</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">vertx</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">groundname</span><span class=\"p\">:</span>\n            <span class=\"n\">gnd_cent</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">bounding</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">bounding</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]:</span>\n                    <span class=\"n\">gnd_cent</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">bounding</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]:</span>\n                    <span class=\"n\">gnd_cent</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ground_plate</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">groundname</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">gnd_cent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"mf\">1e6</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">gnd_cent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1e6</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1e6</span><span class=\"p\">]</span>\n            <span class=\"n\">face_gnd</span> <span class=\"o\">=</span> <span class=\"n\">ground_plate</span><span class=\"o\">.</span><span class=\"n\">faces</span>\n            <span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">face_gnd</span><span class=\"p\">:</span>\n                <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"o\">.</span><span class=\"n\">center</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">center</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"n\">axisdir</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">gnd_cent</span><span class=\"p\">[</span><span class=\"n\">axisdir</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n                    <span class=\"n\">gnd_cent</span> <span class=\"o\">=</span> <span class=\"n\">center</span>\n                <span class=\"k\">elif</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"n\">axisdir</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">gnd_cent</span><span class=\"p\">[</span><span class=\"n\">axisdir</span><span class=\"p\">]:</span>\n                    <span class=\"n\">gnd_cent</span> <span class=\"o\">=</span> <span class=\"n\">center</span>\n\n        <span class=\"n\">axisdist</span> <span class=\"o\">=</span> <span class=\"n\">obj_cent</span><span class=\"p\">[</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">-</span> <span class=\"n\">gnd_cent</span><span class=\"p\">[</span><span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">axisdist</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">axisdist</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">YZ</span>\n            <span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">axisdist</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">ZX</span>\n            <span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">axisdist</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span>\n            <span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">axisdist</span><span class=\"p\">]</span>\n\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_point_around</span><span class=\"p\">(</span><span class=\"n\">objectname</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">sheet_dim</span><span class=\"p\">,</span> <span class=\"n\">cs</span><span class=\"p\">)</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">])</span>\n        <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">([</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">p1</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_faceid_on_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objname</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the ID of the face on the axis.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objname : str</span>\n<span class=\"sd\">            Name of the object.</span>\n<span class=\"sd\">        axisdir : int</span>\n<span class=\"sd\">            Axis direction. Options are ``1`` through ``5``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            ID of the face.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_faces</span><span class=\"p\">(</span><span class=\"n\">objname</span><span class=\"p\">)</span>\n        <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">faces</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_face_center</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">face</span> <span class=\"ow\">and</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n                    <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"n\">f</span>\n                    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                <span class=\"k\">elif</span> <span class=\"n\">axisdir</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"ow\">and</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">axisdir</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"n\">axisdir</span><span class=\"p\">]:</span>\n                    <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"n\">f</span>\n                    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                <span class=\"k\">elif</span> <span class=\"n\">axisdir</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">axisdir</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">center</span><span class=\"p\">[</span><span class=\"n\">axisdir</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n                    <span class=\"n\">face</span> <span class=\"o\">=</span> <span class=\"n\">f</span>\n                    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"n\">face</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_microstrip_sheet_from_object_closest_edge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">startobj</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"n\">vfactor</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">hfactor</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">array1</span><span class=\"p\">,</span> <span class=\"n\">array2</span><span class=\"p\">,</span> <span class=\"n\">dup_factor</span><span class=\"p\">):</span>\n            <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">duplicate_along_line</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">array1</span><span class=\"p\">,</span> <span class=\"n\">dup_factor</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">duplicate_along_line</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">array2</span><span class=\"p\">,</span> <span class=\"n\">dup_factor</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">list_unite</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n            <span class=\"n\">list_unite</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unite</span><span class=\"p\">(</span><span class=\"n\">list_unite</span><span class=\"p\">)</span>\n\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-6</span>\n        <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">parallel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_closest_edges</span><span class=\"p\">(</span><span class=\"n\">startobj</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">)</span>\n        <span class=\"n\">port_edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_equivalent_parallel_edges</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"n\">startobj</span><span class=\"p\">,</span> <span class=\"n\">endobject</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">port_edges</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">sheet_name</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">point0</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n        <span class=\"n\">point1</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">midpoint</span>\n        <span class=\"nb\">len</span> <span class=\"o\">=</span> <span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"n\">vect</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">point1</span><span class=\"p\">,</span> <span class=\"n\">point0</span><span class=\"p\">)</span>\n        <span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"k\">if</span> <span class=\"n\">l1</span> <span class=\"o\">&lt;</span> <span class=\"n\">l2</span><span class=\"p\">:</span>\n            <span class=\"n\">vect_t</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">vfactor</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">vect</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">vect_t</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vect_t</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">vfactor</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">vect</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">port_edges</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">vect_t</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">port_edges</span><span class=\"p\">)</span>\n        <span class=\"n\">list_unite</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sheet_name</span><span class=\"p\">]</span>\n        <span class=\"n\">dup_factor</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">((</span><span class=\"n\">hfactor</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">coeff</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">hfactor</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"n\">dup_factor</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dup_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">],</span> <span class=\"n\">dup_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dup_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">],</span> <span class=\"n\">dup_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dup_factor</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">axisdir</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">vect</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">duplicate_and_unite</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"nb\">len</span> <span class=\"o\">*</span> <span class=\"n\">coeff</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dup_factor</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">point0</span><span class=\"p\">,</span> <span class=\"n\">point1</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_boundaries_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve all boundary names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of boundary names. Boundaries with multiple modes will return one</span>\n<span class=\"sd\">            boundary for each mode.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetBoundaries</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">list_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetBoundaries</span><span class=\"p\">())</span>\n        <span class=\"k\">del</span> <span class=\"n\">list_names</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">list_names</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_object_model_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj_list</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set a list of objects to either models or non-models.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        obj_list : list</span>\n<span class=\"sd\">            List of objects IDs or names.</span>\n<span class=\"sd\">        model : bool, optional</span>\n<span class=\"sd\">            Whether to set the objects as models. The default is ``True``.</span>\n<span class=\"sd\">            If ``False``, the objects are set as non-models.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">obj_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">selections</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">model</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_objects_in_group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a list of objects belonging to a group.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        group : str</span>\n<span class=\"sd\">            Name of the group.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of objects belonging to the group.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetObjectsInGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Group name must be a string&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">group_objs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">group_objs</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">group_objs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_group_bounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the bounding box of a group.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        group : str</span>\n<span class=\"sd\">            Name of the group.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of six float values representing the bounding box</span>\n<span class=\"sd\">            in the form ``[min_x, min_y, min_z, max_x, max_y, max_z]``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetObjectsInGroup</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Group name must be a string&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">group_objs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">group_objs</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">all_objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n        <span class=\"n\">objs_to_unmodel</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">all_objs</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">group_objs</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">objs_to_unmodel</span><span class=\"p\">:</span>\n            <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_change_geometry_property</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">objs_to_unmodel</span><span class=\"p\">)</span>\n            <span class=\"n\">bounding</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bounding</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">bounding</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_selections</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objtosplit</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert one or more object to selections.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objtosplit : str, int, list</span>\n<span class=\"sd\">            One or more objects to convert to selections. A list can contain</span>\n<span class=\"sd\">            both strings (object names) and integers (object IDs).</span>\n<span class=\"sd\">        return_list : bool, option</span>\n<span class=\"sd\">            Whether to return a list of the selections. The default is</span>\n<span class=\"sd\">            ``False``, in which case a string of the selections is returned.</span>\n<span class=\"sd\">            If ``True``, a list of the selections is returned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str or list</span>\n<span class=\"sd\">           String or list of the selections.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;netref.builtins.list&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">objtosplit</span><span class=\"p\">)):</span>\n            <span class=\"n\">list_new</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objtosplit</span><span class=\"p\">)):</span>\n                <span class=\"n\">list_new</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">objtosplit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">objtosplit</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">objtosplit</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">objtosplit</span><span class=\"p\">]</span>\n        <span class=\"n\">objnames</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">objtosplit</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">Object3d</span><span class=\"p\">):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">FacePrimitive</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">EdgePrimitive</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">VertexPrimitive</span><span class=\"p\">):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">return_list</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">objnames</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">objnames</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">plane</span><span class=\"p\">,</span> <span class=\"n\">sides</span><span class=\"o\">=</span><span class=\"s2\">&quot;Both&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Split a list of objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : str, int, or list</span>\n<span class=\"sd\">            One or more objects to split. A list can contain</span>\n<span class=\"sd\">            both strings (object names) and integers (object IDs).</span>\n<span class=\"sd\">        plane : str</span>\n<span class=\"sd\">            Coordinate plane of the cut or the Application.PLANE object.</span>\n<span class=\"sd\">            Choices for the coordinate plane are ``&quot;XY&quot;``, ``&quot;YZ&quot;``, and ``&quot;ZX&quot;``.</span>\n<span class=\"sd\">        sides : str</span>\n<span class=\"sd\">            Which side to keep. Options are ``&quot;Both&quot;``, ``&quot;PositiveOnly&quot;``,</span>\n<span class=\"sd\">            and ``&quot;NegativeOnly&quot;``. The default is ``&quot;Both&quot;``, in which case</span>\n<span class=\"sd\">            all objects are kept after the split.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of :class:`pyaedt.modeler.Object3d.Object3d</span>\n<span class=\"sd\">            List of split objects.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Split</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">planes</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_plane_to_plane_str</span><span class=\"p\">(</span><span class=\"n\">plane</span><span class=\"p\">)</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">)</span>\n        <span class=\"n\">all_objs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Split</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:SplitToParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SplitPlane:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">planes</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;WhichSide:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">sides</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ToolType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;PlaneTool&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ToolEntityID:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SplitCrossingObjectsOnly:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;DeleteInvalidObjects:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_all_ids</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">selections</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">all_objs</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate_and_mirror</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">objid</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"p\">,</span>\n        <span class=\"n\">vector</span><span class=\"p\">,</span>\n        <span class=\"n\">is_3d_comp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">duplicate_assignment</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate and mirror a selection.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        bjid : str, int, or  Object3d</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        position : float</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates or</span>\n<span class=\"sd\">            Application.Position object for the selection.</span>\n<span class=\"sd\">        vector : float</span>\n<span class=\"sd\">            List of the ``[x1, y1, z1]`` coordinates or</span>\n<span class=\"sd\">            Application.Position object for the vector.</span>\n<span class=\"sd\">        is_3d_comp : bool, optional</span>\n<span class=\"sd\">            If ``True``, the method will try to return the duplicated list of 3dcomponents. The default is ``False``.</span>\n<span class=\"sd\">        duplicate_assignment : bool, optional</span>\n<span class=\"sd\">            If True, the method duplicates selection assignments. The default value is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of objects created or an empty list.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DuplicateMirror</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n        <span class=\"n\">Xpos</span><span class=\"p\">,</span> <span class=\"n\">Ypos</span><span class=\"p\">,</span> <span class=\"n\">Zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"n\">Xnorm</span><span class=\"p\">,</span> <span class=\"n\">Ynorm</span><span class=\"p\">,</span> <span class=\"n\">Znorm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:DuplicateToMirrorParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DuplicateMirrorBaseX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xpos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DuplicateMirrorBaseY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Ypos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DuplicateMirrorBaseZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Zpos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DuplicateMirrorNormalX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xnorm</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DuplicateMirrorNormalY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Ynorm</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DuplicateMirrorNormalZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Znorm</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Options&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DuplicateAssignments:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">duplicate_assignment</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_3d_comp</span><span class=\"p\">:</span>\n            <span class=\"n\">orig_3d</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_component_names</span><span class=\"p\">]</span>\n        <span class=\"n\">added_objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DuplicateMirror</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">,</span> <span class=\"n\">vArg3</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_new_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_3d_comp</span><span class=\"p\">:</span>\n            <span class=\"n\">added_3d_comps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_defined_component_names</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">orig_3d</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">added_3d_comps</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Found 3D Components Duplication&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">added_3d_comps</span>\n        <span class=\"k\">return</span> <span class=\"n\">added_objs</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mirror</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Mirror a selection.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : str, int, or Object3d</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        position : int or float</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates or the</span>\n<span class=\"sd\">            Application.Position object for the selection.</span>\n<span class=\"sd\">        vector : float</span>\n<span class=\"sd\">            List of the ``[x1, y1, z1]`` coordinates or</span>\n<span class=\"sd\">            the Application.Position object for the vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Mirror</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n        <span class=\"n\">Xpos</span><span class=\"p\">,</span> <span class=\"n\">Ypos</span><span class=\"p\">,</span> <span class=\"n\">Zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"n\">Xnorm</span><span class=\"p\">,</span> <span class=\"n\">Ynorm</span><span class=\"p\">,</span> <span class=\"n\">Znorm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:MirrorParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MirrorBaseX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xpos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MirrorBaseY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Ypos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MirrorBaseZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Zpos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MirrorNormalX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xnorm</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MirrorNormalY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Ynorm</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MirrorNormalZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Znorm</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Mirror</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Move objects from a list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, Position object</span>\n<span class=\"sd\">            List of object IDs.</span>\n<span class=\"sd\">        vector : list</span>\n<span class=\"sd\">            Vector of the direction move. It can be a list of the ``[x, y, z]``</span>\n<span class=\"sd\">            coordinates or a Position object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Move</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">Xvec</span><span class=\"p\">,</span> <span class=\"n\">Yvec</span><span class=\"p\">,</span> <span class=\"n\">Zvec</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n        <span class=\"n\">szSelections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szSelections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:TranslateParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TranslateVectorX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xvec</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TranslateVectorY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Yvec</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TranslateVectorZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Zvec</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate_around_axis</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">objid</span><span class=\"p\">,</span>\n        <span class=\"n\">cs_axis</span><span class=\"p\">,</span>\n        <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span>\n        <span class=\"n\">nclones</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">create_new_objects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">is_3d_comp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">duplicate_assignment</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate a selection around an axis.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, str, int, Object3d or UserDefinedComponent</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        cs_axis :</span>\n<span class=\"sd\">            Coordinate system axis or the Application.CoordinateSystemAxis object.</span>\n<span class=\"sd\">        angle : float, optional</span>\n<span class=\"sd\">            Angle rotation in degees. The default is ``90``.</span>\n<span class=\"sd\">        nclones : int, optional</span>\n<span class=\"sd\">            Number of clones. The default is ``2``.</span>\n<span class=\"sd\">        create_new_objects :</span>\n<span class=\"sd\">            Whether to create the copies as new objects. The</span>\n<span class=\"sd\">            default is ``True``.</span>\n<span class=\"sd\">        is_3d_comp : bool, optional</span>\n<span class=\"sd\">            If ``True``, the method will try to return the duplicated list of 3dcomponents. The default is ``False``.</span>\n<span class=\"sd\">        duplicate_assignment : bool, optional</span>\n<span class=\"sd\">            If True, the method duplicates selection assignments. The default value is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DuplicateAroundAxis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:DuplicateAroundAxisParameters&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;CreateNewObjects:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">create_new_objects</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;AngleStr:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;Numclones:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">nclones</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">vArg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Options&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DuplicateAssignments:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">duplicate_assignment</span><span class=\"p\">]</span>\n        <span class=\"n\">added_objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DuplicateAroundAxis</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">,</span> <span class=\"n\">vArg3</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicate_added_objects_tuple</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_3d_comp</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicate_added_components_tuple</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">added_objs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_duplicate_added_objects_tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">added_objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_new_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">added_objects</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">added_objects</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_duplicate_added_components_tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">added_component</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_new_user_defined_component</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">added_component</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">added_component</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">[]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate_along_line</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">objid</span><span class=\"p\">,</span>\n        <span class=\"n\">vector</span><span class=\"p\">,</span>\n        <span class=\"n\">nclones</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">attachObject</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">is_3d_comp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">duplicate_assignment</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate a selection along a line.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, str, int, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        vector : list</span>\n<span class=\"sd\">            List of ``[x1,y1,z1]`` coordinates or the Application.Position object for</span>\n<span class=\"sd\">            the vector.</span>\n<span class=\"sd\">        attachObject : bool, optional</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        nclones : int, optional</span>\n<span class=\"sd\">            Number of clones. The default is ``2``.</span>\n<span class=\"sd\">        is_3d_comp : bool, optional</span>\n<span class=\"sd\">            If True, the method will try to return the duplicated list of 3dcomponents. The default is ``False``.</span>\n<span class=\"sd\">        duplicate_assignment : bool, optional</span>\n<span class=\"sd\">            If True, the method duplicates selection assignments. The default value is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DuplicateAlongLine</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n        <span class=\"n\">Xpos</span><span class=\"p\">,</span> <span class=\"n\">Ypos</span><span class=\"p\">,</span> <span class=\"n\">Zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:DuplicateToAlongLineParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CreateNewObjects:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">attachObject</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XComponent:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xpos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YComponent:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Ypos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZComponent:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Zpos</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Numclones:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">nclones</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Options&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DuplicateAssignments:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">duplicate_assignment</span><span class=\"p\">]</span>\n        <span class=\"n\">added_objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DuplicateAlongLine</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">,</span> <span class=\"n\">vArg3</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicate_added_objects_tuple</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_3d_comp</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicate_added_components_tuple</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">added_objs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thicken_sheet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">,</span> <span class=\"n\">bBothSides</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Thicken the sheet of the selection.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, str, int, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        thickness : float, str</span>\n<span class=\"sd\">            Amount to thicken the sheet by.</span>\n<span class=\"sd\">        bBothSides : bool, optional</span>\n<span class=\"sd\">            Whether to thicken the sheet on both side. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        pyaedt.modeler.Object3d.Object3d</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ThickenSheet</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SheetThickenParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Thickness:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;BothSides:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bBothSides</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ThickenSheet</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_object</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sweep_along_normal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"p\">,</span> <span class=\"n\">face_id</span><span class=\"p\">,</span> <span class=\"n\">sweep_value</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Sweep the selection along the vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        obj_name : list, str, int, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        face_id : int</span>\n<span class=\"sd\">            Face to sweep.</span>\n<span class=\"sd\">        sweep_value : float, optional</span>\n<span class=\"sd\">            Sweep value. The default is ``0.1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        pyaedt.modeler.Object3d.Object3d</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SweepFacesAlongNormal</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">obj_name</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:SweepFaceAlongNormalToParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;FacesToDetach:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"n\">face_id</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;LengthOfSweep:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">sweep_value</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SweepFacesAlongNormal</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"n\">objs2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_object_names</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">objs2</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sweep_along_vector</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">sweep_vector</span><span class=\"p\">,</span> <span class=\"n\">draft_angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">draft_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Round&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Sweep the selection along a vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, str, int, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        sweep_vector : float</span>\n<span class=\"sd\">            List of ``[x1, y1, z1]`` coordinates or Application.Position object for</span>\n<span class=\"sd\">            the vector.</span>\n<span class=\"sd\">        draft_angle : float, optional</span>\n<span class=\"sd\">            Draft angle in degrees. The default is ``0``.</span>\n<span class=\"sd\">        draft_type : str</span>\n<span class=\"sd\">            Type of the draft. Options are ``&quot;Round&quot;``, ``&quot;Natural&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Extended&quot;``. The default is ``&quot;Round&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SweepAlongVector</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n        <span class=\"n\">vectorx</span><span class=\"p\">,</span> <span class=\"n\">vectory</span><span class=\"p\">,</span> <span class=\"n\">vectorz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">sweep_vector</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:VectorSweepParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DraftAngle:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">draft_angle</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DraftType:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">draft_type_str</span><span class=\"p\">(</span><span class=\"n\">draft_type</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SweepVectorX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vectorx</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SweepVectorY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vectory</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SweepVectorZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vectorz</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SweepAlongVector</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_object</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sweep_along_path</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">sweep_object</span><span class=\"p\">,</span> <span class=\"n\">draft_angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">draft_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Round&quot;</span><span class=\"p\">,</span> <span class=\"n\">is_check_face_intersection</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">twist_angle</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Sweep the selection along a path.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, str, int, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        sweep_object : str, int</span>\n<span class=\"sd\">            Name or ID of the sweep.</span>\n<span class=\"sd\">        draft_angle : float, optional</span>\n<span class=\"sd\">            Draft angle in degrees. The default is ``0``.</span>\n<span class=\"sd\">        draft_type : str</span>\n<span class=\"sd\">            Type of the draft. Options are ``&quot;Round&quot;``, ``&quot;Natural&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Extended&quot;``. The default is ``&quot;Round&quot;``.</span>\n<span class=\"sd\">        is_check_face_intersection : bool, optional</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        twist_angle : float, optional</span>\n<span class=\"sd\">           Twist angle in degrees. The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SweepAlongPath</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;,&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">sweep_object</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PathSweepParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DraftAngle:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">draft_angle</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DraftType:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">draft_type_str</span><span class=\"p\">(</span><span class=\"n\">draft_type</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CheckFaceFaceIntersection:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">is_check_face_intersection</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TwistAngle:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">twist_angle</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SweepAlongPath</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_object</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sweep_around_axis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">cs_axis</span><span class=\"p\">,</span> <span class=\"n\">sweep_angle</span><span class=\"o\">=</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"n\">draft_angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">number_of_segments</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Sweep the selection around the axis.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, str, int, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Name or ID of the object.</span>\n<span class=\"sd\">        cs_axis :</span>\n<span class=\"sd\">            Coordinate system axis or the Application.CoordinateSystemAxis object.</span>\n<span class=\"sd\">        sweep_angle : float</span>\n<span class=\"sd\">            Sweep angle in degrees. The default is ``360``.</span>\n<span class=\"sd\">        draft_angle : float</span>\n<span class=\"sd\">            Draft angle in degrees. The default is ``0``.</span>\n<span class=\"sd\">        number_of_segments : int, optional</span>\n<span class=\"sd\">            Number of segments of the sweep operation. Default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SweepAroundAxis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:AxisSweepParameters&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;DraftAngle:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">draft_angle</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;DraftType:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Round&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;CheckFaceFaceIntersection:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SweepAxis:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;SweepAngle:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">sweep_angle</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;NumOfSegments:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">number_of_segments</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SweepAroundAxis</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_object</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">section</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">plane</span><span class=\"p\">,</span> <span class=\"n\">create_new</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">section_cross_object</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Section the selection.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_list : list, str, int, or  :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            One or more objects to section.</span>\n<span class=\"sd\">        plane : str</span>\n<span class=\"sd\">            Coordinate plane or Application.PLANE object.</span>\n<span class=\"sd\">            Choices for the coordinate plane are ``&quot;XY&quot;``, ``&quot;YZ&quot;``, and ``&quot;ZX&quot;``.&#39;</span>\n<span class=\"sd\">        create_new : bool, optional</span>\n<span class=\"sd\">            The default is ``True``, but this parameter has no effect.</span>\n<span class=\"sd\">        section_cross_object : bool, optional</span>\n<span class=\"sd\">            The default is ``False``, but this parameter has no effect.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Section</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">section_plane</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_plane_to_plane_str</span><span class=\"p\">(</span><span class=\"n\">plane</span><span class=\"p\">)</span>\n\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Section</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:SectionToParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;CreateNewObjects:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">create_new</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SectionPlane:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">section_plane</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SectionCrossObject:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">section_cross_object</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_all_ids</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">separate_bodies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">create_group</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Separate bodies of the selection.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_list : list</span>\n<span class=\"sd\">            List of objects to separate.</span>\n<span class=\"sd\">        create_group : bool, optional</span>\n<span class=\"sd\">            Whether to create a group. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SeparateBody</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SeparateBody</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;CreateGroupsForNewObjects:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">create_group</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_all_ids</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">cs_axis</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">90.0</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Rotate the selection.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid :  list, str, int, or  :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">             ID of the object.</span>\n<span class=\"sd\">        cs_axis</span>\n<span class=\"sd\">            Coordinate system axis or the Application.CoordinateSystemAxis object.</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle of rotation. The units, defined by ``unit``, can be either</span>\n<span class=\"sd\">            degrees or radians. The default is ``90.0``.</span>\n<span class=\"sd\">        unit : text, optional</span>\n<span class=\"sd\">             Units for the angle. Options are ``&quot;deg&quot;`` or ``&quot;rad&quot;``.</span>\n<span class=\"sd\">             The default is ``&quot;deg&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Rotate</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:RotateParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;RotateAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;RotateAngle:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Rotate</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blank_list</span><span class=\"p\">,</span> <span class=\"n\">tool_list</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Subtract objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        blank_list : list of Object3d or list of int</span>\n<span class=\"sd\">            List of objects to subtract from. The list can be of</span>\n<span class=\"sd\">            either :class:`pyaedt.modeler.Object3d.Object3d` objects or object IDs.</span>\n<span class=\"sd\">        tool_list : list</span>\n<span class=\"sd\">            List of objects to subtract. The list can be of</span>\n<span class=\"sd\">            either Object3d objects or object IDs.</span>\n<span class=\"sd\">        keep_originals : bool, optional</span>\n<span class=\"sd\">            Whether to keep the original objects. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Subtract</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;keepOriginals&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;keepOriginals has been deprecated. use keep_originals.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n            <span class=\"n\">keep_originals</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;keepOriginals&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">szList</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">blank_list</span><span class=\"p\">)</span>\n        <span class=\"n\">szList1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">tool_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Blank Parts:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szList</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tool Parts:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szList1</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SubtractParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;KeepOriginals:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Subtract</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">keep_originals</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">imprint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blank_list</span><span class=\"p\">,</span> <span class=\"n\">tool_list</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Imprin an object list on another object list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        blank_list : list of Object3d or list of int</span>\n<span class=\"sd\">            List of objects to imprint from. The list can be of</span>\n<span class=\"sd\">            either :class:`pyaedt.modeler.Object3d.Object3d` objects or object IDs.</span>\n<span class=\"sd\">        tool_list : list of Object3d or list of int</span>\n<span class=\"sd\">            List of objects to imprint. The list can be of</span>\n<span class=\"sd\">            either Object3d objects or object IDs.</span>\n<span class=\"sd\">        keep_originals : bool, optional</span>\n<span class=\"sd\">            Whether to keep the original objects. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Imprint</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">szList</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">blank_list</span><span class=\"p\">)</span>\n        <span class=\"n\">szList1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">tool_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Blank Parts:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szList</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tool Parts:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szList1</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ImprintParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;KeepOriginals:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Imprint</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">keep_originals</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_imprint_projection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tool_list</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">normal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">vector_direction</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"s2\">&quot;1mm&quot;</span><span class=\"p\">):</span>\n\n        <span class=\"n\">szList1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">tool_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szList1</span><span class=\"p\">]</span>\n        <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:ImprintProjectionParameters&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;KeepOriginals:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">keep_originals</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;NormalProjection:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">normal</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">normal</span><span class=\"p\">:</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Distance:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">value_with_units</span><span class=\"p\">(</span><span class=\"n\">distance</span><span class=\"p\">))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DirectionX:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">value_with_units</span><span class=\"p\">(</span><span class=\"n\">vector_direction</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DirectionY:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">value_with_units</span><span class=\"p\">(</span><span class=\"n\">vector_direction</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DirectionZ:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">value_with_units</span><span class=\"p\">(</span><span class=\"n\">vector_direction</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ImprintProjection</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">,</span> <span class=\"n\">varg2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">keep_originals</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">imprint_normal_projection</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">tool_list</span><span class=\"p\">,</span>\n        <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Imprint the normal projection of objects over a sheet.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        tool_list : list</span>\n<span class=\"sd\">            List of objects to imprint. The list can be of</span>\n<span class=\"sd\">            either Object3d objects or object IDs.</span>\n<span class=\"sd\">        keep_originals : bool, optional</span>\n<span class=\"sd\">            Whether to keep the original objects. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ImprintProjection</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_imprint_projection</span><span class=\"p\">(</span><span class=\"n\">tool_list</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">imprint_vector_projection</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">tool_list</span><span class=\"p\">,</span>\n        <span class=\"n\">vector_points</span><span class=\"p\">,</span>\n        <span class=\"n\">distance</span><span class=\"p\">,</span>\n        <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Imprint the projection of objects over a sheet with a specified vector and distance.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        tool_list : list</span>\n<span class=\"sd\">            List of objects to imprint. The list can be of</span>\n<span class=\"sd\">            either Object3d objects or object IDs.</span>\n<span class=\"sd\">        vector_points : list</span>\n<span class=\"sd\">            List of [x,y,z] vector projection.</span>\n<span class=\"sd\">        distance : str, int</span>\n<span class=\"sd\">            Distance of Projection.</span>\n<span class=\"sd\">        keep_originals : bool, optional</span>\n<span class=\"sd\">            Whether to keep the original objects. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ImprintProjection</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_imprint_projection</span><span class=\"p\">(</span><span class=\"n\">tool_list</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">vector_points</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">purge_history</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theList</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Purge history objects from object names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        theList : list</span>\n<span class=\"sd\">            List of object names to purge.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.PurgeHistory</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">szList</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szList</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">PurgeHistory</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_model_bounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the model bounding box.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of six float values representing the bounding box</span>\n<span class=\"sd\">            in the form ``[min_x, min_y, min_z, max_x, max_y, max_z]``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetModelBoundingBox</span><span class=\"p\">())</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">bb</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">bound</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theList</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Unite objects from a list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        theList : list</span>\n<span class=\"sd\">            List of objects.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The united object that is the first in the list.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Unite</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">slice</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">))</span>\n        <span class=\"n\">num_objects</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">)</span>\n        <span class=\"n\">remaining</span> <span class=\"o\">=</span> <span class=\"n\">num_objects</span>\n        <span class=\"n\">objs_groups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">while</span> <span class=\"n\">remaining</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"n\">theList</span><span class=\"p\">[:</span><span class=\"nb\">slice</span><span class=\"p\">]</span>\n            <span class=\"n\">szSelections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">)</span>\n            <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szSelections</span><span class=\"p\">]</span>\n            <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:UniteParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;KeepOriginals:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Unite</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n            <span class=\"n\">objs_groups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">remaining</span> <span class=\"o\">-=</span> <span class=\"nb\">slice</span>\n            <span class=\"k\">if</span> <span class=\"n\">remaining</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">theList</span> <span class=\"o\">=</span> <span class=\"n\">theList</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">:]</span>\n        <span class=\"k\">if</span> <span class=\"n\">remaining</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">objs_groups</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objs_groups</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unite</span><span class=\"p\">(</span><span class=\"n\">objs_groups</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Union of </span><span class=\"si\">{}</span><span class=\"s2\"> objects has been executed.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">num_objects</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Clone objects from a list of object IDs.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list</span>\n<span class=\"sd\">            List of object IDs.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of names of objects cloned when successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Copy</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Paste</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">szSelections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szSelections</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Paste</span><span class=\"p\">()</span>\n        <span class=\"n\">new_objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_new_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">new_objects</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intersect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theList</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Intersect objects from a list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        theList : list</span>\n<span class=\"sd\">            List of objects.</span>\n<span class=\"sd\">        keep_originals : bool, optional</span>\n<span class=\"sd\">            Whether to keep the original object. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Retrieve the resulting 3D Object when succeeded.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Intersect</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;keeporiginal&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;keeporiginal has been deprecated. use keep_originals.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n            <span class=\"n\">keep_originals</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;keeporiginal&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">unclassified</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unclassified&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">szSelections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szSelections</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:IntersectParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;KeepOriginals:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">keep_originals</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Intersect</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"n\">unclassified1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unclassified&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">unclassified</span> <span class=\"o\">!=</span> <span class=\"n\">unclassified1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error in intersection. Reverting Operation&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Intersection Succeeded&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theList</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Connect objects from a list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        theList : list</span>\n<span class=\"sd\">            List of objects.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Connect</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">unclassified_before</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_names</span><span class=\"p\">)</span>\n        <span class=\"n\">szSelections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">theList</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szSelections</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Connect</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">unclassified_before</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_names</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error in connection. Reverting Operation&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Connection Correctly created&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">translate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objid</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Translate objects from a list.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.0</span>\n<span class=\"sd\">           Use :func:`move` instead.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objid : list, Position object</span>\n<span class=\"sd\">            List of object IDs.</span>\n<span class=\"sd\">        vector : list</span>\n<span class=\"sd\">            Vector of the direction move. It can be a list of the ``[x, y, z]``</span>\n<span class=\"sd\">            coordinates or a Position object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Move</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`translate` is deprecated. Use `move` instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n        <span class=\"n\">Xvec</span><span class=\"p\">,</span> <span class=\"n\">Yvec</span><span class=\"p\">,</span> <span class=\"n\">Zvec</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">)</span>\n        <span class=\"n\">szSelections</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objid</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">szSelections</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:TranslateParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TranslateVectorX:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xvec</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TranslateVectorY:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Yvec</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TranslateVectorZ:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Zvec</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">chassis_subtraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chassis_part</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Subtract all non-vacuum objects from the main chassis object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        chassis_part : str</span>\n<span class=\"sd\">            Name of the main chassis object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Subtract</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Subtract all objects from Chassis object - exclude vacuum objs&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">mat_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_omaterial_manager</span><span class=\"o\">.</span><span class=\"n\">GetNames</span><span class=\"p\">()</span>\n        <span class=\"n\">num_obj_start</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetNumObjects</span><span class=\"p\">()</span>\n        <span class=\"n\">blank_part</span> <span class=\"o\">=</span> <span class=\"n\">chassis_part</span>\n        <span class=\"c1\"># in main code this object will need to be determined automatically eg by name such as chassis or sheer size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Blank Part in Subtraction = &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">blank_part</span><span class=\"p\">))</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        check if blank part exists, if not, skip subtraction</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tool_parts</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solids&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">tool_parts</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">blank_part</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">mat</span> <span class=\"ow\">in</span> <span class=\"n\">mat_names</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;vacuum&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">objnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsByMaterial</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objnames</span><span class=\"p\">:</span>\n                    <span class=\"n\">tool_parts</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n                <span class=\"c1\"># tool_parts_final=list(set(tool_parts).difference(set(objnames)))</span>\n        <span class=\"n\">tool_parts</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tool_parts</span><span class=\"p\">)</span>\n        <span class=\"n\">num_obj_end</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetNumObjects</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">blank_part</span><span class=\"p\">,</span> <span class=\"n\">tool_parts</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Subtraction Objs - Initial: &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">num_obj_start</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;  ,  Final: &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">num_obj_end</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_offset_on_plane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Offset the object on a plane.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        i :</span>\n\n<span class=\"sd\">        offset :</span>\n<span class=\"sd\">            Offset to apply.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">           Position of object after offset is applied.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n            <span class=\"n\">off1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">off1</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">off1</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">offset</span>\n        <span class=\"k\">if</span> <span class=\"mi\">3</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span><span class=\"p\">:</span>\n            <span class=\"n\">off2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">off2</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">off2</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">offset</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">off3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span> <span class=\"ow\">and</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">7</span> <span class=\"ow\">and</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">8</span> <span class=\"ow\">and</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">11</span><span class=\"p\">:</span>\n            <span class=\"n\">off3</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">offset</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">off3</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"n\">offset</span>\n        <span class=\"k\">return</span> <span class=\"n\">off1</span><span class=\"p\">,</span> <span class=\"n\">off2</span><span class=\"p\">,</span> <span class=\"n\">off3</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">check_plane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">faceposition</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check for the plane that is defined as the face for an object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        obj : str</span>\n<span class=\"sd\">            Name of the object.</span>\n<span class=\"sd\">        faceposition : list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the position of the face.</span>\n<span class=\"sd\">        offset : optional</span>\n<span class=\"sd\">            Offset to apply. The default is ``1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Plane string</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">Xvec</span><span class=\"p\">,</span> <span class=\"n\">Yvec</span><span class=\"p\">,</span> <span class=\"n\">Zvec</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">faceposition</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n            <span class=\"n\">off1</span><span class=\"p\">,</span> <span class=\"n\">off2</span><span class=\"p\">,</span> <span class=\"n\">off3</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_offset_on_plane</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">)</span>\n            <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:FaceParameters&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;BodyName:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n            <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Xvec</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;+&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">off1</span><span class=\"p\">))</span>\n            <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Yvec</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;+&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">off2</span><span class=\"p\">))</span>\n            <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Zvec</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;+&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">off3</span><span class=\"p\">))</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">face_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceByPosition</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n                    <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;XY&quot;</span>\n                <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">8</span><span class=\"p\">:</span>\n                    <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;XZ&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YZ&quot;</span>\n                <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">11</span><span class=\"p\">:</span>\n                    <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">plane</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_matched_object_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">search_string</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the name of the matched object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        search_string : str</span>\n<span class=\"sd\">            Text string to search for.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the matched object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetMatchedObjectName</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetMatchedObjectName</span><span class=\"p\">(</span><span class=\"n\">search_string</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clean_objects_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">main_part_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Clean the names of the objects for a main part.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        main_part_name : str</span>\n<span class=\"sd\">            Name of the main part.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.RenamePart</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># import os.path</span>\n        <span class=\"c1\"># (CADPath, CADFilename) = os.path.split(CADFile)</span>\n        <span class=\"c1\"># (CADName, CADExt) = os.path.splitext(CADFilename)</span>\n        <span class=\"n\">CADSuffix</span> <span class=\"o\">=</span> <span class=\"n\">main_part_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_&quot;</span>\n        <span class=\"n\">objNames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetMatchedObjectName</span><span class=\"p\">(</span><span class=\"n\">CADSuffix</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;*&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">objNames</span><span class=\"p\">:</span>\n            <span class=\"n\">RenameArgs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"n\">RenameArgs</span><span class=\"p\">[</span><span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Rename Data&quot;</span>\n            <span class=\"n\">RenameArgs</span><span class=\"p\">[</span><span class=\"s2\">&quot;Old Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n            <span class=\"n\">RenameArgs</span><span class=\"p\">[</span><span class=\"s2\">&quot;New Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">CADSuffix</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">RenamePart</span><span class=\"p\">(</span><span class=\"n\">RenameArgs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_airbox</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">offset_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Absolute&quot;</span><span class=\"p\">,</span> <span class=\"n\">defname</span><span class=\"o\">=</span><span class=\"s2\">&quot;AirBox_Auto&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an airbox that is as big as the bounding extension of the project.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        offset :</span>\n<span class=\"sd\">            Double offset value to apply on the airbox faces versus the bounding box.</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        offset_type : str</span>\n<span class=\"sd\">            Type of the offset. Options are ``&quot;Absolute&quot;`` and ``&quot;Relative&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;Absolute&quot;``. If ``&quot;Relative&quot;``, the offset input</span>\n<span class=\"sd\">            is between 0 and 100.</span>\n<span class=\"sd\">        defname : str, optional</span>\n<span class=\"sd\">            Name of the airbox. The default is ``&quot;AirBox_Auto&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            ID of the airbox created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Adding Airbox to the Bounding &quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">offset_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Absolute&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">offset1</span> <span class=\"o\">=</span> <span class=\"n\">offset2</span> <span class=\"o\">=</span> <span class=\"n\">offset3</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">offset1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n            <span class=\"n\">offset2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n            <span class=\"n\">offset3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n        <span class=\"n\">startpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Position</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">offset1</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">offset2</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">offset3</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dim</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">dim</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">offset1</span><span class=\"p\">)</span>\n        <span class=\"n\">dim</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">offset2</span><span class=\"p\">)</span>\n        <span class=\"n\">dim</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">offset3</span><span class=\"p\">)</span>\n        <span class=\"n\">airid</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_box</span><span class=\"p\">(</span><span class=\"n\">startpos</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">,</span> <span class=\"n\">defname</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">airid</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_air_region</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x_pos</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y_pos</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z_pos</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x_neg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y_neg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z_neg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an air region.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x_pos : float, optional</span>\n<span class=\"sd\">            Padding in percent in the +X direction (+R for 2D RZ).</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        y_pos : float, optional</span>\n<span class=\"sd\">            Padding in percent in the +Y direction. The default is ``0``.</span>\n<span class=\"sd\">        z_pos : float, optional</span>\n<span class=\"sd\">            Padding in percent in the +Z direction. The default is ``0``.</span>\n<span class=\"sd\">        x_neg : float, optional</span>\n<span class=\"sd\">            Padding in percent in the -X direction (-R for 2D RZ).</span>\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        y_neg : float, optional</span>\n<span class=\"sd\">            Padding in percent in the -Y direction. The default is ``0``.</span>\n<span class=\"sd\">        z_neg : float, optional</span>\n<span class=\"sd\">            Padding in percent in the -Z direction. The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of ``[x_pos, y_pos, z_pos, x_neg, y_neg, z_neg]``</span>\n<span class=\"sd\">            coordinates for the region created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRegion</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_region</span><span class=\"p\">([</span><span class=\"n\">x_pos</span><span class=\"p\">,</span> <span class=\"n\">y_pos</span><span class=\"p\">,</span> <span class=\"n\">z_pos</span><span class=\"p\">,</span> <span class=\"n\">x_neg</span><span class=\"p\">,</span> <span class=\"n\">y_neg</span><span class=\"p\">,</span> <span class=\"n\">z_neg</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit_region_dimensions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">listvalues</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modify the dimensions of the region.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        listvalues : list</span>\n<span class=\"sd\">            List of the padding percentages along all six directions in</span>\n<span class=\"sd\">            the form ``[+X, -X, +Y, -Y, +Z, -Z]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DCmdTab&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Region:CreateRegion:1&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">arg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;+X&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-X&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;+Y&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-Y&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;+Z&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-Z&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">listvalues</span><span class=\"p\">):</span>\n            <span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">padding</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">label</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; Padding Data&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">padding</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">padding</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">padding</span><span class=\"p\">)</span>\n        <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg3</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_face_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">face_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a list of faces given a list of face ID or a list of objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        face_list : list</span>\n<span class=\"sd\">            List of face ID or list of objects</span>\n\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">           Name of the new list.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Modeler.Lists`</span>\n<span class=\"sd\">            List object when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEntityList</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_lists</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;A List with the specified name already exists!&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">i</span>\n        <span class=\"n\">face_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">face_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">user_list</span> <span class=\"o\">=</span> <span class=\"n\">Lists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">list_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Face&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">user_list</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">user_list</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n                <span class=\"n\">object_list</span><span class=\"o\">=</span><span class=\"n\">face_list</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">list_type</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">user_list</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong object definition. Review object list and type&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;User list object could not be created&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_object_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an object list given a list of object names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_list : list</span>\n<span class=\"sd\">            List of object names.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the new object list.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Modeler.Lists`</span>\n<span class=\"sd\">            List object when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEntityList</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_lists</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;A List with the specified name already exists!&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">i</span>\n        <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">user_list</span> <span class=\"o\">=</span> <span class=\"n\">Lists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">list_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Object&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">user_list</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">user_list</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n                <span class=\"n\">object_list</span><span class=\"o\">=</span><span class=\"n\">object_list</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">list_type</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">user_list</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong object definition. Review object list and type&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;User list object could not be created&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">generate_object_history</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate history for the object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objectname : str</span>\n<span class=\"sd\">            Name of the history object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GenerateHistory</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objectname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objectname</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GenerateHistory</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;UseCurrentCS:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_faceted_bondwire_from_true_surface</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bondname</span><span class=\"p\">,</span> <span class=\"n\">bond_direction</span><span class=\"p\">,</span> <span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">numberofsegments</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a faceted bondwire from an existing true surface bondwire.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        bondname : str</span>\n<span class=\"sd\">            Name of the bondwire to replace.</span>\n<span class=\"sd\">        bond_direction : list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the axis direction</span>\n<span class=\"sd\">            of the bondwire. For example, ``[0, 1, 2]``.</span>\n<span class=\"sd\">        min_size : float</span>\n<span class=\"sd\">            Minimum size of the subsegment of the new polyline. The default is ``0.2``.</span>\n<span class=\"sd\">        numberofsegments : int, optional</span>\n<span class=\"sd\">            Number of segments. The default is ``8``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the bondwire created.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">old_bondwire</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object_from_name</span><span class=\"p\">(</span><span class=\"n\">bondname</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">old_bondwire</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">old_bondwire</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">old_bondwire</span><span class=\"o\">.</span><span class=\"n\">faces</span>\n        <span class=\"n\">centers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">faces</span><span class=\"p\">:</span>\n            <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">center</span>\n            <span class=\"k\">if</span> <span class=\"n\">center</span><span class=\"p\">:</span>\n                <span class=\"n\">centers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">)</span>\n        <span class=\"n\">edgelist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">verlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ver</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">ver</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">ver</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">p3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">)]</span>\n\n            <span class=\"nb\">dir</span> <span class=\"o\">=</span> <span class=\"n\">p3</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">p3</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"nb\">dir</span> <span class=\"o\">==</span> <span class=\"n\">bond_direction</span><span class=\"p\">:</span>\n                <span class=\"n\">edgelist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n                <span class=\"n\">verlist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edgelist</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;No edges found specified direction. Check again&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">connected</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-6</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edgelist</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">ver</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">ver</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">connected</span><span class=\"p\">:</span>\n                <span class=\"n\">ver1</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n                <span class=\"n\">p3</span> <span class=\"o\">=</span> <span class=\"n\">ver1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                <span class=\"n\">p4</span> <span class=\"o\">=</span> <span class=\"n\">ver1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n                <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"n\">connected</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"n\">connected</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"n\">connected</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                    <span class=\"n\">connected</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n        <span class=\"n\">new_edges</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">connected</span><span class=\"p\">:</span>\n            <span class=\"n\">edge_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_object_from_edge</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n            <span class=\"n\">new_edges</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">edge_object</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unite</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generate_object_history</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_segments_to_line</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">new_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">edge_to_delete</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">first_vert</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">ver</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">ver</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">first_vert</span><span class=\"p\">:</span>\n                <span class=\"n\">first_vert</span> <span class=\"o\">=</span> <span class=\"n\">p1</span>\n            <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_size</span><span class=\"p\">:</span>\n                <span class=\"n\">edge_to_delete</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">rad</span> <span class=\"o\">=</span> <span class=\"mf\">1e6</span>\n        <span class=\"n\">move_vector</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">fc</span> <span class=\"ow\">in</span> <span class=\"n\">centers</span><span class=\"p\">:</span>\n            <span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">fc</span><span class=\"p\">,</span> <span class=\"n\">first_vert</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">dist</span> <span class=\"o\">&lt;</span> <span class=\"n\">rad</span><span class=\"p\">:</span>\n                <span class=\"n\">rad</span> <span class=\"o\">=</span> <span class=\"n\">dist</span>\n                <span class=\"n\">move_vector</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">fc</span><span class=\"p\">,</span> <span class=\"n\">first_vert</span><span class=\"p\">)</span>\n\n        <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_existing_polyline</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">=</span><span class=\"n\">new_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">edge_to_delete</span><span class=\"p\">:</span>\n            <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">remove_edges</span><span class=\"p\">(</span><span class=\"n\">edge_to_delete</span><span class=\"p\">)</span>\n\n        <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"mi\">360</span> <span class=\"o\">/</span> <span class=\"n\">numberofsegments</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">360</span>\n\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Circle&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">numberofsegments</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">rad</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)))</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">status</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">new_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">move_vector</span><span class=\"p\">)</span>\n            <span class=\"n\">old_bondwire</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_entitylist_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the ID of an entity list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the entity list.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            ID of the entity list.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetEntityListIDByName</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEntityListIDByName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">id</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_outer_facelist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">externalobjects</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;outer_faces&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a face list from a list of outer objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        externalobjects : list</span>\n<span class=\"sd\">            List of outer objects.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the new list. The default is ``&quot;outer_faces&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">select_allfaces_fromobjects</span><span class=\"p\">(</span><span class=\"n\">externalobjects</span><span class=\"p\">)</span>  <span class=\"c1\"># find ALL faces of outer objects</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_face_list</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Extfaces of thermal model = &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">explicitly_subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">diellist</span><span class=\"p\">,</span> <span class=\"n\">metallist</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Explicitly subtract all elements in a SolveInside list and a SolveSurface list.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        diellist : list</span>\n<span class=\"sd\">            List of dielectrics.</span>\n<span class=\"sd\">        metallist : list</span>\n<span class=\"sd\">            List of metals.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Subtract</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.PurgeHistory</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Creating explicit subtraction between objects.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">diellist</span><span class=\"p\">:</span>\n            <span class=\"n\">list1</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">el1</span> <span class=\"ow\">in</span> <span class=\"n\">metallist</span><span class=\"p\">:</span>\n                <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">list2</span> <span class=\"o\">+</span> <span class=\"n\">el1</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;,&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">el1</span> <span class=\"ow\">in</span> <span class=\"n\">diellist</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">el1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">el</span><span class=\"p\">:</span>\n                    <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">list2</span> <span class=\"o\">+</span> <span class=\"n\">el1</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;,&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">list2</span><span class=\"p\">:</span>\n                <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">list2</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">,</span> <span class=\"n\">list2</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">purge_history</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">purge_history</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">metallist</span><span class=\"p\">:</span>\n            <span class=\"n\">list1</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">el1</span> <span class=\"ow\">in</span> <span class=\"n\">metallist</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">el1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">el</span><span class=\"p\">:</span>\n                    <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">list2</span> <span class=\"o\">+</span> <span class=\"n\">el1</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;,&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">list2</span><span class=\"p\">:</span>\n                <span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">list2</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">,</span> <span class=\"n\">list2</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">purge_history</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">purge_history</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Explicit subtraction is completed.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_port_faces</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">port_sheets</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Find the vaccums given a list of input sheets.</span>\n\n<span class=\"sd\">        Starting from a list of input sheets, this method creates a list of output sheets</span>\n<span class=\"sd\">        that represent the blank parts (vacuums) and the tool parts of all the intersections</span>\n<span class=\"sd\">        of solids on the sheets. After a vacuum on a sheet is found, a port can be</span>\n<span class=\"sd\">        created on it.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        port_sheets : list</span>\n<span class=\"sd\">            List of input sheets names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of output sheets (`2x len(port_sheets)`).</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">solids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_objects</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">material_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;vacuum&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;air&quot;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">sheet_name</span> <span class=\"ow\">in</span> <span class=\"n\">port_sheets</span><span class=\"p\">:</span>\n            <span class=\"n\">sheet</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">sheet_name</span><span class=\"p\">]</span>  <span class=\"c1\"># get the sheet object</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">cloned</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">sheet</span><span class=\"p\">)</span>\n            <span class=\"n\">cloned</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">cloned</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n            <span class=\"n\">cloned</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">solids</span><span class=\"p\">)</span>\n            <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">cloned</span><span class=\"p\">)</span>\n            <span class=\"n\">cloned</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_Face1Vacuum&quot;</span>\n            <span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cloned</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">faces</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_objects_bytype</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj_type</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Load all objects of a specified type.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.5.0</span>\n<span class=\"sd\">           Use :func:`get_objects_in_group` property instead.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        obj_type : str</span>\n<span class=\"sd\">            Type of the objects to load. Options are</span>\n<span class=\"sd\">            ``&quot;Solids&quot;`` and ``&quot;Sheets&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the object names for the specified type.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetObjectsInGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;`load_objects_bytype` is deprecated and will be removed in version 0.5.0. &quot;</span>\n            <span class=\"s2\">&quot;Use `get_objects_in_group` method instead.&quot;</span><span class=\"p\">,</span>\n            <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">objNames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"n\">obj_type</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">objNames</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_line_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a dictionary of object IDs for the lines in the design with the line name as the key.&quot;&quot;&quot;</span>\n        <span class=\"n\">line_ids</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lines&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">line_object</span> <span class=\"ow\">in</span> <span class=\"n\">line_list</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO Problem with GetObjectIDByName</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">line_ids</span><span class=\"p\">[</span><span class=\"n\">line_object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectIDByName</span><span class=\"p\">(</span><span class=\"n\">line_object</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line </span><span class=\"si\">{}</span><span class=\"s2\"> has an invalid ID!&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">line_object</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">line_ids</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bounding_dimension</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the dimension array of the bounding box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of three float values representing the bounding box dimensions</span>\n<span class=\"sd\">            in the form ``[dim_x, dim_y, dim_z]``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oBoundingBox</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetModelBoundingBox</span><span class=\"p\">())</span>\n        <span class=\"n\">dimensions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">dimensions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">oBoundingBox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">oBoundingBox</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])))</span>\n        <span class=\"n\">dimensions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">oBoundingBox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">oBoundingBox</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])))</span>\n        <span class=\"n\">dimensions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">oBoundingBox</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">oBoundingBox</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])))</span>\n        <span class=\"k\">return</span> <span class=\"n\">dimensions</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object_name_from_edge_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the object name for a predefined edge ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edge_id : int</span>\n<span class=\"sd\">            ID of the edge.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the edge if it exists, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetEdgeIDsFromObject</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"nb\">object</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">oEdgeIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetEdgeIDsFromObject</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">oEdgeIDs</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">object</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_solving_volume</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a mesh for a setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            ``1`` when successful, ``0`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n        <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bound</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">volume</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">volume</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">vertex_data_of_lines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">txtfilter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a dictionary of line vertex data for all lines contained within the design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        txtfilter : str, optional</span>\n<span class=\"sd\">            Text string for filtering. The default is ``None``. When a text string is specified,</span>\n<span class=\"sd\">            line data is generated only if this text string is contained within the line name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the line name with a list of vertex positions in either 2D or 3D.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">line_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_line_ids</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">txtfilter</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span> <span class=\"k\">if</span> <span class=\"n\">txtfilter</span> <span class=\"ow\">in</span> <span class=\"n\">n</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n            <span class=\"n\">line_data</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">line_data</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sLineName</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a list of vertex positions for a line object from AEDT in model units.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sLineName : str</span>\n<span class=\"sd\">            Name of the line object in AEDT.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, (z)]`` coordinates for the 2D or 3D line object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromObject</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">position_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Get all vertices in the line</span>\n        <span class=\"n\">vertices_on_line</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexIDsFromObject</span><span class=\"p\">(</span><span class=\"n\">sLineName</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">aedt_version</span> <span class=\"o\">&gt;</span> <span class=\"s2\">&quot;2022.2&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">vertices_on_line</span> <span class=\"o\">=</span> <span class=\"n\">vertices_on_line</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">vertices_on_line</span><span class=\"p\">:</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetVertexPosition</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Maxwell 2D&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">geometry_mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">position_list</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_3d_cad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">healing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">refresh_all_ids</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">import_materials</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Import a CAD model.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        filename : str</span>\n<span class=\"sd\">            Full path and name of the CAD file.</span>\n<span class=\"sd\">        healing : bool, optional</span>\n<span class=\"sd\">            Whether to perform healing. The default is ``False``, in which</span>\n<span class=\"sd\">            case healing is not performed.</span>\n<span class=\"sd\">        healing : int, optional</span>\n<span class=\"sd\">            Whether to perform healing. The default is ``0``, in which</span>\n<span class=\"sd\">            case healing is not performed.</span>\n<span class=\"sd\">        refresh_all_ids : bool, optional</span>\n<span class=\"sd\">            Whether to refresh all IDs after the CAD file is loaded. The</span>\n<span class=\"sd\">            default is ``True``. Refreshing IDs can take a lot of time in</span>\n<span class=\"sd\">            a big project.</span>\n<span class=\"sd\">        import_materials : bool optional</span>\n<span class=\"sd\">            Either to import material names from the file or not if presents.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">         bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">healing</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Assigning `0` or `1` to `healing` option is deprecated. Assign `True` or `False` instead.&quot;</span><span class=\"p\">,</span>\n                <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:NativeBodyParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;HealOption:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">healing</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Options:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;-1&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;FileType:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;UnRecognized&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MaxStitchTol:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ImportFreeSurfaces:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;GroupByAssembly:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CreateGroup:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;STLFileUnit:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MergeFacesAngle:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;PointCoincidenceTol:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mf\">1e-06</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CreateLightweightPart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ImportMaterialNames:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">import_materials</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SeparateDisjointLumps:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SourceFile:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Import</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">refresh_all_ids</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_all_ids</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Step file </span><span class=\"si\">{}</span><span class=\"s2\"> imported&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_spaceclaim_document</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">SCFile</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Import a SpaceClaim document.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        SCFile :</span>\n<span class=\"sd\">            Full path and name of the SpaceClaim file.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateUserDefinedModel</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">environlist</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span>\n        <span class=\"n\">latestversion</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">environlist</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;AWP_ROOT&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"n\">latestversion</span><span class=\"p\">:</span>\n                    <span class=\"n\">latestversion</span> <span class=\"o\">=</span> <span class=\"n\">l</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">latestversion</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;SpaceClaim is not found.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">scdm_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"n\">latestversion</span><span class=\"p\">],</span> <span class=\"s2\">&quot;scdm&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateUserDefinedModel</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:UserDefinedModelParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Definition&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;GeometryFilePath&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;&quot;&#39;</span> <span class=\"o\">+</span> <span class=\"n\">SCFile</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;String&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">1</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IsSpaceClaimLinkUDM&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">8</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">],</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Options&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Solid Bodies&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Surface Bodies&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Parameters&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Parameter Key&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;&quot;&quot;&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;String&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Named Selections&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">8</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Rendering Attributes&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Material Assignment&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Import suppressed for physics objects&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Explode Multi-Body Parts&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">8</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;SpaceClaim Installation Path&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;&quot;&#39;</span> <span class=\"o\">+</span> <span class=\"n\">scdm_path</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;String&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">8</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Smart CAD Update&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Int&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">8</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:GeometryParams&quot;</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;DllName:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SCIntegUDM&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Library:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;installLib&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Version:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;2.0&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ConnectionID:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh_all_ids</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">modeler_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modeler variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"k\">if</span> <span class=\"n\">_pythonver</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"n\">basestring</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">break_spaceclaim_connection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Break the connection with SpaceClaim.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.BreakUDMConnection</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SpaceClaim1&quot;</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">BreakUDMConnection</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_scdm_in_hfss</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">SpaceClaimFile</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Load a SpaceClaim file in HFSS.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        SpaceClaimFile : str</span>\n<span class=\"sd\">            Full path and name of the SpaceClaim file.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">         bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateUserDefinedModel</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.BreakUDMConnection</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_spaceclaim_document</span><span class=\"p\">(</span><span class=\"n\">SpaceClaimFile</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">break_spaceclaim_connection</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_hfss</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cadfile</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Load HFSS.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.41</span>\n<span class=\"sd\">           Use :func:`import_3d_cad` property instead.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cadfile : str</span>\n<span class=\"sd\">            Name of the CAD file to load in HFSS.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`load_hfss` is deprecated. Use `import_3d_cad` method instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_3d_cad</span><span class=\"p\">(</span><span class=\"n\">cadfile</span><span class=\"p\">,</span> <span class=\"n\">healing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_faces_from_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mats</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Select all outer faces given a list of materials.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        mats : list</span>\n<span class=\"sd\">            List of materials to include in the search for outer</span>\n<span class=\"sd\">            faces.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of all outer faces of the specified materials.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetObjectsByMaterial</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetFaceIDs</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selecting outer faces.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sel</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">mats</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"n\">mats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">mats</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">mat</span> <span class=\"ow\">in</span> <span class=\"n\">mats</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsByMaterial</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">))</span>\n            <span class=\"n\">objs</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsByMaterial</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())))</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n\n                <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">facce</span> <span class=\"ow\">in</span> <span class=\"n\">oFaceIDs</span><span class=\"p\">:</span>\n                    <span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">facce</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">sel</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">select_allfaces_fromobjects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">elements</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Select all outer faces given a list of objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        elements : list</span>\n<span class=\"sd\">            List of objects to include in the search for outer faces.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of outer faces in the given list of objects.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetFaceIDs</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selecting outer faces.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sel</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">elements</span><span class=\"p\">:</span>\n\n            <span class=\"n\">oFaceIDs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">facce</span> <span class=\"ow\">in</span> <span class=\"n\">oFaceIDs</span><span class=\"p\">:</span>\n                <span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">facce</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">sel</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setunassigned_mats</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Find unassagned objects and set them to non-model.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SetPropertyValue</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">oObjects</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectsInGroup</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solids&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">oObjects</span><span class=\"p\">:</span>\n            <span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPropertyValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Geometry3DAttributeTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">pro</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&quot;&quot;&#39;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetPropertyValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Geometry3DAttributeTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">automatic_thicken_sheets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputlist</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">internalExtr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">internalvalue</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create thickened sheets for a list of input faces.</span>\n\n<span class=\"sd\">        This method automatically checks the direction in which to thicken the sheets.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        inputlist : list</span>\n<span class=\"sd\">            List of faces.</span>\n<span class=\"sd\">        value : float</span>\n<span class=\"sd\">            Value in millimeters to thicken the sheets.</span>\n<span class=\"sd\">        internalExtr : bool, optional</span>\n<span class=\"sd\">            Whether to extrude sheets internally. The default is ``True``.</span>\n<span class=\"sd\">        internalvalue : float, optional</span>\n<span class=\"sd\">            Value in millimeters to thicken the sheets internally (vgoing into the model).</span>\n<span class=\"sd\">            The default is ``1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ThickenSheet</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">aedt_bounding_box</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n        <span class=\"n\">directions</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">inputlist</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">inputlist</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">inputlist</span><span class=\"p\">:</span>\n            <span class=\"n\">objID</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"n\">faceCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceCenter</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">objID</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n            <span class=\"n\">directionfound</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n            <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">directionfound</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ThickenSheet</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SheetThickenParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Thickness:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BothSides:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">aedt_bounding_box2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">aedt_bounding_box</span> <span class=\"o\">!=</span> <span class=\"n\">aedt_bounding_box2</span><span class=\"p\">:</span>\n                    <span class=\"n\">directions</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;External&quot;</span>\n                    <span class=\"n\">directionfound</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ThickenSheet</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SheetThickenParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Thickness:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BothSides:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">aedt_bounding_box2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_bounding_box</span><span class=\"p\">()</span>\n\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">aedt_bounding_box</span> <span class=\"o\">!=</span> <span class=\"n\">aedt_bounding_box2</span><span class=\"p\">:</span>\n                    <span class=\"n\">directions</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Internal&quot;</span>\n                    <span class=\"n\">directionfound</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">10</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">inputlist</span><span class=\"p\">:</span>\n            <span class=\"n\">objID</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"n\">faceCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceCenter</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">objID</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n            <span class=\"k\">if</span> <span class=\"n\">directions</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Internal&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ThickenSheet</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SheetThickenParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Thickness:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BothSides:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ThickenSheet</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SheetThickenParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Thickness:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BothSides:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">internalExtr</span><span class=\"p\">:</span>\n                <span class=\"n\">objID2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceIDs</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">fid</span> <span class=\"ow\">in</span> <span class=\"n\">objID2</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">faceCenter2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceCenter</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fid</span><span class=\"p\">))</span>\n                        <span class=\"k\">if</span> <span class=\"n\">faceCenter2</span> <span class=\"o\">==</span> <span class=\"n\">faceCenter</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">MoveFaces</span><span class=\"p\">(</span>\n                                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">],</span>\n                                <span class=\"p\">[</span>\n                                    <span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"p\">[</span>\n                                        <span class=\"s2\">&quot;NAME:MoveFacesParameters&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;MoveAlongNormalFlag:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;OffsetDistance:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">internalvalue</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;MoveVectorX:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;MoveVectorY:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;MoveVectorZ:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;FacesToMove:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fid</span><span class=\"p\">)],</span>\n                                    <span class=\"p\">],</span>\n                                <span class=\"p\">],</span>\n                            <span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;done&quot;</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># self.modeler_oproject.ClearMessages()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move_face</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">faces</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Move an input face or a list of input faces of a specific object.</span>\n\n<span class=\"sd\">        This method moves a face or a list of faces which belong to the same solid.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        faces : list</span>\n<span class=\"sd\">            List of Face ID or List of :class:`pyaedt.modeler.Object3d.FacePrimitive` object or mixed.</span>\n<span class=\"sd\">        offset : float, optional</span>\n<span class=\"sd\">             Offset to apply in model units. The default is ``1.0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.MoveFaces</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">face_selection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">faces</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">face_selection</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByFaceID</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">selection</span><span class=\"p\">:</span>\n                <span class=\"n\">selection</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByFaceID</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">selection</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByFaceID</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span>\n\n        <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:MoveFacesParameters&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveAlongNormalFlag:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;OffsetDistance:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveVectorX:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveVectorY:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveVectorZ:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;FacesToMove:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">selection</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">MoveFaces</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move_edge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Move an input edge or a list of input edges of a specific object.</span>\n\n<span class=\"sd\">        This method moves an edge or a list of edges which belong to the same solid.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edges : list</span>\n<span class=\"sd\">            List of Edge ID or List of :class:`pyaedt.modeler.Object3d.EdgePrimitive` object or mixed.</span>\n<span class=\"sd\">        offset : float, optional</span>\n<span class=\"sd\">             Offset to apply in model units. The default is ``1.0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.MoveEdges</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">edge_selection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">edge_selection</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByEdgeID</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">selection</span><span class=\"p\">:</span>\n                <span class=\"n\">selection</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByEdgeID</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">selection</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByEdgeID</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span>\n\n        <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Parameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:MoveEdgesParameters&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveAlongNormalFlag:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;OffsetDistance:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveVectorX:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveVectorY:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MoveVectorZ:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;EdgesToMove:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">selection</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">MoveEdges</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Position</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;Position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        args : list or int</span>\n<span class=\"sd\">            Position of the item as either a list of the ``[x, y, z]`` coordinates</span>\n<span class=\"sd\">            or three separate values. If no or insufficient arguments</span>\n<span class=\"sd\">            are specified, ``0`` is applied.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">X</span>\n            <span class=\"k\">elif</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Y</span>\n            <span class=\"k\">elif</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Z</span>\n\n        <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"k\">elif</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"k\">elif</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n        <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"mi\">3</span>\n\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">SweepOptions</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Manages sweep options.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        draftType : str, optional</span>\n<span class=\"sd\">            Type of the draft. Options are ``&quot;Round&quot;``, ``&quot;Natural&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Extended&quot;``. The default is ``&quot;Round&quot;``.</span>\n<span class=\"sd\">        draftAngle : str, optional</span>\n<span class=\"sd\">            Draft angle with units. The default is ``&quot;0deg&quot;``.</span>\n<span class=\"sd\">        twistAngle : str, optional</span>\n<span class=\"sd\">            Twist angle with units. The default is ``&quot;0deg&quot;``.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">draftType</span><span class=\"o\">=</span><span class=\"s2\">&quot;Round&quot;</span><span class=\"p\">,</span> <span class=\"n\">draftAngle</span><span class=\"o\">=</span><span class=\"s2\">&quot;0deg&quot;</span><span class=\"p\">,</span> <span class=\"n\">twistAngle</span><span class=\"o\">=</span><span class=\"s2\">&quot;0deg&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DraftType</span> <span class=\"o\">=</span> <span class=\"n\">draftType</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DraftAngle</span> <span class=\"o\">=</span> <span class=\"n\">draftAngle</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">TwistAngle</span> <span class=\"o\">=</span> <span class=\"n\">twistAngle</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">components</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Group objects or groups into one group.</span>\n\n<span class=\"sd\">        At least one between ``objects``, ``components``, ``groups`` has to be defined.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list, optional</span>\n<span class=\"sd\">            List of objects. The default is ``None``, in which case a group</span>\n<span class=\"sd\">            with all objects is created.</span>\n<span class=\"sd\">        components : list, optional</span>\n<span class=\"sd\">            List of 3d components to group. The default is ``None``.</span>\n<span class=\"sd\">        groups : list, optional</span>\n<span class=\"sd\">            List of groups. The default is ``None``.</span>\n<span class=\"sd\">        group_name : str, optional</span>\n<span class=\"sd\">            Name of the new group. The default is ``None``.</span>\n<span class=\"sd\">            It is not possible to choose the name but a name is</span>\n<span class=\"sd\">            assigned automatically.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">           Name assigned to the new group.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">components</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">groups</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">objects</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one between ``objects``, ``components``, ``groups`` has to be defined.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">all_objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_names</span>\n        <span class=\"k\">if</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"n\">object_selection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">object_selection</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">groups</span><span class=\"p\">:</span>\n            <span class=\"n\">group_selection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">group_selection</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">components</span><span class=\"p\">:</span>\n            <span class=\"n\">component_selection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">component_selection</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:GroupParameter&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ParentGroupID:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Parts:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">object_selection</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SubmodelInstances:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">component_selection</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Groups:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">group_selection</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">assigned_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateGroup</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">group_name</span> <span class=\"ow\">and</span> <span class=\"n\">group_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">all_objects</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:Attributes&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">assigned_name</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"p\">]],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">group_name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">assigned_name</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ungroup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Ungroup one or more groups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        groups : list</span>\n<span class=\"sd\">            List of group names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Ungroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">group_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Groups:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">group_list</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Ungroup</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">flatten_assembly</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Flatten the assembly, removing all group trees.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.FlattenGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FlattenGroup</span><span class=\"p\">([</span><span class=\"s2\">&quot;Groups:=&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrap_sheet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">imprinted</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Execute the sheet wrapping around an object.</span>\n<span class=\"sd\">        If wrapping produces an unclassified operation it will be reverted.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sheet_name : str, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Sheet name or sheet object.</span>\n<span class=\"sd\">        object_name : str, :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Object name or solid object.</span>\n<span class=\"sd\">        imprinted : bool, optional</span>\n<span class=\"sd\">            Either if imprint or not over the sheet. Default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            Command execution status.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sheet_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sheet_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sheet_names</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> is not a valid sheet.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">object_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_names</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> is not a valid solid body.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">unclassified</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_objects</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">WrapSheet</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"p\">,</span> <span class=\"n\">object_name</span><span class=\"p\">)],</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:WrapSheetParameters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Imprinted:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">imprinted</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">is_unclassified</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclassified_objects</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">unclassified</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_unclassified</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to Wrap sheet. Reverting to original objects.&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">imprinted</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/Modeler", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}