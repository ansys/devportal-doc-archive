{"parents": [{"link": "../../", "title": "Examples"}, {"link": "../", "title": "EMIT examples"}], "prev": {"link": "../ComputeChannelSeparation/", "title": "EMIT: Compute required channel separation"}, "next": {"link": "../EMIT_Example/", "title": "EMIT: antenna"}, "title": "EMIT: Compute receiver protection levels", "meta": null, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-07-emit-computeprotectionlevels-py\"><span class=\"std std-ref\">here</span></a>\nto download the full example code</p>\n</div>\n<section class=\"sphx-glr-example-title\" id=\"emit-compute-receiver-protection-levels\">\n<span id=\"sphx-glr-examples-07-emit-computeprotectionlevels-py\"></span><h1>EMIT: Compute receiver protection levels<a class=\"headerlink\" href=\"#emit-compute-receiver-protection-levels\" title=\"Permalink to this heading\">#</a></h1>\n<p>This example shows how you can use PyAEDT to open an AEDT project with\nan EMIT design and analyze the results to determine if the received\npower at the input to each receiver exceeds the specified protection\nlevels.</p>\n<p>This example requires Ansys AEDT 2023 R2 or later. Uncomment it and run on correct version.</p>\n<section id=\"perform-required-imports\">\n<h2>Perform required imports<a class=\"headerlink\" href=\"#perform-required-imports\" title=\"Permalink to this heading\">#</a></h2>\n<p>Perform required imports.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyaedt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">Emit</span>\n\n<span class=\"c1\"># # Check to see which Python libraries have been installed</span>\n<span class=\"c1\"># reqs = subprocess.check_output([sys.executable, &#39;-m&#39;, &#39;pip&#39;, &#39;freeze&#39;])</span>\n<span class=\"c1\"># installed_packages = [r.decode().split(&#39;==&#39;)[0] for r in reqs.split()]</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># # Install required packages if they are not installed</span>\n<span class=\"c1\"># def install(package):</span>\n<span class=\"c1\">#     subprocess.check_call([sys.executable, &#39;-m&#39;, &#39;pip&#39;, &#39;install&#39;, package])</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># # Install any missing libraries</span>\n<span class=\"c1\"># required_packages = [&#39;plotly&#39;]</span>\n<span class=\"c1\"># for package in required_packages:</span>\n<span class=\"c1\">#     if package not in installed_packages:</span>\n<span class=\"c1\">#         install(package)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># # Import required modules</span>\n<span class=\"c1\"># import plotly.graph_objects as go</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Set non-graphical mode</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Set non-graphical mode. ``&quot;PYAEDT_NON_GRAPHICAL&quot;``` is needed to generate</span>\n<span class=\"c1\"># # documentation only.</span>\n<span class=\"c1\"># # You can set ``non_graphical`` either to ``True`` or ``False``.</span>\n<span class=\"c1\"># # The ``new_thread`` Boolean variable defines whether to create a new instance</span>\n<span class=\"c1\"># # of AEDT or try to connect to existing instance of it if one is available.</span>\n\n<span class=\"c1\"># non_graphical = os.getenv(&quot;PYAEDT_NON_GRAPHICAL&quot;, &quot;False&quot;).lower() in (&quot;true&quot;, &quot;1&quot;, &quot;t&quot;)</span>\n<span class=\"c1\"># new_thread = False</span>\n<span class=\"c1\"># desktop_version = &quot;2023.2&quot;</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Launch AEDT with EMIT</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Launch AEDT with EMIT. The ``Desktop`` class initializes AEDT and starts it</span>\n<span class=\"c1\"># # on the specified version and in the specified graphical mode.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># d = pyaedt.launch_desktop(desktop_version, non_graphical, new_thread)</span>\n<span class=\"c1\"># emitapp = Emit(pyaedt.generate_unique_project_name())</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Specify the protection levels</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # The protection levels are specified in dBm.</span>\n<span class=\"c1\"># # If the damage threshold is exceeded, permanent damage to the receiver front</span>\n<span class=\"c1\"># # end may occur.</span>\n<span class=\"c1\"># # Exceeding the overload threshold severely densensitizes the receiver.</span>\n<span class=\"c1\"># # Exceeding the intermod threshold can drive the victim receiver into non-</span>\n<span class=\"c1\"># # linear operation, where it operates as a mixer.</span>\n<span class=\"c1\"># # Exceeding the desense threshold reduces the signal-to-noise ratio and can</span>\n<span class=\"c1\"># # reduce the maximum range, maximum bandwidth, and/or the overall link quality.</span>\n\n<span class=\"c1\"># header_color = &#39;grey&#39;</span>\n<span class=\"c1\"># damage_threshold = 30</span>\n<span class=\"c1\"># overload_threshold = -4</span>\n<span class=\"c1\"># intermod_threshold = -30</span>\n<span class=\"c1\"># desense_threshold = -104</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Create and connect EMIT components</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Set up the scenario with radios connected to antennas.</span>\n\n<span class=\"c1\"># bluetooth, blue_ant = emitapp.modeler.components.create_radio_antenna(&quot;Bluetooth Low Energy (LE)&quot;, &quot;Bluetooth&quot;)</span>\n<span class=\"c1\"># gps, gps_ant = emitapp.modeler.components.create_radio_antenna(&quot;GPS Receiver&quot;, &quot;GPS&quot;)</span>\n<span class=\"c1\"># wifi, wifi_ant = emitapp.modeler.components.create_radio_antenna(&quot;WiFi - 802.11-2012&quot;, &quot;WiFi&quot;)</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Configure the radios</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Enable the HR-DSSS bands for the Wi-Fi radio and set the power level</span>\n<span class=\"c1\"># # for all transmit bands to -20 dBm.</span>\n\n<span class=\"c1\"># bands = wifi.bands()</span>\n<span class=\"c1\"># for band in bands:</span>\n<span class=\"c1\">#     if &quot;HR-DSSS&quot; in band.node_name:</span>\n<span class=\"c1\">#         if &quot;Ch 1-13&quot; in band.node_name:</span>\n<span class=\"c1\">#             band.enabled=True</span>\n<span class=\"c1\">#             band.set_band_power_level(-20)</span>\n\n<span class=\"c1\"># # Reduce the bluetooth transmit power</span>\n<span class=\"c1\"># bands = bluetooth.bands()</span>\n<span class=\"c1\"># for band in bands:</span>\n<span class=\"c1\">#     band.set_band_power_level(-20)</span>\n\n<span class=\"c1\"># # Configure the first Rx band in the GPS Rx to have 0 dBm Susc</span>\n<span class=\"c1\"># def set_protection_band(radio):</span>\n<span class=\"c1\">#     &quot;&quot;&quot;Set susceptibility of the Rx Band to 0 dBm</span>\n<span class=\"c1\">#     for all frequencies.</span>\n<span class=\"c1\">#     Arguments:</span>\n<span class=\"c1\">#         radio: Radio to modify.</span>\n<span class=\"c1\">#     &quot;&quot;&quot;</span>\n<span class=\"c1\">#     bands = radio.bands()</span>\n<span class=\"c1\">#     prop_list = {</span>\n<span class=\"c1\">#                 &quot;InBandSensitivity&quot;: &quot;0&quot;,</span>\n<span class=\"c1\">#                 &quot;SnrAtSensitivity&quot;: &quot;0&quot;,</span>\n<span class=\"c1\">#                 &quot;RxMaxAttenuation&quot;: &quot;0&quot;</span>\n<span class=\"c1\">#                 }</span>\n<span class=\"c1\">#     for band in bands:</span>\n<span class=\"c1\">#         for child in band.children:</span>\n<span class=\"c1\">#             if child.props[&quot;Type&quot;] == &quot;RxSusceptibilityProfNode&quot;:</span>\n<span class=\"c1\">#                 child._set_prop_value(prop_list)</span>\n<span class=\"c1\">#                 break # only one Rx Spectral Profile per Band</span>\n\n<span class=\"c1\"># def get_radio_node(radio_name):</span>\n<span class=\"c1\">#     &quot;&quot;&quot;Get the radio node that matches the</span>\n<span class=\"c1\">#     given radio name.</span>\n<span class=\"c1\">#     Arguments:</span>\n<span class=\"c1\">#         radio_name: String name of the radio.</span>\n<span class=\"c1\">#     Returns: Instance of the radio.</span>\n<span class=\"c1\">#     &quot;&quot;&quot;</span>\n<span class=\"c1\">#     if gps.name == radio_name:</span>\n<span class=\"c1\">#         radio = gps</span>\n<span class=\"c1\">#     elif bluetooth.name == radio_name:</span>\n<span class=\"c1\">#         radio = bluetooth</span>\n<span class=\"c1\">#     else:</span>\n<span class=\"c1\">#         radio = wifi</span>\n<span class=\"c1\">#     return radio</span>\n\n<span class=\"c1\"># set_protection_band(bluetooth)</span>\n<span class=\"c1\"># set_protection_band(gps)</span>\n<span class=\"c1\"># set_protection_band(wifi)</span>\n\n<span class=\"c1\"># bands = gps.bands()</span>\n<span class=\"c1\"># for band in bands:</span>\n<span class=\"c1\">#     for child in band.children:</span>\n<span class=\"c1\">#         if &quot;L2 P(Y)&quot; in band.node_name:</span>\n<span class=\"c1\">#             band.enabled=True</span>\n<span class=\"c1\">#         else:</span>\n<span class=\"c1\">#             band.enabled=False</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Load the results set</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Create a results revision and load it for analysis.</span>\n\n<span class=\"c1\"># rev = emitapp.analyze()</span>\n<span class=\"c1\"># modeRx = emitapp.tx_rx_mode().rx</span>\n<span class=\"c1\"># modeTx = emitapp.tx_rx_mode().tx</span>\n<span class=\"c1\"># modeEmi = emitapp.result_type().emi</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Generate a legend</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Define the thresholds and colors used to display the results of</span>\n<span class=\"c1\"># # the protection level analysis.</span>\n\n<span class=\"c1\"># def create_legend_table():</span>\n<span class=\"c1\">#     &quot;&quot;&quot;Create a table showing the defined protection levels.&quot;&quot;&quot;</span>\n<span class=\"c1\">#     protectionLevels = [&#39;&gt;{} dBm&#39;.format(damage_threshold), &#39;&gt;{} dBm&#39;.format(overload_threshold),</span>\n<span class=\"c1\">#         &#39;&gt;{} dBm&#39;.format(intermod_threshold), &#39;&gt;{} dBm&#39;.format(desense_threshold)]</span>\n<span class=\"c1\">#     fig = go.Figure(data=[go.Table(</span>\n<span class=\"c1\">#         header=dict(</span>\n<span class=\"c1\">#             values=[&#39;&lt;b&gt;Interference&lt;/b&gt;&#39;,&#39;&lt;b&gt;Power Level Threshold&lt;/b&gt;&#39;],</span>\n<span class=\"c1\">#             line_color=&#39;darkslategray&#39;,</span>\n<span class=\"c1\">#             fill_color=header_color,</span>\n<span class=\"c1\">#             align=[&#39;left&#39;,&#39;center&#39;],</span>\n<span class=\"c1\">#             font=dict(color=&#39;white&#39;,size=16)</span>\n<span class=\"c1\">#         ),</span>\n<span class=\"c1\">#         cells=dict(</span>\n<span class=\"c1\">#             values=[[&#39;Damage&#39;,&#39;Overload&#39;,&#39;Intermodulation&#39;,&#39;Clear&#39;], protectionLevels],</span>\n<span class=\"c1\">#             line_color=&#39;darkslategray&#39;,</span>\n<span class=\"c1\">#             fill_color=[&#39;white&#39;,[&#39;red&#39;,&#39;orange&#39;,&#39;yellow&#39;,&#39;green&#39;]],</span>\n<span class=\"c1\">#             align = [&#39;left&#39;, &#39;center&#39;],</span>\n<span class=\"c1\">#             font = dict(</span>\n<span class=\"c1\">#                 color = [&#39;darkslategray&#39;,&#39;black&#39;],</span>\n<span class=\"c1\">#                 size = 15)</span>\n<span class=\"c1\">#         )</span>\n<span class=\"c1\">#     )])</span>\n<span class=\"c1\">#     fig.update_layout(</span>\n<span class=\"c1\">#         title=dict(</span>\n<span class=\"c1\">#             text=&#39;Protection Levels (dBm)&#39;,</span>\n<span class=\"c1\">#             font=dict(color=&#39;darkslategray&#39;,size=20),</span>\n<span class=\"c1\">#             x = 0.5</span>\n<span class=\"c1\">#         ),</span>\n<span class=\"c1\">#         width = 600</span>\n<span class=\"c1\">#         )</span>\n<span class=\"c1\">#     fig.show()</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Create a scenario matrix view</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Create a scenario matrix view with the transmitters defined across the top</span>\n<span class=\"c1\"># # and receivers down the left-most column. The power at the input to each</span>\n<span class=\"c1\"># # receiver is shown in each cell of the matrix and color-coded based on the</span>\n<span class=\"c1\"># # protection level thresholds defined.</span>\n\n<span class=\"c1\"># def create_scenario_view(emis, colors, tx_radios, rx_radios):</span>\n<span class=\"c1\">#     &quot;&quot;&quot;Create a scenario matrix-like table with the higher received</span>\n<span class=\"c1\">#     power for each Tx-Rx radio combination. The colors</span>\n<span class=\"c1\">#     used for the scenario matrix view are based on the highest</span>\n<span class=\"c1\">#     protection level that the received power exceeds.&quot;&quot;&quot;</span>\n<span class=\"c1\">#     fig = go.Figure(data=[go.Table(</span>\n<span class=\"c1\">#         header=dict(</span>\n<span class=\"c1\">#             values=[&#39;&lt;b&gt;Tx/Rx&lt;/b&gt;&#39;,&#39;&lt;b&gt;{}&lt;/b&gt;&#39;.format(tx_radios[0]),&#39;&lt;b&gt;{}&lt;/b&gt;&#39;.format(tx_radios[1])],</span>\n<span class=\"c1\">#             line_color=&#39;darkslategray&#39;,</span>\n<span class=\"c1\">#             fill_color=header_color,</span>\n<span class=\"c1\">#             align=[&#39;left&#39;,&#39;center&#39;],</span>\n<span class=\"c1\">#             font=dict(color=&#39;white&#39;,size=16)</span>\n<span class=\"c1\">#         ),</span>\n<span class=\"c1\">#         cells=dict(</span>\n<span class=\"c1\">#             values=[</span>\n<span class=\"c1\">#                 rx_radios,</span>\n<span class=\"c1\">#                 emis[0],</span>\n<span class=\"c1\">#                 emis[1]],</span>\n<span class=\"c1\">#             line_color=&#39;darkslategray&#39;,</span>\n<span class=\"c1\">#             fill_color=[&#39;white&#39;,colors[0], colors[1]],</span>\n<span class=\"c1\">#             align = [&#39;left&#39;, &#39;center&#39;],</span>\n<span class=\"c1\">#             font = dict(</span>\n<span class=\"c1\">#                 color = [&#39;darkslategray&#39;,&#39;black&#39;],</span>\n<span class=\"c1\">#                 size = 15)</span>\n<span class=\"c1\">#         )</span>\n<span class=\"c1\">#     )])</span>\n<span class=\"c1\">#     fig.update_layout(</span>\n<span class=\"c1\">#         title=dict(</span>\n<span class=\"c1\">#             text=&#39;Protection Levels (dBm)&#39;,</span>\n<span class=\"c1\">#             font=dict(color=&#39;darkslategray&#39;,size=20),</span>\n<span class=\"c1\">#             x = 0.5</span>\n<span class=\"c1\">#         ),</span>\n<span class=\"c1\">#         width = 600</span>\n<span class=\"c1\">#         )</span>\n<span class=\"c1\">#     fig.show()</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Get all the radios in the project</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Get lists of all transmitters and receivers in the project.</span>\n\n<span class=\"c1\"># rx_radios = emitapp.results.get_radio_names(modeRx)</span>\n<span class=\"c1\"># tx_radios = emitapp.results.get_radio_names(modeTx)</span>\n<span class=\"c1\"># domain = emitapp.interaction_domain()</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Iterate over all the radios</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # Iterate over all the transmitters and receivers and compute the power</span>\n<span class=\"c1\"># # at the input to each receiver due to each of the transmitters. Computes</span>\n<span class=\"c1\"># # which, if any, protection levels are exceeded by these power levels.</span>\n\n<span class=\"c1\"># emi_matrix=[]</span>\n<span class=\"c1\"># all_colors=[]</span>\n<span class=\"c1\"># for tx_radio in tx_radios:</span>\n<span class=\"c1\">#     rx_emis = []</span>\n<span class=\"c1\">#     rx_colors = []</span>\n<span class=\"c1\">#     for rx_radio in rx_radios:</span>\n<span class=\"c1\">#         if tx_radio == rx_radio:</span>\n<span class=\"c1\">#             # skip self-interaction</span>\n<span class=\"c1\">#             rx_emis.append(&#39;N/A&#39;)</span>\n<span class=\"c1\">#             rx_colors.append(&#39;green&#39;)</span>\n<span class=\"c1\">#             continue</span>\n<span class=\"c1\">#         print(&quot;Power Thresholds for {tx} vs {rx}&quot;.format(tx=tx_radio,rx=rx_radio))</span>\n<span class=\"c1\">#         for rx_band in emitapp.results.get_band_names(rx_radio, modeRx):</span>\n<span class=\"c1\">#             # if &quot;L2 P(Y)&quot; not in rx_band:</span>\n<span class=\"c1\">#             #     # skip &#39;normal&#39; Rx bands</span>\n<span class=\"c1\">#             #     continue</span>\n<span class=\"c1\">#             # check for enabled Bands</span>\n<span class=\"c1\">#             cur_rx_radio = get_radio_node(rx_radio)</span>\n<span class=\"c1\">#             bands = cur_rx_radio.bands()</span>\n<span class=\"c1\">#             for band in bands:</span>\n<span class=\"c1\">#                 if rx_band in band.node_name:</span>\n<span class=\"c1\">#                     bandEnabled = band.enabled</span>\n<span class=\"c1\">#                     break</span>\n<span class=\"c1\">#             if not bandEnabled:</span>\n<span class=\"c1\">#                 continue</span>\n<span class=\"c1\">#             # get enabled tx band</span>\n<span class=\"c1\">#             cur_tx_radio = get_radio_node(tx_radio)</span>\n<span class=\"c1\">#             bands = cur_tx_radio.bands()</span>\n<span class=\"c1\">#             for band in bands:</span>\n<span class=\"c1\">#                 if band.enabled:</span>\n<span class=\"c1\">#                     tx_band = band.node_name</span>\n<span class=\"c1\">#                     break</span>\n<span class=\"c1\">#             for tx_band_shortname in emitapp.results.get_band_names(tx_radio, modeTx):</span>\n<span class=\"c1\">#                 if tx_band_shortname in tx_band:</span>\n<span class=\"c1\">#                     break</span>\n\n<span class=\"c1\">#             # Find the highest power level at the Rx input due</span>\n<span class=\"c1\">#             # to each Tx Radio</span>\n<span class=\"c1\">#             domain.set_receiver(rx_radio, rx_band, -1)</span>\n<span class=\"c1\">#             domain.set_interferers([tx_radio],[tx_band_shortname],[-1])</span>\n<span class=\"c1\">#             interaction = rev.run(domain)</span>\n<span class=\"c1\">#             worst = interaction.get_worst_instance(modeEmi)</span>\n\n<span class=\"c1\">#             # If the worst case for the band-pair is below the EMI limit, then</span>\n<span class=\"c1\">#             # there are no interference issues and no offset is required.</span>\n<span class=\"c1\">#             if worst.has_valid_values():</span>\n<span class=\"c1\">#                 emi = worst.get_value(modeEmi)</span>\n<span class=\"c1\">#                 rx_emis.append(emi)</span>\n<span class=\"c1\">#                 if (emi &gt; damage_threshold):</span>\n<span class=\"c1\">#                     rx_colors.append(&#39;red&#39;)</span>\n<span class=\"c1\">#                     print(&quot;{} may damage {}&quot;.format(tx_radio, rx_radio))</span>\n<span class=\"c1\">#                 elif (emi &gt; overload_threshold):</span>\n<span class=\"c1\">#                     rx_colors.append(&#39;orange&#39;)</span>\n<span class=\"c1\">#                     print(&quot;{} may overload {}&quot;.format(tx_radio, rx_radio))</span>\n<span class=\"c1\">#                 elif (emi &gt; intermod_threshold):</span>\n<span class=\"c1\">#                     rx_colors.append(&#39;yellow&#39;)</span>\n<span class=\"c1\">#                     print(&quot;{} may cause intermodulation in {}&quot;.format(tx_radio, rx_radio))</span>\n<span class=\"c1\">#                 else:</span>\n<span class=\"c1\">#                     rx_colors.append(&#39;green&#39;)</span>\n<span class=\"c1\">#                     print(&quot;{} may cause desensitization in {}&quot;.format(tx_radio, rx_radio))</span>\n<span class=\"c1\">#             else:</span>\n<span class=\"c1\">#                 rx_emis.append(-200)</span>\n<span class=\"c1\">#                 rx_colors.append(&#39;red&#39;)</span>\n<span class=\"c1\">#     all_colors.append(rx_colors)</span>\n<span class=\"c1\">#     emi_matrix.append(rx_emis)</span>\n\n<span class=\"c1\"># # Create a scenario matrix-like view for the protection levels</span>\n<span class=\"c1\"># create_scenario_view(emi_matrix, all_colors, tx_radios, rx_radios)</span>\n\n<span class=\"c1\"># # Create a legend for the protection levels</span>\n<span class=\"c1\"># create_legend_table()</span>\n\n<span class=\"c1\"># ###############################################################################</span>\n<span class=\"c1\"># # Save project and close AEDT</span>\n<span class=\"c1\"># # ~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\"># # After the simulation completes, you can close AEDT or release it using the</span>\n<span class=\"c1\"># # :func:`pyaedt.Desktop.force_close_desktop` method.</span>\n<span class=\"c1\"># # All methods provide for saving the project before closing.</span>\n\n<span class=\"c1\"># emitapp.save_project()</span>\n<span class=\"c1\"># emitapp.release_desktop(close_projects=True, close_desktop=True)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  0.000 seconds)</p>\n<div class=\"sphx-glr-footer sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-07-emit-computeprotectionlevels-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/8812f0dbdf79d7d59366316f02f624e7/ComputeProtectionLevels.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">ComputeProtectionLevels.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/67cd42600c445eb962213b557a1e879c/ComputeProtectionLevels.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">ComputeProtectionLevels.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["examples/07-EMIT/EMIT_Example", "EMIT: antenna", "N", "next"], ["examples/07-EMIT/ComputeChannelSeparation", "EMIT: Compute required channel separation", "P", "previous"]], "sourcename": "examples/07-EMIT/ComputeProtectionLevels.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">EMIT: Compute receiver protection levels</a><ul>\n<li><a class=\"reference internal\" href=\"#perform-required-imports\">Perform required imports</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples/07-EMIT/ComputeProtectionLevels", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}