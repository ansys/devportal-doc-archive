{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.edb_core.nets", "body": "<h1>Source code for pyaedt.edb_core.nets</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.nets_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBNetsData</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.padstacks_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBPadstackInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.general</span> <span class=\"kn\">import</span> <span class=\"n\">convert_py_list_to_net_list</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">CSS4_COLORS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">plot_matplotlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.geometry_operators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n\n\n<div class=\"viewcode-block\" id=\"EdbNets\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets/#pyaedt.edb_core.nets.EdbNets\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EdbNets</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Manages EDB methods for nets management accessible from `Edb.core_nets` property.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_nets = edbapp.core_nets</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">p_edb</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">p_edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_builder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">builder</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_active_layout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_cell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">cell</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Db object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">db</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Edb logger.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Nets.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.edb_core.edb_data.nets_data.EDBNetsData`]</span>\n<span class=\"sd\">            Dictionary of nets.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">Nets</span><span class=\"p\">:</span>\n            <span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">EDBNetsData</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nets</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signal_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Signal nets.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.edb_core.edb_data.EDBNetsData`]</span>\n<span class=\"sd\">            Dictionary of signal nets.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">IsPowerGround</span><span class=\"p\">():</span>\n                <span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"n\">nets</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">power_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Power nets.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.edb_core.edb_data.EDBNetsData`]</span>\n<span class=\"sd\">            Dictionary of power nets.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">IsPowerGround</span><span class=\"p\">():</span>\n                <span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"n\">nets</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">eligible_power_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return a list of nets calculated by area to be eligible for PWR/Ground net classification.</span>\n<span class=\"sd\">            It uses the same algorithm implemented in SIwave.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        threshold : float, optional</span>\n<span class=\"sd\">           Area ratio used by the ``get_power_ground_nets`` method.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of  :class:`pyaedt.edb_core.edb_data.EDBNetsData`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pwr_gnd_nets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">Nets</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span><span class=\"p\">:</span>\n            <span class=\"n\">total_plane_area</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"n\">total_trace_area</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"k\">for</span> <span class=\"n\">primitive</span> <span class=\"ow\">in</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">Primitives</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetPrimitiveType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Primitive</span><span class=\"o\">.</span><span class=\"n\">PrimitiveType</span><span class=\"o\">.</span><span class=\"n\">Bondwire</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetPrimitiveType</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Primitive</span><span class=\"o\">.</span><span class=\"n\">PrimitiveType</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">:</span>\n                    <span class=\"n\">total_plane_area</span> <span class=\"o\">+=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Area</span><span class=\"p\">())</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">total_trace_area</span> <span class=\"o\">+=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Area</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"n\">total_plane_area</span> <span class=\"o\">==</span> <span class=\"mf\">0.0</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">total_trace_area</span> <span class=\"o\">==</span> <span class=\"mf\">0.0</span><span class=\"p\">:</span>\n                <span class=\"n\">pwr_gnd_nets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">EDBNetsData</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">))</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">total_plane_area</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span> <span class=\"ow\">and</span> <span class=\"n\">total_trace_area</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">total_plane_area</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">total_plane_area</span> <span class=\"o\">+</span> <span class=\"n\">total_trace_area</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                    <span class=\"n\">pwr_gnd_nets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">EDBNetsData</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">pwr_gnd_nets</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_eval_arc_points</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-12</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the points of the arc.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p1 : list</span>\n<span class=\"sd\">            Arc starting point.</span>\n<span class=\"sd\">        p2 : list</span>\n<span class=\"sd\">            Arc ending point.</span>\n<span class=\"sd\">        h : float</span>\n<span class=\"sd\">            Arc height.</span>\n<span class=\"sd\">        n : int</span>\n<span class=\"sd\">            Number of points to generate along the arc.</span>\n<span class=\"sd\">        tol : float</span>\n<span class=\"sd\">            Geometric tolerance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            points generated along the arc.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">h</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">h</span> <span class=\"o\">*=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">xa</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"o\">-</span><span class=\"n\">x1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">ya</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y2</span><span class=\"o\">-</span><span class=\"n\">y1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">xo</span> <span class=\"o\">=</span> <span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"n\">xa</span>\n        <span class=\"n\">yo</span> <span class=\"o\">=</span> <span class=\"n\">y1</span> <span class=\"o\">+</span> <span class=\"n\">ya</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">xa</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">ya</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">h</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># chord angle</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">r</span><span class=\"p\">)</span>  <span class=\"c1\"># chord angle</span>\n\n        <span class=\"c1\"># center of the circle</span>\n        <span class=\"n\">xc</span> <span class=\"o\">=</span> <span class=\"n\">xo</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">ya</span><span class=\"o\">/</span><span class=\"n\">a</span>\n        <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">yo</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">xa</span><span class=\"o\">/</span><span class=\"n\">a</span>\n\n        <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">((</span><span class=\"n\">y1</span><span class=\"o\">-</span><span class=\"n\">yc</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"o\">-</span><span class=\"n\">xc</span><span class=\"p\">))</span>\n        <span class=\"n\">xr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">yr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">dth</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">th</span>\n            <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"n\">xc</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">dth</span><span class=\"p\">)</span>\n            <span class=\"n\">yi</span> <span class=\"o\">=</span> <span class=\"n\">yc</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">-</span><span class=\"n\">dth</span><span class=\"p\">)</span>\n            <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">)</span>\n            <span class=\"n\">yr</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">yi</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">reverse</span><span class=\"p\">:</span>\n            <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n            <span class=\"n\">yr</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"c1\"># fmt: on</span>\n        <span class=\"k\">return</span> <span class=\"n\">xr</span><span class=\"p\">,</span> <span class=\"n\">yr</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_points_for_plot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">my_net_points</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the points to be plot</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">point</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">my_net_points</span><span class=\"p\">):</span>\n            <span class=\"c1\"># point = my_net_points[i]</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">IsArc</span><span class=\"p\">():</span>\n                <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">())</span>\n                <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">())</span>\n                <span class=\"c1\"># i += 1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">arc_h</span> <span class=\"o\">=</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">GetArcHeight</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n                <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">my_net_points</span><span class=\"p\">):</span>\n                    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n                <span class=\"n\">x_arc</span><span class=\"p\">,</span> <span class=\"n\">y_arc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_eval_arc_points</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">arc_h</span><span class=\"p\">)</span>\n                <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">x_arc</span><span class=\"p\">)</span>\n                <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">y_arc</span><span class=\"p\">)</span>\n                <span class=\"c1\"># i += 1</span>\n        <span class=\"c1\"># fmt: on</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n\n<div class=\"viewcode-block\" id=\"EdbNets.get_plot_data\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.get_plot_data/#pyaedt.edb_core.nets.EdbNets.get_plot_data\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_plot_data</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">nets</span><span class=\"p\">,</span>\n        <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">color_by_net</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_components_on_top</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_components_on_bottom</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return List of points for Matplotlib 2D Chart.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        nets : str, list</span>\n<span class=\"sd\">            Name of the net or list of nets to plot. If `None` all nets will be plotted.</span>\n<span class=\"sd\">        layers : str, list, optional</span>\n<span class=\"sd\">            Name of the layers to include in the plot. If `None` all the signal layers will be considered.</span>\n<span class=\"sd\">        color_by_net : bool, optional</span>\n<span class=\"sd\">            If ``True``  the plot will be colored by net.</span>\n<span class=\"sd\">            If ``False`` the plot will be colored by layer. (default)</span>\n<span class=\"sd\">        outline : list, optional</span>\n<span class=\"sd\">            List of points of the outline to plot.</span>\n<span class=\"sd\">        plot_components_on_top : bool, optional</span>\n<span class=\"sd\">            If ``True``  the components placed on top layer are plotted.</span>\n<span class=\"sd\">            If ``False`` the components are not plotted. (default)</span>\n<span class=\"sd\">            If nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.</span>\n<span class=\"sd\">        plot_components_on_bottom : bool, optional</span>\n<span class=\"sd\">            If ``True``  the components placed on bottom layer are plotted.</span>\n<span class=\"sd\">            If ``False`` the components are not plotted. (default)</span>\n<span class=\"sd\">            If nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list, str</span>\n<span class=\"sd\">            list of data to be used in plot.</span>\n<span class=\"sd\">            In case of remote session it will be returned a string that could be converted to list</span>\n<span class=\"sd\">            using ast.literal_eval().</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nets</span><span class=\"p\">:</span>\n            <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nets</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">layers</span><span class=\"p\">]</span>\n        <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">objects_lists</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">label_colors</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">n_label</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">max_labels</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">outline</span><span class=\"p\">:</span>\n            <span class=\"n\">xt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">outline</span><span class=\"p\">]</span>\n            <span class=\"n\">yt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">outline</span><span class=\"p\">]</span>\n            <span class=\"n\">xc</span><span class=\"p\">,</span> <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">orient_polygon</span><span class=\"p\">(</span><span class=\"n\">xt</span><span class=\"p\">,</span> <span class=\"n\">yt</span><span class=\"p\">,</span> <span class=\"n\">clockwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">xc</span><span class=\"p\">,</span> <span class=\"n\">yc</span><span class=\"p\">)]</span>\n            <span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">]</span>\n            <span class=\"n\">codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">79</span><span class=\"p\">)</span>\n            <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Outline&quot;</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"s2\">&quot;contour&quot;</span><span class=\"p\">])</span>\n            <span class=\"n\">n_label</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">top_layer</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">bottom_layer</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">plot_components_on_top</span> <span class=\"ow\">or</span> <span class=\"n\">plot_components_on_bottom</span><span class=\"p\">:</span>\n            <span class=\"n\">nc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">is_enabled</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">net_names</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">nets</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">net_names</span><span class=\"p\">]):</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">placement_layer</span>\n                <span class=\"k\">if</span> <span class=\"n\">layer_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"n\">plot_components_on_top</span> <span class=\"ow\">and</span> <span class=\"n\">layer_name</span> <span class=\"o\">==</span> <span class=\"n\">top_layer</span><span class=\"p\">:</span>\n                    <span class=\"n\">component_color</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">184</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">115</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">51</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">)</span>  <span class=\"c1\"># this is the color used in AEDT</span>\n                    <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Component on top layer&quot;</span>\n                <span class=\"k\">elif</span> <span class=\"n\">plot_components_on_bottom</span> <span class=\"ow\">and</span> <span class=\"n\">layer_name</span> <span class=\"o\">==</span> <span class=\"n\">bottom_layer</span><span class=\"p\">:</span>\n                    <span class=\"n\">component_color</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">41</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">171</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">135</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">)</span>  <span class=\"c1\"># 41, 171, 135</span>\n                    <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Component on bottom layer&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">cbb</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span>\n                <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n                <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">cbb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n                <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)]</span>\n                <span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">]</span>\n                <span class=\"n\">codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n                <span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">79</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">component_color</span>\n                    <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;contour&quot;</span><span class=\"p\">])</span>\n                    <span class=\"n\">n_label</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;contour&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">nc</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Plotted </span><span class=\"si\">{}</span><span class=\"s2\"> component(s)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">paths</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">is_void</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">layer_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">nets</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">net_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span> <span class=\"ow\">or</span> <span class=\"n\">layer_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">):</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">color_by_net</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer &quot;</span> <span class=\"o\">+</span> <span class=\"n\">layer_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetColor</span><span class=\"p\">()</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item1</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item2</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item3</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                            <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Net &quot;</span> <span class=\"o\">+</span> <span class=\"n\">net_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                    <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">create_label</span> <span class=\"ow\">and</span> <span class=\"n\">n_label</span> <span class=\"o\">&lt;=</span> <span class=\"n\">max_labels</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fill&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">n_label</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fill&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">polygons</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">is_void</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">layer_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">nets</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">net_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span> <span class=\"ow\">or</span> <span class=\"n\">layer_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">):</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">xt</span><span class=\"p\">,</span> <span class=\"n\">yt</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">xt</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">orient_polygon</span><span class=\"p\">(</span><span class=\"n\">xt</span><span class=\"p\">,</span> <span class=\"n\">yt</span><span class=\"p\">,</span> <span class=\"n\">clockwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">vertices</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)]</span>\n            <span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">vertices</span><span class=\"p\">]</span>\n            <span class=\"n\">codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">79</span><span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">void</span> <span class=\"ow\">in</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">voids</span><span class=\"p\">:</span>\n                <span class=\"n\">xvt</span><span class=\"p\">,</span> <span class=\"n\">yvt</span> <span class=\"o\">=</span> <span class=\"n\">void</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">xvt</span><span class=\"p\">:</span>\n                    <span class=\"n\">xv</span><span class=\"p\">,</span> <span class=\"n\">yv</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">orient_polygon</span><span class=\"p\">(</span><span class=\"n\">xvt</span><span class=\"p\">,</span> <span class=\"n\">yvt</span><span class=\"p\">,</span> <span class=\"n\">clockwise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"n\">tmpV</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">xv</span><span class=\"p\">,</span> <span class=\"n\">yv</span><span class=\"p\">)]</span>\n                    <span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">tmpV</span><span class=\"p\">)</span>\n                    <span class=\"n\">tmpC</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">tmpV</span><span class=\"p\">]</span>\n                    <span class=\"n\">tmpC</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                    <span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">tmpC</span><span class=\"p\">)</span>\n                    <span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n                    <span class=\"n\">codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">79</span><span class=\"p\">)</span>\n\n            <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">color_by_net</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer &quot;</span> <span class=\"o\">+</span> <span class=\"n\">layer_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">GetLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetColor</span><span class=\"p\">()</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item1</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item2</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item3</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                            <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Net &quot;</span> <span class=\"o\">+</span> <span class=\"n\">net_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                    <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">create_label</span> <span class=\"ow\">and</span> <span class=\"n\">n_label</span> <span class=\"o\">&lt;=</span> <span class=\"n\">max_labels</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">n_label</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">circle</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">circles</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">circle</span><span class=\"o\">.</span><span class=\"n\">is_void</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">circle</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">circle</span><span class=\"o\">.</span><span class=\"n\">layer_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">nets</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">net_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span> <span class=\"ow\">or</span> <span class=\"n\">layer_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">):</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">circle</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">color_by_net</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer &quot;</span> <span class=\"o\">+</span> <span class=\"n\">layer_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">circle</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetColor</span><span class=\"p\">()</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item1</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item2</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item3</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                            <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Net &quot;</span> <span class=\"o\">+</span> <span class=\"n\">net_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                    <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">create_label</span> <span class=\"ow\">and</span> <span class=\"n\">n_label</span> <span class=\"o\">&lt;=</span> <span class=\"n\">max_labels</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fill&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">n_label</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fill&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">rect</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">rectangles</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">is_void</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">layer_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">nets</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">net_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span> <span class=\"ow\">or</span> <span class=\"n\">layer_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">):</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">points</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">color_by_net</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer &quot;</span> <span class=\"o\">+</span> <span class=\"n\">layer_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetColor</span><span class=\"p\">()</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item1</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item2</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                            <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">Item3</span> <span class=\"o\">/</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                            <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Net &quot;</span> <span class=\"o\">+</span> <span class=\"n\">net_name</span>\n                <span class=\"k\">if</span> <span class=\"n\">label</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">label_colors</span><span class=\"p\">:</span>\n                    <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">color_index</span><span class=\"p\">]</span>\n                    <span class=\"n\">color_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">color_index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CSS4_COLORS</span><span class=\"p\">):</span>\n                        <span class=\"n\">color_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">create_label</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">create_label</span> <span class=\"ow\">and</span> <span class=\"n\">n_label</span> <span class=\"o\">&lt;=</span> <span class=\"n\">max_labels</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fill&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">n_label</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objects_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label_colors</span><span class=\"p\">[</span><span class=\"n\">label</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fill&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Nets Point Generation time </span><span class=\"si\">%s</span><span class=\"s2\"> seconds&quot;</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">end_time</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">&quot;PYAEDT_SERVER_AEDT_PATH&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">objects_lists</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">objects_lists</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.classify_nets\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.classify_nets/#pyaedt.edb_core.nets.EdbNets.classify_nets\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">classify_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">power_nets</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">signal_nets</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Reassign power/ground or signal nets based on list of nets.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        power_nets : str, list, optional</span>\n<span class=\"sd\">            List of power nets to assign. Default is `None`.</span>\n<span class=\"sd\">        signal_nets : str, list, optional</span>\n<span class=\"sd\">            List of signal nets to assign. Default is `None`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">power_nets</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">power_nets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">power_nets</span><span class=\"p\">:</span>\n            <span class=\"n\">power_nets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">signal_nets</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">signal_nets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">signal_nets</span><span class=\"p\">:</span>\n            <span class=\"n\">signal_nets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">power_nets</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">SetIsPowerGround</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">signal_nets</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">SetIsPowerGround</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.plot\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.plot/#pyaedt.edb_core.nets.EdbNets.plot\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">nets</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">color_by_net</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">show_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_plot</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span>\n        <span class=\"n\">plot_components_on_top</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">plot_components_on_bottom</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Plot a Net to Matplotlib 2D Chart.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        nets : str, list, optional</span>\n<span class=\"sd\">            Name of the net or list of nets to plot. If ``None`` all nets will be plotted.</span>\n<span class=\"sd\">        layers : str, list, optional</span>\n<span class=\"sd\">            Name of the layers to include in the plot. If ``None`` all the signal layers will be considered.</span>\n<span class=\"sd\">        color_by_net : bool, optional</span>\n<span class=\"sd\">            If ``True``  the plot will be colored by net.</span>\n<span class=\"sd\">            If ``False`` the plot will be colored by layer. (default)</span>\n<span class=\"sd\">        show_legend : bool, optional</span>\n<span class=\"sd\">            If ``True`` the legend is shown in the plot. (default)</span>\n<span class=\"sd\">            If ``False`` the legend is not shown.</span>\n<span class=\"sd\">        save_plot : str, optional</span>\n<span class=\"sd\">            If ``None`` the plot will be shown.</span>\n<span class=\"sd\">            If a file path is specified the plot will be saved to such file.</span>\n<span class=\"sd\">        outline : list, optional</span>\n<span class=\"sd\">            List of points of the outline to plot.</span>\n<span class=\"sd\">        size : tuple, optional</span>\n<span class=\"sd\">            Image size in pixel (width, height). Default value is ``(2000, 1000)``</span>\n<span class=\"sd\">        plot_components_on_top : bool, optional</span>\n<span class=\"sd\">            If ``True``  the components placed on top layer are plotted.</span>\n<span class=\"sd\">            If ``False`` the components are not plotted. (default)</span>\n<span class=\"sd\">            If nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.</span>\n<span class=\"sd\">        plot_components_on_bottom : bool, optional</span>\n<span class=\"sd\">            If ``True``  the components placed on bottom layer are plotted.</span>\n<span class=\"sd\">            If ``False`` the components are not plotted. (default)</span>\n<span class=\"sd\">            If nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Plot functionalities are enabled only in CPython.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">object_lists</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_plot_data</span><span class=\"p\">(</span>\n            <span class=\"n\">nets</span><span class=\"p\">,</span>\n            <span class=\"n\">layers</span><span class=\"p\">,</span>\n            <span class=\"n\">color_by_net</span><span class=\"p\">,</span>\n            <span class=\"n\">outline</span><span class=\"p\">,</span>\n            <span class=\"n\">plot_components_on_top</span><span class=\"p\">,</span>\n            <span class=\"n\">plot_components_on_bottom</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">plot_matplotlib</span><span class=\"p\">(</span>\n            <span class=\"n\">object_lists</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"p\">,</span>\n            <span class=\"n\">show_legend</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;X (m)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Y (m)&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_cell</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"n\">save_plot</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.is_power_gound_net\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.is_power_gound_net/#pyaedt.edb_core.nets.EdbNets.is_power_gound_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_power_gound_net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">netname_list</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Determine if one of the  nets in a list is power or ground.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        netname_list : list</span>\n<span class=\"sd\">            List of net names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when one of the net names is ``&quot;power&quot;`` or ``&quot;ground&quot;``, ``False`` otherwise.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">netname_list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">netname_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">netname_list</span><span class=\"p\">]</span>\n        <span class=\"n\">power_nets_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">power_nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"n\">netname</span> <span class=\"ow\">in</span> <span class=\"n\">netname_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">netname</span> <span class=\"ow\">in</span> <span class=\"n\">power_nets_names</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.get_dcconnected_net_list\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.get_dcconnected_net_list/#pyaedt.edb_core.nets.EdbNets.get_dcconnected_net_list\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_dcconnected_net_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ground_nets</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;GND&quot;</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the nets connected to DC through inductors.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           Only inductors are considered.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        ground_nets : list, optional</span>\n<span class=\"sd\">            List of ground nets. The default is ``[&quot;GND&quot;]``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of nets connected to DC through inductors.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">temp_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">refdes</span><span class=\"p\">,</span> <span class=\"n\">comp_obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">inductors</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n\n            <span class=\"n\">numpins</span> <span class=\"o\">=</span> <span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">numpins</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">numpins</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">nets</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ground_nets</span><span class=\"p\">)):</span>\n                    <span class=\"n\">temp_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n\n        <span class=\"n\">dcconnected_net_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"ow\">not</span> <span class=\"n\">temp_list</span><span class=\"p\">:</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">temp_list</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">interseciton_flag</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">temp_list</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"ow\">not</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n                    <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n                    <span class=\"n\">interseciton_flag</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">interseciton_flag</span><span class=\"p\">:</span>\n                <span class=\"n\">dcconnected_net_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">dcconnected_net_list</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.get_powertree\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.get_powertree/#pyaedt.edb_core.nets.EdbNets.get_powertree\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_powertree</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">power_net_name</span><span class=\"p\">,</span> <span class=\"n\">ground_nets</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the power tree.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        power_net_name : str</span>\n<span class=\"sd\">            Name of the power net.</span>\n<span class=\"sd\">        ground_nets :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">flag_in_ng</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">net_group</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ng</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_dcconnected_net_list</span><span class=\"p\">(</span><span class=\"n\">ground_nets</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">power_net_name</span> <span class=\"ow\">in</span> <span class=\"n\">ng</span><span class=\"p\">:</span>\n                <span class=\"n\">flag_in_ng</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">net_group</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">ng</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">flag_in_ng</span><span class=\"p\">:</span>\n            <span class=\"n\">net_group</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">power_net_name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">component_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">rats</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_rats</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">net_group</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">rats</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;net_name&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;net_name&quot;</span><span class=\"p\">]:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">net</span><span class=\"p\">:</span>\n                            <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;refdes&quot;</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;pin_name&quot;</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">net</span><span class=\"p\">]</span>\n                            <span class=\"n\">component_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n                        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">component_type</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">component_list</span><span class=\"p\">:</span>\n            <span class=\"n\">refdes</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">comp_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">_cmp</span><span class=\"p\">[</span><span class=\"n\">refdes</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">type</span>\n            <span class=\"n\">component_type</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">comp_type</span><span class=\"p\">)</span>\n            <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">comp_type</span><span class=\"p\">)</span>\n\n            <span class=\"n\">comp_partname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">_cmp</span><span class=\"p\">[</span><span class=\"n\">refdes</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partname</span>\n            <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">comp_partname</span><span class=\"p\">)</span>\n            <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"o\">=</span><span class=\"n\">refdes</span><span class=\"p\">,</span> <span class=\"n\">netName</span><span class=\"o\">=</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n            <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pins</span><span class=\"p\">]))</span>\n\n        <span class=\"n\">component_list_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;refdes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;pin_name&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;net_name&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;component_type&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;component_partname&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;pin_list&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">component_list</span><span class=\"p\">,</span> <span class=\"n\">component_list_columns</span><span class=\"p\">,</span> <span class=\"n\">net_group</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.get_net_by_name\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.get_net_by_name/#pyaedt.edb_core.nets.EdbNets.get_net_by_name\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_net_by_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Find a net by name.&quot;&quot;&quot;</span>\n        <span class=\"n\">edb_net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">edb_net</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">edb_net</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.delete_nets\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.delete_nets/#pyaedt.edb_core.nets.EdbNets.delete_nets\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">netlist</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete one or more nets from EDB.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        netlist : str or list</span>\n<span class=\"sd\">            One or more nets to delete.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of nets that were deleted.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; deleted_nets = edb_core.core_nets.delete_nets([&quot;Net1&quot;,&quot;Net2&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">netlist</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">netlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">netlist</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">delete_primitives</span><span class=\"p\">(</span><span class=\"n\">netlist</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_padstack</span><span class=\"o\">.</span><span class=\"n\">delete_padstack_instances</span><span class=\"p\">(</span><span class=\"n\">netlist</span><span class=\"p\">)</span>\n\n        <span class=\"n\">nets_deleted</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">netlist</span><span class=\"p\">:</span>\n                <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span>\n                <span class=\"n\">nets_deleted</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nets_deleted</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.find_or_create_net\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.find_or_create_net/#pyaedt.edb_core.nets.EdbNets.find_or_create_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_or_create_net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">start_with</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">contain</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">end_with</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Find or create the net with the given name in the layout.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net to find or create. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        start_with : str, optional</span>\n<span class=\"sd\">            All net name starting with the string. Not case-sensitive.</span>\n\n<span class=\"sd\">        contain : str, optional</span>\n<span class=\"sd\">            All net name containing the string. Not case-sensitive.</span>\n\n<span class=\"sd\">        end_with : str, optional</span>\n<span class=\"sd\">            All net name ending with the string. Not case-sensitive.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        object</span>\n<span class=\"sd\">            Net Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">net_name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">contain</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">end_with</span><span class=\"p\">:</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;NET_&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">net</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">contain</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">end_with</span><span class=\"p\">:</span>\n                <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n                    <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">net</span>\n            <span class=\"k\">elif</span> <span class=\"n\">start_with</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span> <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">start_with</span><span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span>\n            <span class=\"k\">elif</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"n\">end_with</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span>\n                    <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n                    <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">start_with</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">end_with</span><span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span>\n            <span class=\"k\">elif</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"n\">contain</span> <span class=\"ow\">and</span> <span class=\"n\">end_with</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span>\n                    <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n                    <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">start_with</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">end_with</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">contain</span> <span class=\"ow\">in</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span>\n            <span class=\"k\">elif</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"n\">contain</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span>\n                    <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n                    <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">start_with</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">contain</span> <span class=\"ow\">in</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span>\n            <span class=\"k\">elif</span> <span class=\"n\">contain</span> <span class=\"ow\">and</span> <span class=\"n\">end_with</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span>\n                    <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n                    <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">end_with</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">contain</span> <span class=\"ow\">in</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span>\n            <span class=\"k\">elif</span> <span class=\"n\">end_with</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">contain</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span> <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">end_with</span><span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span>\n            <span class=\"k\">elif</span> <span class=\"n\">contain</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">start_with</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">end_with</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_found</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span> <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">contain</span> <span class=\"ow\">in</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()]</span>\n                <span class=\"k\">return</span> <span class=\"n\">nets_found</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.is_net_in_component\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.is_net_in_component/#pyaedt.edb_core.nets.EdbNets.is_net_in_component\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_net_in_component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if a net belongs to a component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        component_name : str</span>\n<span class=\"sd\">            Name of the component.</span>\n<span class=\"sd\">        net_name : str</span>\n<span class=\"sd\">            Name of the net.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if the net is found in component pins.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">component_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">[</span><span class=\"n\">component_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">net_name</span> <span class=\"o\">==</span> <span class=\"n\">net</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.find_and_fix_disjoint_nets\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.find_and_fix_disjoint_nets/#pyaedt.edb_core.nets.EdbNets.find_and_fix_disjoint_nets\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_and_fix_disjoint_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">keep_only_main_net</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">clean_disjoints_less_than</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Find and fix disjoint nets from a given netlist.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        net_list : str, list, optional</span>\n<span class=\"sd\">            List of nets on which check disjoints. If `None` is provided then the algorithm will loop on all nets.</span>\n<span class=\"sd\">        keep_only_main_net : bool, optional</span>\n<span class=\"sd\">            Remove all secondary nets other than principal one (the one with more objects in it). Default is `False`.</span>\n<span class=\"sd\">        clean_disjoints_less_than : bool, optional</span>\n<span class=\"sd\">            Clean all disjoint nets with area less than specified area in square meters. Default is `0.0` to disable it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            New nets created.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; renamed_nets = edb_core.core_nets.find_and_fix_disjoint_nets([&quot;GND&quot;,&quot;Net2&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">timer_start</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">reset_timer</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">net_list</span><span class=\"p\">:</span>\n            <span class=\"n\">net_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">net_list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">net_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">net_list</span><span class=\"p\">]</span>\n        <span class=\"n\">_objects_list</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">_padstacks_list</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"n\">n_name</span> <span class=\"o\">=</span> <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">n_name</span> <span class=\"ow\">in</span> <span class=\"n\">_objects_list</span><span class=\"p\">:</span>\n                <span class=\"n\">_objects_list</span><span class=\"p\">[</span><span class=\"n\">n_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">_objects_list</span><span class=\"p\">[</span><span class=\"n\">n_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prim</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">pad</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_padstack</span><span class=\"o\">.</span><span class=\"n\">padstack_instances</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">n_name</span> <span class=\"o\">=</span> <span class=\"n\">pad</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">n_name</span> <span class=\"ow\">in</span> <span class=\"n\">_padstacks_list</span><span class=\"p\">:</span>\n                <span class=\"n\">_padstacks_list</span><span class=\"p\">[</span><span class=\"n\">n_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pad</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">_padstacks_list</span><span class=\"p\">[</span><span class=\"n\">n_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pad</span><span class=\"p\">]</span>\n        <span class=\"n\">new_nets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">disjoints_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">reset_timer</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">net_list</span><span class=\"p\">:</span>\n            <span class=\"n\">net_groups</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">obj_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">_objects_list</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n                <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">_padstacks_list</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n                <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">obj_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">)</span>\n            <span class=\"k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_connected_object_id_set</span><span class=\"p\">()</span>\n                <span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n                <span class=\"n\">net_groups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">l1</span><span class=\"p\">)</span>\n                <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">l1</span><span class=\"p\">]</span>\n                <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">net_groups</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">sorted_list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">net_groups</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">disjoints</span> <span class=\"ow\">in</span> <span class=\"n\">sorted_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">keep_only_main_net</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">geo</span> <span class=\"ow\">in</span> <span class=\"n\">disjoints</span><span class=\"p\">:</span>\n                            <span class=\"k\">try</span><span class=\"p\">:</span>\n                                <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">geo</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n                            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                                <span class=\"k\">pass</span>\n                    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">disjoints</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n                        <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">disjoints</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"n\">EDBPadstackInstance</span><span class=\"p\">)</span>\n                        <span class=\"ow\">or</span> <span class=\"n\">clean_disjoints_less_than</span>\n                        <span class=\"ow\">and</span> <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">disjoints</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">clean_disjoints_less_than</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">disjoints</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n                        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                            <span class=\"k\">pass</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_net_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n                        <span class=\"n\">net_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_or_create_net</span><span class=\"p\">(</span><span class=\"n\">new_net_name</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">net_obj</span><span class=\"p\">:</span>\n                            <span class=\"n\">new_nets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">net_obj</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n                            <span class=\"k\">for</span> <span class=\"n\">geo</span> <span class=\"ow\">in</span> <span class=\"n\">disjoints</span><span class=\"p\">:</span>\n                                <span class=\"k\">try</span><span class=\"p\">:</span>\n                                    <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">geo</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">net_obj</span>\n                                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                                    <span class=\"k\">pass</span>\n                            <span class=\"n\">disjoints_objects</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">disjoints</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Found </span><span class=\"si\">{}</span><span class=\"s2\"> objects in </span><span class=\"si\">{}</span><span class=\"s2\"> new nets.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">disjoints_objects</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">)))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info_timer</span><span class=\"p\">(</span><span class=\"s2\">&quot;Disjoint Cleanup Completed.&quot;</span><span class=\"p\">,</span> <span class=\"n\">timer_start</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_nets</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbNets.merge_nets_polygons\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.nets.EdbNets.merge_nets_polygons/#pyaedt.edb_core.nets.EdbNets.merge_nets_polygons\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">merge_nets_polygons</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_list</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert paths from net into polygons, evaluate all connected polygons and perform the merge.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        net_list : str or list[str]</span>\n<span class=\"sd\">            net name of list of net name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">            list of merged polygons.</span>\n\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">net_list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">net_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">net_list</span><span class=\"p\">]</span>\n        <span class=\"n\">returned_poly</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">net_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n                <span class=\"n\">net_rtree</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">RTree</span><span class=\"p\">()</span>\n                <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prim</span> <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">primitives</span> <span class=\"k\">if</span> <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Path&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">:</span>\n                    <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">convert_to_polygon</span><span class=\"p\">()</span>\n                <span class=\"n\">polygons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">prim</span> <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">primitives</span> <span class=\"k\">if</span> <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Polygon&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">polygon</span> <span class=\"ow\">in</span> <span class=\"n\">polygons</span><span class=\"p\">:</span>\n                    <span class=\"n\">polygon_data</span> <span class=\"o\">=</span> <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n                    <span class=\"n\">rtree</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">RTreeObj</span><span class=\"p\">(</span><span class=\"n\">polygon_data</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"p\">)</span>\n                    <span class=\"n\">net_rtree</span><span class=\"o\">.</span><span class=\"n\">Insert</span><span class=\"p\">(</span><span class=\"n\">rtree</span><span class=\"p\">)</span>\n                <span class=\"n\">connected_polygons</span> <span class=\"o\">=</span> <span class=\"n\">net_rtree</span><span class=\"o\">.</span><span class=\"n\">GetConnectedGeometrySets</span><span class=\"p\">()</span>\n                <span class=\"n\">void_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">pp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">connected_polygons</span><span class=\"p\">):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">_pp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pp</span><span class=\"p\">):</span>\n                        <span class=\"n\">_voids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">_pp</span><span class=\"o\">.</span><span class=\"n\">Obj</span><span class=\"o\">.</span><span class=\"n\">Voids</span><span class=\"p\">)</span>\n                        <span class=\"n\">void_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">_pp</span><span class=\"o\">.</span><span class=\"n\">Obj</span><span class=\"o\">.</span><span class=\"n\">Voids</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">poly_list</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">connected_polygons</span><span class=\"p\">):</span>\n                    <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">poly_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Obj</span><span class=\"o\">.</span><span class=\"n\">GetLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n                    <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">poly_list</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Obj</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span>\n                    <span class=\"n\">_poly_list</span> <span class=\"o\">=</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">([</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">Poly</span> <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">poly_list</span><span class=\"p\">)])</span>\n                    <span class=\"n\">merged_polygon</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">PolygonData</span><span class=\"o\">.</span><span class=\"n\">Unite</span><span class=\"p\">(</span><span class=\"n\">_poly_list</span><span class=\"p\">))</span>\n                    <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">merged_polygon</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">void</span> <span class=\"ow\">in</span> <span class=\"n\">void_list</span><span class=\"p\">:</span>\n                            <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">AddHole</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n                        <span class=\"n\">_new_poly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Primitive</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">)</span>\n                        <span class=\"n\">returned_poly</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_new_poly</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">init_poly</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">connected_polygons</span><span class=\"p\">)):</span>\n                    <span class=\"k\">for</span> <span class=\"n\">_pp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">init_poly</span><span class=\"p\">):</span>\n                        <span class=\"n\">_pp</span><span class=\"o\">.</span><span class=\"n\">Obj</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">returned_poly</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/nets", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}