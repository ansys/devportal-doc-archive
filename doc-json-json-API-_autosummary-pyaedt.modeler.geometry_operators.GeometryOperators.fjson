{"parents": [{"link": "../../", "title": "API AEDT reference"}, {"link": "../../Primitives3D/", "title": "Modeler in 2D and 3D"}], "prev": {"link": "../pyaedt.modeler.cad.Modeler.CoordinateSystem.quaternion/", "title": "quaternion"}, "next": {"link": "../pyaedt.modeler.geometry_operators.GeometryOperators.List2list/", "title": "List2list"}, "title": "pyaedt.modeler.geometry_operators.GeometryOperators", "meta": {}, "body": "<section id=\"pyaedt-modeler-geometry-operators-geometryoperators\">\n<h1>pyaedt.modeler.geometry_operators.GeometryOperators<a class=\"headerlink\" href=\"#pyaedt-modeler-geometry-operators-geometryoperators\" title=\"Permalink to this heading\">#</a></h1>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"pyaedt.modeler.geometry_operators.GeometryOperators\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">pyaedt.modeler.geometry_operators.</span></span><span class=\"sig-name descname\"><span class=\"pre\">GeometryOperators</span></span><a class=\"reference internal\" href=\"../../../_modules/pyaedt/modeler/geometry_operators/#GeometryOperators\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#pyaedt.modeler.geometry_operators.GeometryOperators\" title=\"Permalink to this definition\">#</a></dt>\n<dd><p>Manages geometry operators.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.List2list/#pyaedt.modeler.geometry_operators.GeometryOperators.List2list\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.List2list\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.List2list</span></code></a>(input_list)</p></td>\n<td><p>Convert a C# list object to a Python list.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.are_segments_intersecting/#pyaedt.modeler.geometry_operators.GeometryOperators.are_segments_intersecting\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.are_segments_intersecting\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.are_segments_intersecting</span></code></a>(a1,\u00a0...)</p></td>\n<td><p>Determine if the two segments a and b are intersecting.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.arrays_positions_sum/#pyaedt.modeler.geometry_operators.GeometryOperators.arrays_positions_sum\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.arrays_positions_sum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.arrays_positions_sum</span></code></a>(...)</p></td>\n<td><p>ADD DESCRIPTION.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.atan2/#pyaedt.modeler.geometry_operators.GeometryOperators.atan2\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.atan2\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.atan2</span></code></a>(y,\u00a0x)</p></td>\n<td><p>Implementation of atan2 that does not suffer from the following issues: math.atan2(0.0, 0.0) = 0.0 math.atan2(-0.0, 0.0) = -0.0 math.atan2(0.0, -0.0) = 3.141592653589793 math.atan2(-0.0, -0.0) = -3.141592653589793 and returns always 0.0.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.axis_angle_to_quaternion/#pyaedt.modeler.geometry_operators.GeometryOperators.axis_angle_to_quaternion\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.axis_angle_to_quaternion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.axis_angle_to_quaternion</span></code></a>(u,\u00a0...)</p></td>\n<td><p>Convert the axis angle rotation formulation to a quaternion.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zxz/#pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zxz\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zxz\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.axis_to_euler_zxz</span></code></a>(x,\u00a0y,\u00a0z)</p></td>\n<td><p>Retrieve the Euler angles of a frame defined by X, Y, and Z axes, following the rotation sequence ZXZ.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zyz/#pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zyz\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zyz\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.axis_to_euler_zyz</span></code></a>(x,\u00a0y,\u00a0z)</p></td>\n<td><p>Retrieve the Euler angles of a frame defined by X, Y, and Z axes, following rotation sequence ZYZ.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.cs_axis_str/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_axis_str\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.cs_axis_str\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.cs_axis_str</span></code></a>(val)</p></td>\n<td><p>Retrieve a string for a coordinate system axis.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_axis_str/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_axis_str\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_axis_str\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.cs_plane_to_axis_str</span></code></a>(val)</p></td>\n<td><p>Retrieve a string for a coordinate system plane.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_plane_str/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_plane_str\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_plane_str\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.cs_plane_to_plane_str</span></code></a>(val)</p></td>\n<td><p>Retrieve a string for a coordinate system plane.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.cs_xy_pointing_expression/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_xy_pointing_expression\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.cs_xy_pointing_expression\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.cs_xy_pointing_expression</span></code></a>(...)</p></td>\n<td><p>Return x_pointing and y_pointing vectors as expressions from the yaw, ptich, and roll input (as strings).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.deg2rad/#pyaedt.modeler.geometry_operators.GeometryOperators.deg2rad\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.deg2rad\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.deg2rad</span></code></a>(angle)</p></td>\n<td><p>Convert the angle from degrees to radians.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.degrees_default_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.degrees_default_rounded\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.degrees_default_rounded\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.degrees_default_rounded</span></code></a>(...)</p></td>\n<td><p>Convert angle to degree with given digits rounding.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.degrees_over_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.degrees_over_rounded\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.degrees_over_rounded\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.degrees_over_rounded</span></code></a>(...)</p></td>\n<td><p>Ceil of angle.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.distance_vector/#pyaedt.modeler.geometry_operators.GeometryOperators.distance_vector\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.distance_vector\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.distance_vector</span></code></a>(p,\u00a0a,\u00a0b)</p></td>\n<td><p>Evaluate the vector distance between point <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> and a line defined by two points, <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.draft_type_str/#pyaedt.modeler.geometry_operators.GeometryOperators.draft_type_str\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.draft_type_str\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.draft_type_str</span></code></a>(val)</p></td>\n<td><p>Retrieve the draft type.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.euler_zxz_to_quaternion/#pyaedt.modeler.geometry_operators.GeometryOperators.euler_zxz_to_quaternion\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.euler_zxz_to_quaternion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.euler_zxz_to_quaternion</span></code></a>(...)</p></td>\n<td><p>Convert the Euler angles following rotation sequence ZXZ to a quaternion.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.euler_zyz_to_quaternion/#pyaedt.modeler.geometry_operators.GeometryOperators.euler_zyz_to_quaternion\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.euler_zyz_to_quaternion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.euler_zyz_to_quaternion</span></code></a>(...)</p></td>\n<td><p>Convert the Euler angles following rotation sequence ZYZ to a quaternion.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.find_largest_rectangle_inside_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.find_largest_rectangle_inside_polygon\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.find_largest_rectangle_inside_polygon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.find_largest_rectangle_inside_polygon</span></code></a>(polygon)</p></td>\n<td><p>Find the largest area rectangles of arbitrary orientation in a polygon.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.find_point_on_plane/#pyaedt.modeler.geometry_operators.GeometryOperators.find_point_on_plane\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.find_point_on_plane\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.find_point_on_plane</span></code></a>(pointlists)</p></td>\n<td><p>Find a point on a plane.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.get_mid_point/#pyaedt.modeler.geometry_operators.GeometryOperators.get_mid_point\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.get_mid_point\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.get_mid_point</span></code></a>(v1,\u00a0v2)</p></td>\n<td><p>Evaluate the midpoint between two points.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.get_numeric/#pyaedt.modeler.geometry_operators.GeometryOperators.get_numeric\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.get_numeric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.get_numeric</span></code></a>(s)</p></td>\n<td><p>Convert a string to a numeric value.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.get_polygon_centroid/#pyaedt.modeler.geometry_operators.GeometryOperators.get_polygon_centroid\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.get_polygon_centroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.get_polygon_centroid</span></code></a>(pts)</p></td>\n<td><p>Evaluate the centroid of a polygon defined by its points.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.get_triangle_area/#pyaedt.modeler.geometry_operators.GeometryOperators.get_triangle_area\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.get_triangle_area\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.get_triangle_area</span></code></a>(v1,\u00a0v2,\u00a0v3)</p></td>\n<td><p>Evaluate the area of a triangle defined by its three vertices.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_between_points/#pyaedt.modeler.geometry_operators.GeometryOperators.is_between_points\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_between_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_between_points</span></code></a>(p,\u00a0a,\u00a0b)</p></td>\n<td><p>Check if a point lies on the segment defined by two points.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_collinear/#pyaedt.modeler.geometry_operators.GeometryOperators.is_collinear\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_collinear\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_collinear</span></code></a>(a,\u00a0b[,\u00a0tol])</p></td>\n<td><p>Check if two vectors are collinear (parallel or anti-parallel).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_parallel/#pyaedt.modeler.geometry_operators.GeometryOperators.is_parallel\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_parallel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_parallel</span></code></a>(a1,\u00a0a2,\u00a0b1,\u00a0b2)</p></td>\n<td><p>Check if a segment defined by two points is parallel to a segment defined by two other points.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_perpendicular/#pyaedt.modeler.geometry_operators.GeometryOperators.is_perpendicular\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_perpendicular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_perpendicular</span></code></a>(a,\u00a0b[,\u00a0tol])</p></td>\n<td><p>Check if two vectors are perpendicular.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_point_in_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.is_point_in_polygon\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_point_in_polygon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_point_in_polygon</span></code></a>(point,\u00a0...)</p></td>\n<td><p>Determine if a point is inside or outside a polygon, both located on the same plane.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_point_projection_in_segment/#pyaedt.modeler.geometry_operators.GeometryOperators.is_point_projection_in_segment\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_point_projection_in_segment\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_point_projection_in_segment</span></code></a>(p,\u00a0a,\u00a0b)</p></td>\n<td><p>Check if a point projection lies on the segment defined by two points.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_projection_inside/#pyaedt.modeler.geometry_operators.GeometryOperators.is_projection_inside\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_projection_inside\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_projection_inside</span></code></a>(a1,\u00a0...)</p></td>\n<td><p>Project a segment onto another segment and check if the projected segment is inside it.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_segment_intersecting_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.is_segment_intersecting_polygon\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_segment_intersecting_polygon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_segment_intersecting_polygon</span></code></a>(a,\u00a0...)</p></td>\n<td><p>Determine if a segment defined by two points <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> intersects a polygon.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.is_small/#pyaedt.modeler.geometry_operators.GeometryOperators.is_small\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.is_small\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.is_small</span></code></a>(s)</p></td>\n<td><p>Return True if the number represented by s is zero (i.e very small).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.normalize_vector/#pyaedt.modeler.geometry_operators.GeometryOperators.normalize_vector\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.normalize_vector\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.normalize_vector</span></code></a>(v)</p></td>\n<td><p>Normalize a geometry vector.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.numeric_cs/#pyaedt.modeler.geometry_operators.GeometryOperators.numeric_cs\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.numeric_cs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.numeric_cs</span></code></a>(cs_in)</p></td>\n<td><p>Return a list of [x,y,z] numeric values given a coordinate system as input.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.orient_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.orient_polygon\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.orient_polygon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.orient_polygon</span></code></a>(x,\u00a0y[,\u00a0...])</p></td>\n<td><p>Orient a polygon clockwise or counterclockwise.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.parallel_coeff/#pyaedt.modeler.geometry_operators.GeometryOperators.parallel_coeff\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.parallel_coeff\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.parallel_coeff</span></code></a>(a1,\u00a0a2,\u00a0b1,\u00a0b2)</p></td>\n<td><p>ADD DESCRIPTION.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.parse_dim_arg/#pyaedt.modeler.geometry_operators.GeometryOperators.parse_dim_arg\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.parse_dim_arg\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.parse_dim_arg</span></code></a>(string[,\u00a0...])</p></td>\n<td><p>Convert a number and unit to a float.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.point_in_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.point_in_polygon\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.point_in_polygon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.point_in_polygon</span></code></a>(point,\u00a0...)</p></td>\n<td><p>Determine if a point is inside or outside a polygon, both located on the same plane.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.point_segment_distance/#pyaedt.modeler.geometry_operators.GeometryOperators.point_segment_distance\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.point_segment_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.point_segment_distance</span></code></a>(p,\u00a0a,\u00a0b)</p></td>\n<td><p>Calculate the distance between a point <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> and a segment defined by two points <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.pointing_to_axis/#pyaedt.modeler.geometry_operators.GeometryOperators.pointing_to_axis\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.pointing_to_axis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.pointing_to_axis</span></code></a>(...)</p></td>\n<td><p>Retrieve the axes from the HFSS X axis and Y pointing axis as per the definition of the AEDT interface coordinate system.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.points_distance/#pyaedt.modeler.geometry_operators.GeometryOperators.points_distance\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.points_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.points_distance</span></code></a>(p1,\u00a0p2)</p></td>\n<td><p>Evaluate the distance between two points expressed as their Cartesian coordinates.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.q_prod/#pyaedt.modeler.geometry_operators.GeometryOperators.q_prod\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.q_prod\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.q_prod</span></code></a>(p,\u00a0q)</p></td>\n<td><p>Evaluate the product of two quaternions, <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">q</span></code>, defined as: p = p0 + p' = p0 + ip1 + jp2 + kp3.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation/#pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.q_rotation</span></code></a>(v,\u00a0q)</p></td>\n<td><p>Evaluate the rotation of a vector defined by a quaternion.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation_inv/#pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation_inv\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation_inv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.q_rotation_inv</span></code></a>(v,\u00a0q)</p></td>\n<td><p>Evaluate the inverse rotation of a vector that is defined by a quaternion.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.quaternion_to_axis</span></code></a>(q)</p></td>\n<td><p>Convert a quaternion to a rotated frame defined by X, Y, and Z axes.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis_angle/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis_angle\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis_angle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.quaternion_to_axis_angle</span></code></a>(q)</p></td>\n<td><p>Convert a quaternion to the axis angle rotation formulation.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zxz/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zxz\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zxz\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.quaternion_to_euler_zxz</span></code></a>(q)</p></td>\n<td><p>Convert a quaternion to Euler angles following rotation sequence ZXZ.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zyz/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zyz\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zyz\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.quaternion_to_euler_zyz</span></code></a>(q)</p></td>\n<td><p>Convert a quaternion to Euler angles following rotation sequence ZYZ.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.rad2deg/#pyaedt.modeler.geometry_operators.GeometryOperators.rad2deg\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.rad2deg\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.rad2deg</span></code></a>(angle)</p></td>\n<td><p>Convert the angle from radians to degrees.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.radians_default_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.radians_default_rounded\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.radians_default_rounded\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.radians_default_rounded</span></code></a>(...)</p></td>\n<td><p>Convert to radians with given round.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.radians_over_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.radians_over_rounded\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.radians_over_rounded\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.radians_over_rounded</span></code></a>(...)</p></td>\n<td><p>Radian angle ceiling.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_angle/#pyaedt.modeler.geometry_operators.GeometryOperators.v_angle\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_angle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_angle</span></code></a>(a,\u00a0b)</p></td>\n<td><p>Evaluate the angle between two geometry vectors.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign/#pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_angle_sign</span></code></a>(va,\u00a0vb,\u00a0vn[,\u00a0...])</p></td>\n<td><p>Evaluate the signed angle between two geometry vectors.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign_2D/#pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign_2D\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign_2D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_angle_sign_2D</span></code></a>(va,\u00a0vb[,\u00a0...])</p></td>\n<td><p>Evaluate the signed angle between two 2D geometry vectors.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_cross/#pyaedt.modeler.geometry_operators.GeometryOperators.v_cross\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_cross\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_cross</span></code></a>(a,\u00a0b)</p></td>\n<td><p>Evaluate the cross product of two geometry vectors.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_dot/#pyaedt.modeler.geometry_operators.GeometryOperators.v_dot\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_dot\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_dot</span></code></a>(a,\u00a0b)</p></td>\n<td><p>Evaluate the dot product between two geometry vectors.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_norm/#pyaedt.modeler.geometry_operators.GeometryOperators.v_norm\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_norm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_norm</span></code></a>(a)</p></td>\n<td><p>Evaluate the Euclidean norm of a geometry vector.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_points/#pyaedt.modeler.geometry_operators.GeometryOperators.v_points\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_points</span></code></a>(p1,\u00a0p2)</p></td>\n<td><p>Vector from one point to another point.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_prod/#pyaedt.modeler.geometry_operators.GeometryOperators.v_prod\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_prod\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_prod</span></code></a>(s,\u00a0v)</p></td>\n<td><p>Evaluate the product between a scalar value and a vector.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_sub/#pyaedt.modeler.geometry_operators.GeometryOperators.v_sub\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_sub\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_sub</span></code></a>(a,\u00a0b)</p></td>\n<td><p>Evaluate two geometry vectors by subtracting them (a-b).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.modeler.geometry_operators.GeometryOperators.v_sum/#pyaedt.modeler.geometry_operators.GeometryOperators.v_sum\" title=\"pyaedt.modeler.geometry_operators.GeometryOperators.v_sum\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GeometryOperators.v_sum</span></code></a>(a,\u00a0b)</p></td>\n<td><p>Evaluate two geometry vectors by adding them (a+b).</p></td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.List2list", "List2list", "N", "next"], ["API/_autosummary/pyaedt.modeler.cad.Modeler.CoordinateSystem.quaternion", "quaternion", "P", "previous"]], "sourcename": "API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">pyaedt.modeler.geometry_operators.GeometryOperators</a><ul>\n<li><a class=\"reference internal\" href=\"#pyaedt.modeler.geometry_operators.GeometryOperators\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryOperators</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}