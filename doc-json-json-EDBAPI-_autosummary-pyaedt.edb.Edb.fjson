{"parents": [{"link": "../../", "title": "API EDB reference"}, {"link": "../../CoreEdb/", "title": "EDB manager"}], "prev": {"link": "../../CoreEdb/", "title": "EDB manager"}, "next": {"link": "../pyaedt.edb.Edb.add_design_variable/", "title": "add_design_variable"}, "title": "pyaedt.edb.Edb", "meta": {}, "body": "<section id=\"pyaedt-edb-edb\">\n<h1>pyaedt.edb.Edb<a class=\"headerlink\" href=\"#pyaedt-edb-edb\" title=\"Permalink to this heading\">#</a></h1>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"pyaedt.edb.Edb\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">pyaedt.edb.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Edb</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edbpath</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cellname</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">isreadonly</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edbversion</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">isaedtowned</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">oproject</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">student_version</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">use_ppe</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../_modules/pyaedt/edb/#Edb\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#pyaedt.edb.Edb\" title=\"Permalink to this definition\">#</a></dt>\n<dd><p>Provides the EDB application interface.</p>\n<p>This module inherits all objects that belong to EDB.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>edbpath</strong><span class=\"classifier\"><a class=\"reference external\" href=\"https://docs.python.org/dev/library/stdtypes.html#str\" title=\"(in Python v3.12)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Full path to the <code class=\"docutils literal notranslate\"><span class=\"pre\">aedb</span></code> folder. The variable can also contain\nthe path to a layout to import. Allowed formats are BRD,\nXML (IPC2581), GDS, and DXF. The default is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.\nFor GDS import, the Ansys control file (also XML) should have the same\nname as the GDS file. Only the file extension differs.</p>\n</dd>\n<dt><strong>cellname</strong><span class=\"classifier\"><a class=\"reference external\" href=\"https://docs.python.org/dev/library/stdtypes.html#str\" title=\"(in Python v3.12)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Name of the cell to select. The default is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt><strong>isreadonly</strong><span class=\"classifier\"><a class=\"reference external\" href=\"https://docs.python.org/dev/library/stdtypes.html#bltin-boolean-values\" title=\"(in Python v3.12)\"><span class=\"xref std std-ref\">bool</span></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Whether to open EBD in read-only mode when it is\nowned by HFSS 3D Layout. The default is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd>\n<dt><strong>edbversion</strong><span class=\"classifier\"><a class=\"reference external\" href=\"https://docs.python.org/dev/library/stdtypes.html#str\" title=\"(in Python v3.12)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Version of EDB to use. The default is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;2021.2&quot;</span></code>.</p>\n</dd>\n<dt><strong>isaedtowned</strong><span class=\"classifier\"><a class=\"reference external\" href=\"https://docs.python.org/dev/library/stdtypes.html#bltin-boolean-values\" title=\"(in Python v3.12)\"><span class=\"xref std std-ref\">bool</span></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Whether to launch EDB from HFSS 3D Layout. The\ndefault is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd>\n<dt><strong>oproject</strong><span class=\"classifier\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Reference to the AEDT project object.</p>\n</dd>\n<dt><strong>student_version</strong><span class=\"classifier\"><a class=\"reference external\" href=\"https://docs.python.org/dev/library/stdtypes.html#bltin-boolean-values\" title=\"(in Python v3.12)\"><span class=\"xref std std-ref\">bool</span></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional</span></code></span></dt><dd><p>Whether to open the AEDT student version. The default is <code class=\"docutils literal notranslate\"><span class=\"pre\">False.</span></code></p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Create an <code class=\"docutils literal notranslate\"><span class=\"pre\">Edb</span></code> object and a new EDB cell.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">Edb</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Edb</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Create an <code class=\"docutils literal notranslate\"><span class=\"pre\">Edb</span></code> object and open the specified project.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Edb</span><span class=\"p\">(</span><span class=\"s2\">&quot;myfile.aedb&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Create an <code class=\"docutils literal notranslate\"><span class=\"pre\">Edb</span></code> object from GDS and control files.\nThe XML control file resides in the same directory as the GDS file: (myfile.xml).</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Edb</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/file/myfile.gds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.add_design_variable/#pyaedt.edb.Edb.add_design_variable\" title=\"pyaedt.edb.Edb.add_design_variable\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.add_design_variable</span></code></a>(variable_name,\u00a0...)</p></td>\n<td><p>Add a design variable.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.are_port_reference_terminals_connected/#pyaedt.edb.Edb.are_port_reference_terminals_connected\" title=\"pyaedt.edb.Edb.are_port_reference_terminals_connected\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.are_port_reference_terminals_connected</span></code></a>([...])</p></td>\n<td><p>Check if all terminal references in design are connected.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.arg_with_dim/#pyaedt.edb.Edb.arg_with_dim\" title=\"pyaedt.edb.Edb.arg_with_dim\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.arg_with_dim</span></code></a>(Value,\u00a0sUnits)</p></td>\n<td><p>Format arguments with dimensions.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.build_simulation_project/#pyaedt.edb.Edb.build_simulation_project\" title=\"pyaedt.edb.Edb.build_simulation_project\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.build_simulation_project</span></code></a>(simulation_setup)</p></td>\n<td><p>Build a ready-to-solve simulation project.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.change_design_variable_value/#pyaedt.edb.Edb.change_design_variable_value\" title=\"pyaedt.edb.Edb.change_design_variable_value\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.change_design_variable_value</span></code></a>(...)</p></td>\n<td><p>Change a variable value.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.close_edb/#pyaedt.edb.Edb.close_edb\" title=\"pyaedt.edb.Edb.close_edb\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.close_edb</span></code></a>()</p></td>\n<td><p>Close EDB.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_cutout/#pyaedt.edb.Edb.create_cutout\" title=\"pyaedt.edb.Edb.create_cutout\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_cutout</span></code></a>([signal_list,\u00a0...])</p></td>\n<td><p>Create a cutout and save it to a new AEDB file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_cutout_multithread/#pyaedt.edb.Edb.create_cutout_multithread\" title=\"pyaedt.edb.Edb.create_cutout_multithread\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_cutout_multithread</span></code></a>([signal_list,\u00a0...])</p></td>\n<td><p>Create a cutout using an approach entirely based on pyaedt.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_cutout_on_point_list/#pyaedt.edb.Edb.create_cutout_on_point_list\" title=\"pyaedt.edb.Edb.create_cutout_on_point_list\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_cutout_on_point_list</span></code></a>(point_list)</p></td>\n<td><p>Create a cutout on a specified shape and save it to a new AEDB file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_edb/#pyaedt.edb.Edb.create_edb\" title=\"pyaedt.edb.Edb.create_edb\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_edb</span></code></a>([init_dlls])</p></td>\n<td><p>Create EDB.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_hfss_setup/#pyaedt.edb.Edb.create_hfss_setup\" title=\"pyaedt.edb.Edb.create_hfss_setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_hfss_setup</span></code></a>([name])</p></td>\n<td><p>Create a setup from a template.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_siwave_dc_setup/#pyaedt.edb.Edb.create_siwave_dc_setup\" title=\"pyaedt.edb.Edb.create_siwave_dc_setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_siwave_dc_setup</span></code></a>([name])</p></td>\n<td><p>Create a setup from a template.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.create_siwave_syz_setup/#pyaedt.edb.Edb.create_siwave_syz_setup\" title=\"pyaedt.edb.Edb.create_siwave_syz_setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.create_siwave_syz_setup</span></code></a>([name])</p></td>\n<td><p>Create a setup from a template.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.edb_exception/#pyaedt.edb.Edb.edb_exception\" title=\"pyaedt.edb.Edb.edb_exception\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.edb_exception</span></code></a>(ex_value,\u00a0tb_data)</p></td>\n<td><p>Write the trace stack to AEDT when a Python error occurs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.edb_value/#pyaedt.edb.Edb.edb_value\" title=\"pyaedt.edb.Edb.edb_value\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.edb_value</span></code></a>(val)</p></td>\n<td><p>EDB value.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.execute/#pyaedt.edb.Edb.execute\" title=\"pyaedt.edb.Edb.execute\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.execute</span></code></a>(func)</p></td>\n<td><p>Execute a function.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.export_hfss/#pyaedt.edb.Edb.export_hfss\" title=\"pyaedt.edb.Edb.export_hfss\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.export_hfss</span></code></a>(path_to_output[,\u00a0net_list,\u00a0...])</p></td>\n<td><p>Export EDB to HFSS.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.export_maxwell/#pyaedt.edb.Edb.export_maxwell\" title=\"pyaedt.edb.Edb.export_maxwell\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.export_maxwell</span></code></a>(path_to_output[,\u00a0...])</p></td>\n<td><p>Export EDB to Maxwell 3D.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.export_q3d/#pyaedt.edb.Edb.export_q3d\" title=\"pyaedt.edb.Edb.export_q3d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.export_q3d</span></code></a>(path_to_output[,\u00a0net_list,\u00a0...])</p></td>\n<td><p>Export EDB to Q3D.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.export_siwave_dc_results/#pyaedt.edb.Edb.export_siwave_dc_results\" title=\"pyaedt.edb.Edb.export_siwave_dc_results\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.export_siwave_dc_results</span></code></a>(siwave_project,\u00a0...)</p></td>\n<td><p>Close EDB and solve it with Siwave.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.export_to_ipc2581/#pyaedt.edb.Edb.export_to_ipc2581\" title=\"pyaedt.edb.Edb.export_to_ipc2581\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.export_to_ipc2581</span></code></a>([ipc_path,\u00a0units])</p></td>\n<td><p>Create an XML IPC2581 file from the active EDB.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.get_bounding_box/#pyaedt.edb.Edb.get_bounding_box\" title=\"pyaedt.edb.Edb.get_bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.get_bounding_box</span></code></a>()</p></td>\n<td><p>Get the layout bounding box.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.get_conformal_polygon_from_netlist/#pyaedt.edb.Edb.get_conformal_polygon_from_netlist\" title=\"pyaedt.edb.Edb.get_conformal_polygon_from_netlist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.get_conformal_polygon_from_netlist</span></code></a>([netlist])</p></td>\n<td><p>Return an EDB conformal polygon based on a netlist.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.get_statistics/#pyaedt.edb.Edb.get_statistics\" title=\"pyaedt.edb.Edb.get_statistics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.get_statistics</span></code></a>([compute_area])</p></td>\n<td><p>Get the EDBStatistics object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.import_cadence_file/#pyaedt.edb.Edb.import_cadence_file\" title=\"pyaedt.edb.Edb.import_cadence_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.import_cadence_file</span></code></a>(inputBrd[,\u00a0WorkDir,\u00a0...])</p></td>\n<td><p>Import a board file and generate an <code class=\"docutils literal notranslate\"><span class=\"pre\">edb.def</span></code> file in the working directory.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.import_gds_file/#pyaedt.edb.Edb.import_gds_file\" title=\"pyaedt.edb.Edb.import_gds_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.import_gds_file</span></code></a>(inputGDS[,\u00a0WorkDir,\u00a0...])</p></td>\n<td><p>Import a GDS file and generate an <code class=\"docutils literal notranslate\"><span class=\"pre\">edb.def</span></code> file in the working directory.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.import_layout_pcb/#pyaedt.edb.Edb.import_layout_pcb\" title=\"pyaedt.edb.Edb.import_layout_pcb\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.import_layout_pcb</span></code></a>(input_file,\u00a0working_dir)</p></td>\n<td><p>Import a board file and generate an <code class=\"docutils literal notranslate\"><span class=\"pre\">edb.def</span></code> file in the working directory.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.new_simulation_configuration/#pyaedt.edb.Edb.new_simulation_configuration\" title=\"pyaedt.edb.Edb.new_simulation_configuration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.new_simulation_configuration</span></code></a>([filename])</p></td>\n<td><p>New SimulationConfiguration Object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.open_edb/#pyaedt.edb.Edb.open_edb\" title=\"pyaedt.edb.Edb.open_edb\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.open_edb</span></code></a>([init_dlls])</p></td>\n<td><p>Open EDB.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.open_edb_inside_aedt/#pyaedt.edb.Edb.open_edb_inside_aedt\" title=\"pyaedt.edb.Edb.open_edb_inside_aedt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.open_edb_inside_aedt</span></code></a>([init_dlls])</p></td>\n<td><p>Open EDB inside of AEDT.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.save_edb/#pyaedt.edb.Edb.save_edb\" title=\"pyaedt.edb.Edb.save_edb\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.save_edb</span></code></a>()</p></td>\n<td><p>Save the EDB file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.save_edb_as/#pyaedt.edb.Edb.save_edb_as\" title=\"pyaedt.edb.Edb.save_edb_as\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.save_edb_as</span></code></a>(fname)</p></td>\n<td><p>Save the EDB file as another file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.solve_siwave/#pyaedt.edb.Edb.solve_siwave\" title=\"pyaedt.edb.Edb.solve_siwave\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.solve_siwave</span></code></a>()</p></td>\n<td><p>Close EDB and solve it with Siwave.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.write_export3d_option_config_file/#pyaedt.edb.Edb.write_export3d_option_config_file\" title=\"pyaedt.edb.Edb.write_export3d_option_config_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.write_export3d_option_config_file</span></code></a>(...[,\u00a0...])</p></td>\n<td><p>Write the options for a 3D export to a configuration file.</p></td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Attributes</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.active_cell/#pyaedt.edb.Edb.active_cell\" title=\"pyaedt.edb.Edb.active_cell\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.active_cell</span></code></a></p></td>\n<td><p>Active cell.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.active_layout/#pyaedt.edb.Edb.active_layout\" title=\"pyaedt.edb.Edb.active_layout\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.active_layout</span></code></a></p></td>\n<td><p>Active layout.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.cell_names/#pyaedt.edb.Edb.cell_names\" title=\"pyaedt.edb.Edb.cell_names\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.cell_names</span></code></a></p></td>\n<td><p>Cell name container.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_components/#pyaedt.edb.Edb.core_components\" title=\"pyaedt.edb.Edb.core_components\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_components</span></code></a></p></td>\n<td><p>Core components.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_hfss/#pyaedt.edb.Edb.core_hfss\" title=\"pyaedt.edb.Edb.core_hfss\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_hfss</span></code></a></p></td>\n<td><p>Core HFSS.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_nets/#pyaedt.edb.Edb.core_nets\" title=\"pyaedt.edb.Edb.core_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_nets</span></code></a></p></td>\n<td><p>Core nets.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_padstack/#pyaedt.edb.Edb.core_padstack\" title=\"pyaedt.edb.Edb.core_padstack\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_padstack</span></code></a></p></td>\n<td><p>Core padstack.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_primitives/#pyaedt.edb.Edb.core_primitives\" title=\"pyaedt.edb.Edb.core_primitives\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_primitives</span></code></a></p></td>\n<td><p>Core primitives.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_siwave/#pyaedt.edb.Edb.core_siwave\" title=\"pyaedt.edb.Edb.core_siwave\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_siwave</span></code></a></p></td>\n<td><p>Core SI Wave.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.core_stackup/#pyaedt.edb.Edb.core_stackup\" title=\"pyaedt.edb.Edb.core_stackup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.core_stackup</span></code></a></p></td>\n<td><p>Core stackup.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.db/#pyaedt.edb.Edb.db\" title=\"pyaedt.edb.Edb.db\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.db</span></code></a></p></td>\n<td><p>Database object.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.excitations/#pyaedt.edb.Edb.excitations\" title=\"pyaedt.edb.Edb.excitations\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.excitations</span></code></a></p></td>\n<td><p>Get all layout excitations.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.excitations_nets/#pyaedt.edb.Edb.excitations_nets\" title=\"pyaedt.edb.Edb.excitations_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.excitations_nets</span></code></a></p></td>\n<td><p>Get all excitations net names.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.hfss_setups/#pyaedt.edb.Edb.hfss_setups\" title=\"pyaedt.edb.Edb.hfss_setups\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.hfss_setups</span></code></a></p></td>\n<td><p>Active HFSS setup in EDB.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.layout_instance/#pyaedt.edb.Edb.layout_instance\" title=\"pyaedt.edb.Edb.layout_instance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.layout_instance</span></code></a></p></td>\n<td><p>Edb Layout Instance.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.logger/#pyaedt.edb.Edb.logger\" title=\"pyaedt.edb.Edb.logger\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.logger</span></code></a></p></td>\n<td><p>Logger for EDB.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.materials/#pyaedt.edb.Edb.materials\" title=\"pyaedt.edb.Edb.materials\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.materials</span></code></a></p></td>\n<td><p>Material Database.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.pins/#pyaedt.edb.Edb.pins\" title=\"pyaedt.edb.Edb.pins\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.pins</span></code></a></p></td>\n<td><p>EDBPadstackInstance of Component.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.probes/#pyaedt.edb.Edb.probes\" title=\"pyaedt.edb.Edb.probes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.probes</span></code></a></p></td>\n<td><p>Get all layout sources.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.setups/#pyaedt.edb.Edb.setups\" title=\"pyaedt.edb.Edb.setups\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.setups</span></code></a></p></td>\n<td><p>Get the dictionary of all EDB HFSS and SIwave setups.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.siwave_ac_setups/#pyaedt.edb.Edb.siwave_ac_setups\" title=\"pyaedt.edb.Edb.siwave_ac_setups\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.siwave_ac_setups</span></code></a></p></td>\n<td><p>Active Siwave SYZ setups.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.siwave_dc_setups/#pyaedt.edb.Edb.siwave_dc_setups\" title=\"pyaedt.edb.Edb.siwave_dc_setups\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.siwave_dc_setups</span></code></a></p></td>\n<td><p>Active Siwave DC IR Setups.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.sources/#pyaedt.edb.Edb.sources\" title=\"pyaedt.edb.Edb.sources\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.sources</span></code></a></p></td>\n<td><p>Get all layout sources.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb.Edb.stackup/#pyaedt.edb.Edb.stackup\" title=\"pyaedt.edb.Edb.stackup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Edb.stackup</span></code></a></p></td>\n<td><p>Stackup.</p></td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["EDBAPI/_autosummary/pyaedt.edb.Edb.add_design_variable", "add_design_variable", "N", "next"], ["EDBAPI/CoreEdb", "EDB manager", "P", "previous"]], "sourcename": "EDBAPI/_autosummary/pyaedt.edb.Edb.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">pyaedt.edb.Edb</a><ul>\n<li><a class=\"reference internal\" href=\"#pyaedt.edb.Edb\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Edb</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "EDBAPI/_autosummary/pyaedt.edb.Edb", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}