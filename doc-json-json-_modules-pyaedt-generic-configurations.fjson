{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.generic.configurations", "body": "<h1>Source code for pyaedt.generic.configurations</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.DataHandlers</span> <span class=\"kn\">import</span> <span class=\"n\">_arg2dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_create_json_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.cad.Modeler</span> <span class=\"kn\">import</span> <span class=\"n\">CoordinateSystem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.geometry_operators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">BoundaryObject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">BoundaryProps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.DesignXPloration</span> <span class=\"kn\">import</span> <span class=\"n\">SetupOpti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.DesignXPloration</span> <span class=\"kn\">import</span> <span class=\"n\">SetupParam</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.MaterialLib</span> <span class=\"kn\">import</span> <span class=\"n\">Material</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Mesh</span> <span class=\"kn\">import</span> <span class=\"n\">MeshOperation</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_find_datasets</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">out_list</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">)):</span>\n            <span class=\"n\">_find_datasets</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">out_list</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n            <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;&lt;type &#39;List&#39;&gt;&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"s2\">&quot;pwl&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;free_form_value&quot;</span><span class=\"p\">]:</span>\n                            <span class=\"n\">out_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                                <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;free_form_value&quot;</span><span class=\"p\">][</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;free_form_value&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"s2\">&quot;free_form_value&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)]</span>\n                            <span class=\"p\">)</span>\n                    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n                        <span class=\"k\">pass</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;pwl&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                    <span class=\"n\">out_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)])</span>\n\n\n<div class=\"viewcode-block\" id=\"ConfigurationsOptions\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.ConfigurationsOptions/#pyaedt.generic.configurations.ConfigurationsOptions\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ConfigurationsOptions</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Options class for the configurations.</span>\n<span class=\"sd\">    User can enable or disable import export components.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_object_mapping_tolerance</span> <span class=\"o\">=</span> <span class=\"mf\">1e-9</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_variables</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_setups</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_optimizations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_parametrics</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_boundaries</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_mesh_operations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># self._export_face_coordinate_systems = False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_materials</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_object_properties</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_variables</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_setups</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_optimizations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_parametrics</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_boundaries</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_mesh_operations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># self._import_face_coordinate_systems = False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_materials</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_object_properties</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_skip_import_if_exists</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">object_mapping_tolerance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get/Set the tolerance value to be used in the object mapping (used e.g. for boundaries).</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_object_mapping_tolerance</span>\n\n    <span class=\"nd\">@object_mapping_tolerance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">object_mapping_tolerance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_object_mapping_tolerance</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the variables have to be exported into json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_variables = False  # Disable the variables export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_variables</span>\n\n    <span class=\"nd\">@export_variables</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_variables</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the setups have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_setups = False  # Disable the setup export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_setups</span>\n\n    <span class=\"nd\">@export_setups</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_setups</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_optimizations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the optimizations have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_optimizations = False  # Disable the optimization export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_optimizations</span>\n\n    <span class=\"nd\">@export_optimizations</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_optimizations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_optimizations</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_parametrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the parametrics have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_parametrics = False  # Disable the parametrics export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_parametrics</span>\n\n    <span class=\"nd\">@export_parametrics</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_parametrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_parametrics</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_boundaries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the boundaries have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_boundaries = False  # Disable the boundaries export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_boundaries</span>\n\n    <span class=\"nd\">@export_boundaries</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_boundaries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_boundaries</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the Mesh Operations have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_mesh_operations = False  # Disable the mesh operations export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_mesh_operations</span>\n\n    <span class=\"nd\">@export_mesh_operations</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_mesh_operations</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the Coordinate Systems have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_coordinate_systems = False  # Disable the coordinate systems export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_coordinate_systems</span>\n\n    <span class=\"nd\">@export_coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def export_face_coordinate_systems(self):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;Define if the Face Coordinate Systems have to be exported to json file. Default is `True`.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     Returns</span>\n    <span class=\"c1\">#     -------</span>\n    <span class=\"c1\">#     bool</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     Examples</span>\n    <span class=\"c1\">#     --------</span>\n    <span class=\"c1\">#     &gt;&gt;&gt; from pyaedt import Hfss</span>\n    <span class=\"c1\">#     &gt;&gt;&gt; hfss = Hfss()</span>\n    <span class=\"c1\">#     &gt;&gt;&gt; hfss.configurations.options.export_face_coordinate_systems = False  # Disable the face coordinate export</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     return self._export_face_coordinate_systems</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># @export_face_coordinate_systems.setter</span>\n    <span class=\"c1\"># def export_face_coordinate_systems(self, val):</span>\n    <span class=\"c1\">#     self._export_face_coordinate_systems = val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the materials have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_export_materials = False  # Disable the materials export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_materials</span>\n\n    <span class=\"nd\">@export_materials</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_materials</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_object_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if object properties have to be exported to json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.export_object_properties = False  # Disable the object properties export</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_object_properties</span>\n\n    <span class=\"nd\">@export_object_properties</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_object_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_object_properties</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the variablbes have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_variables = False  # Disable the variables import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_variables</span>\n\n    <span class=\"nd\">@import_variables</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_variables</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the setups have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_setups = False  # Disable the setup import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_setups</span>\n\n    <span class=\"nd\">@import_setups</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_setups</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_optimizations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the optimizations have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_optimizations = False  # Disable the optimization import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_optimizations</span>\n\n    <span class=\"nd\">@import_optimizations</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_optimizations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_optimizations</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_parametrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the parametrics have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_parametrics = False  # Disable the parametrics import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_parametrics</span>\n\n    <span class=\"nd\">@import_parametrics</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_parametrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_parametrics</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_boundaries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the boundaries have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_boundaries = False  # Disable the boundaries import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_boundaries</span>\n\n    <span class=\"nd\">@import_boundaries</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_boundaries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_boundaries</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the Mesh Operations have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_mesh_operations = False  # Disable the mesh operations import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_mesh_operations</span>\n\n    <span class=\"nd\">@import_mesh_operations</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_mesh_operations</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the Coordinate Systems have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_coordinate_systems = False  # Disable the coordinate systems import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_coordinate_systems</span>\n\n    <span class=\"nd\">@import_coordinate_systems</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"c1\"># @property</span>\n    <span class=\"c1\"># def import_face_coordinate_systems(self):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;Define if the Face Coordinate Systems have to be imported/created from json file. Default is `True`.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     Returns</span>\n    <span class=\"c1\">#     -------</span>\n    <span class=\"c1\">#     bool</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     Examples</span>\n    <span class=\"c1\">#     --------</span>\n    <span class=\"c1\">#     &gt;&gt;&gt; from pyaedt import Hfss</span>\n    <span class=\"c1\">#     &gt;&gt;&gt; hfss = Hfss()</span>\n    <span class=\"c1\">#     &gt;&gt;&gt; hfss.configurations.options.import_face_coordinate_systems = False  # Disable the face coordinate import</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;</span>\n    <span class=\"c1\">#     return self._import_face_coordinate_systems</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># @import_face_coordinate_systems.setter</span>\n    <span class=\"c1\"># def import_face_coordinate_systems(self, val):</span>\n    <span class=\"c1\">#     self._import_face_coordinate_systems = val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the materials have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_import_materials = False  # Disable the materials import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_materials</span>\n\n    <span class=\"nd\">@import_materials</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_materials</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_object_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if object properties have to be imported/created from json file. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.import_object_properties = False  # Disable the object properties import</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_object_properties</span>\n\n    <span class=\"nd\">@import_object_properties</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_object_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_object_properties</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">skip_import_if_exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if the existing boundaries or properties will be updated or not. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.configurations.options.skip_import_if_exists = False  # Disable the update of existing properties</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_skip_import_if_exists</span>\n\n    <span class=\"nd\">@skip_import_if_exists</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">skip_import_if_exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_skip_import_if_exists</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_is_any_import_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Returns ``True`` if any import setting is set to ``True``. It returns ``False`` otherwise.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;_import_&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<div class=\"viewcode-block\" id=\"ConfigurationsOptions.unset_all_export\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.ConfigurationsOptions.unset_all_export/#pyaedt.generic.configurations.ConfigurationsOptions.unset_all_export\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unset_all_export</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set all export properties to `False`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;_export_&quot;</span><span class=\"p\">):</span>\n                <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"ConfigurationsOptions.set_all_export\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.ConfigurationsOptions.set_all_export/#pyaedt.generic.configurations.ConfigurationsOptions.set_all_export\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_all_export</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set all export properties to `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;_export_&quot;</span><span class=\"p\">):</span>\n                <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"ConfigurationsOptions.unset_all_import\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.ConfigurationsOptions.unset_all_import/#pyaedt.generic.configurations.ConfigurationsOptions.unset_all_import\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unset_all_import</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set all import properties to `False`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;_import_&quot;</span><span class=\"p\">):</span>\n                <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"ConfigurationsOptions.set_all_import\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.ConfigurationsOptions.set_all_import/#pyaedt.generic.configurations.ConfigurationsOptions.set_all_import\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_all_import</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set all import properties to `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;_import_&quot;</span><span class=\"p\">):</span>\n                <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"ImportResults\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.ImportResults/#pyaedt.generic.configurations.ImportResults\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ImportResults</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Import Results Class.</span>\n<span class=\"sd\">    Contains the results of the import operations. Each reusult can be ``True`` or ``False``.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_units</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_variables</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_postprocessing_variables</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_setup</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_optimizations</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_parametrics</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_boundaries</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_mesh_operations</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_face_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_datasets</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_materials</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">import_object_properties</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_reset_results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">global_import_success</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Returns ``True`` if all imports are successful. It returns ``False`` otherwise.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;import_&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Configurations\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.Configurations/#pyaedt.generic.configurations.Configurations\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Configurations</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Configuration Class.</span>\n<span class=\"sd\">    It enables to export and import configuration options to be applied on a new/existing design.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">ConfigurationsOptions</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">ImportResults</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_map_dict_value</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;object_mapping&quot;</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_map_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Objects&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_dict_value</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;Faces&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Faces&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">face</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_dict_value</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">,</span> <span class=\"n\">face</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;Edges&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Edges&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                    <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">edge</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_dict_value</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">,</span> <span class=\"n\">edge</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">midpoint</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_convert_objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">mapping</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Objects&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)])</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                        <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_list</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;Faces&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Faces&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">f_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetFaceByPosition</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:FaceParameters&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;BodyName:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)][</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                            <span class=\"s2\">&quot;XPosition:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">),</span>\n                            <span class=\"s2\">&quot;YPosition:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">),</span>\n                            <span class=\"s2\">&quot;ZPosition:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">),</span>\n                        <span class=\"p\">]</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">new_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f_id</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)][</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span>\n                            <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">face</span><span class=\"p\">)][</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                            <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">object_mapping_tolerance</span>\n                        <span class=\"p\">):</span>\n                            <span class=\"n\">new_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Faces&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_list</span>\n\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;Edges&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Edges&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)][</span><span class=\"mi\">0</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span>\n                        <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">midpoint</span><span class=\"p\">,</span> <span class=\"n\">mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)][</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                        <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">object_mapping_tolerance</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"n\">new_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Edges&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_list</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">cs</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n                    <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">cs</span> <span class=\"o\">=</span> <span class=\"n\">CoordinateSystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">_modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateRelativeCS</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">_orientation</span><span class=\"p\">,</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">_attributes</span><span class=\"p\">)</span>\n            <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Reference CS&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Coordinate System </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add CS </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"c1\"># @pyaedt_function_handler()</span>\n    <span class=\"c1\"># def _update_face_coordinate_systems(self, name, props):</span>\n    <span class=\"c1\">#     update = False</span>\n    <span class=\"c1\">#     for cs in self._app.modeler.coordinate_systems:</span>\n    <span class=\"c1\">#         if cs.name == name:</span>\n    <span class=\"c1\">#             if not self.options.skip_import_if_exists:</span>\n    <span class=\"c1\">#                 cs.props = props</span>\n    <span class=\"c1\">#                 cs.update()</span>\n    <span class=\"c1\">#             update = True</span>\n    <span class=\"c1\">#     if update:</span>\n    <span class=\"c1\">#         return True</span>\n    <span class=\"c1\">#     cs = FaceCoordinateSystem(self._app.modeler, props, name)</span>\n    <span class=\"c1\">#     try:</span>\n    <span class=\"c1\">#         cs._modeler.oeditor.CreateFaceCS(cs._face_paramenters, cs._attributes)</span>\n    <span class=\"c1\">#         cs._modeler.coordinate_systems.append(cs)</span>\n    <span class=\"c1\">#         self._app.logger.info(&quot;Face Coordinate System {} added.&quot;.format(name))</span>\n    <span class=\"c1\">#     except Exception:</span>\n    <span class=\"c1\">#         self._app.logger.warning(&quot;Failed to add CS {} &quot;.format(name))</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_object_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DAttributeTab&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">]]]</span>\n            <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">is3d</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Maxwell 2D&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Material&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)])</span>\n                <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Solve Inside&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Group&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Transparency&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Transparent&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Transparency&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Color&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;R:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;G:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;B:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;CoordinateSystem&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Orientation&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;CoordinateSystem&quot;</span><span class=\"p\">]])</span>\n            <span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_boundaries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">bound</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span> <span class=\"ow\">and</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n                    <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;BoundType&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Independent&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Independent&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Independent&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Independent&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                    <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;CurrentLine&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;CurrentLine&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;GeometryPosition&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;CurrentLine&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryPosition&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;XPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;YPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;ZPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s2\">&quot;XPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s2\">&quot;YPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s2\">&quot;ZPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Coordinate System&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Start&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">z1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;End&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"n\">z2</span><span class=\"p\">]})</span>\n            <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;CurrentLine&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryProps</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">)</span>\n            <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Modes&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"n\">modes</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Modes&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;ModeNum&quot;</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;ModeNum&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;UseIntLine&quot;</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;UseIntLine&quot;</span><span class=\"p\">]})</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;UseIntLine&quot;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;IntLine&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;GeometryPosition&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;IntLine&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;GeometryPosition&quot;</span><span class=\"p\">]</span>\n                    <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;XPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                    <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;YPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                    <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;ZPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                    <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s2\">&quot;XPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                    <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s2\">&quot;YPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                    <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s2\">&quot;ZPosition&quot;</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n                    <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"s2\">&quot;IntLine&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n                        <span class=\"p\">{</span><span class=\"s2\">&quot;Coordinate System&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Start&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">z1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;End&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"n\">z2</span><span class=\"p\">]}</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;UseIntLine&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"s2\">&quot;IntLine&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;IntLine&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;AlignmentGroup&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"s2\">&quot;AlignmentGroup&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;AlignmentGroup&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;CharImp&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"s2\">&quot;CharImp&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;CharImp&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;RenormImp&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"s2\">&quot;RenormImp&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s2\">&quot;RenormImp&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">modes</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p1</span>\n            <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Modes&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryProps</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">,</span> <span class=\"n\">modes</span><span class=\"p\">)</span>\n            <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;BoundType&quot;</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Coil Terminal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Coil&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CoilTerminal&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">winding_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n                <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ParentBndID&quot;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                        <span class=\"n\">winding_name</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                        <span class=\"k\">break</span>\n                <span class=\"k\">if</span> <span class=\"n\">winding_name</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">add_winding_coils</span><span class=\"p\">(</span><span class=\"n\">winding_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Boundary Operation </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add Boundary </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">mesh_el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshoperations</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n                    <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">MeshOperation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshoperations</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;mesh Operation </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add Mesh </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">setup_el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n                    <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">create_setup</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SetupType&quot;</span><span class=\"p\">],</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add Setup </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_optimetrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">setup_el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">optimizations</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n                    <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">SetupOpti</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">optim_type</span><span class=\"o\">=</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SetupType&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">optimizations</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optim </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add Optim </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_parametrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">setup_el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">parametrics</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n                    <span class=\"n\">setup_el</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"n\">SetupParam</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">optim_type</span><span class=\"o\">=</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SetupType&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">optimizations</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optim </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add Optim </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<div class=\"viewcode-block\" id=\"Configurations.import_config\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.Configurations.import_config/#pyaedt.generic.configurations.Configurations.import_config\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config_file</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Import configuration settings from a json file and apply it to the current design.</span>\n<span class=\"sd\">        The sections to be applied are defined with ``configuration.options`` class.</span>\n<span class=\"sd\">        The import operation result is saved in the ``configuration.results`` class.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        config_file : str</span>\n<span class=\"sd\">            Full path to json file.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict, bool</span>\n<span class=\"sd\">            Config dictionary.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">_reset_results</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">json_file</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_in</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">_is_any_import_set</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span> <span class=\"o\">=</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;model_units&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_units</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_units</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_variables</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;variables&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_variables</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_variables</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;postprocessing_variables&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">postprocessing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_postprocessing_variables</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_postprocessing_variables</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_materials</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;datasets&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_datasets</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;datasets&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">numcol</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;DimUnits&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">xunit</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;DimUnits&quot;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">yunit</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;DimUnits&quot;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">zunit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n                <span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Points&quot;</span><span class=\"p\">][</span><span class=\"n\">i</span> <span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">numcol</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Points&quot;</span><span class=\"p\">]),</span> <span class=\"n\">numcol</span><span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n                <span class=\"n\">xval</span> <span class=\"o\">=</span> <span class=\"n\">new_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">yval</span> <span class=\"o\">=</span> <span class=\"n\">new_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">zval</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">if</span> <span class=\"n\">numcol</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                    <span class=\"n\">zunit</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;DimUnits&quot;</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                    <span class=\"n\">zval</span> <span class=\"o\">=</span> <span class=\"n\">new_list</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">create_dataset</span><span class=\"p\">(</span>\n                    <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">xunit</span><span class=\"o\">=</span><span class=\"n\">xunit</span><span class=\"p\">,</span> <span class=\"n\">yunit</span><span class=\"o\">=</span><span class=\"n\">yunit</span><span class=\"p\">,</span> <span class=\"n\">zunit</span><span class=\"o\">=</span><span class=\"n\">zunit</span><span class=\"p\">,</span> <span class=\"n\">xlist</span><span class=\"o\">=</span><span class=\"n\">xval</span><span class=\"p\">,</span> <span class=\"n\">ylist</span><span class=\"o\">=</span><span class=\"n\">yval</span><span class=\"p\">,</span> <span class=\"n\">zlist</span><span class=\"o\">=</span><span class=\"n\">zval</span>\n                <span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_datasets</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_materials</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;materials&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_materials</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;materials&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">checkifmaterialexists</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">):</span>\n                    <span class=\"n\">newname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Material </span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">newname</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">newname</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n                <span class=\"n\">newmat</span> <span class=\"o\">=</span> <span class=\"n\">Material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">newmat</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">material_keys</span><span class=\"p\">[</span><span class=\"n\">newname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">newmat</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_materials</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_coordinate_systems</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;coordinatesystems&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;coordinatesystems&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_coordinate_systems</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_coordinate_systems</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># if self.options.import_face_coordinate_systems and dict_in.get(&quot;facecoordinatesystems&quot;, None):</span>\n        <span class=\"c1\">#     self.results.import_face_coordinate_systems = True</span>\n        <span class=\"c1\">#     for name, props in dict_in[&quot;facecoordinatesystems&quot;].items():</span>\n        <span class=\"c1\">#         self._convert_objects(dict_in[&quot;facecoordinatesystems&quot;][name], dict_in[&quot;general&quot;][&quot;object_mapping&quot;])</span>\n        <span class=\"c1\">#         if not self._update_face_coordinate_systems(name, props):</span>\n        <span class=\"c1\">#             self.results.import_face_coordinate_systems = False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_object_properties</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_object_properties</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_object_properties</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_object_properties</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Object Properties updated.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_boundaries</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_boundaries</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">sort_order</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">sort_order</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_objects</span><span class=\"p\">(</span><span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">][</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;object_mapping&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_boundaries</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">][</span><span class=\"n\">name</span><span class=\"p\">]):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_boundaries</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_mesh_operations</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_mesh_operations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_objects</span><span class=\"p\">(</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;object_mapping&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_mesh_operations</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_mesh_operations</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_setups</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;setups&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_setup</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;setups&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_setup</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_setup</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_optimizations</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;optimizations&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_optimizations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;optimizations&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_optimetrics</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_optimizations</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">import_parametrics</span> <span class=\"ow\">and</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;parametrics&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_parametrics</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;parametrics&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_parametrics</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">import_parametrics</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">dict_in</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_general</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;pyaedt_version&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">__version__</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;model_units&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;design_name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_name</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;date&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%d</span><span class=\"s2\">/%m/%Y %H:%M:%S&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;object_mapping&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;variables&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;postprocessing_variables&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">post_vars</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">post_processing_variables</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">independent_variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">post_vars</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;variables&quot;</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">evaluated_value</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">dependent_variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">post_vars</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;variables&quot;</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">post_vars</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;postprocessing_variables&quot;</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;postprocessing_variables&quot;</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">evaluated_value</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_setups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;setups&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;setups&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;setups&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;SetupType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">setuptype</span>\n                <span class=\"k\">if</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;setups&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_optimizations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">optimizations</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;optimizations&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">optimizations</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;optimizations&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;optimizations&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;SetupType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">soltype</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_parametrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">parametrics</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;parametrics&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">parametrics</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;parametrics&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;parametrics&quot;</span><span class=\"p\">][</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;SetupType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">soltype</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_boundaries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">boundary</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">][</span><span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;BoundType&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                    <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;boundaries&quot;</span><span class=\"p\">][</span><span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;BoundType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">type</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_object</span><span class=\"p\">(</span><span class=\"n\">boundary</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_coordinate_systems</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;coordinatesystems&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">cs</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">coordinate_systems</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">,</span> <span class=\"n\">CoordinateSystem</span><span class=\"p\">):</span>\n                    <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;coordinatesystems&quot;</span><span class=\"p\">][</span><span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                    <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;coordinatesystems&quot;</span><span class=\"p\">][</span><span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Reference CS&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">ref_cs</span>\n\n    <span class=\"c1\"># @pyaedt_function_handler()</span>\n    <span class=\"c1\"># def _export_face_coordinate_systems(self, dict_out):</span>\n    <span class=\"c1\">#     if self._app.modeler.coordinate_systems:</span>\n    <span class=\"c1\">#         dict_out[&quot;facecoordinatesystems&quot;] = {}</span>\n    <span class=\"c1\">#         for cs in self._app.modeler.coordinate_systems:</span>\n    <span class=\"c1\">#             if isinstance(cs, FaceCoordinateSystem):</span>\n    <span class=\"c1\">#                 dict_out[&quot;facecoordinatesystems&quot;][cs.name] = cs.props</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_objects_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">is3d</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Maxwell 2D&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">material_name</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solve_inside</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">model</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">group_name</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Transparency&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">transparency</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">color</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;CoordinateSystem&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">part_coordinate_system</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshoperations</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">mesh</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshoperations</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">][</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">props</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_object</span><span class=\"p\">(</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"n\">output_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">material_keys</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">output_dict</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">_props</span><span class=\"p\">)</span>\n        <span class=\"n\">out_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">_find_datasets</span><span class=\"p\">(</span><span class=\"n\">output_dict</span><span class=\"p\">,</span> <span class=\"n\">out_list</span><span class=\"p\">)</span>\n        <span class=\"n\">datasets</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">out_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_datasets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_datasets</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">:</span>\n                    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">xunit</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">yunit</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">zunit</span><span class=\"p\">]</span>\n                    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">val</span> <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">tup</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">xunit</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">yunit</span><span class=\"p\">]</span>\n                    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">val</span> <span class=\"k\">for</span> <span class=\"n\">tup</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">tup</span><span class=\"p\">]</span>\n                <span class=\"n\">datasets</span><span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;Coordinates&quot;</span><span class=\"p\">:</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n                            <span class=\"p\">{</span>\n                                <span class=\"s2\">&quot;DimUnits&quot;</span><span class=\"p\">:</span> <span class=\"n\">units</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;Points&quot;</span><span class=\"p\">:</span> <span class=\"n\">points</span><span class=\"p\">,</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;materials&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">output_dict</span>\n        <span class=\"k\">if</span> <span class=\"n\">datasets</span><span class=\"p\">:</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;datasets&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span>\n\n<div class=\"viewcode-block\" id=\"Configurations.export_config\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.generic.configurations.Configurations.export_config/#pyaedt.generic.configurations.Configurations.export_config\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export current design properties to json file.</span>\n<span class=\"sd\">        The section to be exported are defined with ``configuration.options`` class.</span>\n\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        config_file : str, optional</span>\n<span class=\"sd\">            Full path to json file. If ``None``, then the config file will be saved in working directory.</span>\n<span class=\"sd\">        overwrite : bool, optional</span>\n<span class=\"sd\">            If ``True`` the json file will be overwritten if already existing.</span>\n<span class=\"sd\">            If ``False`` and the version is compatible, the data in the existing file will be updated.</span>\n<span class=\"sd\">            Default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Exported config file.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config_file</span><span class=\"p\">:</span>\n            <span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_name</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.json&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">dict_out</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_general</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_variables</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_variables</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_setups</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_setups</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_optimizations</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_optimizations</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_parametrics</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_parametrics</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_boundaries</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_boundaries</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_coordinate_systems</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_coordinate_systems</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if self.options.export_face_coordinate_systems:</span>\n        <span class=\"c1\">#     self._export_face_coordinate_systems(dict_out)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_object_properties</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_objects_properties</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_mesh_operations</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_mesh_operations</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">export_materials</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_materials</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"c1\"># update the json if it exists already</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">json_file</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">dict_in</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                    <span class=\"n\">dict_in</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">dict_in</span><span class=\"p\">[</span><span class=\"s2\">&quot;general&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;pyaedt_version&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">__version__</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">dict_in</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">dict_out</span><span class=\"p\">:</span>\n                            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n                        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]:</span>\n                                    <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"c1\"># write the updated json to file</span>\n        <span class=\"k\">if</span> <span class=\"n\">_create_json_file</span><span class=\"p\">(</span><span class=\"n\">dict_out</span><span class=\"p\">,</span> <span class=\"n\">config_file</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Json file </span><span class=\"si\">{}</span><span class=\"s2\"> created correctly.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">config_file</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error creating json file </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConfigurationsIcepak</span><span class=\"p\">(</span><span class=\"n\">Configurations</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Configuration Class.</span>\n<span class=\"sd\">    It enables to export and import configuration options to be applied on a new/existing design.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"n\">Configurations</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_object_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">object_names</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DAttributeTab&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">]]]</span>\n            <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Material&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Solve Inside&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">]])</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Surface Material&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SurfaceMaterial&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Steel-oxidised-surface&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">34</span><span class=\"p\">),</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Group&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Transparency&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Transparent&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Transparency&quot;</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Color&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;R:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;G:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;B:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;CoordinateSystem&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Orientation&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;CoordinateSystem&quot;</span><span class=\"p\">]])</span>\n            <span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Settings&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">global_mesh_region</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">global_mesh_region</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">global_mesh_region</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">mesh_el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshregions</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">skip_import_if_exists</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n                            <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n                    <span class=\"k\">return</span> <span class=\"n\">mesh_el</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">MeshRegion</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">omeshmodule</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">boundingdimension</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">_model_units</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n                <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshregions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;mesh Operation </span><span class=\"si\">{}</span><span class=\"s2\"> added.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to add Mesh </span><span class=\"si\">{}</span><span class=\"s2\"> &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_objects_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;SurfaceMaterial&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">surface_material_name</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">material_name</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solve_inside</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">model</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Group&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">group_name</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Transparency&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">transparency</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;Color&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">color</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;objects&quot;</span><span class=\"p\">][</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s2\">&quot;CoordinateSystem&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">part_coordinate_system</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_mesh_operations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">):</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Settings&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">global_mesh_region</span><span class=\"o\">.</span><span class=\"n\">UserSpecifiedSettings</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">global_mesh_region</span><span class=\"o\">.</span><span class=\"n\">manualsettings</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">global_mesh_region</span><span class=\"o\">.</span><span class=\"n\">autosettings</span>\n        <span class=\"n\">mop</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"n\">_arg2dict</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">mop</span><span class=\"p\">)</span>\n        <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Settings&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mop</span><span class=\"p\">[</span><span class=\"s2\">&quot;Settings&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshregions</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">mesh</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">meshregions</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Settings&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Settings&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Enable:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">Enable</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">UserSpecifiedSettings</span><span class=\"p\">:</span>\n                    <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">manualsettings</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">autosettings</span>\n                <span class=\"n\">mop</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n                <span class=\"n\">_arg2dict</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">mop</span><span class=\"p\">)</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"s2\">&quot;mesh&quot;</span><span class=\"p\">][</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mop</span><span class=\"p\">[</span><span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_map_object</span><span class=\"p\">(</span><span class=\"n\">mop</span><span class=\"p\">,</span> <span class=\"n\">dict_out</span><span class=\"p\">)</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/generic/configurations", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}