{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.edb_core.stackup", "body": "<h1>Source code for pyaedt.edb_core.stackup</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains the `EdbStackup` class.</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">difflib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.EDB_Data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBLayers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.EDB_Data</span> <span class=\"kn\">import</span> <span class=\"n\">SimulationConfiguration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.general</span> <span class=\"kn\">import</span> <span class=\"n\">convert_py_list_to_net_list</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">clr</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;This module requires the PythonNET package.&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Stackup</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages EDB methods for stackup and material management accessible from `Edb.stackup` property.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">_Layer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pclass</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span> <span class=\"o\">=</span> <span class=\"n\">pclass</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_edb_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_edb_layer_list</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">is_stackup_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Determine whether this layer is a stackup layer.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            bool</span>\n<span class=\"sd\">                True if this layer is a stackup layer, False otherwise.</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">IsStackupLayer</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Retrieve color of the layer.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            tuple</span>\n<span class=\"sd\">                RGB.</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"n\">layer_color</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">GetColor</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">layer_color</span><span class=\"o\">.</span><span class=\"n\">Item1</span><span class=\"p\">,</span> <span class=\"n\">layer_color</span><span class=\"o\">.</span><span class=\"n\">Item2</span><span class=\"p\">,</span> <span class=\"n\">layer_color</span><span class=\"o\">.</span><span class=\"n\">Item3</span>\n\n        <span class=\"nd\">@color</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">color</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rgb</span><span class=\"p\">):</span>\n            <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n            <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetColor</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">rgb</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Retrieve name of the layer.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            str</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n            <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_name&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Retrieve thickness of the layer.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            float</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_stackup_layer</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">GetThicknessValue</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@thickness</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_stackup_layer</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n            <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetThickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">etch_factor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Retrieve etch factor of this layer</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            float</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">GetEtchFactor</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@etch_factor</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">etch_factor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_stackup_layer</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n                <span class=\"k\">return</span> <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetEtchFactorEnabled</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n                <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetEtchFactorEnabled</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetEtchFactor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">roughness_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Determine whether roughness is enabled on this layer.</span>\n\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n<span class=\"sd\">            bool</span>\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_stackup_layer</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">IsRoughnessEnabled</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@roughness_enabled</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">roughness_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">set_enable</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_stackup_layer</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span>\n            <span class=\"k\">if</span> <span class=\"n\">set_enable</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n                <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetRoughnessEnabled</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assign_roughness_model</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n                <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetRoughnessEnabled</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n        <span class=\"k\">def</span> <span class=\"nf\">assign_roughness_model</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">model_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;huray&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">huray_radius</span><span class=\"o\">=</span><span class=\"s2\">&quot;0.5um&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">huray_surface_ratio</span><span class=\"o\">=</span><span class=\"s2\">&quot;2.9&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">groisse_roughness</span><span class=\"o\">=</span><span class=\"s2\">&quot;1um&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">apply_on_surface</span><span class=\"o\">=</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">):</span>\n            <span class=\"sd\">&quot;&quot;&quot;Assign roughness model on this layer.</span>\n\n<span class=\"sd\">            Parameters</span>\n<span class=\"sd\">            ----------</span>\n<span class=\"sd\">            model_type : str, optional</span>\n<span class=\"sd\">                Type of roughness model. The default is ``&quot;huray&quot;``. Options are ``&quot;huray&quot;``, ``&quot;groisse&quot;``.</span>\n<span class=\"sd\">            huray_radius : str, optional</span>\n<span class=\"sd\">                Radius of huray model. The default is ``&quot;0.5um&quot;``.</span>\n<span class=\"sd\">            huray_surface_ratio : str, float, optional.</span>\n<span class=\"sd\">                Surface ratio of huray model. The default is ``&quot;2.9&quot;``.</span>\n<span class=\"sd\">            groisse_roughness : str, float, optional</span>\n<span class=\"sd\">                Roughness of groisse model. The default is ``&quot;1um&quot;``.</span>\n<span class=\"sd\">            apply_on_surface : str, optional.</span>\n<span class=\"sd\">                Where to assign roughness model. The default is ``&quot;all&quot;``. Options are ``&quot;top&quot;``, ``&quot;bottom&quot;``,</span>\n<span class=\"sd\">                 ``&quot;side&quot;``.</span>\n<span class=\"sd\">            Returns</span>\n<span class=\"sd\">            -------</span>\n\n<span class=\"sd\">            &quot;&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_stackup_layer</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span>\n            <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">huray_radius</span><span class=\"p\">)</span>\n            <span class=\"n\">surface_ratio</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">huray_surface_ratio</span><span class=\"p\">)</span>\n            <span class=\"n\">groisse_roughness</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">groisse_roughness</span><span class=\"p\">)</span>\n            <span class=\"n\">regions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"n\">apply_on_surface</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;all&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">regions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">RoughnessModel</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"o\">.</span><span class=\"n\">Top</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">RoughnessModel</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"o\">.</span><span class=\"n\">Side</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">RoughnessModel</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"o\">.</span><span class=\"n\">Bottom</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">apply_on_surface</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;top&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">regions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">RoughnessModel</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"o\">.</span><span class=\"n\">Top</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">apply_on_surface</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;bottom&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">regions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">RoughnessModel</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"o\">.</span><span class=\"n\">Bottom</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">apply_on_surface</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;side&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">regions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">RoughnessModel</span><span class=\"o\">.</span><span class=\"n\">Region</span><span class=\"o\">.</span><span class=\"n\">Side</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n\n            <span class=\"n\">layer_clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n            <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">regions</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;huray&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">HurrayRoughnessModel</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">surface_ratio</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">GroisseRoughnessModel</span><span class=\"p\">(</span><span class=\"n\">groisse_roughness</span><span class=\"p\">)</span>\n                <span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">SetRoughnessModel</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pclass</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">pedb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_layer_collection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Copy of EDB layer collection.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        class : Ansys.Ansoft.Edb.Cell.LayerCollection</span>\n<span class=\"sd\">            Collection of layers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">lc_readonly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">()</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lc_readonly</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">)))</span>\n        <span class=\"n\">layer_collection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">()</span>\n\n        <span class=\"n\">flag_first_layer</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">lyr</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">IsStackupLayer</span><span class=\"p\">():</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">lyr_clone</span> <span class=\"o\">=</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n            <span class=\"n\">lyr_name</span> <span class=\"o\">=</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">flag_first_layer</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerTop</span><span class=\"p\">(</span><span class=\"n\">lyr_clone</span><span class=\"p\">)</span>\n                <span class=\"n\">flag_first_layer</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerAbove</span><span class=\"p\">(</span><span class=\"n\">lyr_clone</span><span class=\"p\">,</span> <span class=\"n\">lyr_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">lyr</span> <span class=\"ow\">in</span> <span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">IsStackupLayer</span><span class=\"p\">():</span>\n                <span class=\"n\">layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerTop</span><span class=\"p\">(</span><span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">())</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">layer_collection</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_layer_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_collection</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_layer_list_nonstackup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_collection</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">NonStackupLayerSet</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the dictionary of layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">():</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_Layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer_list</span><span class=\"p\">}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signal_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the dictionary of signal layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SignalLayer</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">obj</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span><span class=\"o\">.</span><span class=\"n\">GetLayerType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">layer_type</span><span class=\"p\">}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">non_stackup_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the dictionary of signal layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">():</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_Layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer_list_nonstackup</span><span class=\"p\">}</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"n\">operation</span><span class=\"p\">,</span> <span class=\"n\">base_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Internal method. Apply stackup change into EDB.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer_clone : :class:`pyaedt.edb_core.EDB_Data.EDBLayer`</span>\n<span class=\"sd\">        operation : str</span>\n<span class=\"sd\">            Options are ``&quot;change_attribute&quot;``, ``&quot;change_name&quot;``, ``&quot;insert_below&quot;``,</span>\n<span class=\"sd\">             ``&quot;insert_above&quot;``, ``&quot;add_on_top&quot;``, ``&quot;add_on_bottom&quot;``, ``&quot;non_stackup&quot;``.</span>\n<span class=\"sd\">        base_layer : str, optional</span>\n<span class=\"sd\">            Name of the base layer. The default value is ``None``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">edb_layers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_layer_list</span>\n        <span class=\"k\">if</span> <span class=\"n\">operation</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;change_name&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">new_layer_collection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_collection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_collection</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;change_attribute&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">lyr</span> <span class=\"ow\">in</span> <span class=\"n\">edb_layers</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()):</span>\n                    <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerBottom</span><span class=\"p\">(</span><span class=\"n\">lyr</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerBottom</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;change_name&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">lyr</span> <span class=\"ow\">in</span> <span class=\"n\">edb_layers</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">base_layer</span> <span class=\"o\">==</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()):</span>\n                    <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerBottom</span><span class=\"p\">(</span><span class=\"n\">lyr</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerBottom</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;insert_below&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerBelow</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"n\">base_layer</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;insert_above&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerAbove</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">,</span> <span class=\"n\">base_layer</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;add_on_top&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerTop</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">operation</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;add_on_bottom&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerBottom</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_collection</span><span class=\"o\">.</span><span class=\"n\">AddLayerTop</span><span class=\"p\">(</span><span class=\"n\">layer_clone</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">SetLayerCollection</span><span class=\"p\">(</span><span class=\"n\">new_layer_collection</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_stackup_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SignalLayer</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">DielectricLayer</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">StackupLayer</span><span class=\"p\">(</span>\n            <span class=\"n\">layer_name</span><span class=\"p\">,</span>\n            <span class=\"n\">_layer_type</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_nonstackup_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;conducting&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">ConductingLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;air_lines&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">AirlinesLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;error&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">ErrorsLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;symbol&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SymbolLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;measure&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">MeasureLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;assembly&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">AssemblyLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;silkscreen&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SilkscreenLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;solder_mask&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SolderMaskLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;solder_paste&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SolderPasteLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;glue&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">GlueLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;wirebond&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">WirebondLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;user&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">UserLayer</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hfss_region&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SIwaveHFSSSolverRegions</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">OutlineLayer</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">_layer_type</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_layer</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_name</span><span class=\"p\">,</span>\n        <span class=\"n\">base_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;add_on_top&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">fillMaterial</span><span class=\"o\">=</span><span class=\"s2\">&quot;fr4_epoxy&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"s2\">&quot;35um&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">etch_factor</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">is_negative</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">enable_roughness</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Insert a layer into stackup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer_name : str</span>\n<span class=\"sd\">            Name of the layer.</span>\n<span class=\"sd\">        base_layer : str, optional</span>\n<span class=\"sd\">            Name of the base layer.</span>\n<span class=\"sd\">        method : str, optional</span>\n<span class=\"sd\">            Where to insert the new layer. The default is ``&quot;add_on_top&quot;``. Options are ``&quot;add_on_top&quot;``,</span>\n<span class=\"sd\">            ``&quot;add_on_bottom&quot;``, ``&quot;insert_above&quot;``, ``&quot;insert_below&quot;``.</span>\n<span class=\"sd\">        layer_type : str, optional</span>\n<span class=\"sd\">            Type of layer. The default is ``&quot;signal&quot;``. Options are ``&quot;signal&quot;``, ``&quot;dielectric&quot;``, ``&quot;conducting&quot;``,</span>\n<span class=\"sd\">             ``&quot;air_lines&quot;``, ``&quot;error&quot;``, ``&quot;symbol&quot;``, ``&quot;measure&quot;``, ``&quot;assembly&quot;``, ``&quot;silkscreen&quot;``,</span>\n<span class=\"sd\">             ``&quot;solder_mask&quot;``, ``&quot;solder_paste&quot;``, ``&quot;glue&quot;``, ``&quot;wirebond&quot;``, ``&quot;hfss_region&quot;``, ``&quot;user&quot;``.</span>\n<span class=\"sd\">        material : str, optional</span>\n<span class=\"sd\">            Material of the layer.</span>\n<span class=\"sd\">        fillMaterial : str, optional</span>\n<span class=\"sd\">            Fill material of the layer.</span>\n<span class=\"sd\">        thickness : str, float, optional</span>\n<span class=\"sd\">            Thickness of the layer.</span>\n<span class=\"sd\">        etch_factor : int, float, optional</span>\n<span class=\"sd\">            Etch factor of the layer.</span>\n<span class=\"sd\">        is_negative : bool, optional</span>\n<span class=\"sd\">            Whether the layer is negative.</span>\n<span class=\"sd\">        enable_roughness : bool, optional</span>\n<span class=\"sd\">            Whether roughness is enabled.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">new_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_stackup_layer</span><span class=\"p\">(</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"p\">)</span>\n            <span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">SetMaterial</span><span class=\"p\">(</span><span class=\"n\">material</span><span class=\"p\">)</span>\n            <span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">SetFillMaterial</span><span class=\"p\">(</span><span class=\"n\">fillMaterial</span><span class=\"p\">)</span>\n            <span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">SetNegative</span><span class=\"p\">(</span><span class=\"n\">is_negative</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">new_layer</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">base_layer</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">etch_factor</span><span class=\"p\">:</span>\n                <span class=\"n\">new_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"n\">layer_name</span><span class=\"p\">]</span>\n                <span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">etch_factor</span> <span class=\"o\">=</span> <span class=\"n\">etch_factor</span>\n            <span class=\"k\">if</span> <span class=\"n\">enable_roughness</span><span class=\"p\">:</span>\n                <span class=\"n\">new_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"n\">layer_name</span><span class=\"p\">]</span>\n                <span class=\"n\">new_layer</span><span class=\"o\">.</span><span class=\"n\">roughness_enabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_nonstackup_layer</span><span class=\"p\">(</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_layout_stackup</span><span class=\"p\">(</span><span class=\"n\">new_layer</span><span class=\"p\">,</span> <span class=\"s2\">&quot;non_stackup&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"n\">layer_name</span><span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"EdbStackup\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup/#pyaedt.edb_core.stackup.EdbStackup\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EdbStackup</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages EDB methods for stackup and material management accessible from `Edb.core_stackup` property.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_stackup = edbapp.core_stackup</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">p_edb</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">p_edb</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_builder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">builder</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_edb_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_active_layout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_cell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">cell</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">db</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stackup_layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Stackup layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.EDBData.EDBLayers`</span>\n<span class=\"sd\">            Dictionary of stackup layers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_dict</span> <span class=\"o\">=</span> <span class=\"n\">EDBLayers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_dict</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signal_layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dictionary of all signal layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.edb_core.EDB_Data.EDBLayer`]</span>\n<span class=\"sd\">            List of signal layers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_types</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer types.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Types of layers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">materials</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Materials.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of materials.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">mats</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edbutils</span><span class=\"o\">.</span><span class=\"n\">MaterialSetupInfo</span><span class=\"o\">.</span><span class=\"n\">GetFromLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span><span class=\"p\">):</span>\n            <span class=\"n\">mats</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n        <span class=\"k\">return</span> <span class=\"n\">mats</span>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.create_dielectric\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.create_dielectric/#pyaedt.edb_core.stackup.EdbStackup.create_dielectric\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_dielectric</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">permittivity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">loss_tangent</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a dielectric with simple properties.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the dielectic.</span>\n<span class=\"sd\">        permittivity : float, optional</span>\n<span class=\"sd\">            Permittivity of the dielectric. The default is ``1``.</span>\n<span class=\"sd\">        loss_tangent : float, optional</span>\n<span class=\"sd\">            Loss tangent for the material. The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Material definition.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"n\">material_def</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Permittivity</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">permittivity</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">DielectricLossTangent</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">loss_tangent</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">material_def</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.create_conductor\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.create_conductor/#pyaedt.edb_core.stackup.EdbStackup.create_conductor\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_conductor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">conductivity</span><span class=\"o\">=</span><span class=\"mf\">1e6</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a conductor with simple properties.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the conductor.</span>\n<span class=\"sd\">        conductivity : float, optional</span>\n<span class=\"sd\">            Conductivity of the conductor. The default is ``1e6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Material definition.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"n\">material_def</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Conductivity</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">conductivity</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">material_def</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.create_debye_material\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.create_debye_material/#pyaedt.edb_core.stackup.EdbStackup.create_debye_material\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_debye_material</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">relative_permittivity_low</span><span class=\"p\">,</span>\n        <span class=\"n\">relative_permittivity_high</span><span class=\"p\">,</span>\n        <span class=\"n\">loss_tangent_low</span><span class=\"p\">,</span>\n        <span class=\"n\">loss_tangent_high</span><span class=\"p\">,</span>\n        <span class=\"n\">lower_freqency</span><span class=\"p\">,</span>\n        <span class=\"n\">higher_frequency</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a dielectric with the Debye model.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the dielectic.</span>\n<span class=\"sd\">        relative_permittivity_low : float</span>\n<span class=\"sd\">            Relative permittivity of the dielectric at the frequency specified</span>\n<span class=\"sd\">            for ``lower_frequency``.</span>\n<span class=\"sd\">        relative_permittivity_high : float</span>\n<span class=\"sd\">            Relative ermittivity of the dielectric at the frequency specified</span>\n<span class=\"sd\">            for ``higher_frequency``.</span>\n<span class=\"sd\">        loss_tangent_low : float</span>\n<span class=\"sd\">            Loss tangent for the material at the frequency specified</span>\n<span class=\"sd\">            for ``lower_frequency``.</span>\n<span class=\"sd\">        loss_tangent_high : float</span>\n<span class=\"sd\">            Loss tangent for the material at the frequency specified</span>\n<span class=\"sd\">            for ``higher_frequency``.</span>\n<span class=\"sd\">        lower_freqency : float</span>\n<span class=\"sd\">            Value for the lower frequency.</span>\n<span class=\"sd\">        higher_frequency : float</span>\n<span class=\"sd\">            Value for the higher frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Material definition.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">material_def</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">DebyeModel</span><span class=\"p\">()</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetFrequencyRange</span><span class=\"p\">(</span><span class=\"n\">lower_freqency</span><span class=\"p\">,</span> <span class=\"n\">higher_frequency</span><span class=\"p\">)</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetLossTangentAtHighLowFrequency</span><span class=\"p\">(</span><span class=\"n\">loss_tangent_low</span><span class=\"p\">,</span> <span class=\"n\">loss_tangent_high</span><span class=\"p\">)</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetRelativePermitivityAtHighLowFrequency</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">relative_permittivity_low</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">relative_permittivity_high</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_dielectric_material_model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material_def</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.create_multipole_debye_material\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.create_multipole_debye_material/#pyaedt.edb_core.stackup.EdbStackup.create_multipole_debye_material\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_multipole_debye_material</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">frequencies</span><span class=\"p\">,</span>\n        <span class=\"n\">relative_permittivities</span><span class=\"p\">,</span>\n        <span class=\"n\">loss_tangents</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a dielectric with the Multipole Debye model.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the dielectic.</span>\n<span class=\"sd\">        frequencies : list</span>\n<span class=\"sd\">            Frequencies in GHz.</span>\n<span class=\"sd\">        relative_permittivities : list</span>\n<span class=\"sd\">            Relative permittivities at each frequency.</span>\n<span class=\"sd\">        loss_tangents : list</span>\n<span class=\"sd\">            Loss tangents at each frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Material definition.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb = Edb()</span>\n<span class=\"sd\">        &gt;&gt;&gt; freq = [0, 2, 3, 4, 5, 6]</span>\n<span class=\"sd\">        &gt;&gt;&gt; rel_perm = [1e9, 1.1e9, 1.2e9, 1.3e9, 1.5e9, 1.6e9]</span>\n<span class=\"sd\">        &gt;&gt;&gt; loss_tan = [0.025, 0.026, 0.027, 0.028, 0.029, 0.030]</span>\n<span class=\"sd\">        &gt;&gt;&gt; diel = edb.core_stackup.create_multipole_debye_material(&quot;My_MP_Debye&quot;, freq, rel_perm, loss_tan)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">frequencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">frequencies</span><span class=\"p\">]</span>\n        <span class=\"n\">relative_permittivities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">relative_permittivities</span><span class=\"p\">]</span>\n        <span class=\"n\">loss_tangents</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">loss_tangents</span><span class=\"p\">]</span>\n        <span class=\"n\">material_def</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MultipoleDebyeModel</span><span class=\"p\">()</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetParameters</span><span class=\"p\">(</span>\n            <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">frequencies</span><span class=\"p\">),</span>\n            <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">relative_permittivities</span><span class=\"p\">),</span>\n            <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">loss_tangents</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_dielectric_material_model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material_def</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.get_layout_thickness\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.get_layout_thickness/#pyaedt.edb_core.stackup.EdbStackup.get_layout_thickness\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_layout_thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the layout thickness.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Float, the thickness value.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">layers_name</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">bottom_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">layers_name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"n\">top_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">layers_name</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"n\">top_layer</span><span class=\"o\">.</span><span class=\"n\">lower_elevation</span> <span class=\"o\">+</span> <span class=\"n\">top_layer</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span> <span class=\"o\">-</span> <span class=\"n\">bottom_layer</span><span class=\"o\">.</span><span class=\"n\">lower_elevation</span>\n        <span class=\"k\">return</span> <span class=\"n\">thickness</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.duplicate_material\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.duplicate_material/#pyaedt.edb_core.stackup.EdbStackup.duplicate_material\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">,</span> <span class=\"n\">new_material_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate a material from the database.</span>\n<span class=\"sd\">        It duplicates these five properties: ``permittivity``, ``permeability``, ` conductivity,``</span>\n<span class=\"sd\">        ``dielectriclosstangent``, and ``magneticlosstangent``.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        material_name : str</span>\n<span class=\"sd\">            Name of the existing material.</span>\n<span class=\"sd\">        new_material_name : str</span>\n<span class=\"sd\">            Name of the new duplicated material.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        EDB material : class: &#39;Ansys.Ansoft.Edb.Definition.MaterialDef&#39;</span>\n\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb_app = Edb()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_material = edb_app.core_stackup.duplicate_material(&quot;copper&quot;, &quot;my_new_copper&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;This material doesn&#39;t exists.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">permittivity</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_property_by_material_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;permittivity&quot;</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">))</span>\n            <span class=\"n\">permeability</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_property_by_material_name</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;permeability&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">material_name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">conductivity</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_property_by_material_name</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;conductivity&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">material_name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dielectric_loss_tangent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_property_by_material_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;dielectric_loss_tangent&quot;</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">magnetic_loss_tangent</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_property_by_material_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;magnetic_loss_tangent&quot;</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">edb_material</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">new_material_name</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_material</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Permittivity</span><span class=\"p\">,</span> <span class=\"n\">permittivity</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_material</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Permeability</span><span class=\"p\">,</span> <span class=\"n\">permeability</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_material</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Conductivity</span><span class=\"p\">,</span> <span class=\"n\">conductivity</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_material</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">DielectricLossTangent</span><span class=\"p\">,</span> <span class=\"n\">dielectric_loss_tangent</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">edb_material</span><span class=\"o\">.</span><span class=\"n\">SetProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">MagneticLossTangent</span><span class=\"p\">,</span> <span class=\"n\">magnetic_loss_tangent</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">edb_material</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.material_name_to_id\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.material_name_to_id/#pyaedt.edb_core.stackup.EdbStackup.material_name_to_id\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">material_name_to_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert a material property name to a material property ID.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        property_name : str</span>\n<span class=\"sd\">            Name of the material property.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        ID of the material property.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Permittivity&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Permittivity</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Permeability&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Permeability</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Conductivity&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">Conductivity</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;DielectricLossTangent&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">DielectricLossTangent</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;MagneticLossTangent&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">MagneticLossTangent</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ThermalConductivity&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">ThermalConductivity</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;MassDensity&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">MassDensity</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SpecificHeat&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">SpecificHeat</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;YoungsModulus&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">YoungsModulus</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;PoissonsRatio&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">PoissonsRatio</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ThermalExpansionCoefficient&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">ThermalExpansionCoefficient</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;InvalidProperty&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">InvalidProperty</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">found_el</span> <span class=\"o\">=</span> <span class=\"n\">difflib</span><span class=\"o\">.</span><span class=\"n\">get_close_matches</span><span class=\"p\">(</span><span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">found_el</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">found_el</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialPropertyId</span><span class=\"o\">.</span><span class=\"n\">InvalidProperty</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.get_property_by_material_name\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.get_property_by_material_name/#pyaedt.edb_core.stackup.EdbStackup.get_property_by_material_name\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_property_by_material_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the property of a material. If it is executed in IronPython,</span>\n<span class=\"sd\">         you must only use the first element of the returned tuple, which is a float.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        material_name : str</span>\n<span class=\"sd\">            Name of the existing material.</span>\n<span class=\"sd\">        property_name : str</span>\n<span class=\"sd\">            Name of the material property.</span>\n<span class=\"sd\">            ``permittivity``</span>\n<span class=\"sd\">            ``permeability``</span>\n<span class=\"sd\">            ``conductivity``</span>\n<span class=\"sd\">            ``dielectric_loss_tangent``</span>\n<span class=\"sd\">            ``magnetic_loss_tangent``</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            the float value of the property.</span>\n\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb_app = Edb()</span>\n<span class=\"sd\">        &gt;&gt;&gt; returned_tuple = edb_app.core_stackup.get_property_by_material_name(&quot;conductivity&quot;, &quot;copper&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb_value = returned_tuple[0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; float_value = returned_tuple[1]</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;This material doesn&#39;t exists.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">original_material</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">property_box</span> <span class=\"o\">=</span> <span class=\"n\">clr</span><span class=\"o\">.</span><span class=\"n\">StrongBox</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]()</span>\n                <span class=\"n\">original_material</span><span class=\"o\">.</span><span class=\"n\">GetProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">material_name_to_id</span><span class=\"p\">(</span><span class=\"n\">property_name</span><span class=\"p\">),</span> <span class=\"n\">property_box</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">property_box</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">property_box</span> <span class=\"o\">=</span> <span class=\"n\">original_material</span><span class=\"o\">.</span><span class=\"n\">GetProperty</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">material_name_to_id</span><span class=\"p\">(</span><span class=\"n\">property_name</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">property_box</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_solder_height</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"ow\">and</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">placement_layer</span> <span class=\"o\">==</span> <span class=\"n\">layer_name</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_remove_solder_pec</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"ow\">and</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">placement_layer</span> <span class=\"o\">==</span> <span class=\"n\">layer_name</span><span class=\"p\">:</span>\n                <span class=\"n\">comp_prop</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">component_property</span>\n                <span class=\"n\">port_property</span> <span class=\"o\">=</span> <span class=\"n\">comp_prop</span><span class=\"o\">.</span><span class=\"n\">GetPortProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                <span class=\"n\">port_property</span><span class=\"o\">.</span><span class=\"n\">SetReferenceSizeAuto</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">port_property</span><span class=\"o\">.</span><span class=\"n\">SetReferenceSize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">))</span>\n                <span class=\"n\">comp_prop</span><span class=\"o\">.</span><span class=\"n\">SetPortProperty</span><span class=\"p\">(</span><span class=\"n\">port_property</span><span class=\"p\">)</span>\n                <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">SetComponentProperty</span><span class=\"p\">(</span><span class=\"n\">comp_prop</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.adjust_solder_dielectrics\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.adjust_solder_dielectrics/#pyaedt.edb_core.stackup.EdbStackup.adjust_solder_dielectrics\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">adjust_solder_dielectrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Adjust the stack-up by adding or modifying dielectric layers that contains Solder Balls.</span>\n<span class=\"sd\">        This method identifies the solder-ball height and adjust the dielectric thickness on top (or bottom) to fit</span>\n<span class=\"sd\">        the thickness in order to merge another layout.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span><span class=\"p\">:</span>\n                <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">placement_layer</span>\n                <span class=\"k\">if</span> <span class=\"n\">layer</span> <span class=\"o\">==</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                    <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">layer1</span> <span class=\"o\">=</span> <span class=\"n\">layer</span>\n                    <span class=\"n\">last_layer_thickess</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                        <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"o\">==</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                            <span class=\"k\">break</span>\n                        <span class=\"n\">elevation</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span>\n                        <span class=\"n\">last_layer_thickess</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span>\n                        <span class=\"n\">layer1</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n                    <span class=\"k\">if</span> <span class=\"n\">layer1</span> <span class=\"o\">!=</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">layer1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"o\">-</span> <span class=\"n\">elevation</span> <span class=\"o\">+</span> <span class=\"n\">last_layer_thickess</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"o\">&gt;</span> <span class=\"n\">elevation</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Top_Air&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">start_layer</span><span class=\"o\">=</span><span class=\"n\">layer1</span><span class=\"p\">,</span>\n                            <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;air&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"o\">-</span> <span class=\"n\">elevation</span><span class=\"p\">,</span>\n                            <span class=\"n\">layerType</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">layer1</span> <span class=\"o\">=</span> <span class=\"n\">layer</span>\n                    <span class=\"n\">last_layer_thickess</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"o\">==</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                            <span class=\"k\">break</span>\n                        <span class=\"n\">layer1</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n                        <span class=\"n\">elevation</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span>\n                        <span class=\"n\">last_layer_thickess</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span>\n                    <span class=\"k\">if</span> <span class=\"n\">layer1</span> <span class=\"o\">!=</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">layer1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thickness_value</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"o\">-</span> <span class=\"n\">elevation</span> <span class=\"o\">+</span> <span class=\"n\">last_layer_thickess</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"o\">&gt;</span> <span class=\"n\">elevation</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Bottom_air&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">start_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                            <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;air&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">solder_ball_height</span> <span class=\"o\">-</span> <span class=\"n\">elevation</span><span class=\"p\">,</span>\n                            <span class=\"n\">layerType</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.place_in_layout\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.place_in_layout/#pyaedt.edb_core.stackup.EdbStackup.place_in_layout\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">place_in_layout</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">edb</span><span class=\"p\">,</span>\n        <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">offset_x</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">offset_y</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">flipped_stackup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">place_on_top</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Place current Cell into another cell using layer placement method.</span>\n<span class=\"sd\">        Flip the current layer stackup of a layout if requested. Transform parameters currently not supported.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edb : Edb</span>\n<span class=\"sd\">            Cell on which to place the current layout. If None the Cell will be applied on an empty new Cell.</span>\n<span class=\"sd\">        angle : double, optional</span>\n<span class=\"sd\">            The rotation angle applied on the design.</span>\n<span class=\"sd\">        offset_x : double, optional</span>\n<span class=\"sd\">            The x offset value.</span>\n<span class=\"sd\">        offset_y : double, optional</span>\n<span class=\"sd\">            The y offset value.</span>\n<span class=\"sd\">        flipped_stackup : bool, optional</span>\n<span class=\"sd\">            Either if the current layout is inverted.</span>\n<span class=\"sd\">            If `True` and place_on_top is `True` the stackup will be flipped before the merge.</span>\n<span class=\"sd\">        place_on_top : bool, optional</span>\n<span class=\"sd\">            Either if place the current layout on Top or Bottom of destination Layout.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when succeed ``False`` if not.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb1 = Edb(edbpath=targetfile1,  edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb2 = Edb(edbpath=targetfile2, edbversion=&quot;2021.2&quot;)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; hosting_cmp = edb1.core_components.get_component_by_name(&quot;U100&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; mounted_cmp = edb2.core_components.get_component_by_name(&quot;BGA&quot;)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; vector, rotation, solder_ball_height = edb1.core_components.get_component_placement_vector(</span>\n<span class=\"sd\">        ...                                                     mounted_component=mounted_cmp,</span>\n<span class=\"sd\">        ...                                                     hosting_component=hosting_cmp,</span>\n<span class=\"sd\">        ...                                                     mounted_component_pin1=&quot;A12&quot;,</span>\n<span class=\"sd\">        ...                                                     mounted_component_pin2=&quot;A14&quot;,</span>\n<span class=\"sd\">        ...                                                     hosting_component_pin1=&quot;A12&quot;,</span>\n<span class=\"sd\">        ...                                                     hosting_component_pin2=&quot;A14&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb2.core_stackup.place_in_layout(edb1.active_cell, angle=0.0, offset_x=vector[0],</span>\n<span class=\"sd\">        ...                                   offset_y=vector[1], flipped_stackup=False, place_on_top=True,</span>\n<span class=\"sd\">        ...                                   )</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># if flipped_stackup and place_on_top or (not flipped_stackup and not place_on_top):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">adjust_solder_dielectrics</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">place_on_top</span><span class=\"p\">:</span>\n            <span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">core_stackup</span><span class=\"o\">.</span><span class=\"n\">flip_design</span><span class=\"p\">()</span>\n            <span class=\"n\">place_on_top</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">flipped_stackup</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">flip_design</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">flipped_stackup</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">flip_design</span><span class=\"p\">()</span>\n        <span class=\"n\">edb_cell</span> <span class=\"o\">=</span> <span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">active_cell</span>\n        <span class=\"n\">_angle</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">angle</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mf\">180.0</span><span class=\"p\">)</span>\n        <span class=\"n\">_offset_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">offset_x</span><span class=\"p\">)</span>\n        <span class=\"n\">_offset_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">offset_y</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">edb_cell</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">cell_names</span><span class=\"p\">:</span>\n            <span class=\"n\">_dbCell</span> <span class=\"o\">=</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">([</span><span class=\"n\">edb_cell</span><span class=\"p\">])</span>\n            <span class=\"n\">list_cells</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">CopyCells</span><span class=\"p\">(</span><span class=\"n\">_dbCell</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_cell</span> <span class=\"o\">=</span> <span class=\"n\">list_cells</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetCell</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">SetBlackBox</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_inst2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">CellInstance</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span>\n            <span class=\"n\">edb_cell</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetCell</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">cell_trans</span> <span class=\"o\">=</span> <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">GetTransform</span><span class=\"p\">()</span>\n        <span class=\"n\">cell_trans</span><span class=\"o\">.</span><span class=\"n\">SetRotationValue</span><span class=\"p\">(</span><span class=\"n\">_angle</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_trans</span><span class=\"o\">.</span><span class=\"n\">SetXOffsetValue</span><span class=\"p\">(</span><span class=\"n\">_offset_x</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_trans</span><span class=\"o\">.</span><span class=\"n\">SetYOffsetValue</span><span class=\"p\">(</span><span class=\"n\">_offset_y</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_trans</span><span class=\"o\">.</span><span class=\"n\">SetMirror</span><span class=\"p\">(</span><span class=\"n\">flipped_stackup</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetTransform</span><span class=\"p\">(</span><span class=\"n\">cell_trans</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetSolveIndependentPreference</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">stackup_target</span> <span class=\"o\">=</span> <span class=\"n\">edb_cell</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">place_on_top</span><span class=\"p\">:</span>\n            <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetPlacementLayer</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">stackup_target</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetPlacementLayer</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">stackup_target</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span><span class=\"p\">))[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.place_in_layout_3d_placement\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.place_in_layout_3d_placement/#pyaedt.edb_core.stackup.EdbStackup.place_in_layout_3d_placement\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">place_in_layout_3d_placement</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">edb</span><span class=\"p\">,</span>\n        <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">offset_x</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">offset_y</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">flipped_stackup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">place_on_top</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">solder_height</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Place current Cell into another cell using 3d placement method.</span>\n<span class=\"sd\">        Flip the current layer stackup of a layout if requested. Transform parameters currently not supported.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edb : Edb</span>\n<span class=\"sd\">            Cell on which to place the current layout. If None the Cell will be applied on an empty new Cell.</span>\n<span class=\"sd\">        angle : double, optional</span>\n<span class=\"sd\">            The rotation angle applied on the design.</span>\n<span class=\"sd\">        offset_x : double, optional</span>\n<span class=\"sd\">            The x offset value.</span>\n<span class=\"sd\">        offset_y : double, optional</span>\n<span class=\"sd\">            The y offset value.</span>\n<span class=\"sd\">        flipped_stackup : bool, optional</span>\n<span class=\"sd\">            Either if the current layout is inverted.</span>\n<span class=\"sd\">            If `True` and place_on_top is `True` the stackup will be flipped before the merge.</span>\n<span class=\"sd\">        place_on_top : bool, optional</span>\n<span class=\"sd\">            Either if place the current layout on Top or Bottom of destination Layout.</span>\n<span class=\"sd\">        solder_height : float, optional</span>\n<span class=\"sd\">            Solder Ball or Bumps eight.</span>\n<span class=\"sd\">            This value will be added to the elevation to align the two layouts.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when succeed ``False`` if not.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb1 = Edb(edbpath=targetfile1,  edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb2 = Edb(edbpath=targetfile2, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; hosting_cmp = edb1.core_components.get_component_by_name(&quot;U100&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; mounted_cmp = edb2.core_components.get_component_by_name(&quot;BGA&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb2.core_stackup.place_in_layout(edb1.active_cell, angle=0.0, offset_x=&quot;1mm&quot;,</span>\n<span class=\"sd\">        ...                                   offset_y=&quot;2mm&quot;, flipped_stackup=False, place_on_top=True,</span>\n<span class=\"sd\">        ...                                   )</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">_angle</span> <span class=\"o\">=</span> <span class=\"n\">angle</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mf\">180.0</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">solder_height</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">flipped_stackup</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">place_on_top</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">place_on_top</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">flipped_stackup</span><span class=\"p\">):</span>\n                <span class=\"n\">minimum_elevation</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"n\">minimum_elevation</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">minimum_elevation</span> <span class=\"o\">=</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">lower_elevation</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">lower_elevation</span> <span class=\"o\">&gt;</span> <span class=\"n\">minimum_elevation</span><span class=\"p\">:</span>\n                        <span class=\"k\">break</span>\n                    <span class=\"n\">lay_solder_height</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_solder_height</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">solder_height</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">lay_solder_height</span><span class=\"p\">,</span> <span class=\"n\">solder_height</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_remove_solder_pec</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">maximum_elevation</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">layers_from_the_top</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal_layers</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">lay</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">upper_elevation</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"n\">layers_from_the_top</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">maximum_elevation</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">maximum_elevation</span> <span class=\"o\">=</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">upper_elevation</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">upper_elevation</span> <span class=\"o\">&lt;</span> <span class=\"n\">maximum_elevation</span><span class=\"p\">:</span>\n                        <span class=\"k\">break</span>\n                    <span class=\"n\">lay_solder_height</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_solder_height</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">solder_height</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">lay_solder_height</span><span class=\"p\">,</span> <span class=\"n\">solder_height</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_remove_solder_pec</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">flipped_stackup</span><span class=\"p\">:</span>\n            <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n\n        <span class=\"n\">edb_cell</span> <span class=\"o\">=</span> <span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">active_cell</span>\n        <span class=\"n\">_offset_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">offset_x</span><span class=\"p\">)</span>\n        <span class=\"n\">_offset_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">offset_y</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">edb_cell</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">cell_names</span><span class=\"p\">:</span>\n            <span class=\"n\">_dbCell</span> <span class=\"o\">=</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">([</span><span class=\"n\">edb_cell</span><span class=\"p\">])</span>\n            <span class=\"n\">list_cells</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">CopyCells</span><span class=\"p\">(</span><span class=\"n\">_dbCell</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_cell</span> <span class=\"o\">=</span> <span class=\"n\">list_cells</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetCell</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">SetBlackBox</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">cell_inst2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">CellInstance</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span>\n            <span class=\"n\">edb_cell</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetCell</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">stackup_target</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">(</span><span class=\"n\">edb_cell</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">())</span>\n        <span class=\"n\">stackup_source</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">())</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">place_on_top</span><span class=\"p\">:</span>\n            <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetPlacementLayer</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">stackup_target</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetPlacementLayer</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">stackup_target</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span><span class=\"p\">))[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">SetIs3DPlacement</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">sig_set</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">stackup_target</span><span class=\"o\">.</span><span class=\"n\">GetTopBottomStackupLayers</span><span class=\"p\">(</span><span class=\"n\">sig_set</span><span class=\"p\">)</span>\n        <span class=\"n\">target_top_elevation</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">target_bottom_elevation</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"n\">res_s</span> <span class=\"o\">=</span> <span class=\"n\">stackup_source</span><span class=\"o\">.</span><span class=\"n\">GetTopBottomStackupLayers</span><span class=\"p\">(</span><span class=\"n\">sig_set</span><span class=\"p\">)</span>\n        <span class=\"n\">source_stack_top_elevation</span> <span class=\"o\">=</span> <span class=\"n\">res_s</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">source_stack_bot_elevation</span> <span class=\"o\">=</span> <span class=\"n\">res_s</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">place_on_top</span> <span class=\"ow\">and</span> <span class=\"n\">flipped_stackup</span><span class=\"p\">:</span>\n            <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">target_top_elevation</span> <span class=\"o\">+</span> <span class=\"n\">source_stack_top_elevation</span>\n        <span class=\"k\">elif</span> <span class=\"n\">place_on_top</span><span class=\"p\">:</span>\n            <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">target_top_elevation</span> <span class=\"o\">-</span> <span class=\"n\">source_stack_bot_elevation</span>\n        <span class=\"k\">elif</span> <span class=\"n\">flipped_stackup</span><span class=\"p\">:</span>\n            <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">target_bottom_elevation</span> <span class=\"o\">+</span> <span class=\"n\">source_stack_bot_elevation</span>\n            <span class=\"n\">solder_height</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">solder_height</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">target_bottom_elevation</span> <span class=\"o\">-</span> <span class=\"n\">source_stack_top_elevation</span>\n            <span class=\"n\">solder_height</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">solder_height</span>\n\n        <span class=\"n\">h_stackup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">elevation</span> <span class=\"o\">+</span> <span class=\"n\">solder_height</span><span class=\"p\">)</span>\n\n        <span class=\"n\">zero_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"n\">one_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n        <span class=\"n\">point3d_t</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span><span class=\"n\">_offset_x</span><span class=\"p\">,</span> <span class=\"n\">_offset_y</span><span class=\"p\">,</span> <span class=\"n\">h_stackup</span><span class=\"p\">)</span>\n        <span class=\"n\">point_loc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span><span class=\"n\">zero_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">)</span>\n        <span class=\"n\">point_from</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span><span class=\"n\">one_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">)</span>\n        <span class=\"n\">point_to</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">_angle</span><span class=\"p\">)),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">_angle</span><span class=\"p\">)),</span> <span class=\"n\">zero_data</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">cell_inst2</span><span class=\"o\">.</span><span class=\"n\">Set3DTransformation</span><span class=\"p\">(</span><span class=\"n\">point_loc</span><span class=\"p\">,</span> <span class=\"n\">point_from</span><span class=\"p\">,</span> <span class=\"n\">point_to</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"p\">,</span> <span class=\"n\">point3d_t</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.place_a3dcomp_3d_placement\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.place_a3dcomp_3d_placement/#pyaedt.edb_core.stackup.EdbStackup.place_a3dcomp_3d_placement\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">place_a3dcomp_3d_placement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a3dcomp_path</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">offset_x</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">offset_y</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">place_on_top</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Place a 3D Component into current layout.</span>\n<span class=\"sd\">         3D Component ports are not visible via EDB. They will be visible after the EDB has been opened in Ansys</span>\n<span class=\"sd\">         Electronics Desktop as a project.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a3dcomp_path : str</span>\n<span class=\"sd\">            Path to 3D Component file (*.a3dcomp) to place.</span>\n<span class=\"sd\">        angle : double, optional</span>\n<span class=\"sd\">            Clockwise rotation angle applied to the a3dcomp.</span>\n<span class=\"sd\">        offset_x : double, optional</span>\n<span class=\"sd\">            The x offset value.</span>\n<span class=\"sd\">        offset_y : double, optional</span>\n<span class=\"sd\">            The y offset value.</span>\n<span class=\"sd\">        place_on_top : bool, optional</span>\n<span class=\"sd\">            Whether to place the 3D Component on the top or bottom of this layout.</span>\n<span class=\"sd\">            If False then the 3D Component will also be flipped over around its X axis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if successful and ``False`` if not.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb1 = Edb(edbpath=targetfile1,  edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; a3dcomp_path = &quot;connector.a3dcomp&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb1.core_stackup.place_a3dcomp_3d_placement(a3dcomp_path, angle=0.0, offset_x=&quot;1mm&quot;,</span>\n<span class=\"sd\">        ...                                   offset_y=&quot;2mm&quot;, flipped_stackup=False, place_on_top=True,</span>\n<span class=\"sd\">        ...                                   )</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">zero_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"n\">one_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n        <span class=\"n\">local_origin</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span><span class=\"n\">zero_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">)</span>\n        <span class=\"n\">rotation_axis_from</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span><span class=\"n\">one_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">,</span> <span class=\"n\">zero_data</span><span class=\"p\">)</span>\n        <span class=\"n\">_angle</span> <span class=\"o\">=</span> <span class=\"n\">angle</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mf\">180.0</span>\n        <span class=\"n\">rotation_axis_to</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">_angle</span><span class=\"p\">)),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">_angle</span><span class=\"p\">)),</span> <span class=\"n\">zero_data</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">stackup_target</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">())</span>\n        <span class=\"n\">sig_set</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">stackup_target</span><span class=\"o\">.</span><span class=\"n\">GetTopBottomStackupLayers</span><span class=\"p\">(</span><span class=\"n\">sig_set</span><span class=\"p\">)</span>\n        <span class=\"n\">target_top_elevation</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">target_bottom_elevation</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"n\">flip_angle</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;0deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">place_on_top</span><span class=\"p\">:</span>\n            <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">target_top_elevation</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">flip_angle</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;180deg&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">target_bottom_elevation</span>\n        <span class=\"n\">h_stackup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">elevation</span><span class=\"p\">)</span>\n        <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Point3DData</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">offset_x</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">offset_y</span><span class=\"p\">),</span> <span class=\"n\">h_stackup</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">mcad_model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">McadModel</span><span class=\"o\">.</span><span class=\"n\">Create3DComp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">a3dcomp_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">mcad_model</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to create MCAD model from a3dcomp&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">cell_instance</span> <span class=\"o\">=</span> <span class=\"n\">mcad_model</span><span class=\"o\">.</span><span class=\"n\">GetCellInstance</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">cell_instance</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cell instance of a3dcomp is null&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cell_instance</span><span class=\"o\">.</span><span class=\"n\">SetIs3DPlacement</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to set 3D placement on a3dcomp cell instance&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cell_instance</span><span class=\"o\">.</span><span class=\"n\">Set3DTransformation</span><span class=\"p\">(</span>\n            <span class=\"n\">local_origin</span><span class=\"p\">,</span> <span class=\"n\">rotation_axis_from</span><span class=\"p\">,</span> <span class=\"n\">rotation_axis_to</span><span class=\"p\">,</span> <span class=\"n\">flip_angle</span><span class=\"p\">,</span> <span class=\"n\">location</span>\n        <span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to set 3D transform on a3dcomp cell instance&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.flip_design\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.flip_design/#pyaedt.edb_core.stackup.EdbStackup.flip_design\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">flip_design</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Flip the current design of a layout.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when succeed ``False`` if not.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb = Edb(edbpath=targetfile,  edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.core_stackup.flip_design()</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.save()</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.close_edb()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n\n            <span class=\"n\">lc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">()</span>\n            <span class=\"n\">new_lc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">()</span>\n            <span class=\"n\">lc_mode</span> <span class=\"o\">=</span> <span class=\"n\">lc</span><span class=\"o\">.</span><span class=\"n\">GetMode</span><span class=\"p\">()</span>\n            <span class=\"n\">new_lc</span><span class=\"o\">.</span><span class=\"n\">SetMode</span><span class=\"p\">(</span><span class=\"n\">lc_mode</span><span class=\"p\">)</span>\n            <span class=\"n\">max_elevation</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">StackupLayerSet</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"s2\">&quot;RadBox&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">():</span>  <span class=\"c1\"># Ignore RadBox</span>\n                    <span class=\"n\">lower_elevation</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetLowerElevation</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mf\">1.0e6</span>\n                    <span class=\"n\">upper_elevation</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetUpperElevation</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mf\">1.0e6</span>\n                    <span class=\"n\">max_elevation</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">max_elevation</span><span class=\"p\">,</span> <span class=\"n\">lower_elevation</span><span class=\"p\">,</span> <span class=\"n\">upper_elevation</span><span class=\"p\">])</span>\n\n            <span class=\"n\">non_stackup_layers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">):</span>\n                <span class=\"n\">cloned_layer</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cloned_layer</span><span class=\"o\">.</span><span class=\"n\">IsStackupLayer</span><span class=\"p\">():</span>\n                    <span class=\"n\">non_stackup_layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cloned_layer</span><span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"s2\">&quot;RadBox&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">IsViaLayer</span><span class=\"p\">():</span>\n                    <span class=\"n\">upper_elevation</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetUpperElevation</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mf\">1.0e6</span>\n                    <span class=\"n\">updated_lower_el</span> <span class=\"o\">=</span> <span class=\"n\">max_elevation</span> <span class=\"o\">-</span> <span class=\"n\">upper_elevation</span>\n                    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">um&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">updated_lower_el</span><span class=\"p\">))</span>\n                    <span class=\"n\">cloned_layer</span><span class=\"o\">.</span><span class=\"n\">SetLowerElevation</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">cloned_layer</span><span class=\"o\">.</span><span class=\"n\">GetTopBottomAssociation</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">TopBottomAssociation</span><span class=\"o\">.</span><span class=\"n\">TopAssociated</span><span class=\"p\">:</span>\n                        <span class=\"n\">cloned_layer</span><span class=\"o\">.</span><span class=\"n\">SetTopBottomAssociation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">TopBottomAssociation</span><span class=\"o\">.</span><span class=\"n\">BottomAssociated</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">cloned_layer</span><span class=\"o\">.</span><span class=\"n\">SetTopBottomAssociation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">TopBottomAssociation</span><span class=\"o\">.</span><span class=\"n\">TopAssociated</span><span class=\"p\">)</span>\n                    <span class=\"n\">new_lc</span><span class=\"o\">.</span><span class=\"n\">AddStackupLayerAtElevation</span><span class=\"p\">(</span><span class=\"n\">cloned_layer</span><span class=\"p\">)</span>\n\n            <span class=\"n\">vialayers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lay</span> <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"n\">lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">StackupLayerSet</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">IsViaLayer</span><span class=\"p\">()]</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">vialayers</span><span class=\"p\">:</span>\n                <span class=\"n\">cloned_via_layer</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                <span class=\"n\">upper_ref_name</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetRefLayerName</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">lower_ref_name</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetRefLayerName</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">upper_ref</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">lay</span> <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"n\">lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">upper_ref_name</span>\n                <span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">lower_ref</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">lay</span> <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"n\">lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">lower_ref_name</span>\n                <span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">cloned_via_layer</span><span class=\"o\">.</span><span class=\"n\">SetRefLayer</span><span class=\"p\">(</span><span class=\"n\">lower_ref</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">cloned_via_layer</span><span class=\"o\">.</span><span class=\"n\">SetRefLayer</span><span class=\"p\">(</span><span class=\"n\">upper_ref</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">ref_layer_in_flipped_stackup</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">lay</span>\n                    <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"n\">new_lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">upper_ref_name</span>\n                <span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">via_layer_lower_elevation</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">ref_layer_in_flipped_stackup</span><span class=\"o\">.</span><span class=\"n\">GetLowerElevation</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">ref_layer_in_flipped_stackup</span><span class=\"o\">.</span><span class=\"n\">GetThickness</span><span class=\"p\">()</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">cloned_via_layer</span><span class=\"o\">.</span><span class=\"n\">SetLowerElevation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">via_layer_lower_elevation</span><span class=\"p\">))</span>\n                <span class=\"n\">new_lc</span><span class=\"o\">.</span><span class=\"n\">AddStackupLayerAtElevation</span><span class=\"p\">(</span><span class=\"n\">cloned_via_layer</span><span class=\"p\">)</span>\n\n            <span class=\"n\">layer_list</span> <span class=\"o\">=</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">non_stackup_layers</span><span class=\"p\">)</span>\n            <span class=\"n\">new_lc</span><span class=\"o\">.</span><span class=\"n\">AddLayers</span><span class=\"p\">(</span><span class=\"n\">layer_list</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">SetLayerCollection</span><span class=\"p\">(</span><span class=\"n\">new_lc</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to Flip Stackup.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"n\">cmp_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cmp</span> <span class=\"k\">for</span> <span class=\"n\">cmp</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">Groups</span> <span class=\"k\">if</span> <span class=\"n\">cmp</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">cmp</span> <span class=\"ow\">in</span> <span class=\"n\">cmp_list</span><span class=\"p\">:</span>\n                <span class=\"n\">cmp_type</span> <span class=\"o\">=</span> <span class=\"n\">cmp</span><span class=\"o\">.</span><span class=\"n\">GetComponentType</span><span class=\"p\">()</span>\n                <span class=\"n\">cmp_prop</span> <span class=\"o\">=</span> <span class=\"n\">cmp</span><span class=\"o\">.</span><span class=\"n\">GetComponentProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span>\n                        <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">GetSolderBallProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetPlacement</span><span class=\"p\">()</span>\n                        <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">SolderballPlacement</span><span class=\"o\">.</span><span class=\"n\">AbovePadstack</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"n\">sball_prop</span> <span class=\"o\">=</span> <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">GetSolderBallProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                        <span class=\"n\">sball_prop</span><span class=\"o\">.</span><span class=\"n\">SetPlacement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">SolderballPlacement</span><span class=\"o\">.</span><span class=\"n\">BelowPadstack</span><span class=\"p\">)</span>\n                        <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">SetSolderBallProperty</span><span class=\"p\">(</span><span class=\"n\">sball_prop</span><span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"p\">(</span>\n                        <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">GetSolderBallProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetPlacement</span><span class=\"p\">()</span>\n                        <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">SolderballPlacement</span><span class=\"o\">.</span><span class=\"n\">BelowPadstack</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"n\">sball_prop</span> <span class=\"o\">=</span> <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">GetSolderBallProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                        <span class=\"n\">sball_prop</span><span class=\"o\">.</span><span class=\"n\">SetPlacement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">SolderballPlacement</span><span class=\"o\">.</span><span class=\"n\">AbovePadstack</span><span class=\"p\">)</span>\n                        <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">SetSolderBallProperty</span><span class=\"p\">(</span><span class=\"n\">sball_prop</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">if</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">IC</span><span class=\"p\">:</span>\n                    <span class=\"n\">die_prop</span> <span class=\"o\">=</span> <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">GetDieProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                    <span class=\"n\">chip_orientation</span> <span class=\"o\">=</span> <span class=\"n\">die_prop</span><span class=\"o\">.</span><span class=\"n\">GetOrientation</span><span class=\"p\">()</span>\n                    <span class=\"k\">if</span> <span class=\"n\">chip_orientation</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">DieOrientation</span><span class=\"o\">.</span><span class=\"n\">ChipDown</span><span class=\"p\">:</span>\n                        <span class=\"n\">die_prop</span><span class=\"o\">.</span><span class=\"n\">SetOrientation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">DieOrientation</span><span class=\"o\">.</span><span class=\"n\">ChipUp</span><span class=\"p\">)</span>\n                        <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">SetDieProperty</span><span class=\"p\">(</span><span class=\"n\">die_prop</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">die_prop</span><span class=\"o\">.</span><span class=\"n\">SetOrientation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">DieOrientation</span><span class=\"o\">.</span><span class=\"n\">ChipDown</span><span class=\"p\">)</span>\n                        <span class=\"n\">cmp_prop</span><span class=\"o\">.</span><span class=\"n\">SetDieProperty</span><span class=\"p\">(</span><span class=\"n\">die_prop</span><span class=\"p\">)</span>\n                <span class=\"n\">cmp</span><span class=\"o\">.</span><span class=\"n\">SetComponentProperty</span><span class=\"p\">(</span><span class=\"n\">cmp_prop</span><span class=\"p\">)</span>\n\n            <span class=\"n\">lay_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">new_lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">padstack</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_padstack</span><span class=\"o\">.</span><span class=\"n\">padstack_instances</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n                <span class=\"n\">start_layer_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetLayerId</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lay_list</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">padstack</span><span class=\"o\">.</span><span class=\"n\">start_layer</span><span class=\"p\">]</span>\n                <span class=\"n\">stop_layer_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetLayerId</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lay_list</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">padstack</span><span class=\"o\">.</span><span class=\"n\">stop_layer</span><span class=\"p\">]</span>\n                <span class=\"n\">layer_map</span> <span class=\"o\">=</span> <span class=\"n\">padstack</span><span class=\"o\">.</span><span class=\"n\">_edb_padstackinstance</span><span class=\"o\">.</span><span class=\"n\">GetLayerMap</span><span class=\"p\">()</span>\n                <span class=\"n\">layer_map</span><span class=\"o\">.</span><span class=\"n\">SetMapping</span><span class=\"p\">(</span><span class=\"n\">stop_layer_id</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">start_layer_id</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">padstack</span><span class=\"o\">.</span><span class=\"n\">_edb_padstackinstance</span><span class=\"o\">.</span><span class=\"n\">SetLayerMap</span><span class=\"p\">(</span><span class=\"n\">layer_map</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">_update_edb_objects</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.create_djordjevicsarkar_material\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.create_djordjevicsarkar_material/#pyaedt.edb_core.stackup.EdbStackup.create_djordjevicsarkar_material\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_djordjevicsarkar_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">relative_permittivity</span><span class=\"p\">,</span> <span class=\"n\">loss_tangent</span><span class=\"p\">,</span> <span class=\"n\">test_frequency</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Djordjevic_Sarkar dielectric.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the dielectic.</span>\n<span class=\"sd\">        relative_permittivity : float</span>\n<span class=\"sd\">            Relative permittivity of the dielectric.</span>\n<span class=\"sd\">        loss_tangent : float</span>\n<span class=\"sd\">            Loss tangent for the material.</span>\n<span class=\"sd\">        test_frequency : float</span>\n<span class=\"sd\">            Test frequency in GHz for the dielectric.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Material definition.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">material_def</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">DjordjecvicSarkarModel</span><span class=\"p\">()</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetFrequency</span><span class=\"p\">(</span><span class=\"n\">test_frequency</span><span class=\"p\">)</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetLossTangentAtFrequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">loss_tangent</span><span class=\"p\">))</span>\n        <span class=\"n\">material_def</span><span class=\"o\">.</span><span class=\"n\">SetRelativePermitivityAtFrequency</span><span class=\"p\">(</span><span class=\"n\">relative_permittivity</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_dielectric_material_model</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material_def</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_add_dielectric_material_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material_model</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"n\">DieDef</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">MaterialDef</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">succeeded</span> <span class=\"o\">=</span> <span class=\"n\">DieDef</span><span class=\"o\">.</span><span class=\"n\">SetDielectricMaterialModel</span><span class=\"p\">(</span><span class=\"n\">material_model</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">succeeded</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">DieDef</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.stackup_limits\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.stackup_limits/#pyaedt.edb_core.stackup.EdbStackup.stackup_limits\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stackup_limits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">only_metals</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve stackup limits.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        only_metals : bool, optional</span>\n<span class=\"sd\">            Whether to retrieve only metals. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">stackup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">only_metals</span><span class=\"p\">:</span>\n            <span class=\"n\">input_layers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">SignalLayerSet</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">input_layers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">StackupLayerSet</span>\n\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">topl</span><span class=\"p\">,</span> <span class=\"n\">topz</span><span class=\"p\">,</span> <span class=\"n\">bottoml</span><span class=\"p\">,</span> <span class=\"n\">bottomz</span> <span class=\"o\">=</span> <span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">GetTopBottomStackupLayers</span><span class=\"p\">(</span><span class=\"n\">input_layers</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">topl</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span> <span class=\"n\">topz</span><span class=\"p\">,</span> <span class=\"n\">bottoml</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span> <span class=\"n\">bottomz</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.create_symmetric_stackup\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.create_symmetric_stackup/#pyaedt.edb_core.stackup.EdbStackup.create_symmetric_stackup\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">create_symmetric_stackup</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_count</span><span class=\"p\">,</span>\n        <span class=\"n\">inner_layer_thickness</span><span class=\"o\">=</span><span class=\"s2\">&quot;17um&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">outer_layer_thickness</span><span class=\"o\">=</span><span class=\"s2\">&quot;50um&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">dielectric_thickness</span><span class=\"o\">=</span><span class=\"s2\">&quot;100um&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">dielectric_material</span><span class=\"o\">=</span><span class=\"s2\">&quot;FR4_epoxy&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">soldermask</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">soldermask_thickness</span><span class=\"o\">=</span><span class=\"s2\">&quot;20um&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a symmetric stackup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer_count : int</span>\n<span class=\"sd\">            Number of layer count.</span>\n<span class=\"sd\">        inner_layer_thickness : str, float, optional</span>\n<span class=\"sd\">            Thickness of inner conductor layer.</span>\n<span class=\"sd\">        outer_layer_thickness : str, float, optional</span>\n<span class=\"sd\">            Thickness of outer conductor layer.</span>\n<span class=\"sd\">        dielectric_thickness : str, float, optional</span>\n<span class=\"sd\">            Thickness of dielectric layer.</span>\n<span class=\"sd\">        dielectric_material : str, optional</span>\n<span class=\"sd\">            Material of dielectric layer.</span>\n<span class=\"sd\">        soldermask : bool, optional</span>\n<span class=\"sd\">            Whether to create soldermask layers. The default is``True``.</span>\n<span class=\"sd\">        soldermask_thickness : str, optional</span>\n<span class=\"sd\">            Thickness of soldermask layer.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer_count</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">soldermask</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"s2\">&quot;SMB&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SolderMask&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">soldermask_thickness</span><span class=\"p\">,</span> <span class=\"n\">layerType</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;BOTTOM&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SMB&quot;</span><span class=\"p\">,</span> <span class=\"n\">fillMaterial</span><span class=\"o\">=</span><span class=\"s2\">&quot;SolderMask&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">outer_layer_thickness</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;BOTTOM&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">fillMaterial</span><span class=\"o\">=</span><span class=\"s2\">&quot;Air&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">outer_layer_thickness</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">layer_count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">new_layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;D&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">layer</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n                <span class=\"n\">new_layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">dielectric_material</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">dielectric_thickness</span><span class=\"p\">,</span> <span class=\"n\">layerType</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">new_layer_name</span>\n            <span class=\"n\">new_layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;L&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">layer</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n                <span class=\"n\">new_layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span> <span class=\"n\">dielectric_material</span><span class=\"p\">,</span> <span class=\"n\">inner_layer_thickness</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">new_layer_name</span>\n\n        <span class=\"n\">new_layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;D1&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n            <span class=\"n\">new_layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">dielectric_material</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">dielectric_thickness</span><span class=\"p\">,</span> <span class=\"n\">layerType</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">new_layer_name</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">soldermask</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;TOP&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n                <span class=\"n\">new_layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">fillMaterial</span><span class=\"o\">=</span><span class=\"s2\">&quot;SolderMask&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">outer_layer_thickness</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">new_layer_name</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"s2\">&quot;SMT&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SolderMask&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">soldermask_thickness</span><span class=\"p\">,</span> <span class=\"n\">layerType</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">new_layer_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;TOP&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n                <span class=\"n\">new_layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">fillMaterial</span><span class=\"o\">=</span><span class=\"s2\">&quot;Air&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">outer_layer_thickness</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbStackup.set_etching_layers\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.edb_core.stackup.EdbStackup.set_etching_layers/#pyaedt.edb_core.stackup.EdbStackup.set_etching_layers\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_etching_layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">simulation_setup</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the etching layer parameters for a layout stackup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        simulation_setup : EDB_DATA_SimulationConfiguration object</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">simulation_setup</span><span class=\"p\">,</span> <span class=\"n\">SimulationConfiguration</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_builder</span><span class=\"o\">.</span><span class=\"n\">cell</span>\n        <span class=\"n\">this_lc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetLayerCollection</span><span class=\"p\">())</span>\n        <span class=\"n\">all_layers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">this_lc</span><span class=\"o\">.</span><span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerTypeSet</span><span class=\"o\">.</span><span class=\"n\">AllLayerSet</span><span class=\"p\">))</span>\n\n        <span class=\"n\">signal_layers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lay</span> <span class=\"k\">for</span> <span class=\"n\">lay</span> <span class=\"ow\">in</span> <span class=\"n\">all_layers</span> <span class=\"k\">if</span> <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">GetLayerType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SignalLayer</span><span class=\"p\">]</span>\n\n        <span class=\"n\">new_layers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">all_layers</span><span class=\"o\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">lyr</span><span class=\"p\">:</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">GetLayerType</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerType</span><span class=\"o\">.</span><span class=\"n\">SignalLayer</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">signal_layer_etching_instances</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">signal_layers</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">signal_layer_etching_instances</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Signal layer </span><span class=\"si\">{0}</span><span class=\"s2\"> is not found in the etching layers specified in the cfg, &quot;</span>\n                        <span class=\"s2\">&quot;skipping the etching factor assignment&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">new_signal_lay</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_signal_lay</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n                    <span class=\"n\">new_signal_lay</span><span class=\"o\">.</span><span class=\"n\">SetEtchFactorEnabled</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"n\">etching_factor</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span>\n                        <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">etching_factor_instances</span><span class=\"p\">[</span>\n                            <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">signal_layer_etching_instances</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n                        <span class=\"p\">]</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">new_signal_lay</span><span class=\"o\">.</span><span class=\"n\">SetEtchFactor</span><span class=\"p\">(</span><span class=\"n\">etching_factor</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Setting etching factor </span><span class=\"si\">{0}</span><span class=\"s2\"> on layer </span><span class=\"si\">{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">etching_factor</span><span class=\"p\">),</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n                    <span class=\"p\">)</span>\n\n                <span class=\"n\">new_layers</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">new_signal_lay</span><span class=\"p\">)</span>\n\n            <span class=\"n\">layers_with_etching</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayerCollection</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layers_with_etching</span><span class=\"o\">.</span><span class=\"n\">AddLayers</span><span class=\"p\">(</span><span class=\"n\">new_layers</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">SetLayerCollection</span><span class=\"p\">(</span><span class=\"n\">layers_with_etching</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/stackup", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}