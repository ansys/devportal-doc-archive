{"parents": [{"link": "../../", "title": "API reference"}, {"link": "../../CoreEdb/", "title": "EDB editor"}], "prev": {"link": "../pyaedt.edb_core.siwave.EdbSiwave.sources/", "title": "sources"}, "next": {"link": "../pyaedt.edb_core.nets.EdbNets.classify_nets/", "title": "classify_nets"}, "title": "pyaedt.edb_core.nets.EdbNets", "meta": {}, "body": "<section id=\"pyaedt-edb-core-nets-edbnets\">\n<h1>pyaedt.edb_core.nets.EdbNets<a class=\"headerlink\" href=\"#pyaedt-edb-core-nets-edbnets\" title=\"Permalink to this heading\">#</a></h1>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"pyaedt.edb_core.nets.EdbNets\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">pyaedt.edb_core.nets.</span></span><span class=\"sig-name descname\"><span class=\"pre\">EdbNets</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">p_edb</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../_modules/pyaedt/edb_core/nets/#EdbNets\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#pyaedt.edb_core.nets.EdbNets\" title=\"Permalink to this definition\">#</a></dt>\n<dd><p>Manages EDB methods for nets management accessible from <cite>Edb.core_nets</cite> property.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">Edb</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edbapp</span> <span class=\"o\">=</span> <span class=\"n\">Edb</span><span class=\"p\">(</span><span class=\"s2\">&quot;myaedbfolder&quot;</span><span class=\"p\">,</span> <span class=\"n\">edbversion</span><span class=\"o\">=</span><span class=\"s2\">&quot;2021.2&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edb_nets</span> <span class=\"o\">=</span> <span class=\"n\">edbapp</span><span class=\"o\">.</span><span class=\"n\">core_nets</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.classify_nets/#pyaedt.edb_core.nets.EdbNets.classify_nets\" title=\"pyaedt.edb_core.nets.EdbNets.classify_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.classify_nets</span></code></a>([power_nets,\u00a0signal_nets])</p></td>\n<td><p>Reassign power/ground or signal nets based on list of nets.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.delete_nets/#pyaedt.edb_core.nets.EdbNets.delete_nets\" title=\"pyaedt.edb_core.nets.EdbNets.delete_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.delete_nets</span></code></a>(netlist)</p></td>\n<td><p>Delete one or more nets from EDB.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.find_and_fix_disjoint_nets/#pyaedt.edb_core.nets.EdbNets.find_and_fix_disjoint_nets\" title=\"pyaedt.edb_core.nets.EdbNets.find_and_fix_disjoint_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.find_and_fix_disjoint_nets</span></code></a>([...])</p></td>\n<td><p>Find and fix disjoint nets from a given netlist.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.find_or_create_net/#pyaedt.edb_core.nets.EdbNets.find_or_create_net\" title=\"pyaedt.edb_core.nets.EdbNets.find_or_create_net\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.find_or_create_net</span></code></a>([net_name,\u00a0...])</p></td>\n<td><p>Find or create the net with the given name in the layout.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.get_dcconnected_net_list/#pyaedt.edb_core.nets.EdbNets.get_dcconnected_net_list\" title=\"pyaedt.edb_core.nets.EdbNets.get_dcconnected_net_list\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.get_dcconnected_net_list</span></code></a>([ground_nets])</p></td>\n<td><p>Retrieve the nets connected to DC through inductors.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.get_net_by_name/#pyaedt.edb_core.nets.EdbNets.get_net_by_name\" title=\"pyaedt.edb_core.nets.EdbNets.get_net_by_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.get_net_by_name</span></code></a>(net_name)</p></td>\n<td><p>Find a net by name.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.get_plot_data/#pyaedt.edb_core.nets.EdbNets.get_plot_data\" title=\"pyaedt.edb_core.nets.EdbNets.get_plot_data\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.get_plot_data</span></code></a>(nets[,\u00a0layers,\u00a0...])</p></td>\n<td><p>Return List of points for Matplotlib 2D Chart.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.get_powertree/#pyaedt.edb_core.nets.EdbNets.get_powertree\" title=\"pyaedt.edb_core.nets.EdbNets.get_powertree\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.get_powertree</span></code></a>(power_net_name,\u00a0...)</p></td>\n<td><p>Retrieve the power tree.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.is_net_in_component/#pyaedt.edb_core.nets.EdbNets.is_net_in_component\" title=\"pyaedt.edb_core.nets.EdbNets.is_net_in_component\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.is_net_in_component</span></code></a>(component_name,\u00a0...)</p></td>\n<td><p>Check if a net belongs to a component.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.is_power_gound_net/#pyaedt.edb_core.nets.EdbNets.is_power_gound_net\" title=\"pyaedt.edb_core.nets.EdbNets.is_power_gound_net\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.is_power_gound_net</span></code></a>(netname_list)</p></td>\n<td><p>Determine if one of the  nets in a list is power or ground.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.merge_nets_polygons/#pyaedt.edb_core.nets.EdbNets.merge_nets_polygons\" title=\"pyaedt.edb_core.nets.EdbNets.merge_nets_polygons\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.merge_nets_polygons</span></code></a>(net_list)</p></td>\n<td><p>Convert paths from net into polygons, evaluate all connected polygons and perform the merge.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.plot/#pyaedt.edb_core.nets.EdbNets.plot\" title=\"pyaedt.edb_core.nets.EdbNets.plot\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.plot</span></code></a>(nets[,\u00a0layers,\u00a0color_by_net,\u00a0...])</p></td>\n<td><p>Plot a Net to Matplotlib 2D Chart.</p></td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Attributes</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.db/#pyaedt.edb_core.nets.EdbNets.db\" title=\"pyaedt.edb_core.nets.EdbNets.db\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.db</span></code></a></p></td>\n<td><p>Db object.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.eligible_power_nets/#pyaedt.edb_core.nets.EdbNets.eligible_power_nets\" title=\"pyaedt.edb_core.nets.EdbNets.eligible_power_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.eligible_power_nets</span></code></a></p></td>\n<td><p>Return a list of nets calculated by area to be eligible for PWR/Ground net classification.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.nets/#pyaedt.edb_core.nets.EdbNets.nets\" title=\"pyaedt.edb_core.nets.EdbNets.nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.nets</span></code></a></p></td>\n<td><p>Nets.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.power_nets/#pyaedt.edb_core.nets.EdbNets.power_nets\" title=\"pyaedt.edb_core.nets.EdbNets.power_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.power_nets</span></code></a></p></td>\n<td><p>Power nets.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../pyaedt.edb_core.nets.EdbNets.signal_nets/#pyaedt.edb_core.nets.EdbNets.signal_nets\" title=\"pyaedt.edb_core.nets.EdbNets.signal_nets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EdbNets.signal_nets</span></code></a></p></td>\n<td><p>Signal nets.</p></td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["API/_autosummary/pyaedt.edb_core.nets.EdbNets.classify_nets", "classify_nets", "N", "next"], ["API/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.sources", "sources", "P", "previous"]], "sourcename": "API/_autosummary/pyaedt.edb_core.nets.EdbNets.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">pyaedt.edb_core.nets.EdbNets</a><ul>\n<li><a class=\"reference internal\" href=\"#pyaedt.edb_core.nets.EdbNets\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EdbNets</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "API/_autosummary/pyaedt.edb_core.nets.EdbNets", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}