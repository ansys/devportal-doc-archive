{"parents": [{"link": "../../", "title": "Module code"}], "title": "pyaedt.emit", "body": "<h1>Source code for pyaedt.emit</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"k\">as</span> <span class=\"nn\">consts</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_project_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.AnalysisEmit</span> <span class=\"kn\">import</span> <span class=\"n\">FieldAnalysisEmit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.emit_core</span> <span class=\"kn\">import</span> <span class=\"n\">EmitConstants</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n\n<span class=\"c1\"># global variable used to store module import</span>\n<span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Results</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Provides the ``Results`` object.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    emit_obj : emit_obj object</span>\n<span class=\"sd\">        Emit object used to create the result.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an instance of the ``Result`` object.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp.results = Results()</span>\n<span class=\"sd\">    &gt;&gt;&gt; mode = Emit.tx_rx_mode().rx</span>\n<span class=\"sd\">    &gt;&gt;&gt; radio_RX = aedtapp.results.get_radio_names(mode)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">emit_obj</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;``True`` if the results are loaded and ``False`` if they are not.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">EmitApi</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Instance of the Emit api.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of all loaded result revisions.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"o\">.</span><span class=\"n\">GetPath</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the current project.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_design</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Initial revision of the Emit design.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">units</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Project units.&quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check whether the result is loaded.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if the results are loaded and ``False`` if they are not.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_loaded</span>\n\n    <span class=\"nd\">@result_loaded</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_loaded</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_mode_error</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Print the function mode error message.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;This function is inaccessible when the Emit object has no revisions.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_radio_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tx_rx</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a list of all ``tx&#39;&#39; or ``rx`` radios in the project.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        tx_rx : tx_rx_mode object</span>\n<span class=\"sd\">            Used for determining whether to get ``rx`` or ``tx`` radio names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        radios:class:`list of str`</span>\n<span class=\"sd\">            list of tx or or rx radio names</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; radios = aedtapp.results.get_radio_names(Emit.tx_rx_mode.rx)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">:</span>\n            <span class=\"n\">radios</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span><span class=\"o\">.</span><span class=\"n\">get_radio_names</span><span class=\"p\">(</span><span class=\"n\">tx_rx</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">radios</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">Results</span><span class=\"o\">.</span><span class=\"n\">result_mode_error</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">radios</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_band_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a list of all ``tx`` or ``rx`` bands in a given radio.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        radio_name : str</span>\n<span class=\"sd\">            Name of the radio.</span>\n<span class=\"sd\">        tx_rx : tx_rx_mode object</span>\n<span class=\"sd\">            Used for determining whether to get ``rx`` or ``tx`` radio names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bands:class:`list of str`</span>\n<span class=\"sd\">            list of tx or or rx radio band names</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; bands = aedtapp.results.get_band_names(&#39;Bluetooth&#39;, Emit.tx_rx_mode.rx)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">:</span>\n            <span class=\"n\">bands</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span><span class=\"o\">.</span><span class=\"n\">get_band_names</span><span class=\"p\">(</span><span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bands</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">Results</span><span class=\"o\">.</span><span class=\"n\">result_mode_error</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">bands</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_active_frequencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">band_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a list of active frequencies for a ``tx`` or ``rx`` band in a radio.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        radio_name : str</span>\n<span class=\"sd\">            Name of the radio.</span>\n<span class=\"sd\">        band_name : str</span>\n<span class=\"sd\">           Name of the band.</span>\n<span class=\"sd\">        tx_rx : tx_rx_mode object</span>\n<span class=\"sd\">            Used for determining whether to get ``rx`` or ``tx`` radio names.</span>\n<span class=\"sd\">        units : str</span>\n<span class=\"sd\">            Units for the frequencies.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        freq:class:`list of float`</span>\n<span class=\"sd\">            List of tx or or rx radio frequencies.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; bands = aedtapp.results.get_band_names(&#39;Bluetooth&#39;, &#39;Rx - Base Data Rate&#39;, Emit.tx_rx_mode.rx)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span><span class=\"o\">.</span><span class=\"n\">get_active_frequencies</span><span class=\"p\">(</span><span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">band_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Emit api returns freqs in Hz, convert to user&#39;s desired units.</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">units</span> <span class=\"ow\">or</span> <span class=\"n\">units</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">EmitConstants</span><span class=\"o\">.</span><span class=\"n\">EMIT_VALID_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Frequency&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"s2\">&quot;Frequency&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">consts</span><span class=\"o\">.</span><span class=\"n\">unit_converter</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Freq&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">Results</span><span class=\"o\">.</span><span class=\"n\">result_mode_error</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">freq</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Revision</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Provides the ``Revision`` object.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    Emit_obj :</span>\n<span class=\"sd\">         ``Emit`` object that this revision is associated with.</span>\n<span class=\"sd\">    name : str, optional</span>\n<span class=\"sd\">        Name of the revision to create. The default is ``None``, in which case a</span>\n<span class=\"sd\">        default name is given.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create a ``Revision`` instance.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Emit()</span>\n<span class=\"sd\">    &gt;&gt;&gt; rev = Revision(aedtapp, &quot;Revision 1&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; domain = aedtapp.interaction_domain()</span>\n<span class=\"sd\">    &gt;&gt;&gt; rev.run(domain)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">emit_obj</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">subfolder</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">scandir</span><span class=\"p\">(</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;.aedtresults&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">subfolder</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EmitDesign1&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">default_behaviour</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">subfolder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">.emit&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)))</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_behaviour</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The most recently generated revision will be used because the revision specified does not exist.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">default_behaviour</span><span class=\"p\">:</span>\n            <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">scandir</span><span class=\"p\">(</span><span class=\"n\">subfolder</span><span class=\"p\">)],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mtime</span><span class=\"p\">)</span>\n            <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">path</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"n\">subfolder</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/</span><span class=\"si\">{}</span><span class=\"s2\">.emit&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Name of the revision.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">full</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Full path of the revision.&quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span> <span class=\"o\">=</span> <span class=\"n\">emit_obj</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;&#39;&#39;Emit&#39;&#39; object associated with the revision.&quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Load the revision and then analyze along the given domain.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        domain :</span>\n<span class=\"sd\">            ``InteractionDomain`` object for constraining the analysis parameters.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        interaction:class: `Interaction`</span>\n<span class=\"sd\">            Interaction object.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; domain = aedtapp.interaction_domain()</span>\n<span class=\"sd\">        &gt;&gt;&gt; rev.run(domain)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_load_result_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_project_path</span><span class=\"p\">()</span>  <span class=\"c1\"># making sure format matches</span>\n        <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"n\">interaction</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">interaction</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_max_simultaneous_interferers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the number of maximum simultaneous interferers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        max_interferers : int</span>\n<span class=\"sd\">            Maximum number of simultaneous interferers associated with engine</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; max_num = aedtapp.results.get_max_simultaneous_interferers()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_load_result_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"n\">max_interferers</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">max_simultaneous_interferers</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_interferers</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_max_simultaneous_interferers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set the number of maximum simultaneous interferers.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; max_num = aedtapp.results.get_max_simultaneous_interferers()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_load_result_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">max_simultaneous_interferers</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_domain_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ret_val</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return ``True`` if the given domain is valid for the current Revision</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; domain = aedtapp.interaction_domain()</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp.results.is_domain_valid(domain)</span>\n<span class=\"sd\">        True</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_load_result_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">is_domain_valid</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Emit\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit/#pyaedt.emit.Emit\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Emit</span><span class=\"p\">(</span><span class=\"n\">FieldAnalysisEmit</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Provides the Emit application interface.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    projectname : str, optional</span>\n<span class=\"sd\">        Name of the project to select or the full path to the project</span>\n<span class=\"sd\">        or AEDTZ archive to open.  The default is ``None``, in which case</span>\n<span class=\"sd\">        an attempt is made to get an active project. If no projects are</span>\n<span class=\"sd\">        present, an empty project is created.</span>\n<span class=\"sd\">    designname : str, optional</span>\n<span class=\"sd\">        Name of the design to select. The default is ``None``, in which case</span>\n<span class=\"sd\">        an attempt is made to get an active design. If no designs are</span>\n<span class=\"sd\">        present, an empty design is created.</span>\n<span class=\"sd\">    solution_type : str, optional</span>\n<span class=\"sd\">        Solution type to apply to the design. The default is ``None``, in which</span>\n<span class=\"sd\">        case the default type is applied.</span>\n<span class=\"sd\">    setup_name : str, optional</span>\n<span class=\"sd\">        Name of the setup to use as the nominal. The default is</span>\n<span class=\"sd\">        ``None``, in which case the active setup is used or</span>\n<span class=\"sd\">        nothing is used.</span>\n<span class=\"sd\">    specified_version : str, optional</span>\n<span class=\"sd\">        Version of AEDT to use. The default is ``None``, in which case</span>\n<span class=\"sd\">        the active setup is used or the latest installed version is</span>\n<span class=\"sd\">        used.</span>\n<span class=\"sd\">    non_graphical : bool, optional</span>\n<span class=\"sd\">        Whether to launch AEDT in non-graphical mode. The default</span>\n<span class=\"sd\">        is ``False``, in which case AEDT is launched in graphical mode.</span>\n<span class=\"sd\">        This parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    new_desktop_session : bool, optional</span>\n<span class=\"sd\">        Whether to launch an instance of AEDT in a new thread, even if</span>\n<span class=\"sd\">        another instance of the ``specified_version`` is active on the</span>\n<span class=\"sd\">        machine.  The default is ``True``.</span>\n<span class=\"sd\">    close_on_exit : bool, optional</span>\n<span class=\"sd\">        Whether to release AEDT on exit. The default is ``False``.</span>\n<span class=\"sd\">    student_version : bool, optional</span>\n<span class=\"sd\">        Whether to start the AEDT student version. The default is ``False``.</span>\n<span class=\"sd\">    port : int, optional</span>\n<span class=\"sd\">        Port number on which to start the oDesktop communication on an already existing server.</span>\n<span class=\"sd\">        This parameter is ignored when creating a server. This parameter works only in 2022 R2 or later.</span>\n<span class=\"sd\">        The remote server must be up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">    machine : str, optional</span>\n<span class=\"sd\">        Machine name that the Desktop session is to connect to. This</span>\n<span class=\"sd\">        parameter works only in 2022 R2 and later. The remote server must be</span>\n<span class=\"sd\">        up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">        If the machine is `&quot;localhost&quot;`, the server starts if it is not present.</span>\n<span class=\"sd\">    aedt_process_id : int, optional</span>\n<span class=\"sd\">        Process ID for the instance of AEDT to point PyAEDT at. The default is</span>\n<span class=\"sd\">        ``None``. This parameter is only used when ``new_desktop_session = False``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an ``Emit`` instance. You can also choose to define parameters for this instance here.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Emit</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Emit()</span>\n\n<span class=\"sd\">    Typically, it is desirable to specify a project name, design name, and other parameters.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Emit(projectname, designame)</span>\n\n<span class=\"sd\">    Once an ``Emit`` instance is initialized, you can edit the schematic:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; rad1 = aedtapp.modeler.components.create_component(&quot;Bluetooth&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; ant1 = aedtapp.modeler.components.create_component(&quot;Antenna&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; if rad1 and ant1:</span>\n<span class=\"sd\">    &gt;&gt;&gt;     ant1.move_and_connect_to(rad1)</span>\n\n<span class=\"sd\">    Once the schematic is generated, the ``Emit`` object can be analyzed to generate</span>\n<span class=\"sd\">    a revision. Each revision is added as an element of the ``Emit`` object member&#39;s</span>\n<span class=\"sd\">    revisions_list.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp.analyze()</span>\n\n<span class=\"sd\">    A revision within PyAEDT is analogous to a revision in AEDT. An interaction domain must</span>\n<span class=\"sd\">    be defined and then used as the input to the run command used on that revision.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; domain = aedtapp.interaction_domain()</span>\n<span class=\"sd\">    &gt;&gt;&gt; domain.rx_radio_name = &quot;UE - HandHeld&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; interaction = aedtapp.revisions_list[0].run(domain)</span>\n\n<span class=\"sd\">    The output of the run command is an ``interaction`` object. This object summarizes the interaction data</span>\n<span class=\"sd\">    that is defined in the interaction domain.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; instance = interaction.worst_instance(Emit.result_type().sensitivity)</span>\n<span class=\"sd\">    &gt;&gt;&gt; val = instance.value(Emit.result_type().sensitivity)</span>\n<span class=\"sd\">    &gt;&gt;&gt; print(&quot;Worst-case sensitivity for Rx &#39;{}&#39; is {}dB.&quot;.format(domain.rx_radio_name, val))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">projectname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">projectname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_project_name</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Constructor for the ``FieldAnalysisEmit`` class&quot;&quot;&quot;</span>\n        <span class=\"n\">FieldAnalysisEmit</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;EMIT&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># aedt delcross python from custom path if any (for developers)</span>\n        <span class=\"n\">delcross_python_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ANSYS_DELCROSS_PYTHON_PATH&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">delcross_python_path</span><span class=\"p\">:</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">delcross_python_path</span><span class=\"p\">)</span>\n        <span class=\"c1\"># installed aedt delcross python path</span>\n        <span class=\"n\">desktop_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">desktop_install_dir</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">desktop_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Delcross&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Power&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dBm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Frequency&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MHz&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;meter&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Time&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ns&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Voltage&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mV&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Data Rate&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bps&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Resistance&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ohm&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Default Emit units.&quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2023.1&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">global</span> <span class=\"n\">mod</span>\n            <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s2\">&quot;EmitApiPython&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">EmitApi</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"sd\">&quot;&quot;&quot;Instance of the Emit api.&quot;&quot;&quot;</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">Results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"sd\">&quot;&quot;&quot;&#39;&#39;Result&#39;&#39; object for the selected design.&quot;&quot;&quot;</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<div class=\"viewcode-block\" id=\"Emit.analyze\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.analyze/#pyaedt.emit.Emit.analyze\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">revision_num</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Analyze the active design.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        rev:class:`pyaedt.modules.Revision`</span>\n<span class=\"sd\">            Last ``Revision`` object that was generated.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; rev = aedtapp.analyze()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span><span class=\"p\">:</span>\n            <span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetActiveProject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetActiveDesign</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">current_design</span> <span class=\"o\">==</span> <span class=\"n\">design</span><span class=\"o\">.</span><span class=\"n\">GetRevision</span><span class=\"p\">():</span>\n                <span class=\"n\">design</span><span class=\"o\">.</span><span class=\"n\">AddResult</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Revision</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">current_design</span> <span class=\"o\">=</span> <span class=\"n\">design</span><span class=\"o\">.</span><span class=\"n\">GetRevision</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;checkpoint - revision generated successfully&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">Emit</span><span class=\"o\">.</span><span class=\"n\">interaction_domain</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span><span class=\"p\">[</span><span class=\"n\">revision_num</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n            <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span><span class=\"p\">[</span><span class=\"n\">revision_num</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">rev</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_load_result_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Load a specific result set.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        path : str</span>\n<span class=\"sd\">            Path to an AEDT EMIT result file.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp._load_result_set(path)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span> <span class=\"ow\">or</span> <span class=\"n\">path</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_project_path</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">load_project</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Emit.result_type\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.result_type/#pyaedt.emit.Emit.result_type\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_type</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a result type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        result :class:`result_type`</span>\n<span class=\"sd\">            Result type object which can later be assigned a status (emi, sensitivity, desense).</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; Emit.result_type()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">result_type</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;An Emit object must be initialized before any static member of the Result or Emit class is accessed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.tx_rx_mode\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.tx_rx_mode/#pyaedt.emit.Emit.tx_rx_mode\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tx_rx_mode</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a ``tx_rx_mode`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`Emit.tx_rx_mode`</span>\n<span class=\"sd\">            Mode status which can later be assigned a status (tx, rx).</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; tx_rx = Emit.tx_rx_mode()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">tx_rx</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">tx_rx_mode</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;An Emit object must be initialized before any static member of the Result or Emit class is accessed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">tx_rx</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.interaction_domain\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.interaction_domain/#pyaedt.emit.Emit.interaction_domain\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interaction_domain</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get an ``InteractionDomain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`Emit.InteractionDomain`</span>\n<span class=\"sd\">            Defines a set of interacting interferers and receivers.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; domain = Emit.InteractionDomain()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">InteractionDomain</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;An Emit object must be initialized before any static member of the Result or Emit class is accessed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">domain</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.version\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.version/#pyaedt.emit.Emit.version\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">detailed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get version information.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        detailed : bool, optional</span>\n<span class=\"sd\">            Whether to return a verbose description. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        ver : str</span>\n<span class=\"sd\">            All of the version information.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(aedtapp.version())</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span><span class=\"p\">:</span>\n            <span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(</span><span class=\"n\">detailed</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">ver</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.set_units\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.set_units/#pyaedt.emit.Emit.set_units\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">unit_type</span><span class=\"p\">,</span> <span class=\"n\">unit_value</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Set units for the component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        unit_type : str</span>\n<span class=\"sd\">            System of units.</span>\n<span class=\"sd\">        unit_value : str</span>\n<span class=\"sd\">            Units to use.</span>\n\n<span class=\"sd\">        Power : mW, W, kW, dBm, dBW</span>\n<span class=\"sd\">        Frequency : Hz, kHz, MHz, GHz, THz</span>\n<span class=\"sd\">        Length : pm, nm, um, mm, cm, dm, meter, km, mil, in, ft, yd, mile</span>\n<span class=\"sd\">        Time : ps, ns, us, ms, s</span>\n<span class=\"sd\">        Voltage : mV, V</span>\n<span class=\"sd\">        Data Rate : bps, kbps, Mbps, Gbps</span>\n<span class=\"sd\">        Resistance : uOhm, mOhm, Ohm, kOhm, megOhm, GOhm</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        Bool</span>\n<span class=\"sd\">            ``True`` if the units were successfully changed and ``False``</span>\n<span class=\"sd\">            if there was an error.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">valid_type</span> <span class=\"o\">=</span> <span class=\"n\">EmitConstants</span><span class=\"o\">.</span><span class=\"n\">EMIT_UNIT_TYPE</span>\n        <span class=\"n\">valid_units</span> <span class=\"o\">=</span> <span class=\"n\">EmitConstants</span><span class=\"o\">.</span><span class=\"n\">EMIT_VALID_UNITS</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">unit_type</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">unit_type</span><span class=\"p\">,</span> <span class=\"n\">unit_value</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">valid_type</span><span class=\"p\">:</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;[</span><span class=\"si\">{}</span><span class=\"s2\">] units are not supported by EMIT. The options are: </span><span class=\"si\">{}</span><span class=\"s2\">: &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">valid_type</span><span class=\"p\">))</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">valid_units</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]:</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;[</span><span class=\"si\">{}</span><span class=\"s2\">] are not supported by EMIT. The options are: </span><span class=\"si\">{}</span><span class=\"s2\">: &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">valid_units</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]))</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">unit_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">valid_type</span><span class=\"p\">:</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;[</span><span class=\"si\">{}</span><span class=\"s2\">] units are not supported by EMIT. The options are: </span><span class=\"si\">{}</span><span class=\"s2\">: &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">unit_type</span><span class=\"p\">,</span> <span class=\"n\">valid_type</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"n\">unit_value</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">valid_units</span><span class=\"p\">[</span><span class=\"n\">unit_type</span><span class=\"p\">]:</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;[</span><span class=\"si\">{}</span><span class=\"s2\">] are not supported by EMIT. The options are: </span><span class=\"si\">{}</span><span class=\"s2\">: &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">unit_value</span><span class=\"p\">,</span> <span class=\"n\">valid_units</span><span class=\"p\">[</span><span class=\"n\">unit_type</span><span class=\"p\">])</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"n\">unit_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">unit_value</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.get_units\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.get_units/#pyaedt.emit.Emit.get_units\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">unit_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get units for the component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        unit_type : str</span>\n<span class=\"sd\">            System of units: options are power, frequency,</span>\n<span class=\"sd\">                length, time, voltage, data rate, or resistance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        Str or Tuple</span>\n<span class=\"sd\">            If unit_type is specified returns the units for that type</span>\n<span class=\"sd\">            and if unit_type=&quot;&quot;, returns a Tuple of all units.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">unit_type</span><span class=\"p\">:</span>\n            <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()]</span>\n            <span class=\"k\">return</span> <span class=\"n\">units</span>\n        <span class=\"k\">if</span> <span class=\"n\">unit_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">EmitConstants</span><span class=\"o\">.</span><span class=\"n\">EMIT_UNIT_TYPE</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;[</span><span class=\"si\">{}</span><span class=\"s2\">] units are not supported by EMIT. The options are: </span><span class=\"si\">{}</span><span class=\"s2\">: &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">unit_type</span><span class=\"p\">,</span> <span class=\"n\">EmitConstants</span><span class=\"o\">.</span><span class=\"n\">EMIT_UNIT_TYPE</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">[</span><span class=\"n\">unit_type</span><span class=\"p\">]</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/emit", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}