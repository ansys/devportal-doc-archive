{"parents": [{"link": "../../", "title": "Module code"}], "title": "pyaedt.emit", "body": "<h1>Source code for pyaedt.emit</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_project_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.AnalysisEmit</span> <span class=\"kn\">import</span> <span class=\"n\">FieldAnalysisEmit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n\n<span class=\"c1\"># global variable used to store module import</span>\n<span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Interaction_Domain</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Provides the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an instance of the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; domain = Interaction_Domain()</span>\n<span class=\"sd\">    &gt;&gt;&gt; domain.set_receivers(&quot;Radio&quot;, &quot;Tx-Band&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; interaction = self.aedtapp.results.revisions_list[-1].run(domain)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">EmitApi</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">InteractionDomain</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"p\">)))</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">InteractionDomain</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;An Emit object must be initialized before an Interaction_Domain object is generated.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_receiver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">radioname</span><span class=\"p\">,</span> <span class=\"n\">bandname</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set the receiver, with optionality to specify the following:</span>\n<span class=\"sd\">            &gt; radio name</span>\n<span class=\"sd\">            &gt; radio name and a band name</span>\n<span class=\"sd\">            &gt; radio name, band name and a channel frequency</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; domain.set_receiver(&quot;Radio1&quot;, &quot;Rx-Band&quot;, 2000)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">set_receiver</span><span class=\"p\">(</span><span class=\"n\">radioname</span><span class=\"p\">,</span> <span class=\"n\">bandname</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_interferers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">radionames</span><span class=\"p\">,</span> <span class=\"n\">bandnames</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">frequencies</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set the interferers, with optionality to specify the following:</span>\n<span class=\"sd\">            &gt; radio name</span>\n<span class=\"sd\">            &gt; radio name and a band name</span>\n<span class=\"sd\">            &gt; radio name, band name and a channel frequency</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; radios = [&quot;Radio1&quot;, &quot;Radio2&quot;, &quot;Bluetooth&quot;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; bands = [&quot;Rx-Band&quot;, &quot;Rx-Band&quot;, &quot;Rx-Band&quot;]</span>\n<span class=\"sd\">        &gt;&gt;&gt; frequencies = []</span>\n<span class=\"sd\">        &gt;&gt;&gt; domain.set_receiver(radios, bands, frequencies)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">interfer_radio_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">interferer_band_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">interfer_frequencies</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">radio</span> <span class=\"ow\">in</span> <span class=\"n\">radionames</span><span class=\"p\">:</span>\n            <span class=\"n\">interfer_radio_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">radio</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bandnames</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bandnames</span><span class=\"p\">):</span>\n                    <span class=\"n\">interferer_band_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">interferer_band_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bandnames</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">interferer_band_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">frequencies</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">frequencies</span><span class=\"p\">):</span>\n                    <span class=\"n\">interfer_frequencies</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">interfer_frequencies</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">frequencies</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">interfer_frequencies</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">set_interferers</span><span class=\"p\">(</span><span class=\"n\">interfer_radio_names</span><span class=\"p\">,</span> <span class=\"n\">interferer_band_names</span><span class=\"p\">,</span> <span class=\"n\">interfer_frequencies</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">receiver_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the receiver name from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        receiver_name : str</span>\n<span class=\"sd\">            Receiver name associated with a domain.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; rx_name = domain.receiver_name</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">receiver_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">receiver_band_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the receiver band name from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        receiver_band_name : str</span>\n<span class=\"sd\">            Receiver band name associated with a domain.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; rx_band_name = domain.receiver_band_name</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">receiver_band_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">receiver_channel_frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the receiver channel frequency from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        receiver_channel_frequency : float</span>\n<span class=\"sd\">            Receiver channel frequency associated with a domain.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; rx_freq = domain.receiver_channel_frequency</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">receiver_channel</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interferer_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the interferer names from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        interferer_names : list(str)</span>\n<span class=\"sd\">            Interferer names associated with a domain.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; tx_names = domain.interferer_names</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">interferer_names</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interferer_band_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the interferer band names from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        interferer_band_names : list(str)</span>\n<span class=\"sd\">            Interferer band names associated with a domain.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; tx_band_names = domain.interferer_band_names</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">interferer_band_names</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">interferer_channel_frequencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the interferer channel frequencies from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        interferer_channel_frequencies : list(float)</span>\n<span class=\"sd\">            Interferer channel frequencies associated with a domain.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; tx_frequencies = domain.interferer_channel_frequencies</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">interferer_channel_frequencies</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">instance_count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the instance count from the ``Interaction_Domain`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        instance_count: int</span>\n<span class=\"sd\">            Instance count associated with a domain</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; rx_name = domain.instance_count</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"o\">.</span><span class=\"n\">instance_count</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Result</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Provides the ``Result`` object.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    emit_obj : emit_obj object</span>\n<span class=\"sd\">        Emit object used to create the result.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an instance of the ``Result`` object.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp.results = Result()</span>\n<span class=\"sd\">    &gt;&gt;&gt; mode = Emit.tx_rx_mode().rx</span>\n<span class=\"sd\">    &gt;&gt;&gt; radio_RX = aedtapp.results.get_radio_names(mode)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">emit_obj</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">EmitApi</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"o\">.</span><span class=\"n\">GetPath</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_design</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check whether the result is loaded.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if the results are loaded and ``False`` if they are not.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_loaded</span>\n\n    <span class=\"nd\">@result_loaded</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_loaded</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_result_loaded</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_mode_error</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Print the function mode error message.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;This function is inaccessible when the Emit object has no revisions.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_radio_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tx_rx</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a list of all ``tx&#39;&#39; or ``rx`` radios in the project.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        tx_rx : tx_rx_mode object</span>\n<span class=\"sd\">            Used for determining whether to get ``rx`` or ``tx`` radio names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        radios:class:`list of str`</span>\n<span class=\"sd\">            list of tx or or rx radio names</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; radios = aedtapp.results.get_radio_names(Emit.tx_rx_mode.rx)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">:</span>\n            <span class=\"n\">radios</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span><span class=\"o\">.</span><span class=\"n\">get_radio_names</span><span class=\"p\">(</span><span class=\"n\">tx_rx</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">radios</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">result_mode_error</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">radios</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_band_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a list of all ``tx`` or ``rx`` bands in a given radio.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        radio_name : str</span>\n<span class=\"sd\">            Name of the radio.</span>\n<span class=\"sd\">        tx_rx : tx_rx_mode object</span>\n<span class=\"sd\">            Used for determining whether to get ``rx`` or ``tx`` radio names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bands:class:`list of str`</span>\n<span class=\"sd\">            list of tx or or rx radio band names</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; bands = aedtapp.results.get_band_names(&#39;Bluetooth&#39;, Emit.tx_rx_mode.rx)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">:</span>\n            <span class=\"n\">bands</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span><span class=\"o\">.</span><span class=\"n\">get_band_names</span><span class=\"p\">(</span><span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bands</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">result_mode_error</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">bands</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_active_frequencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">band_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a list of active frequencies for a ``tx`` or ``rx`` band in a radio.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        radio_name : str</span>\n<span class=\"sd\">            Name of the radio.</span>\n<span class=\"sd\">        band_name : str</span>\n<span class=\"sd\">           Name of the band.</span>\n<span class=\"sd\">        tx_rx : tx_rx_mode object</span>\n<span class=\"sd\">            Used for determining whether to get ``rx`` or ``tx`` radio names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        freq:class:`list of float`</span>\n<span class=\"sd\">            list of tx or or rx radio frequencies</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; bands = aedtapp.results.get_band_names(&#39;Bluetooth&#39;, &#39;Rx - Base Data Rate&#39;, Emit.tx_rx_mode.rx)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_api</span><span class=\"o\">.</span><span class=\"n\">get_active_frequencies</span><span class=\"p\">(</span><span class=\"n\">radio_name</span><span class=\"p\">,</span> <span class=\"n\">band_name</span><span class=\"p\">,</span> <span class=\"n\">tx_rx_mode</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">result_mode_error</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">freq</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Revision</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Provides the ``Revision`` object.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    Emit_obj :</span>\n<span class=\"sd\">         ``Emit`` object that this revision is associated with.</span>\n<span class=\"sd\">    name : str, optional</span>\n<span class=\"sd\">        Name of the revision to create. The default is ``None``, in which case a</span>\n<span class=\"sd\">        default name is given.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create a ``Revision`` instance.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Emit()</span>\n<span class=\"sd\">    &gt;&gt;&gt; rev = Revision(aedtapp, &quot;Revision 1&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; domain = Interaction_Domain()</span>\n<span class=\"sd\">    &gt;&gt;&gt; rev.run(domain)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">emit_obj</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">subfolder</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">scandir</span><span class=\"p\">(</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;.aedtresults&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">subfolder</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EmitDesign1&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">default_behaviour</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">subfolder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">.emit&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)))</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_behaviour</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The most recently generated revision will be used because the revision specified does not exist.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">default_behaviour</span><span class=\"p\">:</span>\n            <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">scandir</span><span class=\"p\">(</span><span class=\"n\">subfolder</span><span class=\"p\">)],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mtime</span><span class=\"p\">)</span>\n            <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">path</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"n\">subfolder</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/</span><span class=\"si\">{}</span><span class=\"s2\">.emit&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">full</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span> <span class=\"o\">=</span> <span class=\"n\">emit_obj</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Load the revision and then analyze along the given domain.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        domain :</span>\n<span class=\"sd\">            ``InteractionDomain`` object for constraining the analysis parameters.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        interaction:class: `Interaction`</span>\n<span class=\"sd\">            Interaction object.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; domain = Interaction_Domain()</span>\n<span class=\"sd\">        &gt;&gt;&gt; rev.run(domain)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_load_revision</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">eng</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"n\">interaction</span> <span class=\"o\">=</span> <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">_obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">interaction</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_max_simultaneous_frequencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the number of maximum simultaneous frequencies</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        max_interferers : int</span>\n<span class=\"sd\">            Maximum number of simultaneous interferers associated with engine</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; max_num = aedtapp.results.get_max_simultaneous_frequencies()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">eng</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"n\">max_interferers</span> <span class=\"o\">=</span> <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">max_simultaneous_interferers</span>\n        <span class=\"k\">return</span> <span class=\"n\">max_interferers</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_max_simultaneous_frequencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set the number of maximum simultaneous frequencies</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; max_num = aedtapp.results.get_max_simultaneous_frequencies()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">eng</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit_obj</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_engine</span><span class=\"p\">()</span>\n        <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">max_simultaneous_interferers</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n\n<div class=\"viewcode-block\" id=\"Emit\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit/#pyaedt.emit.Emit\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Emit</span><span class=\"p\">(</span><span class=\"n\">FieldAnalysisEmit</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Provides the Emit application interface.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    projectname : str, optional</span>\n<span class=\"sd\">        Name of the project to select or the full path to the project</span>\n<span class=\"sd\">        or AEDTZ archive to open.  The default is ``None``, in which case</span>\n<span class=\"sd\">        an attempt is made to get an active project. If no projects are</span>\n<span class=\"sd\">        present, an empty project is created.</span>\n<span class=\"sd\">    designname : str, optional</span>\n<span class=\"sd\">        Name of the design to select. The default is ``None``, in which case</span>\n<span class=\"sd\">        an attempt is made to get an active design. If no designs are</span>\n<span class=\"sd\">        present, an empty design is created.</span>\n<span class=\"sd\">    solution_type : str, optional</span>\n<span class=\"sd\">        Solution type to apply to the design. The default is ``None``, in which</span>\n<span class=\"sd\">        case the default type is applied.</span>\n<span class=\"sd\">    setup_name : str, optional</span>\n<span class=\"sd\">        Name of the setup to use as the nominal. The default is</span>\n<span class=\"sd\">        ``None``, in which case the active setup is used or</span>\n<span class=\"sd\">        nothing is used.</span>\n<span class=\"sd\">    specified_version : str, optional</span>\n<span class=\"sd\">        Version of AEDT to use. The default is ``None``, in which case</span>\n<span class=\"sd\">        the active setup is used or the latest installed version is</span>\n<span class=\"sd\">        used.</span>\n<span class=\"sd\">    non_graphical : bool, optional</span>\n<span class=\"sd\">        Whether to launch AEDT in non-graphical mode. The default</span>\n<span class=\"sd\">        is ``False``, in which case AEDT is launched in graphical mode.</span>\n<span class=\"sd\">        This parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    new_desktop_session : bool, optional</span>\n<span class=\"sd\">        Whether to launch an instance of AEDT in a new thread, even if</span>\n<span class=\"sd\">        another instance of the ``specified_version`` is active on the</span>\n<span class=\"sd\">        machine.  The default is ``True``.</span>\n<span class=\"sd\">    close_on_exit : bool, optional</span>\n<span class=\"sd\">        Whether to release AEDT on exit. The default is ``False``.</span>\n<span class=\"sd\">    student_version : bool, optional</span>\n<span class=\"sd\">        Whether to start the AEDT student version. The default is ``False``.</span>\n<span class=\"sd\">    port : int, optional</span>\n<span class=\"sd\">        Port number on which to start the oDesktop communication on an already existing server.</span>\n<span class=\"sd\">        This parameter is ignored when creating a server. This parameter works only in 2022 R2 or later.</span>\n<span class=\"sd\">        The remote server must be up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">    machine : str, optional</span>\n<span class=\"sd\">        Machine name that the Desktop session is to connect to. This</span>\n<span class=\"sd\">        parameter works only in 2022 R2 and later. The remote server must be</span>\n<span class=\"sd\">        up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">        If the machine is `&quot;localhost&quot;`, the server starts if it is not present.</span>\n<span class=\"sd\">    aedt_process_id : int, optional</span>\n<span class=\"sd\">        Process ID for the instance of AEDT to point PyAEDT at. The default is</span>\n<span class=\"sd\">        ``None``. This parameter is only used when ``new_desktop_session = False``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an ``Emit`` instance. You can also choose to define parameters for this instance here.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Emit</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Emit()</span>\n\n<span class=\"sd\">    Typically, it is desirable to specify a project name, design name, and other parameters.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Emit(projectname, designame)</span>\n\n<span class=\"sd\">    Once an ``Emit`` instance is initialized, you can edit the schematic:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; rad1 = aedtapp.modeler.components.create_component(&quot;Bluetooth&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; ant1 = aedtapp.modeler.components.create_component(&quot;Antenna&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; if rad1 and ant1:</span>\n<span class=\"sd\">    &gt;&gt;&gt;     ant1.move_and_connect_to(rad1)</span>\n\n<span class=\"sd\">    Once the schematic is generated, the ``Emit`` object can be analyzed to generate</span>\n<span class=\"sd\">    a revision. Each revision is added as an element of the ``Emit`` object member&#39;s</span>\n<span class=\"sd\">    revisions_list.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp.analyze()</span>\n\n<span class=\"sd\">    A revision within PyAEDT is analogous to a revision in AEDT. An interaction domain must</span>\n<span class=\"sd\">    be defined and then used as the input to the run command used on that revision.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; domain = Interaction_Domain()</span>\n<span class=\"sd\">    &gt;&gt;&gt; domain.rx_radio_name = &quot;UE - HandHeld&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; interaction = aedtapp.revisions_list[0].run(domain)</span>\n\n<span class=\"sd\">    The output of the run command is an ``interaction`` object. This object summarizes the interaction data</span>\n<span class=\"sd\">    that is defined in the interaction domain.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; instance = interaction.worst_instance(Emit.result_type().sensitivity)</span>\n<span class=\"sd\">    &gt;&gt;&gt; val = instance.value(Emit.result_type().sensitivity)</span>\n<span class=\"sd\">    &gt;&gt;&gt; print(&quot;Worst-case sensitivity for Rx &#39;{}&#39; is {}dB.&quot;.format(domain.rx_radio_name, val))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">projectname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">projectname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_project_name</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Constructor for the ``FieldAnalysisEmit`` class&quot;&quot;&quot;</span>\n        <span class=\"n\">FieldAnalysisEmit</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;EMIT&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">desktop_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">desktop_install_dir</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">desktop_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Delcross&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2023.1&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">global</span> <span class=\"n\">mod</span>\n            <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s2\">&quot;EmitApiPython&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">EmitApi</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">Result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<div class=\"viewcode-block\" id=\"Emit.analyze\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.analyze/#pyaedt.emit.Emit.analyze\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">revision_num</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Analyze the active design.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        rev:class:`pyaedt.modules.Revision`</span>\n<span class=\"sd\">            Last ``Revision`` object that was generated.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; rev = aedtapp.analyze()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span><span class=\"p\">:</span>\n            <span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetActiveProject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetActiveDesign</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">current_design</span> <span class=\"o\">==</span> <span class=\"n\">design</span><span class=\"o\">.</span><span class=\"n\">getRevision</span><span class=\"p\">():</span>\n                <span class=\"n\">design</span><span class=\"o\">.</span><span class=\"n\">AddResult</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Revision</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">current_design</span> <span class=\"o\">=</span> <span class=\"n\">design</span><span class=\"o\">.</span><span class=\"n\">getRevision</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;checkpoint - revision generated successfully&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">Interaction_Domain</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span><span class=\"p\">[</span><span class=\"n\">revision_num</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n            <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">revisions_list</span><span class=\"p\">[</span><span class=\"n\">revision_num</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">rev</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_load_revision</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Load a specific revision.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        path : str</span>\n<span class=\"sd\">            Path to an AEDT result file.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp._load_revision(path)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">load_result</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result_loaded</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Emit.result_type\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.result_type/#pyaedt.emit.Emit.result_type\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">result_type</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a result type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        result :class:`result_type`</span>\n<span class=\"sd\">            Result type object which can later be assigned a status (emi, sensitivity, desense).</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; Emit.result_type()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">result_type</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;An Emit object must be initialized before any static member of the Result or Emit class is accessed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.tx_rx_mode\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.tx_rx_mode/#pyaedt.emit.Emit.tx_rx_mode\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tx_rx_mode</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get a ``tx_rx_mode`` object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`Emit.tx_rx_mode`</span>\n<span class=\"sd\">            Mode status which can later be assigned a status (tx, rx).</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; tx_rx = Emit.tx_rx_mode()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">tx_rx</span> <span class=\"o\">=</span> <span class=\"n\">mod</span><span class=\"o\">.</span><span class=\"n\">tx_rx_mode</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;An Emit object must be initialized before any static member of the Result or Emit class is accessed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">tx_rx</span></div>\n\n<div class=\"viewcode-block\" id=\"Emit.version\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.emit.Emit.version/#pyaedt.emit.Emit.version\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">detailed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get version information.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        detailed : bool, optional</span>\n<span class=\"sd\">            Whether to return a verbose description. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        ver : str</span>\n<span class=\"sd\">            All of the version information.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(aedtapp.version())</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__emit_api_enabled</span><span class=\"p\">:</span>\n            <span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_emit_api</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(</span><span class=\"n\">detailed</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">ver</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/emit", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}