{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modules.SolveSetup", "body": "<h1>Source code for pyaedt.modules.SolveSetup</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains these classes: `Setup`, `Setup3DLayout`, and `SetupCircuit`.</span>\n\n<span class=\"sd\">This module provides all functionalities for creating and editing setups in AEDT.</span>\n<span class=\"sd\">It is based on templates to allow for easy creation and modification of setup properties.</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os.path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.DataHandlers</span> <span class=\"kn\">import</span> <span class=\"n\">_dict2arg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.DataHandlers</span> <span class=\"kn\">import</span> <span class=\"n\">_tuple2dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">PropsManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">SetupKeys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">SetupProps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">SweepHFSS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">SweepHFSS3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">SweepQ3D</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.SetupTemplates</span> <span class=\"kn\">import</span> <span class=\"n\">identify_setup</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommonSetup</span><span class=\"p\">(</span><span class=\"n\">PropsManager</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"k\">if</span> <span class=\"n\">solutiontype</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_setup</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"n\">solutiontype</span>\n        <span class=\"k\">elif</span> <span class=\"n\">solutiontype</span> <span class=\"ow\">in</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupNames</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupNames</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">solutiontype</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">_solution_options</span><span class=\"p\">[</span><span class=\"n\">solutiontype</span><span class=\"p\">][</span><span class=\"s2\">&quot;default_setup&quot;</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setupname</span> <span class=\"o\">=</span> <span class=\"n\">setupname</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_props</span><span class=\"p\">(</span><span class=\"n\">isnewsetup</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;SetupName &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; with &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; Sweeps&quot;</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_props</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">isnewsetup</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_template</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupTemplates</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">setup_template</span><span class=\"p\">:</span>\n                <span class=\"n\">_tuple2dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">setups_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;AnalysisSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;SolveSetups&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">setups_data</span><span class=\"p\">:</span>\n                    <span class=\"n\">setup_data</span> <span class=\"o\">=</span> <span class=\"n\">setups_data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;Sweeps&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup_data</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"mi\">7</span><span class=\"p\">,</span>\n                    <span class=\"p\">]:</span>  <span class=\"c1\"># 0 and 7 represent setup HFSSDrivenAuto</span>\n                        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n                            <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Sweeps&quot;</span><span class=\"p\">]</span>\n                            <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;NextUniqueID&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                            <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;MoveBackForward&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                            <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;MoveBackwards&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n                                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SweepHFSS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]))</span>\n\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Sweeps&quot;</span><span class=\"p\">]</span>\n                            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n                                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SweepQ3D</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]))</span>\n                        <span class=\"n\">setup_data</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweeps&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span><span class=\"n\">setup_data</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_solved</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Verify if solutions are available for given setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            `True` if solutions are available.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span><span class=\"p\">:</span>\n            <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">i</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">available_report_quantities</span><span class=\"p\">(</span>\n                    <span class=\"n\">solution</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> : </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">reports_by_category</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"p\">(</span>\n                <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> : </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span><span class=\"p\">),</span>\n                <span class=\"n\">expressions</span><span class=\"o\">=</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">available_report_quantities</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)]</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">reports_by_category</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">expressions</span><span class=\"o\">=</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">identify_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">):</span>\n            <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Time&quot;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">get_solution_data</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">p_app</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Parent.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span>\n\n    <span class=\"nd\">@p_app</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">p_app</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">omodule</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Analysis module.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Name.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setupname</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setupname</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n\n<div class=\"viewcode-block\" id=\"Setup\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup/#pyaedt.modules.SolveSetup.Setup\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Setup</span><span class=\"p\">(</span><span class=\"n\">CommonSetup</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Initializes, creates, and updates a 3D setup.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.Analysis3D.FieldAnalysis3D`</span>\n<span class=\"sd\">        Inherited app object.</span>\n<span class=\"sd\">    solutiontype : int, str</span>\n<span class=\"sd\">        Type of the setup.</span>\n<span class=\"sd\">    setupname : str, optional</span>\n<span class=\"sd\">        Name of the setup. The default is ``&quot;MySetupAuto&quot;``.</span>\n<span class=\"sd\">    isnewsetup : bool, optional</span>\n<span class=\"sd\">        Whether to create the setup from a template. The default is ``True``.</span>\n<span class=\"sd\">        If ``False``, access is to the existing setup.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">CommonSetup</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Setup.create\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.create/#pyaedt.modules.SolveSetup.Setup.create\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new setup based on class settings in AEDT.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of arguments.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">soltype</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupNames</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span><span class=\"p\">]</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">InsertSetup</span><span class=\"p\">(</span><span class=\"n\">soltype</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.update\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.update/#pyaedt.modules.SolveSetup.Setup.update\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the setup based on either the class argument or a dictionary.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        update_dictionary : optional</span>\n<span class=\"sd\">            Dictionary to use to update the setup. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">legacy_update</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">update_dictionary</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">update_dictionary</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">update_dictionary</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"n\">legacy_update</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.delete\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.delete/#pyaedt.modules.SolveSetup.Setup.delete\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete actual Setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            `True` if setup is deleted. `False` if it failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">DeleteSetups</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_expression_cache</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">expression_list</span><span class=\"p\">,</span>\n        <span class=\"n\">report_type_list</span><span class=\"p\">,</span>\n        <span class=\"n\">intrinsics_list</span><span class=\"p\">,</span>\n        <span class=\"n\">isconvergence_list</span><span class=\"p\">,</span>\n        <span class=\"n\">isrelativeconvergence</span><span class=\"p\">,</span>\n        <span class=\"n\">conv_criteria</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve data from the expression setup cache.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expressions_list : list</span>\n<span class=\"sd\">            List of formulas to retrieve.</span>\n<span class=\"sd\">        report_type_list : list</span>\n<span class=\"sd\">            List of report types for the expressions.</span>\n<span class=\"sd\">        intrinsics_list : list</span>\n<span class=\"sd\">            List of intrinsic expressions for the expressions.</span>\n<span class=\"sd\">        isconvergence_list : list</span>\n<span class=\"sd\">            List of Boolean values indicating whether the expressions are in</span>\n<span class=\"sd\">            the convergence criteria.</span>\n<span class=\"sd\">        isrelativeconvergence : bool</span>\n\n<span class=\"sd\">        conv_criteria:</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the data.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">isrelativeconvergence</span><span class=\"p\">:</span>\n            <span class=\"n\">userelative</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">userelative</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">list_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ExpressionCache&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">expression_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expression_list</span><span class=\"p\">):</span>\n                <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;1&quot;</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">report_type_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">report_type</span> <span class=\"o\">=</span> <span class=\"n\">report_type_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">report_type</span> <span class=\"o\">=</span> <span class=\"n\">report_type_list</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">isconvergence_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">isconvergence</span> <span class=\"o\">=</span> <span class=\"n\">isconvergence_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">isconvergence</span> <span class=\"o\">=</span> <span class=\"n\">isconvergence_list</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">intrinsics_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">intrinsics</span> <span class=\"o\">=</span> <span class=\"n\">intrinsics_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">intrinsics</span> <span class=\"o\">=</span> <span class=\"n\">intrinsics_list</span>\n                <span class=\"n\">list_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:CacheItem&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Title:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Expression:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">expression</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Intrinsics:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">intrinsics</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IsConvergence:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">isconvergence</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;UseRelativeConvergence:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">userelative</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MaxConvergenceDelta:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">conv_criteria</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MaxConvergeValue:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">conv_criteria</span><span class=\"p\">),</span>\n                        <span class=\"s2\">&quot;ReportType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">report_type</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ExpressionContext&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">expression_list</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;1&quot;</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">list_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:CacheItem&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Title:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Expression:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">expression_list</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Intrinsics:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">intrinsics_list</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;IsConvergence:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">isconvergence_list</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;UseRelativeConvergence:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">userelative</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxConvergenceDelta:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">conv_criteria</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxConvergeValue:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">conv_criteria</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;ReportType:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">report_type_list</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ExpressionContext&quot;</span><span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">list_data</span>\n\n<div class=\"viewcode-block\" id=\"Setup.enable_expression_cache\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.enable_expression_cache/#pyaedt.modules.SolveSetup.Setup.enable_expression_cache\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_expression_cache</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">expressions</span><span class=\"p\">,</span>\n        <span class=\"n\">report_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fields&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">intrinsics</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">isconvergence</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">isrelativeconvergence</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">conv_criteria</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable an expression cache.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expressions : str or list</span>\n<span class=\"sd\">            One or more formulas to add to the expression cache.</span>\n<span class=\"sd\">        report_type : str or list, optional</span>\n<span class=\"sd\">            Type of the report for the expression. The default is ``Fields``. If a list of expressions</span>\n<span class=\"sd\">            is supplied, supply a corresponding list of report types.</span>\n<span class=\"sd\">        intrinsics : str or list, optional</span>\n<span class=\"sd\">            Intrinsic functions for the expressions. The default is ``&quot;&quot;``. If a list of expressions</span>\n<span class=\"sd\">            is supplied, a corresponding list of intrinsic functions must be supplied.</span>\n<span class=\"sd\">        isconvergence : bool or str or list, optional</span>\n<span class=\"sd\">            Whether the expression is in the convergence criteria. The default is ``True``.</span>\n<span class=\"sd\">            If a list of expressions is supplied, a corresponding list of Boolean values must be</span>\n<span class=\"sd\">            supplied.</span>\n<span class=\"sd\">        isrelativeconvergence : bool, optional</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        conv_criteria :</span>\n<span class=\"sd\">            The default is ``1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"n\">expression_cache</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression_cache</span><span class=\"p\">(</span>\n            <span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">report_type</span><span class=\"p\">,</span> <span class=\"n\">intrinsics</span><span class=\"p\">,</span> <span class=\"n\">isconvergence</span><span class=\"p\">,</span> <span class=\"n\">isrelativeconvergence</span><span class=\"p\">,</span> <span class=\"n\">conv_criteria</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">expression_cache</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.add_derivatives\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.add_derivatives/#pyaedt.modules.SolveSetup.Setup.add_derivatives\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_derivatives</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">derivative_list</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add derivatives to the setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        derivative_list : list</span>\n<span class=\"sd\">            List of derivatives.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;VariablesForDerivatives:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">derivative_list</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.enable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.enable/#pyaedt.modules.SolveSetup.Setup.enable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;IsEnabled:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.disable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.disable/#pyaedt.modules.SolveSetup.Setup.disable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">disable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Disable a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;IsEnabled:&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.add_sweep\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.add_sweep/#pyaedt.modules.SolveSetup.Setup.add_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sweeptype</span><span class=\"o\">=</span><span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a sweep to the project.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        sweeptype : str, optional</span>\n<span class=\"sd\">            Type of the sweep. The default is ``&quot;Interpolating&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS` or :class:`pyaedt.modules.SetupTemplates.SweepQ3D`</span>\n<span class=\"sd\">            Sweep object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertFrequencySweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweepname</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;This method only applies to HFSS and Q3d. Use add_eddy_current_sweep method.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_n</span> <span class=\"o\">=</span> <span class=\"n\">SweepHFSS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">sweeptype</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_n</span> <span class=\"o\">=</span> <span class=\"n\">SweepQ3D</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">sweeptype</span><span class=\"p\">)</span>\n        <span class=\"n\">sweep_n</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sweep_n</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sweep_n</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.add_mesh_link\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.add_mesh_link/#pyaedt.modules.SolveSetup.Setup.add_mesh_link\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_mesh_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">design_name</span><span class=\"p\">,</span> <span class=\"n\">solution_name</span><span class=\"p\">,</span> <span class=\"n\">parameters_dict</span><span class=\"p\">,</span> <span class=\"n\">project_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;This Project*&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a mesh link to another design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        design_name : str</span>\n<span class=\"sd\">            Name of the design.</span>\n<span class=\"sd\">        solution_name : str</span>\n<span class=\"sd\">            Name of the solution in the format ``&quot;setupname : solutionname&quot;``.</span>\n<span class=\"sd\">            Optionally use :attr:`appname.nominal_adaptive` to get the</span>\n<span class=\"sd\">            nominal adaptive or :attr:`appname.nominal_sweep` to get the</span>\n<span class=\"sd\">            nominal sweep.</span>\n<span class=\"sd\">        parameters_dict : dict</span>\n<span class=\"sd\">            Dictionary of the parameters. Optionally use</span>\n<span class=\"sd\">            :attr:`appname.available_variations.nominal_w_values_dict`</span>\n<span class=\"sd\">            to get the nominal values.</span>\n<span class=\"sd\">        project_name : str, optional</span>\n<span class=\"sd\">            Name of the project with the design. The default is ``&quot;This Project*&quot;``.</span>\n<span class=\"sd\">            However, you can supply the full path and name to another project.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">meshlinks</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MeshLink&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;ImportMesh&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">project_name</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Product&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ElectronicsDesktop&quot;</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Design&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">design_name</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Soln&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">solution_name</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Params&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">parameters_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Params&quot;</span><span class=\"p\">][</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;Params&quot;</span><span class=\"p\">][</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parameters_dict</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;ForceSourceToSolve&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;PreservePartnerSoln&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;PathRelativeTo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;TargetProject&quot;</span>\n        <span class=\"n\">meshlinks</span><span class=\"p\">[</span><span class=\"s2\">&quot;ApplyMeshOp&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.add_eddy_current_sweep\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.add_eddy_current_sweep/#pyaedt.modules.SolveSetup.Setup.add_eddy_current_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_eddy_current_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">range_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;LinearStep&quot;</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">,</span> <span class=\"n\">clear</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Maxwell Eddy Current Sweep.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        range_type : str</span>\n<span class=\"sd\">            Type of the subrange. Options are ``&quot;LinearCount&quot;``,</span>\n<span class=\"sd\">            ``&quot;LinearStep&quot;``, ``&quot;LogScale&quot;`` and ``&quot;SinglePoints&quot;``.</span>\n<span class=\"sd\">        start : float</span>\n<span class=\"sd\">            Starting frequency.</span>\n<span class=\"sd\">        end : float, optional</span>\n<span class=\"sd\">            Stopping frequency. Required for ``rangetype=&quot;LinearCount&quot;|&quot;LinearStep&quot;|&quot;LogScale&quot;``.</span>\n<span class=\"sd\">        count : int or float, optional</span>\n<span class=\"sd\">            Frequency count or frequency step. Required for ``rangetype=&quot;LinearCount&quot;|&quot;LinearStep&quot;|&quot;LogScale&quot;``.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Unit of the frequency. For example, ``&quot;MHz`` or ``&quot;GHz&quot;``. The default is ``&quot;Hz&quot;``.</span>\n\n<span class=\"sd\">        clear : boolean, optional</span>\n<span class=\"sd\">            If set to ``True``, all other subranges will be suppressed except the current one under creation.</span>\n<span class=\"sd\">            Default value is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">!=</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;This method only applies to Maxwell Eddy Current Solution.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">legacy_update</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">range_type</span>\n        <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStart&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">range_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;LinearStep&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStep&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">range_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;LinearCount&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeCount&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span>\n        <span class=\"k\">elif</span> <span class=\"n\">range_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;LogScale&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeSamples&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span>\n        <span class=\"k\">elif</span> <span class=\"n\">range_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SinglePoints&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">clear</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepRanges&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Subrange&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">props</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepRanges&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Subrange&quot;</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepRanges&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Subrange&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepRanges&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Subrange&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepRanges&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Subrange&quot;</span><span class=\"p\">],</span> <span class=\"n\">props</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"n\">legacy_update</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.enable_adaptive_setup_single\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.enable_adaptive_setup_single/#pyaedt.modules.SolveSetup.Setup.enable_adaptive_setup_single\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_adaptive_setup_single</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_passes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_delta_s</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable HFSS single frequency setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        freq : float, str, optional</span>\n<span class=\"sd\">            Frequency at which to set the adaptive convergence.</span>\n<span class=\"sd\">            The default is ``None`` which will not update the value in setup.</span>\n<span class=\"sd\">            You can enter a float value in (GHz) or a string.</span>\n<span class=\"sd\">        max_passes : int, optional</span>\n<span class=\"sd\">            Maximum number of adaptive passes. The default is ``None`` which will not update the value in setup.</span>\n<span class=\"sd\">        max_delta_s : float, optional</span>\n<span class=\"sd\">            Delta S convergence criteria. The default is ``None`` which will not update the value in setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Modal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Terminal&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Method applies only to HFSS-driven solutions.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SolveType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Single&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">GHz&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Frequency&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n        <span class=\"k\">if</span> <span class=\"n\">max_passes</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaximumPasses&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max_passes</span>\n        <span class=\"k\">if</span> <span class=\"n\">max_delta_s</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaxDeltaS&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max_delta_s</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.enable_adaptive_setup_broadband\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.enable_adaptive_setup_broadband/#pyaedt.modules.SolveSetup.Setup.enable_adaptive_setup_broadband\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_adaptive_setup_broadband</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">low_frequency</span><span class=\"p\">,</span> <span class=\"n\">high_frquency</span><span class=\"p\">,</span> <span class=\"n\">max_passes</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">max_delta_s</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable HFSS broadband setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        low_frequency : float, str</span>\n<span class=\"sd\">            Lower Frequency at which set the adaptive convergence.</span>\n<span class=\"sd\">            It can be float (GHz) or str.</span>\n<span class=\"sd\">        high_frquency : float, str</span>\n<span class=\"sd\">            Lower Frequency at which set the adaptive convergence. It can be float (GHz) or str.</span>\n<span class=\"sd\">        max_passes : int, optional</span>\n<span class=\"sd\">            Maximum number of adaptive passes. The default is ``6``.</span>\n<span class=\"sd\">        max_delta_s : float, optional</span>\n<span class=\"sd\">            Delta S Convergence criteria. The default is ``0.02``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Modal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Terminal&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Method applies only to HFSS-driven solutions.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SolveType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;BroadBand&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">low_frequency</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">low_frequency</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">GHz&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">low_frequency</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">high_frquency</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">high_frquency</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">GHz&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">high_frquency</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Low&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">low_frequency</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;High&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">high_frquency</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaximumPasses&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max_passes</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaxDeltaS&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max_delta_s</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup.enable_adaptive_setup_multifrequency\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup.enable_adaptive_setup_multifrequency/#pyaedt.modules.SolveSetup.Setup.enable_adaptive_setup_multifrequency\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_adaptive_setup_multifrequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">frequencies</span><span class=\"p\">,</span> <span class=\"n\">max_delta_s</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable HFSS multi-frequency setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        frequencies : list</span>\n<span class=\"sd\">            Frequency at which to set the adaptive convergence. You can enter list entries</span>\n<span class=\"sd\">            as float values in GHz or as strings.</span>\n<span class=\"sd\">        max_delta_s : list, float</span>\n<span class=\"sd\">            Delta S convergence criteria. The default is ``0.02``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Modal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Terminal&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Method applies only to HFSS-driven solutions.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SolveType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MultiFrequency&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">frequencies</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">max_delta_s</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n                    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">GHz&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">max_delta_s</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n                    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">GHz&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">max_delta_s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MultipleAdaptiveFreqsSetup&quot;</span><span class=\"p\">][</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.02</span><span class=\"p\">]</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"SetupCircuit\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit/#pyaedt.modules.SolveSetup.SetupCircuit\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SetupCircuit</span><span class=\"p\">(</span><span class=\"n\">CommonSetup</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Initializes, creates, and updates a circuit setup.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.AnalysisNexxim.FieldAnalysisCircuit`</span>\n<span class=\"sd\">        Inherited app object.</span>\n<span class=\"sd\">    solutiontype : str, int</span>\n<span class=\"sd\">        Type of the setup.</span>\n<span class=\"sd\">    setupname : str, optional</span>\n<span class=\"sd\">        Name of the setup. The default is ``&quot;MySetupAuto&quot;``.</span>\n<span class=\"sd\">    isnewsetup : bool, optional</span>\n<span class=\"sd\">      Whether to create the setup from a template. The default is ``True.``</span>\n<span class=\"sd\">      If ``False``, access is to the existing setup.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">CommonSetup</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_props</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">isnewsetup</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_template</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupTemplates</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">setup_template</span><span class=\"p\">:</span>\n                <span class=\"n\">_tuple2dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">())</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">setups_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">p_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;SimSetups&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;SimSetup&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">setups_data</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">setups_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">setups_data</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"n\">setups_data</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setup</span><span class=\"p\">[</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">setup_data</span> <span class=\"o\">=</span> <span class=\"n\">setup</span>\n                        <span class=\"n\">setup_data</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweeps&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_data</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_odesign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Design.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.create\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.create/#pyaedt.modules.SolveSetup.SetupCircuit.create\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new setup based on class settings in AEDT.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the arguments.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddLinearNetworkAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddDCAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddTransient</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddQuickEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddVerifEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddAMIAnalysis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">soltype</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupNames</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span><span class=\"p\">]</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SimSetup&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">(</span><span class=\"n\">soltype</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">soltype</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">newsetup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">newsetup</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximLNA&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">AddLinearNetworkAnalysis</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximDC&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">AddDCAnalysis</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximTransient&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">AddTransient</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximQuickEye&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">AddQuickEyeAnalysis</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximVerifEye&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">AddVerifEyeAnalysis</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximAMI&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">AddAMIAnalysis</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solution Not Implemented Yet&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximLNA&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditLinearNetworkAnalysis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximDC&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditDCAnalysis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximTransient&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditTransient</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximQuickEye&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditQuickEyeAnalysis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximVerifEye&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditVerifEyeAnalysis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">soltype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NexximAMI&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditAMIAnalysis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Solution type &#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39; is not implemented yet&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">soltype</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.update\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.update/#pyaedt.modules.SolveSetup.SetupCircuit.update\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the setup based on the class arguments or a dictionary.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        update_dictionary : dict, optional</span>\n<span class=\"sd\">            Dictionary of settings to apply. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditLinearNetworkAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditDCAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditTransient</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditQuickEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditVerifEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditAMIAnalysis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">legacy_update</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">update_dictionary</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">update_dictionary</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">update_dictionary</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SimSetup&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">soltype</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupNames</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup</span><span class=\"p\">(</span><span class=\"n\">soltype</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_update</span> <span class=\"o\">=</span> <span class=\"n\">legacy_update</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.add_sweep_points\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.add_sweep_points/#pyaedt.modules.SolveSetup.SetupCircuit.add_sweep_points\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_sweep_points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweep_variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;Freq&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweep_points</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;GHz&quot;</span><span class=\"p\">,</span> <span class=\"n\">override_existing_sweep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a linear count sweep to existing Circuit Setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sweep_variable : str, optional</span>\n<span class=\"sd\">            Variable to which the sweep belongs. Default is ``&quot;Freq``.</span>\n<span class=\"sd\">        sweep_points : float or str or list, optional</span>\n<span class=\"sd\">            Sweep points to apply linear sweep. It can be a list or single points.</span>\n<span class=\"sd\">             Points can be float or str. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        end_point float or str, optional</span>\n<span class=\"sd\">            End Point of Linear Count sweep. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Sweeps Units. It will be ignored if strings are provided as start_point or end_point</span>\n<span class=\"sd\">        override_existing_sweep : bool, optional</span>\n<span class=\"sd\">            Define if existing sweep on the same variable has to be overridden or kept and added to this new sweep.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` is succeeded.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditLinearNetworkAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditDCAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditTransient</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditQuickEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditVerifEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditAMIAnalysis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">sweep_points</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">sweep_points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sweep_points</span><span class=\"p\">]</span>\n        <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">sweep_points</span><span class=\"p\">:</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n                <span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n        <span class=\"n\">lin_data</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sweeps</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweep_variable</span><span class=\"p\">,</span> <span class=\"n\">lin_data</span><span class=\"p\">,</span> <span class=\"n\">override_existing_sweep</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.add_sweep_count\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.add_sweep_count/#pyaedt.modules.SolveSetup.SetupCircuit.add_sweep_count\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_sweep_count</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;Freq&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">end_point</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;GHz&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">count_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Linear&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">override_existing_sweep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a step sweep to existing Circuit Setup. It can be ``&quot;Linear&quot;``, ``&quot;Decade&quot;`` or ``&quot;Octave&quot;``.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sweep_variable : str, optional</span>\n<span class=\"sd\">            Variable to which the sweep belongs. Default is ``&quot;Freq``.</span>\n<span class=\"sd\">        start_point : float or str, optional</span>\n<span class=\"sd\">            Start Point of Linear Count sweep. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        end_point : float or str, optional</span>\n<span class=\"sd\">            End Point of Linear Count sweep. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        count :  int, optional</span>\n<span class=\"sd\">            Number of points. Default is ``100``.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Sweeps Units. It will be ignored if strings are provided as start_point or end_point.</span>\n<span class=\"sd\">        count_type : str, optional</span>\n<span class=\"sd\">            Count Type. Default is ``&quot;Linear&quot;``. It can be also ``&quot;Decade&quot;`` or ``&quot;Octave&quot;``.</span>\n<span class=\"sd\">        override_existing_sweep : bool, optional</span>\n<span class=\"sd\">            Define if existing sweep on the same variable has to be overridden or kept and added to this new sweep.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` is succeeded.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditLinearNetworkAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditDCAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditTransient</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditQuickEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditVerifEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditAMIAnalysis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">units</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">end_point</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">end_point</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">units</span>\n        <span class=\"n\">lin_in</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LINC&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">count_type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;decade&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">lin_in</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DEC&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">count_type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;octave&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">lin_in</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;OCT&quot;</span>\n        <span class=\"n\">lin_data</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">lin_in</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"n\">end_point</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweep_variable</span><span class=\"p\">,</span> <span class=\"n\">lin_data</span><span class=\"p\">,</span> <span class=\"n\">override_existing_sweep</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.add_sweep_step\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.add_sweep_step/#pyaedt.modules.SolveSetup.SetupCircuit.add_sweep_step\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_sweep_step</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_variable</span><span class=\"o\">=</span><span class=\"s2\">&quot;Freq&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">end_point</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;GHz&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">override_existing_sweep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a linear count sweep to existing Circuit Setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sweep_variable : str, optional</span>\n<span class=\"sd\">            Variable to which the sweep belongs. Default is ``&quot;Freq``.</span>\n<span class=\"sd\">        start_point : float or str, optional</span>\n<span class=\"sd\">            Start Point of Linear Count sweep. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        end_point : float or str, optional</span>\n<span class=\"sd\">            End Point of Linear Count sweep. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        step_size :  float or str, optional</span>\n<span class=\"sd\">            Step Size of sweep. If ``str`` then no units will be applied.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Sweeps Units. It will be ignored if strings are provided as start_point or end_point</span>\n<span class=\"sd\">        override_existing_sweep : bool, optional</span>\n<span class=\"sd\">            Define if existing sweep on the same variable has to be overridden or kept and added to this new sweep.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` is succeeded.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditLinearNetworkAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditDCAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditTransient</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditQuickEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditVerifEyeAnalysis</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditAMIAnalysis</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">units</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">end_point</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">end_point</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">units</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">step_size</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"n\">step_size</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">step_size</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">units</span>\n        <span class=\"n\">linc_data</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LIN </span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"n\">end_point</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweep_variable</span><span class=\"p\">,</span> <span class=\"n\">linc_data</span><span class=\"p\">,</span> <span class=\"n\">override_existing_sweep</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_add_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweep_variable</span><span class=\"p\">,</span> <span class=\"n\">equation</span><span class=\"p\">,</span> <span class=\"n\">override_existing_sweep</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">sw</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">sw</span><span class=\"p\">[</span><span class=\"s2\">&quot;Variable&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">sweep_variable</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">override_existing_sweep</span><span class=\"p\">:</span>\n                        <span class=\"n\">sw</span><span class=\"p\">[</span><span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">equation</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">sw</span><span class=\"p\">[</span><span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"n\">equation</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Variable&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">sweep_variable</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">override_existing_sweep</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">equation</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"n\">equation</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Variable&quot;</span><span class=\"p\">:</span> <span class=\"n\">sweep_variable</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">:</span> <span class=\"n\">equation</span><span class=\"p\">,</span> <span class=\"s2\">&quot;OffsetF1&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Synchronize&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SweepDefinition&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_expression_cache</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">expression_list</span><span class=\"p\">,</span>\n        <span class=\"n\">report_type_list</span><span class=\"p\">,</span>\n        <span class=\"n\">intrinsics_list</span><span class=\"p\">,</span>\n        <span class=\"n\">isconvergence_list</span><span class=\"p\">,</span>\n        <span class=\"n\">isrelativeconvergence</span><span class=\"p\">,</span>\n        <span class=\"n\">conv_criteria</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve data from the expression setup cache.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expressions_list : list</span>\n<span class=\"sd\">            List of formulas to retrieve.</span>\n<span class=\"sd\">        report_type_list : list</span>\n<span class=\"sd\">            List of report types for the expressions.</span>\n<span class=\"sd\">        intrinsics_list : list</span>\n<span class=\"sd\">            List of intrinsic functions for the expressions.</span>\n<span class=\"sd\">        isconvergence_list : list</span>\n<span class=\"sd\">            List of Boolean values indicating whether the expressions are in</span>\n<span class=\"sd\">            the convergence criteria.</span>\n<span class=\"sd\">        isrelativeconvergence :</span>\n\n<span class=\"sd\">        conv_criteria:</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the data.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">isrelativeconvergence</span><span class=\"p\">:</span>\n            <span class=\"n\">userelative</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">userelative</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"n\">list_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ExpressionCache&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">expression_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expression_list</span><span class=\"p\">):</span>\n                <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;1&quot;</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">report_type_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">report_type</span> <span class=\"o\">=</span> <span class=\"n\">report_type_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">report_type</span> <span class=\"o\">=</span> <span class=\"n\">report_type_list</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">isconvergence_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">isconvergence</span> <span class=\"o\">=</span> <span class=\"n\">isconvergence_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">isconvergence</span> <span class=\"o\">=</span> <span class=\"n\">isconvergence_list</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">intrinsics_list</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"n\">intrinsics</span> <span class=\"o\">=</span> <span class=\"n\">intrinsics_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">intrinsics</span> <span class=\"o\">=</span> <span class=\"n\">intrinsics_list</span>\n                <span class=\"n\">list_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:CacheItem&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Title:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Expression:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">expression</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Intrinsics:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">intrinsics</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IsConvergence:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">isconvergence</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;UseRelativeConvergence:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MaxConvergenceDelta:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MaxConvergeValue:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;0.01&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;ReportType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">report_type</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ExpressionContext&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">expression_list</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;1&quot;</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">list_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:CacheItem&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Title:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Expression:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">expression_list</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Intrinsics:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">intrinsics_list</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;IsConvergence:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">isconvergence_list</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;UseRelativeConvergence:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">userelative</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxConvergenceDelta:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">conv_criteria</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxConvergeValue:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">conv_criteria</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;ReportType:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">report_type_list</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ExpressionContext&quot;</span><span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">list_data</span>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.enable_expression_cache\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.enable_expression_cache/#pyaedt.modules.SolveSetup.SetupCircuit.enable_expression_cache\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_expression_cache</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">expressions</span><span class=\"p\">,</span>\n        <span class=\"n\">report_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fields&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">intrinsics</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">isconvergence</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">isrelativeconvergence</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">conv_criteria</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable a setup expression cache.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expressions : str or list</span>\n<span class=\"sd\">            One or more formulas to add to the expression cache.</span>\n<span class=\"sd\">        report_type : str or list, optional</span>\n<span class=\"sd\">            Type of the report for the expression. The default is ``&quot;Fields&quot;``. If a list of expressions</span>\n<span class=\"sd\">            is supplied, a corresponding list of report types must be supplied.</span>\n<span class=\"sd\">        intrinsics : str or list, optional</span>\n<span class=\"sd\">            Intrinsic functions for the expressions. The default is ``&quot;&quot;``. If a list of expressions</span>\n<span class=\"sd\">            is supplied, a corresponding list of intrinsic expressesions must be supplied.</span>\n<span class=\"sd\">        isconvergence : bool, str, or list, optional</span>\n<span class=\"sd\">            Whether the expression is in the convergence criteria. The  default is ``True``.</span>\n<span class=\"sd\">            If a list of expressions is supplied, a corresponding list of Boolean values must be</span>\n<span class=\"sd\">            supplied.</span>\n<span class=\"sd\">        isrelativeconvergence : bool, optional</span>\n<span class=\"sd\">            The default is ``True``.</span>\n<span class=\"sd\">        conv_criteria</span>\n<span class=\"sd\">            The default is ``1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Name:SimSetup&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"n\">expression_cache</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression_cache</span><span class=\"p\">(</span>\n            <span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">report_type</span><span class=\"p\">,</span> <span class=\"n\">intrinsics</span><span class=\"p\">,</span> <span class=\"n\">isconvergence</span><span class=\"p\">,</span> <span class=\"n\">isrelativeconvergence</span><span class=\"p\">,</span> <span class=\"n\">conv_criteria</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">expression_cache</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.add_derivatives\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.add_derivatives/#pyaedt.modules.SolveSetup.SetupCircuit.add_derivatives\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_derivatives</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">derivative_list</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add derivatives to the setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        derivative_list : list</span>\n<span class=\"sd\">            List of derivatives.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Name:SimSetup&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;VariablesForDerivatives:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">derivative_list</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">EditSetup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.enable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.enable/#pyaedt.modules.SolveSetup.SetupCircuit.enable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">EnableSolutionSetup</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"SetupCircuit.disable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.SetupCircuit.disable/#pyaedt.modules.SolveSetup.SetupCircuit.disable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">disable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Disable a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.EditSetup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">setup_name</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">EnableSolutionSetup</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout/#pyaedt.modules.SolveSetup.Setup3DLayout\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Setup3DLayout</span><span class=\"p\">(</span><span class=\"n\">CommonSetup</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Initializes, creates, and updates a 3D Layout setup.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.Analysis3DLayout.FieldAnalysis3DLayout`</span>\n<span class=\"sd\">        Inherited app object.</span>\n<span class=\"sd\">    solutiontype : int or str</span>\n<span class=\"sd\">        Type of the setup.</span>\n<span class=\"sd\">    setupname : str, optional</span>\n<span class=\"sd\">        Name of the setup. The default is ``&quot;MySetupAuto&quot;``.</span>\n<span class=\"sd\">    isnewsetup : bool, optional</span>\n<span class=\"sd\">        Whether to create the setup from a template. The default is ``True.``</span>\n<span class=\"sd\">        If ``False``, access is to the existing setup.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">CommonSetup</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_props</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">isnewsetup</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_template</span> <span class=\"o\">=</span> <span class=\"n\">SetupKeys</span><span class=\"o\">.</span><span class=\"n\">SetupTemplates</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setuptype</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">setup_template</span><span class=\"p\">:</span>\n                <span class=\"n\">_tuple2dict</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">setups_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;Setup&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">setups_data</span><span class=\"p\">:</span>\n                    <span class=\"n\">setup_data</span> <span class=\"o\">=</span> <span class=\"n\">setups_data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;Data&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">setup_data</span><span class=\"p\">:</span>  <span class=\"c1\"># 0 and 7 represent setup HFSSDrivenAuto</span>\n                        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">setup_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Data&quot;</span><span class=\"p\">]</span>\n                        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">app</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)):</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SweepHFSS3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]))</span>\n\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span><span class=\"n\">setup_data</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">SetupProps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_solved</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Verify if solutions are available for a given setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            `True` if solutions are available.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;SolveSetupType&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">reports_by_category</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> : Last Adaptive&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">reports_by_category</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">identify_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">):</span>\n            <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Time&quot;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">get_solution_data</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solver_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Setup type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            Setup type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;SolveSetupType&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SolveSetupType&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout.create\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout.create/#pyaedt.modules.SolveSetup.Setup3DLayout.create\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new setup based on class settings in AEDT.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.Add</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout.update\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout.update/#pyaedt.modules.SolveSetup.Setup3DLayout.update\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">update_dictionary</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the setup based on the class arguments or a dictionary.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        update_dictionary : dict, optional</span>\n<span class=\"sd\">            Dictionary of settings to apply.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.Edit</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">update_dictionary</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">update_dictionary</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">_setitem_without_update</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">update_dictionary</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">])</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">_dict2arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">Edit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout.enable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout.enable/#pyaedt.modules.SolveSetup.Setup3DLayout.enable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enable a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.Edit</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Properties&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Enable&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;true&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout.disable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout.disable/#pyaedt.modules.SolveSetup.Setup3DLayout.disable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">disable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Disable a setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Name of the setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.Edit</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Properties&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Enable&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;false&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout.export_to_hfss\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout.export_to_hfss/#pyaedt.modules.SolveSetup.Setup3DLayout.export_to_hfss\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_to_hfss</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_fullname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export the project to a file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_fullname : str</span>\n<span class=\"sd\">            Full path and file name for exporting the project.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportToHfss</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">file_fullname</span> <span class=\"o\">=</span> <span class=\"n\">file_fullname</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">file_fullname</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">file_fullname</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_fullname</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.aedt&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omodule</span><span class=\"o\">.</span><span class=\"n\">ExportToHfss</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">file_fullname</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Setup3DLayout.add_sweep\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.SolveSetup.Setup3DLayout.add_sweep/#pyaedt.modules.SolveSetup.Setup3DLayout.add_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sweeptype</span><span class=\"o\">=</span><span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a frequency sweep.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        sweeptype : str, optional</span>\n<span class=\"sd\">            Type of the sweep. Options are ``&quot;Interpolating&quot;`` and ``&quot;Discrete&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;Interpolating&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS3DLayout`</span>\n<span class=\"sd\">            Sweep object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddSweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweepname</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sweep_n</span> <span class=\"o\">=</span> <span class=\"n\">SweepHFSS3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">sweeptype</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_n</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sweep_n</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">sweep_n</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SetupHFSS</span><span class=\"p\">(</span><span class=\"n\">Setup</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Initializes, creates, and updates an HFSS setup.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.Analysis3D.FieldAnalysis3D`</span>\n<span class=\"sd\">        Inherited app object.</span>\n<span class=\"sd\">    solutiontype : int, str</span>\n<span class=\"sd\">        Type of the setup.</span>\n<span class=\"sd\">    setupname : str, optional</span>\n<span class=\"sd\">        Name of the setup. The default is ``&quot;MySetupAuto&quot;``.</span>\n<span class=\"sd\">    isnewsetup : bool, optional</span>\n<span class=\"sd\">        Whether to create the setup from a template. The default is ``True``.</span>\n<span class=\"sd\">        If ``False``, access is to the existing setup.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MySetupAuto&quot;</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">Setup</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">solutiontype</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">isnewsetup</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_linear_count_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstart</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstop</span><span class=\"p\">,</span>\n        <span class=\"n\">num_of_freq_points</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_tol</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_max_solutions</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a sweep with the specified number of points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        unit : str</span>\n<span class=\"sd\">            Frequency Units.</span>\n<span class=\"sd\">        freqstart : float</span>\n<span class=\"sd\">            Starting frequency of the sweep, such as ``1``.</span>\n<span class=\"sd\">        freqstop : float</span>\n<span class=\"sd\">            Stopping frequency of the sweep.</span>\n<span class=\"sd\">        num_of_freq_points : int</span>\n<span class=\"sd\">            Number of frequency points in the range.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        save_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save the fields. The default is ``True``.</span>\n<span class=\"sd\">        save_rad_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save the radiating fields. The default is ``False``.</span>\n<span class=\"sd\">        sweep_type : str, optional</span>\n<span class=\"sd\">            Type of the sweep. Options are ``&quot;Fast&quot;``, ``&quot;Interpolating&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Discrete&quot;``. The default is ``&quot;Discrete&quot;``.</span>\n<span class=\"sd\">        interpolation_tol : float, optional</span>\n<span class=\"sd\">            Error tolerance threshold for the interpolation</span>\n<span class=\"sd\">            process. The default is ``0.5``.</span>\n<span class=\"sd\">        interpolation_max_solutions : int, optional</span>\n<span class=\"sd\">            Maximum number of solutions evaluated for the interpolation process.</span>\n<span class=\"sd\">            The default is ``250``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS` or bool</span>\n<span class=\"sd\">            Sweep object if successful, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertFrequencySweep</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        Create a setup named ``&quot;LinearCountSetup&quot;`` and use it in a linear count sweep</span>\n<span class=\"sd\">        named ``&quot;LinearCountSweep&quot;``.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; setup = hfss.create_setup(&quot;LinearCountSetup&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; linear_count_sweep = hfss.create_linear_count_sweep(setupname=&quot;LinearCountSetup&quot;,</span>\n<span class=\"sd\">        ...                                                     sweepname=&quot;LinearCountSweep&quot;,</span>\n<span class=\"sd\">        ...                                                     unit=&quot;MHz&quot;, freqstart=1.1e3,</span>\n<span class=\"sd\">        ...                                                     freqstop=1200.1, num_of_freq_points=1658)</span>\n<span class=\"sd\">        &gt;&gt;&gt; type(linear_count_sweep)</span>\n<span class=\"sd\">        &lt;class &#39;pyaedt.modules.SetupTemplates.SweepHFSS&#39;&gt;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Fast&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid in `sweep_type`. It has to be either &#39;Discrete&#39;, &#39;Interpolating&#39;, or &#39;Fast&#39;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">]:</span>\n            <span class=\"n\">oldname</span> <span class=\"o\">=</span> <span class=\"n\">sweepname</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">oldname</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Sweep has been renamed in </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span><span class=\"p\">,</span> <span class=\"n\">oldname</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">)</span>\n        <span class=\"n\">sweepdata</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">sweep_type</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweepdata</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LinearCount&quot;</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStart&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeCount&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">num_of_freq_points</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sweep_type</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpTolerance&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_tol</span>\n            <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpMaxSolns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_max_solutions</span>\n            <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpMinSolns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpMinSubranges&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_fields</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_rad_fields</span>\n        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linear count sweep </span><span class=\"si\">{}</span><span class=\"s2\"> has been correctly created&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">sweepdata</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_linear_step_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">setupname</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstart</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstop</span><span class=\"p\">,</span>\n        <span class=\"n\">step_size</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Sweep with a specified frequency step.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertFrequencySweep</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n<span class=\"sd\">        unit : str</span>\n<span class=\"sd\">            Unit of the frequency. For example, ``&quot;MHz`` or ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        freqstart : float</span>\n<span class=\"sd\">            Starting frequency of the sweep.</span>\n<span class=\"sd\">        freqstop : float</span>\n<span class=\"sd\">            Stopping frequency of the sweep.</span>\n<span class=\"sd\">        step_size : float</span>\n<span class=\"sd\">            Frequency size of the step.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        save_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save the fields. The default is ``True``.</span>\n<span class=\"sd\">        save_rad_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save the radiating fields. The default is ``False``.</span>\n<span class=\"sd\">        sweep_type : str, optional</span>\n<span class=\"sd\">            Whether to create a ``&quot;Discrete&quot;``,``&quot;Interpolating&quot;`` or ``&quot;Fast&quot;`` sweep.</span>\n<span class=\"sd\">            The default is ``&quot;Discrete&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS` or bool</span>\n<span class=\"sd\">            Sweep object if successful, ``False`` otherwise.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        Create a setup named ``&quot;LinearStepSetup&quot;`` and use it in a linear step sweep</span>\n<span class=\"sd\">        named ``&quot;LinearStepSweep&quot;``.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; setup = hfss.create_setup(&quot;LinearStepSetup&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; linear_step_sweep = hfss.create_linear_step_sweep(setupname=&quot;LinearStepSetup&quot;,</span>\n<span class=\"sd\">        ...                                                   sweepname=&quot;LinearStepSweep&quot;,</span>\n<span class=\"sd\">        ...                                                   unit=&quot;MHz&quot;, freqstart=1.1e3,</span>\n<span class=\"sd\">        ...                                                   freqstop=1200.1, step_size=153.8)</span>\n<span class=\"sd\">        &gt;&gt;&gt; type(linear_step_sweep)</span>\n<span class=\"sd\">        &lt;class &#39;pyaedt.modules.SetupTemplates.SweepHFSS&#39;&gt;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Fast&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid in `sweep_type`. It has to either &#39;Discrete&#39;, &#39;Interpolating&#39;, or &#39;Fast&#39;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setupname</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">]:</span>\n                    <span class=\"n\">oldname</span> <span class=\"o\">=</span> <span class=\"n\">sweepname</span>\n                    <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">oldname</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Sweep has been renamed in </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span><span class=\"p\">,</span> <span class=\"n\">oldname</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"n\">sweep_type</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweepdata</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LinearStep&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStart&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStep&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">step_size</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_fields</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_rad_fields</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;ExtrapToDC&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sweep_type</span>\n                <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpTolerance&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n                    <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpMaxSolns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>\n                    <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpMinSolns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;InterpMinSubranges&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linear step sweep </span><span class=\"si\">{}</span><span class=\"s2\"> has been correctly created&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweepdata</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_single_point_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">setupname</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freq</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">save_single_field</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Sweep with a single frequency point.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n<span class=\"sd\">        unit : str</span>\n<span class=\"sd\">            Unit of the frequency. For example, ``&quot;MHz`` or ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        freq : float, list</span>\n<span class=\"sd\">            Frequency of the single point or list of frequencies to create distinct single points.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        save_single_field : bool, list, optional</span>\n<span class=\"sd\">            Whether to save the fields of the single point. The default is ``True``.</span>\n<span class=\"sd\">            If a list is specified, the length must be the same as freq length.</span>\n<span class=\"sd\">        save_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save the fields for all points and subranges defined in the sweep. The default is ``False``.</span>\n<span class=\"sd\">        save_rad_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save only the radiating fields. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS` or bool</span>\n<span class=\"sd\">            Sweep object if successful, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertFrequencySweep</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        Create a setup named ``&quot;LinearStepSetup&quot;`` and use it in a single point sweep</span>\n<span class=\"sd\">        named ``&quot;SinglePointSweep&quot;``.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; setup = hfss.create_setup(&quot;LinearStepSetup&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; single_point_sweep = hfss.create_single_point_sweep(setupname=&quot;LinearStepSetup&quot;,</span>\n<span class=\"sd\">        ...                                                   sweepname=&quot;SinglePointSweep&quot;,</span>\n<span class=\"sd\">        ...                                                   unit=&quot;MHz&quot;, freq=1.1e3)</span>\n<span class=\"sd\">        &gt;&gt;&gt; type(single_point_sweep)</span>\n<span class=\"sd\">        &lt;class &#39;pyaedt.modules.SetupTemplates.SweepHFSS&#39;&gt;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;SinglePoint&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">save_single_field</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">save_single_field</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;The length of save_single_field must be the same as freq length.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">add_subranges</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Frequency list is empty! Specify at least one frequency point.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">freq0</span> <span class=\"o\">=</span> <span class=\"n\">freq</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n                <span class=\"n\">add_subranges</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">freq0</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">save_single_field</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">save0</span> <span class=\"o\">=</span> <span class=\"n\">save_single_field</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">save0</span> <span class=\"o\">=</span> <span class=\"n\">save_single_field</span>\n            <span class=\"k\">if</span> <span class=\"n\">add_subranges</span><span class=\"p\">:</span>\n                <span class=\"n\">save_single_field</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">save0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setupname</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">]:</span>\n                    <span class=\"n\">oldname</span> <span class=\"o\">=</span> <span class=\"n\">sweepname</span>\n                    <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">oldname</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Sweep has been renamed in </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span><span class=\"p\">,</span> <span class=\"n\">oldname</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SinglePoints&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStart&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freq0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freq0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveSingleField&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save0</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_fields</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_rad_fields</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SMatrixOnlySolveMode&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Auto&quot;</span>\n                <span class=\"k\">if</span> <span class=\"n\">add_subranges</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">save_single_field</span><span class=\"p\">):</span>\n                        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">add_subrange</span><span class=\"p\">(</span><span class=\"n\">rangetype</span><span class=\"o\">=</span><span class=\"s2\">&quot;SinglePoints&quot;</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">unit</span><span class=\"p\">,</span> <span class=\"n\">save_single_fields</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Single point sweep </span><span class=\"si\">{}</span><span class=\"s2\"> has been correctly created&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweepdata</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/modules/SolveSetup", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}