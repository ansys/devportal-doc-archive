{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.stackup_3d", "body": "<h1>Source code for pyaedt.modeler.stackup_3d</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">joblib</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">constants</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.MaterialLib</span> <span class=\"kn\">import</span> <span class=\"n\">Material</span>\n\n<span class=\"n\">LAYERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;s&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;g&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ground&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;d&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Replace each character of a string by underscores.</span>\n<span class=\"sd\">    This method is used to create Hfss variable relative to a material,</span>\n<span class=\"sd\">    and so reformat the material name into the variable name format.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    character : str</span>\n<span class=\"sd\">        The character to replace by underscore.</span>\n<span class=\"sd\">    string : str</span>\n<span class=\"sd\">        The string where the replacement is made.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import _replace_by_underscore</span>\n<span class=\"sd\">    &gt;&gt;&gt; name = &quot;Duroid (tm)&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; name = _replace_by_underscore(&quot; &quot;, name)</span>\n<span class=\"sd\">    &gt;&gt;&gt; name = _replace_by_underscore(&quot;(&quot;, name)</span>\n<span class=\"sd\">    &gt;&gt;&gt; name = _replace_by_underscore(&quot;)&quot;, name)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;character must be str&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;string must be str&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">reformat_name</span><span class=\"p\">:</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">reformat_name</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n        <span class=\"n\">reformat_name</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;_&quot;</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"NamedVariable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.NamedVariable/#pyaedt.modeler.stackup_3d.NamedVariable\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">NamedVariable</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Cast PyAEDT variable object to simplify getters and setters in Stackup3D.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        The name of the variable. If the the name begins with an &#39;$&#39;, the variable will be a project variable.</span>\n<span class=\"sd\">        Otherwise, it will be a design variable.</span>\n<span class=\"sd\">    expression : str</span>\n<span class=\"sd\">        Expression of the value.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import NamedVariable</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_frequency = NamedVariable(hfss, &quot;my_frequency&quot;, &quot;900000Hz&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; wave_length_formula = &quot;c0/&quot; + my_frequency.name</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_wave_length = NamedVariable(hfss, &quot;my_wave_length&quot;, wave_length_formula)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_permittivity = NamedVariable(hfss, &quot;my_permittivity&quot;, &quot;2.2&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_wave_length.expression = my_wave_length.expression + &quot;/&quot; + my_permittivity.name</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span> <span class=\"o\">=</span> <span class=\"n\">application</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n        <span class=\"n\">application</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Name of the variable as a string.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Expression of the variable as a string.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span>\n\n    <span class=\"nd\">@expression</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the expression of the variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression: str</span>\n<span class=\"sd\">            Value expression of the variable.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Expression must be a string&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Unit system of the expression as a string.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable</span><span class=\"o\">.</span><span class=\"n\">unit_system</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Units.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable</span><span class=\"o\">.</span><span class=\"n\">units</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">numeric_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Numeric part of the expression as a float value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">evaluated_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;String that combines the numeric value and the units.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable</span><span class=\"o\">.</span><span class=\"n\">evaluated_value</span>\n\n<div class=\"viewcode-block\" id=\"NamedVariable.hide_variable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.NamedVariable.hide_variable/#pyaedt.modeler.stackup_3d.NamedVariable.hide_variable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hide_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the variable to a hidden variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value : bool, optional</span>\n<span class=\"sd\">            Whether the variable is a hidden variable. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"NamedVariable.read_only_variable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.NamedVariable.read_only_variable/#pyaedt.modeler.stackup_3d.NamedVariable.read_only_variable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_only_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the variable to a read-only variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value : bool, optional</span>\n<span class=\"sd\">            Whether the variable is a read-only variable. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read_only</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DuplicatedParametrizedMaterial</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides a class to duplicate a material and manage its duplication in PyAEDT and in AEDT.</span>\n<span class=\"sd\">    For each material property a NamedVariable is created as attribute.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    material_name : str</span>\n<span class=\"sd\">        The material name which will be cloned.</span>\n<span class=\"sd\">    cloned_material_name : str</span>\n<span class=\"sd\">        The cloned material named</span>\n<span class=\"sd\">    list_of_properties : list of string</span>\n<span class=\"sd\">        Currently unavailable, but this parameter could be used to select the properties which needs to be parametrized.</span>\n<span class=\"sd\">        Currently, the permittivity, permeability, conductivity, dielectric loss tangent and the magnetic loss tangent</span>\n<span class=\"sd\">         are parametrized with a NamedVariable.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import DuplicatedParametrizedMaterial</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_copper = DuplicatedParametrizedMaterial(hfss, &quot;copper&quot;, &quot;my_copper&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_material_name = my_copper.material_name</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_material = my_copper.material</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_copper_conductivity = my_copper.conductivity</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">,</span> <span class=\"n\">cloned_material_name</span><span class=\"p\">,</span> <span class=\"n\">list_of_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permeability</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conductivity</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_loss_tangent</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnetic_loss_tangent</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">checkifmaterialexists</span><span class=\"p\">(</span><span class=\"n\">material_name</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">list_of_properties</span><span class=\"p\">:</span>\n                <span class=\"n\">cloned_material</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">duplicate_material</span><span class=\"p\">(</span><span class=\"n\">material_name</span><span class=\"p\">,</span> <span class=\"n\">cloned_material_name</span><span class=\"p\">)</span>\n                <span class=\"n\">permittivity</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">permittivity</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">permeability</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">permeability</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">conductivity</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">conductivity</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">dielectric_loss_tan</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">dielectric_loss_tangent</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">magnetic_loss_tan</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">magnetic_loss_tangent</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"n\">cloned_material_name</span><span class=\"p\">)</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">,</span> <span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">,</span> <span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n                <span class=\"n\">reformat_name</span> <span class=\"o\">=</span> <span class=\"n\">_replace_by_underscore</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"n\">reformat_name</span><span class=\"p\">)</span>\n                <span class=\"n\">permittivity_variable</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">reformat_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_permittivity&quot;</span>\n                <span class=\"n\">permeability_variable</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">reformat_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_permeability&quot;</span>\n                <span class=\"n\">conductivity_variable</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">reformat_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_conductivity&quot;</span>\n                <span class=\"n\">dielectric_loss_variable</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">reformat_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_dielectric_loss&quot;</span>\n                <span class=\"n\">magnetic_loss_variable</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">reformat_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_magnetic_loss&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">permittivity_variable</span><span class=\"p\">,</span> <span class=\"n\">permittivity</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permeability</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">permeability_variable</span><span class=\"p\">,</span> <span class=\"n\">permeability</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conductivity</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">conductivity_variable</span><span class=\"p\">,</span> <span class=\"n\">conductivity</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_loss_tangent</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                    <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">dielectric_loss_variable</span><span class=\"p\">,</span> <span class=\"n\">dielectric_loss_tan</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnetic_loss_tangent</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">magnetic_loss_variable</span><span class=\"p\">,</span> <span class=\"n\">magnetic_loss_tan</span><span class=\"p\">)</span>\n                <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">permittivity</span> <span class=\"o\">=</span> <span class=\"n\">permittivity_variable</span>\n                <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">permeability</span> <span class=\"o\">=</span> <span class=\"n\">permeability_variable</span>\n                <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">conductivity</span> <span class=\"o\">=</span> <span class=\"n\">conductivity_variable</span>\n                <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">dielectric_loss_tangent</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_loss_variable</span>\n                <span class=\"n\">cloned_material</span><span class=\"o\">.</span><span class=\"n\">magnetic_loss_tangent</span> <span class=\"o\">=</span> <span class=\"n\">magnetic_loss_variable</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material_name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;The material name </span><span class=\"si\">%s</span><span class=\"s2\"> doesn&#39;t exist&quot;</span> <span class=\"o\">%</span> <span class=\"n\">material_name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">material_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">permittivity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">permeability</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permeability</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">conductivity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conductivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_loss_tangent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_loss_tangent</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnetic_loss_tangent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnetic_loss_tangent</span>\n\n\n<div class=\"viewcode-block\" id=\"Layer3D\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Layer3D/#pyaedt.modeler.stackup_3d.Layer3D\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Layer3D</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides a class for a management of a parametric layer in 3D Modeler. The Layer3D class is not intended</span>\n<span class=\"sd\">    to be used with its constructor, but by using the method &quot;add_layer&quot; available in the Stackup3D class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    stackup : :class:`pyaedt.modeler.stackup_3d.Stackup3D`</span>\n<span class=\"sd\">        The stackup where the layers will be added.</span>\n<span class=\"sd\">    app : :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    name : str</span>\n<span class=\"sd\">        The name of the layer.</span>\n<span class=\"sd\">    layer_type : str</span>\n<span class=\"sd\">        &quot;S&quot; for signal layers, &quot;D&quot; for dielectric layers, &quot;G&quot; for ground layers.</span>\n<span class=\"sd\">    material_name : str</span>\n<span class=\"sd\">        The material name of the layer.</span>\n<span class=\"sd\">    thickness : float</span>\n<span class=\"sd\">        The thickness of the layer.</span>\n<span class=\"sd\">    fill_material : str</span>\n<span class=\"sd\">        In ground and signal layers, the dielectric material name which will fill the non-conductive areas of the layer.</span>\n<span class=\"sd\">    index : int</span>\n<span class=\"sd\">        The number of the layer, starting from bottom to top.</span>\n<span class=\"sd\">    frequency : float</span>\n<span class=\"sd\">        The layer frequency, it will be common to all geometric shapes on the layer.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_layer = my_stackup.add_layer(&quot;my_layer&quot;, layer_type=&quot;D&quot;, material_name=&quot;air&quot;,</span>\n<span class=\"sd\">    &gt;&gt;&gt; thickness=3, fill_material=None)</span>\n<span class=\"sd\">    &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; diel = my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">stackup</span><span class=\"p\">,</span>\n        <span class=\"n\">app</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mf\">0.035</span><span class=\"p\">,</span>\n        <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"s2\">&quot;FR4_epoxy&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span> <span class=\"o\">=</span> <span class=\"n\">stackup</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">=</span> <span class=\"n\">index</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">layer_position</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;layer_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_position&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">layer_position</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span> <span class=\"o\">=</span> <span class=\"n\">LAYERS</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">layer_type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;frequency&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">frequency</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">obj_3d</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicated_material</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">duplicate_parametrize_material</span><span class=\"p\">(</span><span class=\"n\">material_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicated_material</span><span class=\"o\">.</span><span class=\"n\">material</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_duplicated_material</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">duplicate_parametrize_material</span><span class=\"p\">(</span><span class=\"n\">fill_material</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_duplicated_material</span><span class=\"o\">.</span><span class=\"n\">material</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness_variable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_thickness&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">thickness</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness_variable</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_box</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_position</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness_variable</span><span class=\"p\">],</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;ground&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">thickness</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_box</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_position</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness_variable</span><span class=\"p\">],</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span>\n                    <span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_position</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">],</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;signal&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">thickness</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_box</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_position</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness_variable</span><span class=\"p\">],</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_3d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span>\n                    <span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_position</span><span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">],</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"n\">obj_3d</span><span class=\"o\">.</span><span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">obj_3d</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj_3d</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Generation of the ground layer does not work.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer ID.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">material_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Material name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Material.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Material.Material`</span>\n<span class=\"sd\">            Material.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicated_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicated material.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.DuplicatedParametrizedMaterial`</span>\n<span class=\"sd\">            Material.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicated_material</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">filling_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Fill material.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Material.Material`</span>\n<span class=\"sd\">            Material.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">filling_material_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Fill material name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fill_material_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Thickness variable.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thickness_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Thickness value.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float, str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n    <span class=\"nd\">@thickness</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">elevation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer elevation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">elevation_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer elevation value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str, float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stackup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Stackup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Stackup3D`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Frequency variable.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span>\n\n<div class=\"viewcode-block\" id=\"Layer3D.duplicate_parametrize_material\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Layer3D.duplicate_parametrize_material/#pyaedt.modeler.stackup_3d.Layer3D.duplicate_parametrize_material\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate_parametrize_material</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">,</span> <span class=\"n\">cloned_material_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">list_of_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate a material and parametrize all properties.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        material_name : str</span>\n<span class=\"sd\">            Name of origin material</span>\n<span class=\"sd\">        cloned_material_name : str, optional</span>\n<span class=\"sd\">            Name of destination material. The default is ``None``.</span>\n<span class=\"sd\">        list_of_properties : list, optional</span>\n<span class=\"sd\">            Properties to parametrize. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Material.Material`</span>\n<span class=\"sd\">            Material object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">material_name</span><span class=\"p\">,</span> <span class=\"n\">Material</span><span class=\"p\">):</span>\n            <span class=\"n\">material_name</span> <span class=\"o\">=</span> <span class=\"n\">material_name</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">cloned_material_name</span><span class=\"p\">,</span> <span class=\"n\">Material</span><span class=\"p\">):</span>\n            <span class=\"n\">cloned_material_name</span> <span class=\"o\">=</span> <span class=\"n\">cloned_material_name</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cloned_material_name</span><span class=\"p\">:</span>\n            <span class=\"n\">cloned_material_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cloned_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">material_name</span>\n        <span class=\"k\">for</span> <span class=\"n\">duplicated_material</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">duplicated_material_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">duplicated_material</span><span class=\"o\">.</span><span class=\"n\">material_name</span> <span class=\"o\">==</span> <span class=\"n\">cloned_material_name</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">duplicated_material</span>\n        <span class=\"n\">duplicated_material</span> <span class=\"o\">=</span> <span class=\"n\">DuplicatedParametrizedMaterial</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"p\">,</span> <span class=\"n\">cloned_material_name</span><span class=\"p\">,</span> <span class=\"n\">list_of_properties</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">duplicated_material_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">duplicated_material</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">duplicated_material</span></div>\n\n<div class=\"viewcode-block\" id=\"Layer3D.add_patch\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Layer3D.add_patch/#pyaedt.modeler.stackup_3d.Layer3D.add_patch\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_patch</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a parametric patch.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        frequency : float, None</span>\n<span class=\"sd\">            Frequency value for the patch calculation in Hz.</span>\n<span class=\"sd\">        patch_width : float</span>\n<span class=\"sd\">            Patch width.</span>\n<span class=\"sd\">        patch_length : float, optional</span>\n<span class=\"sd\">            Patch length. The default is ``None``.</span>\n<span class=\"sd\">        patch_position_x : float, optional</span>\n<span class=\"sd\">            Patch start x position.</span>\n<span class=\"sd\">        patch_position_y : float, optional</span>\n<span class=\"sd\">            Patch start y position. The default is ``0.``</span>\n<span class=\"sd\">        patch_name : str, optional</span>\n<span class=\"sd\">            Patch name. The default is ``None``.</span>\n<span class=\"sd\">        axis : str, optional</span>\n<span class=\"sd\">            Line orientation axis. The default is ``&quot;X&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Patch`</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch = top.add_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">patch_name</span><span class=\"p\">:</span>\n            <span class=\"n\">patch_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_patch&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">below_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n                    <span class=\"k\">break</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;The layer below the selected one must be of dielectric type&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">created_patch</span> <span class=\"o\">=</span> <span class=\"n\">Patch</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n            <span class=\"n\">signal_layer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">dielectric_layer</span><span class=\"o\">=</span><span class=\"n\">below_layer</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_length</span><span class=\"o\">=</span><span class=\"n\">patch_length</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"n\">patch_position_x</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"n\">patch_position_y</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"n\">patch_name</span><span class=\"p\">,</span>\n            <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">created_patch</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_object_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">created_patch</span><span class=\"p\">)</span>\n        <span class=\"n\">created_patch</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">created_patch</span></div>\n\n<div class=\"viewcode-block\" id=\"Layer3D.ml_patch\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Layer3D.ml_patch/#pyaedt.modeler.stackup_3d.Layer3D.ml_patch\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ml_patch</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a new parametric patch using machine learning algorithm rather than analytic formulas.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        frequency : float, None</span>\n<span class=\"sd\">            Frequency value for patch calculation in Hz.</span>\n<span class=\"sd\">        patch_width : float</span>\n<span class=\"sd\">            Patch width.</span>\n<span class=\"sd\">        patch_position_x : float, optional</span>\n<span class=\"sd\">            Patch start x position.</span>\n<span class=\"sd\">        patch_position_y : float, optional</span>\n<span class=\"sd\">            Patch start y position.</span>\n<span class=\"sd\">        patch_name : str, optional</span>\n<span class=\"sd\">            Patch name.</span>\n<span class=\"sd\">        axis : str, optional</span>\n<span class=\"sd\">            Line orientation axis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.MachineLearningPatch`</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch = top.ml_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">patch_name</span><span class=\"p\">:</span>\n            <span class=\"n\">patch_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_patch&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">below_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"p\">[</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n                    <span class=\"k\">break</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;The layer below the selected one must be of dielectric type&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">created_patch</span> <span class=\"o\">=</span> <span class=\"n\">MachineLearningPatch</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n            <span class=\"n\">signal_layer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">dielectric_layer</span><span class=\"o\">=</span><span class=\"n\">below_layer</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"n\">patch_position_x</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"n\">patch_position_y</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"n\">patch_name</span><span class=\"p\">,</span>\n            <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">created_patch</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_object_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">created_patch</span><span class=\"p\">)</span>\n        <span class=\"n\">created_patch</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">created_patch</span></div>\n\n<div class=\"viewcode-block\" id=\"Layer3D.add_trace\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Layer3D.add_trace/#pyaedt.modeler.stackup_3d.Layer3D.add_trace\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_trace</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">line_width</span><span class=\"p\">,</span>\n        <span class=\"n\">line_length</span><span class=\"p\">,</span>\n        <span class=\"n\">is_electrical_length</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">is_impedance</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">line_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">line_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">line_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"mf\">1e9</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a trace.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        line_width : float</span>\n<span class=\"sd\">            Line width. It can be the physical width or the line impedance.</span>\n<span class=\"sd\">        line_length : float</span>\n<span class=\"sd\">            Line length. It can be the physical length or the electrical length.</span>\n<span class=\"sd\">        is_electrical_length : bool, optional</span>\n<span class=\"sd\">            Whether the line length is an electrical length or a physical length. The default</span>\n<span class=\"sd\">            is ``False``, which means it is a physical length.</span>\n<span class=\"sd\">        is_impedance : bool, optional</span>\n<span class=\"sd\">            Whether the line width is an impedance. The default is ``False``, in which case</span>\n<span class=\"sd\">            the line width is a geometrical value.</span>\n<span class=\"sd\">        line_position_x : float, optional</span>\n<span class=\"sd\">            Line center start x position. The default is ``0``.</span>\n<span class=\"sd\">        line_position_y : float, optional</span>\n<span class=\"sd\">            Line center start y position. The default is ``0``.</span>\n<span class=\"sd\">        line_name : str, optional</span>\n<span class=\"sd\">            Line name. The default is ``None``.</span>\n<span class=\"sd\">        axis : str, optional</span>\n<span class=\"sd\">            Line orientation axis. The default is ``&quot;X&quot;``.</span>\n<span class=\"sd\">        reference_system : str, optional</span>\n<span class=\"sd\">            Line reference system. The default is ``None``, in which case a new coordinate</span>\n<span class=\"sd\">            system is created.</span>\n<span class=\"sd\">        frequency : float, optional</span>\n<span class=\"sd\">            Frequency value for the line calculation in Hz. The default is ``1e9``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Trace`</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss(new_desktop_session=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_trace = top.add_trace(line_width=2.5, line_length=22)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_trace)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">line_name</span><span class=\"p\">:</span>\n            <span class=\"n\">line_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_line&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">dielectric_layer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">dielectric_layer</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">dielectric_layer</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">dielectric_layer</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n                    <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dielectric_layer</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is no layer under or over this layer.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">created_line</span> <span class=\"o\">=</span> <span class=\"n\">Trace</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"p\">,</span>\n            <span class=\"n\">line_width</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_impedance</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">line_width</span> <span class=\"k\">if</span> <span class=\"n\">is_impedance</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">dielectric_layer</span><span class=\"p\">,</span>\n            <span class=\"n\">line_length</span><span class=\"o\">=</span><span class=\"n\">line_length</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_electrical_length</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">line_electrical_length</span><span class=\"o\">=</span><span class=\"n\">line_length</span> <span class=\"k\">if</span> <span class=\"n\">is_electrical_length</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">line_position_x</span><span class=\"o\">=</span><span class=\"n\">line_position_x</span><span class=\"p\">,</span>\n            <span class=\"n\">line_position_y</span><span class=\"o\">=</span><span class=\"n\">line_position_y</span><span class=\"p\">,</span>\n            <span class=\"n\">line_name</span><span class=\"o\">=</span><span class=\"n\">line_name</span><span class=\"p\">,</span>\n            <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"n\">reference_system</span><span class=\"p\">,</span>\n            <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">created_line</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">created_line</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_object_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">created_line</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">created_line</span></div>\n\n<div class=\"viewcode-block\" id=\"Layer3D.add_polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Layer3D.add_polygon/#pyaedt.modeler.stackup_3d.Layer3D.add_polygon\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_polygon</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span> <span class=\"n\">is_void</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">poly_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a polygon.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        points : list</span>\n<span class=\"sd\">            Points list of [x,y] coordinates.</span>\n<span class=\"sd\">        material : str, optional</span>\n<span class=\"sd\">            Material name. The default is ``&quot;copper&quot;``.</span>\n<span class=\"sd\">        is_void : bool, optional</span>\n<span class=\"sd\">            Whether the polygon is a void. The default is ``False``.</span>\n<span class=\"sd\">            On ground layers, it will act opposite of the Boolean value because the ground</span>\n<span class=\"sd\">            is negative.</span>\n<span class=\"sd\">        poly_name : str, optional</span>\n<span class=\"sd\">            Polygon name. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Polygon`</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_polygon = top.add_polygon([[0, 0], [0, 1], [1, 1], [1, 0]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.dielectric_x_position = &quot;2mm&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.dielectric_y_position = &quot;2mm&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.dielectric_length = &quot;-3mm&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.dielectric_width = &quot;-3mm&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">poly_name</span><span class=\"p\">:</span>\n            <span class=\"n\">poly_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_poly&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">polygon</span> <span class=\"o\">=</span> <span class=\"n\">Polygon</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n            <span class=\"n\">points</span><span class=\"p\">,</span>\n            <span class=\"n\">signal_layer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">mat_name</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">,</span>\n            <span class=\"n\">is_void</span><span class=\"o\">=</span><span class=\"n\">is_void</span><span class=\"p\">,</span>\n            <span class=\"n\">poly_name</span><span class=\"o\">=</span><span class=\"n\">poly_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Layer_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;ground&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_void</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">is3d</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">material_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filling_material_name</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">elif</span> <span class=\"n\">is_void</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">is3d</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"o\">.</span><span class=\"n\">material_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filling_material_name</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_object_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">polygon</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"PadstackLayer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.PadstackLayer/#pyaedt.modeler.stackup_3d.PadstackLayer\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PadstackLayer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides a data class for the definition of a padstack layer and relative pad and antipad values.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">padstack</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">elevation</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstack</span> <span class=\"o\">=</span> <span class=\"n\">padstack</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span> <span class=\"o\">=</span> <span class=\"n\">layer_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_elevation</span> <span class=\"o\">=</span> <span class=\"n\">elevation</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_thickness</span> <span class=\"o\">=</span> <span class=\"n\">thickness</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_antipad_radius</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mm&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Padstack instance layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the padstack instance layer.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pad_radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Pad radius on the specified layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Pad radius on the specified layer.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span>\n\n    <span class=\"nd\">@pad_radius</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pad_radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">antipad_radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Antipad radius on the specified layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Antipad radius on the specified layer.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_antipad_radius</span>\n\n    <span class=\"nd\">@antipad_radius</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">antipad_radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_antipad_radius</span> <span class=\"o\">=</span> <span class=\"n\">value</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Padstack\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Padstack/#pyaedt.modeler.stackup_3d.Padstack\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Padstack</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides the ``Padstack`` class member of Stackup3D.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">stackup</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span> <span class=\"o\">=</span> <span class=\"n\">stackup</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias_objects</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_sides</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_plating_ratio</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span> <span class=\"ow\">or</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"p\">[</span><span class=\"n\">layer_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PadstackLayer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer</span> <span class=\"ow\">and</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;dielectric&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"p\">[</span><span class=\"n\">layer_name</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_material</span> <span class=\"o\">=</span> <span class=\"n\">material</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plating_ratio</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Plating ratio between 0 and 1.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_plating_ratio</span>\n\n    <span class=\"nd\">@plating_ratio</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plating_ratio</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">val</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_plating_ratio</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_plating_ratio</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Plating has to be between 0 and 1.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">padstacks_by_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the padstack definitions by layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of padstack definitions by layers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">num_sides</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Number of sides on the circle, which is ``0`` for a true circle.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_sides</span>\n\n    <span class=\"nd\">@num_sides</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">num_sides</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_sides</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<div class=\"viewcode-block\" id=\"Padstack.set_all_pad_value\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Padstack.set_all_pad_value/#pyaedt.modeler.stackup_3d.Padstack.set_all_pad_value\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_all_pad_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set all pads in all layers to a specified value.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value : float</span>\n<span class=\"sd\">            Pad radius.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            &quot;True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Padstack.set_all_antipad_value\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Padstack.set_all_antipad_value/#pyaedt.modeler.stackup_3d.Padstack.set_all_antipad_value\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_all_antipad_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set all antipads in all layers to a specified value.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value : float</span>\n<span class=\"sd\">            Pad radius.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">             &quot;True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_antipad_radius</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Padstack.set_start_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Padstack.set_start_layer/#pyaedt.modeler.stackup_3d.Padstack.set_start_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_start_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the start layer to a specified value.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer : str</span>\n<span class=\"sd\">            Layer name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">             &quot;True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">new_stackup</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">if</span> <span class=\"n\">found</span> <span class=\"ow\">and</span> <span class=\"n\">layer</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"p\">:</span>\n                <span class=\"n\">new_stackup</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PadstackLayer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n                <span class=\"n\">new_stackup</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;The layer named: &#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39; does not exist&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span> <span class=\"o\">=</span> <span class=\"n\">new_stackup</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Padstack.set_stop_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Padstack.set_stop_layer/#pyaedt.modeler.stackup_3d.Padstack.set_stop_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_stop_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the stop layer to a specified value.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer : str</span>\n<span class=\"sd\">            Layer name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">             &quot;True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">new_stackup</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                <span class=\"n\">new_stackup</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span> <span class=\"o\">=</span> <span class=\"n\">new_stackup</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Padstack.add_via\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Padstack.add_via/#pyaedt.modeler.stackup_3d.Padstack.add_via\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_via</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">instance_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Insert a new via on this padstack.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position_x : float, optional</span>\n<span class=\"sd\">            Center x position. The default is ``0``.</span>\n<span class=\"sd\">        position_y : float, optional</span>\n<span class=\"sd\">            Center y position. The default is ``0``.</span>\n<span class=\"sd\">        instance_name : str, optional</span>\n<span class=\"sd\">            Via name. The default is ``None``.</span>\n<span class=\"sd\">        reference_system : str, optional</span>\n<span class=\"sd\">            Whether to use an existing reference system or create a new one. The default</span>\n<span class=\"sd\">            is ``None``, in which case a new reference system is created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            Object created.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">instance_name</span><span class=\"p\">:</span>\n            <span class=\"n\">instance_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">reference_system</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">reference_system</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">reference_system</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_coordinate_system</span><span class=\"p\">(</span>\n                    <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">instance_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">instance_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">instance_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span>\n\n            <span class=\"n\">cyls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_by_layer</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n                <span class=\"n\">position_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">position_x</span><span class=\"p\">)</span>\n                <span class=\"n\">position_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">position_y</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">cyls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_cylinder</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span><span class=\"n\">position_x</span><span class=\"p\">,</span> <span class=\"n\">position_y</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_layer_elevation</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span>\n                            <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span><span class=\"p\">,</span>\n                            <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_layer_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                            <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_material</span><span class=\"p\">,</span>\n                            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">instance_name</span><span class=\"p\">,</span>\n                            <span class=\"n\">numSides</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_sides</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plating_ratio</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">hole</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_cylinder</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span><span class=\"n\">position_x</span><span class=\"p\">,</span> <span class=\"n\">position_y</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_layer_elevation</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span>\n                            <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">*</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_pad_radius</span><span class=\"p\">),</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plating_ratio</span><span class=\"p\">),</span>\n                            <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_layer_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                            <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks_material</span><span class=\"p\">,</span>\n                            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">instance_name</span><span class=\"p\">,</span>\n                            <span class=\"n\">numSides</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_sides</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">cyls</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">hole</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_antipad_radius</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">anti</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_cylinder</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"n\">position_x</span><span class=\"p\">,</span> <span class=\"n\">position_y</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_layer_elevation</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span>\n                        <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_antipad_radius</span><span class=\"p\">,</span>\n                        <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_layer_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                        <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"s2\">&quot;air&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">instance_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_antipad&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">numSides</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_sides</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_signal_list</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_ground_list</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_dielectric_list</span><span class=\"p\">,</span>\n                        <span class=\"n\">anti</span><span class=\"p\">,</span>\n                        <span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cyls</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">unite</span><span class=\"p\">(</span><span class=\"n\">cyls</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">cyls</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias_objects</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cyls</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">cyls</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Vias&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"o\">.</span><span class=\"n\">_vias</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">cyls</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Stackup3D\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D/#pyaedt.modeler.stackup_3d.Stackup3D\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Stackup3D</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Main Stackup3D Class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    frequency : float</span>\n<span class=\"sd\">        The stackup frequency, it will be common to all layers in the stackup.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss(new_desktop_session=True)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">application</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_position</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_fill_material</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_name_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_material</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicated_material_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_object_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_z_position_offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_first_layer_position</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;layer_1_position&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shifted_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_start_position</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_first_layer_position</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_x_position</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_y_position</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_width</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;1000mm&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;1000mm&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_end_of_stackup3D</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;StackUp_End&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;layer_1_position&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup_thickness</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;StackUp_Thickness&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;StackUp_End-layer_1_position&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"s2\">&quot;frequency&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">frequency</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Total stackup thickness.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup_thickness</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Application object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">padstacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of padstacks created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of dielectrics created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_list</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">grounds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of grounds created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_list</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of signals created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_list</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">objects</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of obects created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_object_list</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">objects_by_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of padstacks created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">objs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">objs</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">start_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Variable containing the start position.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_start_position</span>\n\n    <span class=\"nd\">@start_position</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">start_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_start_position</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_x_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Stackup x origin.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_x_position</span>\n\n    <span class=\"nd\">@dielectric_x_position</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_x_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_x_position</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_y_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Stackup y origin.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_x_position</span>\n\n    <span class=\"nd\">@dielectric_y_position</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_y_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_y_position</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Stackup width.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_width</span>\n\n    <span class=\"nd\">@dielectric_width</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_width</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Stackup length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_length</span>\n\n    <span class=\"nd\">@dielectric_length</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_length</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all layer names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_positions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all layer positions.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stackup_layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dictionary of all stackup layers.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">z_position_offset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Elevation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_z_position_offset</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Frequency variable.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicated_material_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;List of all duplicated material.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_duplicated_material_list</span>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.add_padstack\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.add_padstack/#pyaedt.modeler.stackup_3d.Stackup3D.add_padstack\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_padstack</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new padstack definition.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            padstack name</span>\n<span class=\"sd\">        material : str, optional</span>\n<span class=\"sd\">            Padstack material. The default is ``&quot;copper&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Padstack`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Padstack</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">p</span></div>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.add_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.add_layer/#pyaedt.modeler.stackup_3d.Stackup3D.add_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_layer</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mf\">0.035</span><span class=\"p\">,</span> <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"s2\">&quot;FR4_epoxy&quot;</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new layer to the stackup.</span>\n<span class=\"sd\">        The new layer can be a signal (S), ground (G), or dielectric (D).</span>\n<span class=\"sd\">        The layer is entirely filled with the specified fill material. Anything will be drawn</span>\n<span class=\"sd\">        material.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Layer name.</span>\n<span class=\"sd\">        layer_type : str, optional</span>\n<span class=\"sd\">            Layer type. Options are ``&quot;S&quot;``, ``&quot;D&quot;``, and ``&quot;G&quot;``. The default is ``&quot;S&quot;``.</span>\n<span class=\"sd\">        material_name : str, optional</span>\n<span class=\"sd\">            Material name. The default is ``&quot;copper&quot;``. The material will be parametrized.</span>\n<span class=\"sd\">        thickness : float, optional</span>\n<span class=\"sd\">            Thickness value. The default is ``0.035``. The thickness will be parametrized.</span>\n<span class=\"sd\">        fill_material : str, optional</span>\n<span class=\"sd\">            Fill material name. The default is ``&quot;FR4_epoxy&quot;``. The fill material will be</span>\n<span class=\"sd\">            parametrized. This parameter is not valid for dielectrics.</span>\n<span class=\"sd\">        frequency : float, optional</span>\n<span class=\"sd\">            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each</span>\n<span class=\"sd\">            shape must have their own frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">            Layer object.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_layer = my_stackup.add_layer(&quot;my_layer&quot;, layer_type=&quot;D&quot;, material_name=&quot;air&quot;,</span>\n<span class=\"sd\">        &gt;&gt;&gt; thickness=3, fill_material=None)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shifted_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">layer_type</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Layer type has to be an S, D, or G string.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">lay</span> <span class=\"o\">=</span> <span class=\"n\">Layer3D</span><span class=\"p\">(</span>\n            <span class=\"n\">stackup</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"n\">layer_type</span><span class=\"p\">,</span>\n            <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"n\">material_name</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">thickness</span><span class=\"p\">,</span>\n            <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"n\">fill_material</span><span class=\"p\">,</span>\n            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shifted_index</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_position_manager</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n            <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">transparency</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.8&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;G&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ground_fill_material</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_fill_material</span><span class=\"p\">)</span>\n            <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">transparency</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.6&quot;</span>\n            <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">layer_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;S&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_name_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_material</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_material_name</span><span class=\"p\">)</span>\n            <span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_obj_3d</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">transparency</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.8&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stackup</span><span class=\"p\">[</span><span class=\"n\">lay</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lay</span>\n        <span class=\"k\">return</span> <span class=\"n\">lay</span></div>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.add_signal_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.add_signal_layer/#pyaedt.modeler.stackup_3d.Stackup3D.add_signal_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_signal_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mf\">0.035</span><span class=\"p\">,</span> <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"s2\">&quot;FR4_epoxy&quot;</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new ground layer to the stackup.</span>\n<span class=\"sd\">        A signal layer is positive. The layer is entirely filled with the fill material.</span>\n<span class=\"sd\">        Anything will be drawn material.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Layer name.</span>\n<span class=\"sd\">        material : str</span>\n<span class=\"sd\">            Material name. Material will be parametrized.</span>\n<span class=\"sd\">        thickness : float, str, None</span>\n<span class=\"sd\">            Thickness value. Thickness will be parametrized.</span>\n<span class=\"sd\">        fill_material : str</span>\n<span class=\"sd\">            Fill Material name. Material will be parametrized.=</span>\n<span class=\"sd\">        material : str, optional</span>\n<span class=\"sd\">            Material name. Material will be parametrized. Default value is `&quot;copper&quot;`.</span>\n<span class=\"sd\">        thickness : float, optional</span>\n<span class=\"sd\">            Thickness value. Thickness will be parametrized. Default value is `0.035`.</span>\n<span class=\"sd\">        fill_material : str, optional</span>\n<span class=\"sd\">            Fill material name. Material will be parametrized. Default value is `&quot;FR4_epoxy&quot;`.</span>\n<span class=\"sd\">        frequency : float, optional</span>\n<span class=\"sd\">            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each</span>\n<span class=\"sd\">            shape must have their own frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">            Layer object.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_signal_layer = my_stackup.add_signal_layer(&quot;signal_layer&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">thickness</span><span class=\"p\">,</span>\n            <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"n\">fill_material</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.add_dielectric_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.add_dielectric_layer/#pyaedt.modeler.stackup_3d.Stackup3D.add_dielectric_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_dielectric_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;FR4_epoxy&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mf\">0.035</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new dielectric layer to the stackup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Layer name.</span>\n<span class=\"sd\">        material : str</span>\n<span class=\"sd\">            Material name. The default is ``&quot;FR4_epoxy&quot;``. The material will be parametrized.</span>\n<span class=\"sd\">        thickness : float, str, optional</span>\n<span class=\"sd\">            Thickness value. The default is ``0.035``. The thickness will be parametrized.</span>\n<span class=\"sd\">        frequency : float, optional</span>\n<span class=\"sd\">            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each</span>\n<span class=\"sd\">            shape must have their own frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">            Layer object.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_dielectric_layer = my_stackup.add_dielectric_layer(&quot;diel&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">thickness</span><span class=\"p\">,</span>\n            <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.add_ground_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.add_ground_layer/#pyaedt.modeler.stackup_3d.Stackup3D.add_ground_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_ground_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mf\">0.035</span><span class=\"p\">,</span> <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"s2\">&quot;air&quot;</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new ground layer to the stackup. A ground layer is negative.</span>\n<span class=\"sd\">        The layer is entirely filled with  metal. Any polygon will draw a void in it.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Layer name.</span>\n<span class=\"sd\">        material : str, op</span>\n<span class=\"sd\">            Material name. Material will be parametrized.</span>\n<span class=\"sd\">        thickness : float, str, None</span>\n<span class=\"sd\">            Thickness value. Thickness will be parametrized.</span>\n<span class=\"sd\">        fill_material : str</span>\n<span class=\"sd\">            Fill Material name. Material will be parametrized.</span>\n<span class=\"sd\">        frequency : float, optional</span>\n<span class=\"sd\">            The layer frequency, it will be common to all geometric shapes on the layer. The default is None, so each</span>\n<span class=\"sd\">            shape must have their own frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">            Layer Object.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_ground_layer = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">layer_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;G&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">,</span>\n            <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"n\">thickness</span><span class=\"p\">,</span>\n            <span class=\"n\">fill_material</span><span class=\"o\">=</span><span class=\"n\">fill_material</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_layer_position_manager</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">previous_layer_end</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_end_of_stackup3D</span><span class=\"o\">.</span><span class=\"n\">expression</span>\n\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">previous_layer_end</span>\n        <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_end_of_stackup3D</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + &quot;</span> <span class=\"o\">+</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_end_of_stackup3D</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.resize\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.resize/#pyaedt.modeler.stackup_3d.Stackup3D.resize\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">resize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">percentage_offset</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Resize the stackup around objects created by a percentage offset.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        percentage_offset : float</span>\n<span class=\"sd\">            Offset of resize. The value must be greater than 0.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">list_of_2d_points</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">list_of_x_coordinates</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">list_of_y_coordinates</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj3d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_object_list</span><span class=\"p\">:</span>\n            <span class=\"n\">points_list_by_object</span> <span class=\"o\">=</span> <span class=\"n\">obj3d</span><span class=\"o\">.</span><span class=\"n\">points_on_layer</span>\n            <span class=\"n\">list_of_2d_points</span> <span class=\"o\">=</span> <span class=\"n\">points_list_by_object</span> <span class=\"o\">+</span> <span class=\"n\">list_of_2d_points</span>\n        <span class=\"k\">for</span> <span class=\"n\">via</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">via</span><span class=\"o\">.</span><span class=\"n\">_vias_objects</span><span class=\"p\">:</span>\n                <span class=\"n\">list_of_x_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_x_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_y_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_y_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_x_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_x_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_y_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"n\">list_of_y_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">bounding_dimension</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">point</span> <span class=\"ow\">in</span> <span class=\"n\">list_of_2d_points</span><span class=\"p\">:</span>\n            <span class=\"n\">list_of_x_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">list_of_y_coordinates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">maximum_x</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">list_of_x_coordinates</span><span class=\"p\">)</span>\n        <span class=\"n\">minimum_x</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">list_of_x_coordinates</span><span class=\"p\">)</span>\n        <span class=\"n\">maximum_y</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">list_of_y_coordinates</span><span class=\"p\">)</span>\n        <span class=\"n\">minimum_y</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">list_of_y_coordinates</span><span class=\"p\">)</span>\n        <span class=\"n\">variation_x</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">maximum_x</span> <span class=\"o\">-</span> <span class=\"n\">minimum_x</span><span class=\"p\">)</span>\n        <span class=\"n\">variation_y</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">maximum_y</span> <span class=\"o\">-</span> <span class=\"n\">minimum_y</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_x_position&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span>\n            <span class=\"n\">minimum_x</span> <span class=\"o\">-</span> <span class=\"n\">variation_x</span> <span class=\"o\">*</span> <span class=\"n\">percentage_offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_y_position&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span>\n            <span class=\"n\">minimum_y</span> <span class=\"o\">-</span> <span class=\"n\">variation_y</span> <span class=\"o\">*</span> <span class=\"n\">percentage_offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span>\n            <span class=\"n\">maximum_x</span> <span class=\"o\">-</span> <span class=\"n\">minimum_x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">variation_x</span> <span class=\"o\">*</span> <span class=\"n\">percentage_offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">[</span><span class=\"s2\">&quot;dielectric_width&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span>\n            <span class=\"n\">maximum_y</span> <span class=\"o\">-</span> <span class=\"n\">minimum_y</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">variation_y</span> <span class=\"o\">*</span> <span class=\"n\">percentage_offset</span> <span class=\"o\">/</span> <span class=\"mi\">100</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Stackup3D.resize_around_element\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Stackup3D.resize_around_element/#pyaedt.modeler.stackup_3d.Stackup3D.resize_around_element\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resize_around_element</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">,</span> <span class=\"n\">percentage_offset</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Resize the stackup around parametrized objects and make it parametrize.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        element : :class:`pyaedt.modeler.stackup_3d.Patch, :class:`pyaedt.modeler.stackup_3d.Trace</span>\n<span class=\"sd\">            Element around which the resizing is done.</span>\n<span class=\"sd\">        percentage_offset : float, optional</span>\n<span class=\"sd\">            Offset of resize. Value accepted are greater than 0. O.25 by default.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch = top.add_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_x_position</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span> <span class=\"o\">+</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">percentage_offset</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_y_position</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">position_y</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span> <span class=\"o\">+</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * (0.5 + &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">percentage_offset</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_length</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * (1 + &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">percentage_offset</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * 2)&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_width</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * (1 + &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">percentage_offset</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * 2)&quot;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommonObject</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;CommonObject Class in Stackup3D. This class must not be directly used.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span> <span class=\"o\">=</span> <span class=\"n\">application</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_number</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reference_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Coordinate system of the object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dielectric_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dielectric layer that the object belongs to.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signal_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Signal layer that the object belongs to.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Object name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;App object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aedt_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;PyAEDT object 3D.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Layer ID.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_number</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">material_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Material name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points_on_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Object bounding box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of [x,y] coordinate of the bounding box.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span>\n        <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]]</span>\n\n\n<div class=\"viewcode-block\" id=\"Patch\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Patch/#pyaedt.modeler.stackup_3d.Patch\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Patch</span><span class=\"p\">(</span><span class=\"n\">CommonObject</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Patch Class in Stackup3D. Create a parametrized patch. It is preferable to use the add_patch method</span>\n<span class=\"sd\">    in the class Layer3D than directly the class constructor.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    frequency : float, None</span>\n<span class=\"sd\">        The patch frequency, it is used in prediction formulas. If it is None, the patch frequency will be that of the</span>\n<span class=\"sd\">        layer or of the stackup.</span>\n<span class=\"sd\">    patch_width : float</span>\n<span class=\"sd\">        The patch width.</span>\n<span class=\"sd\">    signal_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The signal layer where the patch will be drawn.</span>\n<span class=\"sd\">    dielectric_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The dielectric layer between the patch and the ground layer. Its permittivity and thickness are used in</span>\n<span class=\"sd\">        prediction formulas.</span>\n<span class=\"sd\">    patch_length : float, None, optional</span>\n<span class=\"sd\">        The patch length. By default, it is None and so the length is calculated by prediction formulas.</span>\n<span class=\"sd\">    patch_position_x : float, optional</span>\n<span class=\"sd\">        Patch x position, by default it is 0.</span>\n<span class=\"sd\">    patch_position_y : float, optional</span>\n<span class=\"sd\">        Patch y position, by default it is 0.</span>\n<span class=\"sd\">    patch_name : str, optional</span>\n<span class=\"sd\">        Patch name, by  default &quot;patch&quot;.</span>\n<span class=\"sd\">    reference_system : str, None, optional</span>\n<span class=\"sd\">        Coordinate system of the patch. By default, None.</span>\n<span class=\"sd\">    axis : str, optional</span>\n<span class=\"sd\">        Patch length axis, by default &quot;X&quot;.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">    &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_patch = top.add_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">application</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n        <span class=\"n\">signal_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">dielectric_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;patch&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">CommonObject</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_frequency&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">frequency</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">frequency</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;The patch frequency must not be None.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_width&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">patch_width</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_x</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_position_x&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">patch_position_x</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_y</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_position_y&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">patch_position_y</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_z</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_material</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">material</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_number</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">number</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">patch_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_patch_thickness</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_application</span> <span class=\"o\">=</span> <span class=\"n\">application</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_permittivity&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">duplicated_material</span><span class=\"o\">.</span><span class=\"n\">permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">patch_length</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">patch_length</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">patch_length</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length_calcul</span>\n        <span class=\"k\">elif</span> <span class=\"n\">patch_length</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length_calcul</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_l_w</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_w_l</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_calcul</span>\n        <span class=\"k\">if</span> <span class=\"n\">reference_system</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">reference_system</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">axis</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_position_x&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_position_y-</span><span class=\"si\">{0}</span><span class=\"s2\">_width/2&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_position_x-</span><span class=\"si\">{0}</span><span class=\"s2\">_width/2&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_position_y&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">reference_system</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_coordinate_system</span><span class=\"p\">(</span>\n                <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_position_x&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">patch_name</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_position_y&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">patch_name</span><span class=\"p\">),</span>\n                    <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">axis</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-</span><span class=\"si\">{}</span><span class=\"s2\">_width/2&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">patch_name</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;-</span><span class=\"si\">{}</span><span class=\"s2\">_width/2&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">patch_name</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">patch_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_box</span><span class=\"p\">(</span>\n                <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">,</span>\n                <span class=\"n\">dimensions_list</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_length&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">patch_name</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_width&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">patch_name</span><span class=\"p\">),</span>\n                    <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">patch_name</span><span class=\"p\">,</span>\n                <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span>\n                <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">,</span>\n                <span class=\"n\">dimension_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">patch_name</span><span class=\"p\">,</span>\n                <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">assign_coating</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">blank_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">tool_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">patch_name</span><span class=\"p\">],</span> <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Model frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">substrate_thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Substrate thickness.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Width.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">position_x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Starting position X.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_x</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">position_y</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Starting position Y.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_y</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">permittivity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Permittivity.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_permittivity_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Permittivity calculation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_material</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">permittivity</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">effective_permittivity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Effective permittivity.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_effective_permittivity_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the patch effective permittivity and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;(substrat_permittivity + 1)/2 + (substrat_permittivity -</span>\n        <span class=\"c1\"># 1)/(2 * sqrt(1 + 12 * substrate_thickness/patch_width))&quot;</span>\n        <span class=\"n\">er</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_eff_permittivity_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;+ 1)/2 + (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;- 1)/(2 * sqrt(1 + 12 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;))&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_eff_permittivity&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_eff_permittivity_formula</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">added_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Added length calculation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_added_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the patch added length and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;0.412 * substrate_thickness * (patch_eff_permittivity + 0.3) * (patch_width/substrate_thickness + 0.264)&quot;</span>\n        <span class=\"c1\"># &quot; / ((patch_eff_permittivity - 0.258) * (patch_width/substrate_thickness + 0.813)) &quot;</span>\n\n        <span class=\"n\">er_e</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_added_length_formula</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;0.412 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 0.3) * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 0.264)/&quot;</span>\n            <span class=\"s2\">&quot;((&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - 0.258) * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 0.813))&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_added_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_added_length_formula</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wave_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Wave length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_wave_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the patch wave length and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;c0 * 1000/(patch_frequency * sqrt(patch_eff_permittivity))&quot;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">er_e</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_wave_length_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(c0 * 1000/(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;* sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)))mm&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_wave_length&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">patch_wave_length_formula</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the patch length and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;patch_wave_length / 2 - 2 * patch_added_length&quot;</span>\n        <span class=\"n\">d_l</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">lbd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_length_formula</span> <span class=\"o\">=</span> <span class=\"n\">lbd</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - 2 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">d_l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_length_formula</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Impedance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_l_w</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_w_l</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_impedance_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create NamedVariable containing the calculations of the patch impedance and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;45 * (patch_wave_length/patch_width * sqrt(patch_eff_permittivity)) ** 2&quot;</span>\n        <span class=\"c1\"># &quot;60 * patch_wave_length/patch_width * sqrt(patch_eff_permittivity)&quot;</span>\n        <span class=\"c1\"># &quot;90 * (patch_permittivity)**2/(patch_permittivity -1) * patch_length/patch_width</span>\n        <span class=\"n\">er_e</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">lbd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">er</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_impedance_formula_l_w</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;45 * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">lbd</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;* sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)) ** 2&quot;</span>\n        <span class=\"n\">patch_impedance_formula_w_l</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;60 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">lbd</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;* sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n        <span class=\"n\">patch_impedance_balanis_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;90 *&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;**2/(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1) * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_l_w</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_impedance_l_w&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_impedance_formula_l_w</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_w_l</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_impedance_w_l&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_impedance_formula_w_l</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_bal</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_impedance_bal&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_impedance_balanis_formula</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;The closer the ratio between wave length and the width is to 1,&quot;</span>\n            <span class=\"s2\">&quot; the less correct the impedance calculation is&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_l_w</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_w_l</span>\n\n<div class=\"viewcode-block\" id=\"Patch.create_lumped_port\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Patch.create_lumped_port/#pyaedt.modeler.stackup_3d.Patch.create_lumped_port\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">create_lumped_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reference_layer</span><span class=\"p\">,</span> <span class=\"n\">opposite_side</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">port_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a parametrized lumped port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        reference_layer : class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">            The reference layer, in most cases the ground layer.</span>\n<span class=\"sd\">        opposite_side : bool, optional</span>\n<span class=\"sd\">            Change the side where the port is created.</span>\n<span class=\"sd\">        port_name : str, optional</span>\n<span class=\"sd\">            Name of the lumped port.</span>\n<span class=\"sd\">        axisdir : int or :class:`pyaedt.application.Analysis.Analysis.AxisDir`, optional</span>\n<span class=\"sd\">            Position of the port. It should be one of the values for ``Application.AxisDir``,</span>\n<span class=\"sd\">            which are: ``XNeg``, ``YNeg``, ``ZNeg``, ``XPos``, ``YPos``, and ``ZPos``.</span>\n<span class=\"sd\">            The default is ``Application.AxisDir.XNeg``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch = top.add_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch.create_lumped_port(gnd)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">string_position_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"n\">opposite_side</span><span class=\"p\">:</span>\n            <span class=\"n\">string_position_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">string_position_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_y</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span>\n        <span class=\"n\">string_position_z</span> <span class=\"o\">=</span> <span class=\"n\">reference_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">string_width</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">string_length</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; + &quot;</span>\n            <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">reference_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span>\n            <span class=\"n\">csPlane</span><span class=\"o\">=</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">YZ</span><span class=\"p\">,</span>\n            <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">string_position_x</span><span class=\"p\">,</span> <span class=\"n\">string_position_y</span><span class=\"p\">,</span> <span class=\"n\">string_position_z</span><span class=\"p\">],</span>\n            <span class=\"n\">dimension_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">string_width</span><span class=\"p\">,</span> <span class=\"n\">string_length</span><span class=\"p\">],</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_port&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Modal&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">axisdir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">AxisDir</span><span class=\"o\">.</span><span class=\"n\">ZPos</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">create_lumped_port_to_sheet</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">portname</span><span class=\"o\">=</span><span class=\"n\">port_name</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"n\">axisdir</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Terminal&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">create_lumped_port_to_sheet</span><span class=\"p\">(</span>\n                <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">portname</span><span class=\"o\">=</span><span class=\"n\">port_name</span><span class=\"p\">,</span> <span class=\"n\">reference_object_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">reference_layer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">port</span></div>\n\n<div class=\"viewcode-block\" id=\"Patch.quarter_wave_feeding_line\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Patch.quarter_wave_feeding_line/#pyaedt.modeler.stackup_3d.Patch.quarter_wave_feeding_line\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">quarter_wave_feeding_line</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">impedance_to_adapt</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Trace to feed the patch. The trace length is the quarter wavelength, and this width is calculated</span>\n<span class=\"sd\">        to return the desired impedance.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        impedance_to_adapt : float, optional</span>\n<span class=\"sd\">            Impedance the feeding line must return. By default 50 Ohms.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.Trace`</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch = top.add_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_feeding_line = my_patch.quarter_wave_feeding_line()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.dielectric_x_position.expression = my_stackup.dielectric_x_position.expression +</span>\n<span class=\"sd\">        &gt;&gt;&gt; &quot; - &quot; + my_feeding_line.length.name</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.dielectric_length.expression = my_stackup.dielectric_length.expression +</span>\n<span class=\"sd\">        &gt;&gt;&gt; &quot; + &quot; + my_feeding_line.length.name</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">string_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">impedance_to_adapt</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;*&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance_bal</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n        <span class=\"n\">feeding_line</span> <span class=\"o\">=</span> <span class=\"n\">Trace</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n            <span class=\"n\">string_formula</span><span class=\"p\">,</span>\n            <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal_layer</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_layer</span><span class=\"p\">,</span>\n            <span class=\"n\">line_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">line_electrical_length</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span>\n            <span class=\"n\">line_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">line_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">line_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_feeding_line&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reference_system</span><span class=\"p\">,</span>\n            <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">feeding_line</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-&quot;</span> <span class=\"o\">+</span> <span class=\"n\">feeding_line</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"n\">feeding_line</span></div>\n\n<div class=\"viewcode-block\" id=\"Patch.set_optimal_width\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Patch.set_optimal_width/#pyaedt.modeler.stackup_3d.Patch.set_optimal_width\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">set_optimal_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the expression of the NamedVariable corresponding to the patch width, to an optimal expression.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch = top.add_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_patch.set_optimal_width()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">er</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(c0 * 1000/(2 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * sqrt((&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 1)/2)))mm&quot;</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Trace\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Trace/#pyaedt.modeler.stackup_3d.Trace\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Trace</span><span class=\"p\">(</span><span class=\"n\">CommonObject</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Trace Class in Stackup3D. Create a parametrized trace. It is preferable to use the add_trace method</span>\n<span class=\"sd\">    in the class Layer3D than directly the class constructor.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    frequency : float, None</span>\n<span class=\"sd\">        The line frequency, it is used in prediction formulas. If it is None, the line frequency will be that of the</span>\n<span class=\"sd\">        layer or of the stackup.</span>\n<span class=\"sd\">    line_width : float, None</span>\n<span class=\"sd\">        The line width. If it is None, it will calculate it from characteristic impedance of the line.</span>\n<span class=\"sd\">    line_impedance : float</span>\n<span class=\"sd\">        The characteristic impedance of the line. If a line width is entered by the user, the characteristic impedance</span>\n<span class=\"sd\">        will be calculated from it.</span>\n<span class=\"sd\">    signal_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The signal layer where the line will be drawn.</span>\n<span class=\"sd\">    dielectric_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The dielectric layer between the line and the ground layer. Its permittivity and thickness are used in</span>\n<span class=\"sd\">        prediction formulas.</span>\n<span class=\"sd\">    line_electrical_length : float, None, optional</span>\n<span class=\"sd\">        The ratio between the line length and the wavelength in degree. By default 90 which is corresponding</span>\n<span class=\"sd\">        to the quarter of the wavelength. If it is None, it will be directly calculated from the line length entered</span>\n<span class=\"sd\">        by the user.</span>\n<span class=\"sd\">    line_length : float, None, optional</span>\n<span class=\"sd\">        The line length. By default, it is None and so the length is calculated by prediction formulas according to the</span>\n<span class=\"sd\">        electrical length.</span>\n<span class=\"sd\">    line_position_x : float, optional</span>\n<span class=\"sd\">        Line x position, by default it is 0.</span>\n<span class=\"sd\">    line_position_y : float, optional</span>\n<span class=\"sd\">        Line y position, by default it is 0.</span>\n<span class=\"sd\">    line_name : str, optional</span>\n<span class=\"sd\">        Line name, by  default &quot;line&quot;.</span>\n<span class=\"sd\">    reference_system : str, None, optional</span>\n<span class=\"sd\">        Coordinate system of the line. By default, None.</span>\n<span class=\"sd\">    axis : str, optional</span>\n<span class=\"sd\">        Line length axis, by default &quot;X&quot;.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss(new_desktop_session=True)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">    &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_trace = top.add_trace(line_width=2.5, line_length=22)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.resize_around_element(my_trace)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">application</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"n\">line_width</span><span class=\"p\">,</span>\n        <span class=\"n\">line_impedance</span><span class=\"p\">,</span>\n        <span class=\"n\">signal_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">dielectric_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">line_electrical_length</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span>\n        <span class=\"n\">line_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">line_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">line_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">line_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;line&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">CommonObject</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_frequency&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">frequency</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">stackup</span><span class=\"o\">.</span><span class=\"n\">frequency</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_x</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_position_x&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">line_position_x</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_y</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_position_y&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">line_position_y</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_z</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_material</span> <span class=\"o\">=</span> <span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">material</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_material_name</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_number</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">number</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">line_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_line_thickness</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_axis</span> <span class=\"o\">=</span> <span class=\"n\">axis</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_permittivity&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">duplicated_material</span><span class=\"o\">.</span><span class=\"n\">permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_width</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_width</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_width&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">line_width</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length_calcul</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_electrical_length</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_electrical_length</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                    <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_elec_length&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">line_electrical_length</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length_calcul</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_length</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_length</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                    <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">line_length</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length_calcul</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;line_length must be a float.&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_h_w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_calcul</span>\n        <span class=\"k\">elif</span> <span class=\"n\">line_width</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_charac_impedance_h_w&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">line_impedance</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length_calcul</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length_calcul</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_electrical_length</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_electrical_length</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                    <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_elec_length&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">line_electrical_length</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length_calcul</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_length</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line_length</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n                    <span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">line_length</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length_calcul</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;line_length must be a float.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">reference_system</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">reference_system</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">axis</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">_position_x&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_y</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span><span class=\"p\">,</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_position_y&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">reference_system</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_coordinate_system</span><span class=\"p\">(</span>\n                <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_position_x&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_position_y&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">axis</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;-&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">line_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_box</span><span class=\"p\">(</span>\n                <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">,</span>\n                <span class=\"n\">dimensions_list</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_length&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">line_name</span><span class=\"p\">,</span>\n                <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span>\n                <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">,</span>\n                <span class=\"n\">dimension_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_length&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">line_name</span><span class=\"p\">,</span>\n                <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">material_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">blank_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">tool_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">line_name</span><span class=\"p\">],</span> <span class=\"n\">keep_originals</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">substrate_thickness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Substrate Thickness.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Width.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span>\n        <span class=\"k\">elif</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width_h_w</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width_h_w</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width_h_w</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Width when the substrat thickness is two times upper than the width.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width_w_h</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Width when the width is two times upper than substrat thickness.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_width_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create NamedVariable containing the calculations of the line width and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># if w/h &lt; 2 :</span>\n        <span class=\"c1\"># a = z * sqrt((er + 1) / 2) / 60 + (0.23 + 0.11 / er) * (er - 1) / (er + 1)</span>\n        <span class=\"c1\"># w/h = 8 * exp(a) / (exp(2 * a) - 2)</span>\n        <span class=\"c1\"># else w/h &gt; 2 :</span>\n        <span class=\"c1\"># b = 377 * pi / (2 * z * sqrt(er))</span>\n        <span class=\"c1\"># w/h = 2 * (b - 1 - log(2 * b - 1) * (er - 1) * (log(b - 1) + 0.39 - 0.61 / er) / (2 * er)) / pi</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">er</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">a_formula</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;(&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">z</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; * sqrt((&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; + 1)/2)/60 + (0.23 + 0.11/&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; * (&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;- 1)/(&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;+ 1))&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">w_div_by_h_inf_2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(8 * exp(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">a_formula</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)/(exp(2 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">a_formula</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;) - 2))&quot;</span>\n\n        <span class=\"n\">b_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(377 * pi/(2 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">z</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * &quot;</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)))&quot;</span>\n        <span class=\"n\">w_div_by_h_sup_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;(2 * (&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">b_formula</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1 - log(2 * &quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">b_formula</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1) * (&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1) * (log(&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">b_formula</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1) + 0.39 - 0.61/&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;)/(2 * &quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;))/pi)&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">w_formula_inf</span> <span class=\"o\">=</span> <span class=\"n\">w_div_by_h_inf_2</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span>\n        <span class=\"n\">w_formula_sup</span> <span class=\"o\">=</span> <span class=\"n\">w_div_by_h_sup_2</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_width_h_w&quot;</span><span class=\"p\">,</span> <span class=\"n\">w_formula_inf</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_width&quot;</span><span class=\"p\">,</span> <span class=\"n\">w_formula_sup</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width_h_w</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">position_x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Starting Position X.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_x</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">position_y</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Starting Position Y.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_position_y</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">permittivity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Permittivity.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_permittivity_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Permittivity Calculation.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_material</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">permittivity</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">added_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Added Length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_added_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the line added length and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;0.412 * substrate_thickness * (patch_eff_permittivity + 0.3) * (patch_width/substrate_thickness + 0.264)&quot;</span>\n        <span class=\"c1\"># &quot; / ((patch_eff_permittivity - 0.258) * (patch_width/substrate_thickness + 0.813)) &quot;</span>\n\n        <span class=\"n\">er_e</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">effective_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_added_length_formula</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;0.412 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 0.3) * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 0.264)/&quot;</span>\n            <span class=\"s2\">&quot;((&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - 0.258) * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 0.813))&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_added_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_added_length_formula</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the line length and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">d_l</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">lbd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">e_l</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">line_length_formula</span> <span class=\"o\">=</span> <span class=\"n\">lbd</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;* (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">e_l</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/360)&quot;</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - 2 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">d_l</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">line_length_formula</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">charac_impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Characteristic Impedance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_charac_impedance_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create NamedVariable containing the calculations of the line characteristic impedance and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># if w / h &gt; 1: 60 * log(8 * h / w + w / (4 * h)) / sqrt(er_e)</span>\n        <span class=\"c1\"># if w / h &lt; 1: 120 * pi / (sqrt(er_e) * (w / h + 1.393 + 0.667 * log(w / h + 1.444)))</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">er_e</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">effective_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">charac_impedance_formula_w_h</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;60 * log(8 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + &quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/(4 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;))/sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">charac_impedance_formula_h_w</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;120 * pi / (sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;) * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;+ 1.393 + 0.667 * log(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 1.444)))&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_w_h</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_charac_impedance_w_h&quot;</span><span class=\"p\">,</span> <span class=\"n\">charac_impedance_formula_w_h</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_h_w</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_charac_impedance_h_w&quot;</span><span class=\"p\">,</span> <span class=\"n\">charac_impedance_formula_h_w</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charac_impedance_h_w</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">effective_permittivity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Effective Permittivity.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">effective_permittivity_w_h</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Effective Permittivity when width is upper than dielectric thickness.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">effective_permittivity_h_w</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Effective Permittivity when dielectric thickness is upper than width.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_effective_permittivity_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create NamedVariable containing the calculations of the line effective permittivity and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;(substrat_permittivity + 1)/2 +</span>\n        <span class=\"c1\"># (substrat_permittivity - 1)/(2 * sqrt(1 + 12 * substrate_thickness/patch_width))&quot;</span>\n        <span class=\"c1\">#</span>\n        <span class=\"n\">er</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_substrate_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_eff_permittivity_formula_w_h</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 1)/2 + (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1)/(2 * sqrt(1 + 12 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">w</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;))&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">patch_eff_permittivity_formula_h_w</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;(&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; + 1)/2 + (&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">er</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - 1)/2 * ((1 + 12 * &quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">h</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">w</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;)**(-0.5) + 0.04 * (1 - 12 * &quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">w</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">h</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;)**2)&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_eff_permittivity_w_h&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_eff_permittivity_formula_w_h</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_eff_permittivity&quot;</span><span class=\"p\">,</span> <span class=\"n\">patch_eff_permittivity_formula_h_w</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_w_h</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_effective_permittivity_h_w</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wave_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Wave Length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_wave_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the line wavelength and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># &quot;c0 * 1000/(patch_frequency * sqrt(patch_eff_permittivity))&quot;</span>\n        <span class=\"c1\"># TODO it is currently only available for mm</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">er_e</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">effective_permittivity</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">patch_wave_length_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(c0 * 1000/(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;* sqrt(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">er_e</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)))mm&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_wave_length&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">patch_wave_length_formula</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">electrical_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Electrical Length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_electrical_length_calcul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a NamedVariable containing the calculation of the line electrical length and return it.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.stackup_3d.NamedVariable`</span>\n<span class=\"sd\">            Variable Object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">lbd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wave_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">d_l</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_added_length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">elec_length_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;360 * (&quot;</span> <span class=\"o\">+</span> <span class=\"n\">length</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + 2 * &quot;</span> <span class=\"o\">+</span> <span class=\"n\">d_l</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">lbd</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span> <span class=\"o\">=</span> <span class=\"n\">NamedVariable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_elec_length&quot;</span><span class=\"p\">,</span> <span class=\"n\">elec_length_formula</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_electrical_length</span>\n\n<div class=\"viewcode-block\" id=\"Trace.create_lumped_port\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Trace.create_lumped_port/#pyaedt.modeler.stackup_3d.Trace.create_lumped_port\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">create_lumped_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reference_layer</span><span class=\"p\">,</span> <span class=\"n\">opposite_side</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">port_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a parametrized lumped port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        reference_layer : class:`pyaedt.modeler.stackup_3d.Layer3D</span>\n<span class=\"sd\">            The reference layer, in most cases the ground layer.</span>\n<span class=\"sd\">        opposite_side : bool, optional</span>\n<span class=\"sd\">            Change the side where the port is created.</span>\n<span class=\"sd\">        port_name : str, optional</span>\n<span class=\"sd\">            Name of the lumped port.</span>\n<span class=\"sd\">        axisdir : int or :class:`pyaedt.application.Analysis.Analysis.AxisDir`, optional</span>\n<span class=\"sd\">            Position of the port. It should be one of the values for ``Application.AxisDir``,</span>\n<span class=\"sd\">            which are: ``XNeg``, ``YNeg``, ``ZNeg``, ``XPos``, ``YPos``, and ``ZPos``.</span>\n<span class=\"sd\">            The default is ``Application.AxisDir.XNeg``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss(new_desktop_session=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_trace = top.add_trace(line_width=2.5, line_length=90, is_electrical_length=True)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_stackup.resize_around_element(my_trace)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_trace.create_lumped_port(gnd)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_trace.create_lumped_port(gnd, opposite_side=True)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">string_position_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"n\">opposite_side</span><span class=\"p\">:</span>\n            <span class=\"n\">string_position_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">string_position_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position_y</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/2&quot;</span>\n        <span class=\"n\">string_position_z</span> <span class=\"o\">=</span> <span class=\"n\">reference_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">string_width</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">string_length</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; + &quot;</span>\n            <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; - &quot;</span>\n            <span class=\"o\">+</span> <span class=\"n\">reference_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span>\n            <span class=\"n\">csPlane</span><span class=\"o\">=</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">YZ</span><span class=\"p\">,</span>\n            <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">string_position_x</span><span class=\"p\">,</span> <span class=\"n\">string_position_y</span><span class=\"p\">,</span> <span class=\"n\">string_position_z</span><span class=\"p\">],</span>\n            <span class=\"n\">dimension_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">string_width</span><span class=\"p\">,</span> <span class=\"n\">string_length</span><span class=\"p\">],</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_port&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Modal&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">axisdir</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">axisdir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">AxisDir</span><span class=\"o\">.</span><span class=\"n\">ZPos</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">create_lumped_port_to_sheet</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">portname</span><span class=\"o\">=</span><span class=\"n\">port_name</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"n\">axisdir</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Terminal&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">create_lumped_port_to_sheet</span><span class=\"p\">(</span>\n                <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">portname</span><span class=\"o\">=</span><span class=\"n\">port_name</span><span class=\"p\">,</span> <span class=\"n\">reference_object_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">reference_layer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">port</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.stackup_3d.Polygon/#pyaedt.modeler.stackup_3d.Polygon\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Polygon</span><span class=\"p\">(</span><span class=\"n\">CommonObject</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Polygon Class in Stackup3D. It is preferable to use the add_polygon method in the class Layer3D than directly</span>\n<span class=\"sd\">    the class constructor.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss`</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    point_list : list</span>\n<span class=\"sd\">        Points list of [x,y] coordinates.</span>\n<span class=\"sd\">    signal_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The signal layer where the line will be drawn.</span>\n<span class=\"sd\">    poly_name : str, optional</span>\n<span class=\"sd\">            Polygon name. The default is ``poly``.</span>\n<span class=\"sd\">    mat_name : str, optional</span>\n<span class=\"sd\">        The polygon material name.</span>\n<span class=\"sd\">    is_void : bool, optional</span>\n<span class=\"sd\">            Whether the polygon is a void. The default is ``False``.</span>\n<span class=\"sd\">            On ground layers, it will act opposite of the Boolean value because the ground</span>\n<span class=\"sd\">            is negative.</span>\n<span class=\"sd\">    reference_system : str, None, optional</span>\n<span class=\"sd\">        Coordinate system of the polygon. By default, None.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss(new_desktop_session=True)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">    &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;, thickness=None)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;, thickness=None)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_polygon = top.add_polygon([[0, 0], [0, 1], [1, 1], [1, 0]])</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.dielectric_x_position = &quot;2mm&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.dielectric_y_position = &quot;2mm&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.dielectric_length = &quot;-3mm&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.dielectric_width = &quot;-3mm&quot;</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">application</span><span class=\"p\">,</span>\n        <span class=\"n\">point_list</span><span class=\"p\">,</span>\n        <span class=\"n\">signal_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">poly_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;poly&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">mat_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">is_void</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">CommonObject</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">application</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_void</span> <span class=\"o\">=</span> <span class=\"n\">is_void</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layer_name</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span> <span class=\"o\">=</span> <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">application</span>\n        <span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">point_list</span><span class=\"p\">:</span>\n            <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n                    <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n                    <span class=\"n\">signal_layer</span><span class=\"o\">.</span><span class=\"n\">elevation</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">reference_system</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">reference_system</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">reference_system</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_coordinate_system</span><span class=\"p\">(</span>\n                <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">reference_cs</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">poly_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"n\">poly_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_system</span> <span class=\"o\">=</span> <span class=\"n\">poly_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_CS&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span> <span class=\"o\">=</span> <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span>\n            <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">pts</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">poly_name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">mat_name</span><span class=\"p\">,</span> <span class=\"n\">cover_surface</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span><span class=\"p\">:</span>\n            <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">sweep_along_vector</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thickness</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">draft_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Natural&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">set_working_coordinate_system</span><span class=\"p\">(</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points_on_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Object Bounding Box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of [x,y] coordinate of bounding box.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_object</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span>\n        <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]]</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MachineLearningPatch</span><span class=\"p\">(</span><span class=\"n\">Patch</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;MachineLearningPatch Class in Stackup3D. Create an antenna whose length is predicted by a</span>\n<span class=\"sd\">    machine learning algorithm.</span>\n\n<span class=\"sd\">    The machine learning algorithm determines the length according to resonant frequency,</span>\n<span class=\"sd\">    patch width, substrat thickness and relative permittivity. The other parameter have no or only a minor influence.</span>\n<span class=\"sd\">    We can consider that the patch thickness has no influence as long as it is lower than 50 um,</span>\n<span class=\"sd\">    for machine learning training is set to 35 um. The patch conductivity and other dielectric properties are</span>\n<span class=\"sd\">    respectively those of copper and duroid (tm) for the machine learning training, but predictions work</span>\n<span class=\"sd\">    regardless of the dielectric or the conductor. The predictions are, in the most of cases, better than the</span>\n<span class=\"sd\">    predictions with formula used in the class Patch. The machine learning model used, is Support Vector Regression,</span>\n<span class=\"sd\">    it is a classic model in the non-linear prediction, it can be used for other non-linear application.</span>\n<span class=\"sd\">    Two models were created, one from 0.1 GHz to 1 GHz and another from 1 GHz to 10 GHz. The example of the creation of</span>\n<span class=\"sd\">    these models is available in a PyAEDT example named Machine_learning_applied_to_Patch. The two databases and models</span>\n<span class=\"sd\">    are available in PyAEDT in misc.</span>\n\n<span class=\"sd\">    It is preferable to use the ml_patch method in the class Layer3D than directly the class constructor.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : :class:`pyaedt.hfss.Hfss`</span>\n<span class=\"sd\">        HFSS design or project where the variable is to be created.</span>\n<span class=\"sd\">    frequency : float, None</span>\n<span class=\"sd\">        The patch frequency, it is used in prediction formulas. If it is None, the patch frequency will be that of the</span>\n<span class=\"sd\">        layer or of the stackup. From 0.1 to 10 GHz.</span>\n<span class=\"sd\">    patch_width : float</span>\n<span class=\"sd\">        The patch width. From O.5 to 1.5 of the optimal width value : c0 * 1000/(2 * f * sqrt((er  + 1)/2))</span>\n<span class=\"sd\">    signal_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The signal layer where the patch will be drawn.</span>\n<span class=\"sd\">    dielectric_layer : :class:`pyaedt.modeler.stackup_3d.Layer3D`</span>\n<span class=\"sd\">        The dielectric layer between the patch and the ground layer. Its permittivity and thickness are used in</span>\n<span class=\"sd\">        prediction formulas. Thickness must be from 0.003 to 0.05 of the wavelength in vacuum and relative permittivity</span>\n<span class=\"sd\">        from 1 to 12.</span>\n<span class=\"sd\">    patch_position_x : float, optional</span>\n<span class=\"sd\">        Patch x position, by default it is 0.</span>\n<span class=\"sd\">    patch_position_y : float, optional</span>\n<span class=\"sd\">        Patch y position, by default it is 0.</span>\n<span class=\"sd\">    patch_name : str, optional</span>\n<span class=\"sd\">        Patch name, by  default &quot;patch&quot;.</span>\n<span class=\"sd\">    reference_system : str, None, optional</span>\n<span class=\"sd\">        Coordinate system of the patch. By default, None.</span>\n<span class=\"sd\">    axis : str, optional</span>\n<span class=\"sd\">        Patch length axis, by default ``&quot;X&quot;``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.modeler.stackup_3d import Stackup3D</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup = Stackup3D(hfss, 2.5e9)</span>\n<span class=\"sd\">    &gt;&gt;&gt; gnd = my_stackup.add_ground_layer(&quot;gnd&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.add_dielectric_layer(&quot;diel1&quot;, thickness=1.5, material=&quot;Duroid (tm)&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; top = my_stackup.add_signal_layer(&quot;top&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_patch = top.ml_patch(frequency=None, patch_width=51, patch_name=&quot;MLPatch&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_stackup.resize_around_element(my_patch)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">application</span><span class=\"p\">,</span>\n        <span class=\"n\">frequency</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n        <span class=\"n\">signal_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">dielectric_layer</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;patch&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;X&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">Patch</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">application</span><span class=\"p\">,</span>\n            <span class=\"n\">frequency</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_width</span><span class=\"p\">,</span>\n            <span class=\"n\">signal_layer</span><span class=\"p\">,</span>\n            <span class=\"n\">dielectric_layer</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_position_x</span><span class=\"o\">=</span><span class=\"n\">patch_position_x</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_position_y</span><span class=\"o\">=</span><span class=\"n\">patch_position_y</span><span class=\"p\">,</span>\n            <span class=\"n\">patch_name</span><span class=\"o\">=</span><span class=\"n\">patch_name</span><span class=\"p\">,</span>\n            <span class=\"n\">reference_system</span><span class=\"o\">=</span><span class=\"n\">reference_system</span><span class=\"p\">,</span>\n            <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">axis</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">predict_length</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">predict_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">joblib</span>\n            <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span><span class=\"s2\">&quot;joblib package is needed to run ML.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n            <span class=\"n\">path_folder</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">path_file</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">training_file</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"mf\">1e9</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">&gt;=</span> <span class=\"mf\">1e8</span><span class=\"p\">:</span>\n                <span class=\"n\">training_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;misc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;patch_svr_model_100MHz_1GHz.joblib&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"mf\">1e10</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1e9</span><span class=\"p\">:</span>\n                <span class=\"n\">training_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;misc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;patch_svr_model_1GHz_10GHz.joblib&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;This ML algorithm can only predict patch antennas from 100 MHz to 10 GHz.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">training_file</span><span class=\"p\">:</span>\n                <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">joblib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">training_file</span><span class=\"p\">)</span>\n                <span class=\"n\">list_for_array</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">,</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">,</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_permittivity</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">,</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dielectric_layer</span><span class=\"o\">.</span><span class=\"n\">thickness</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">,</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">]</span>\n                <span class=\"n\">array_for_prediction</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">list_for_array</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n                <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">array_for_prediction</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Machine learning algorithm aren&#39;t covered in IronPython.&quot;</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/stackup_3d", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}