{"parents": [{"link": "../../", "title": "Module code"}], "title": "pyaedt.hfss3dlayout", "body": "<h1>Source code for pyaedt.hfss3dlayout</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;This module contains the ``Hfss3dLayout`` class.&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">fnmatch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.Analysis3DLayout</span> <span class=\"kn\">import</span> <span class=\"n\">FieldAnalysis3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">parse_excitation_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">tech_to_control_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">BoundaryObject3dLayout</span>\n\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout/#pyaedt.hfss3dlayout.Hfss3dLayout\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Hfss3dLayout</span><span class=\"p\">(</span><span class=\"n\">FieldAnalysis3DLayout</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Provides the HFSS 3D Layout application interface.</span>\n\n<span class=\"sd\">    This class inherits all objects that belong to HFSS 3D Layout, including EDB</span>\n<span class=\"sd\">    API queries.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    projectname : str, optional</span>\n<span class=\"sd\">        Name of the project to select or the full path to the project</span>\n<span class=\"sd\">        or AEDTZ archive to open or the path to the ``aedb`` folder or</span>\n<span class=\"sd\">        ``edb.def`` file. The default is ``None``, in which case an</span>\n<span class=\"sd\">        attempt is made to get an active project. If no projects are present,</span>\n<span class=\"sd\">        an empty project is created.</span>\n<span class=\"sd\">    designname : str, optional</span>\n<span class=\"sd\">        Name of the design to select. The default is ``None``, in</span>\n<span class=\"sd\">        which case an attempt is made to get an active design. If no</span>\n<span class=\"sd\">        designs are present, an empty design is created.</span>\n<span class=\"sd\">    solution_type : str, optional</span>\n<span class=\"sd\">        Solution type to apply to the design. The default is</span>\n<span class=\"sd\">        ``None``, in which case the default type is applied.</span>\n<span class=\"sd\">    setup_name : str, optional</span>\n<span class=\"sd\">        Name of the setup to use as the nominal. The default is</span>\n<span class=\"sd\">        ``None``, in which case the active setup is used or</span>\n<span class=\"sd\">        nothing is used.</span>\n<span class=\"sd\">    specified_version : str, optional</span>\n<span class=\"sd\">        Version of AEDT to use. The default is ``None``, in which case</span>\n<span class=\"sd\">        the active version or latest installed version is used.</span>\n<span class=\"sd\">    non_graphical : bool, optional</span>\n<span class=\"sd\">        Whether to launch AEDT in non-graphical mode. The default</span>\n<span class=\"sd\">        is ``False```, in which case AEDT is launched in graphical mode.</span>\n<span class=\"sd\">        This parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    new_desktop_session : bool, optional</span>\n<span class=\"sd\">        Whether to launch an instance of AEDT in a new thread, even if</span>\n<span class=\"sd\">        another instance of the ``specified_version`` is active on the</span>\n<span class=\"sd\">        machine. The default is ``True``.</span>\n<span class=\"sd\">    close_on_exit : bool, optional</span>\n<span class=\"sd\">        Whether to release AEDT on exit. The default is ``False``.</span>\n<span class=\"sd\">    student_version : bool, optional</span>\n<span class=\"sd\">        Whether to open the AEDT student version. The default is ``False``.</span>\n<span class=\"sd\">    machine : str, optional</span>\n<span class=\"sd\">        Machine name to connect the oDesktop session to. This works only in 2022 R2 or later.</span>\n<span class=\"sd\">        The remote server must be up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">        If the machine is `&quot;localhost&quot;`. the server also starts if not present.</span>\n<span class=\"sd\">    port : int, optional</span>\n<span class=\"sd\">        Port number on which to start the oDesktop communication on an already existing server.</span>\n<span class=\"sd\">        This parameter is ignored when creating a new server. It works only in 2022 R2 or later.</span>\n<span class=\"sd\">        The remote server must be up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">    aedt_process_id : int, optional</span>\n<span class=\"sd\">        Process ID for the instance of AEDT to point PyAEDT at. The default is</span>\n<span class=\"sd\">        ``None``. This parameter is only used when ``new_desktop_session = False``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an ``Hfss3dLayout`` object and connect to an existing HFSS</span>\n<span class=\"sd\">    design or create a new HFSS design if one does not exist.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss3dLayout()</span>\n\n<span class=\"sd\">    Create an ``Hfss3dLayout`` object and link to a project named</span>\n<span class=\"sd\">    ``projectname``. If this project does not exist, create one with</span>\n<span class=\"sd\">    this name.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss3dLayout(projectname)</span>\n\n<span class=\"sd\">    Create an ``Hfss3dLayout`` object and link to a design named</span>\n<span class=\"sd\">    ``designname`` in a project named ``projectname``.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss3dLayout(projectname,designame)</span>\n\n<span class=\"sd\">    Create an ``Hfss3dLayout`` object and open the specified project.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss3dLayout(&quot;myfile.aedt&quot;)</span>\n\n<span class=\"sd\">    Create an AEDT 2021 R1 object and then create a</span>\n<span class=\"sd\">    ``Hfss3dLayout`` object and open the specified project.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss3dLayout(specified_version=&quot;2021.2&quot;, projectname=&quot;myfile.aedt&quot;)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">FieldAnalysis3DLayout</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_edge_port\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_edge_port/#pyaedt.hfss3dlayout.Hfss3dLayout.create_edge_port\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_edge_port</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">primivitivename</span><span class=\"p\">,</span>\n        <span class=\"n\">edgenumber</span><span class=\"p\">,</span>\n        <span class=\"n\">iscircuit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">iswave</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">wave_horizontal_extension</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">wave_vertical_extension</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"n\">wave_launcher</span><span class=\"o\">=</span><span class=\"s2\">&quot;1mm&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">ref_primitive_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ref_edge_number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create an edge port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        primivitivename : str or :class:`pyaedt.modeler.object3dlayout.Line3dLayout`</span>\n<span class=\"sd\">            Name of the primitive to create the edge port on.</span>\n<span class=\"sd\">        edgenumber :</span>\n<span class=\"sd\">            Edge number to create the edge port on.</span>\n<span class=\"sd\">        iscircuit : bool, optional</span>\n<span class=\"sd\">            Whether the edge port is a circuit port. The default is ``False``.</span>\n<span class=\"sd\">        iswave : bool, optional</span>\n<span class=\"sd\">            Whether the edge port is a wave port. The default is ``False``.</span>\n<span class=\"sd\">        wave_horizontal_extension : float, optional</span>\n<span class=\"sd\">            Horizontal port extension factor. The default is `5`.</span>\n<span class=\"sd\">        wave_vertical_extension : float, optional</span>\n<span class=\"sd\">            Vertical port extension factor. The default is `5`.</span>\n<span class=\"sd\">        wave_launcher : str, optional</span>\n<span class=\"sd\">            PEC (perfect electrical conductor) launcher size with units. The</span>\n<span class=\"sd\">            default is `&quot;1mm&quot;`.</span>\n<span class=\"sd\">        ref_primitive_name : str, optional</span>\n<span class=\"sd\">            Name of the reference primitive to place negative edge port terminal.</span>\n<span class=\"sd\">            The default is ``None``.</span>\n<span class=\"sd\">        ref_edge_number : str, int</span>\n<span class=\"sd\">            Edge number of reference primitive. The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n<span class=\"sd\">            Port objcet port when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEdgePort</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">primivitivename</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">primivitivename</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">listp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateEdgePort</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;et:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;prim:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">primivitivename</span><span class=\"p\">,</span> <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">edgenumber</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;circuit:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">iscircuit</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;btype:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">listnew</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">listnew</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">listp</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ref_primitive_name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">AddRefPort</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;et:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;prim:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">ref_primitive_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">ref_edge_number</span><span class=\"p\">]],</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">iswave</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                    <span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n                    <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;HFSS Type&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"s2\">&quot;Wave&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">property_tab</span><span class=\"o\">=</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                    <span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n                    <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Horizontal Extent Factor&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wave_horizontal_extension</span><span class=\"p\">),</span>\n                    <span class=\"n\">property_tab</span><span class=\"o\">=</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;Vertical Extent Factor&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetProperties</span><span class=\"p\">(</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n                <span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                        <span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n                        <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Vertical Extent Factor&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wave_vertical_extension</span><span class=\"p\">),</span>\n                        <span class=\"n\">property_tab</span><span class=\"o\">=</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                    <span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>\n                    <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;PEC Launch Width&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wave_launcher</span><span class=\"p\">),</span>\n                    <span class=\"n\">property_tab</span><span class=\"o\">=</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_port_info</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_wave_port\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_wave_port/#pyaedt.hfss3dlayout.Hfss3dLayout.create_wave_port\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_wave_port</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">primivitive_name</span><span class=\"p\">,</span>\n        <span class=\"n\">edge_number</span><span class=\"p\">,</span>\n        <span class=\"n\">wave_horizontal_extension</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">wave_vertical_extension</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"n\">wave_launcher</span><span class=\"o\">=</span><span class=\"s2\">&quot;1mm&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a single-ended wave port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        primivitive_name : str</span>\n<span class=\"sd\">            Name of the primitive to create the edge port on.</span>\n<span class=\"sd\">        edge_number : int</span>\n<span class=\"sd\">            Edge number to create the edge port on.</span>\n<span class=\"sd\">        wave_horizontal_extension : float, optional</span>\n<span class=\"sd\">            Horizontal port extension factor. The default is ``5``.</span>\n<span class=\"sd\">        wave_vertical_extension : float, optional</span>\n<span class=\"sd\">            Vertical port extension factor. The default is ``5``.</span>\n<span class=\"sd\">        wave_launcher : str, optional</span>\n<span class=\"sd\">            PEC (perfect electrical conductor) launcher size with units. The</span>\n<span class=\"sd\">            default is ``&quot;1mm&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n<span class=\"sd\">            Port objcet port when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">port_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_edge_port</span><span class=\"p\">(</span>\n            <span class=\"n\">primivitive_name</span><span class=\"p\">,</span>\n            <span class=\"n\">edge_number</span><span class=\"p\">,</span>\n            <span class=\"n\">wave_horizontal_extension</span><span class=\"o\">=</span><span class=\"n\">wave_horizontal_extension</span><span class=\"p\">,</span>\n            <span class=\"n\">wave_vertical_extension</span><span class=\"o\">=</span><span class=\"n\">wave_vertical_extension</span><span class=\"p\">,</span>\n            <span class=\"n\">wave_launcher</span><span class=\"o\">=</span><span class=\"n\">wave_launcher</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">port_name</span><span class=\"p\">:</span>\n            <span class=\"n\">port_name</span><span class=\"p\">[</span><span class=\"s2\">&quot;HFSS Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Wave&quot;</span>\n            <span class=\"n\">port_name</span><span class=\"p\">[</span><span class=\"s2\">&quot;Horizontal Extent Factor&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wave_horizontal_extension</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;Vertical Extent Factor&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">port_name</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                <span class=\"n\">port_name</span><span class=\"p\">[</span><span class=\"s2\">&quot;Vertical Extent Factor&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wave_vertical_extension</span><span class=\"p\">)</span>\n            <span class=\"n\">port_name</span><span class=\"p\">[</span><span class=\"s2\">&quot;PEC Launch Width&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">wave_launcher</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">port_name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_wave_port_from_two_conductors\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_wave_port_from_two_conductors/#pyaedt.hfss3dlayout.Hfss3dLayout.create_wave_port_from_two_conductors\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_wave_port_from_two_conductors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">primivitivenames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">],</span> <span class=\"n\">edgenumbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a wave port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        primivitivenames : list(str)</span>\n<span class=\"sd\">            List of the primitive names to create the wave port on.</span>\n<span class=\"sd\">            The list must have two entries, one entry for each of the two conductors,</span>\n<span class=\"sd\">            or the method is not executed.</span>\n\n<span class=\"sd\">        edgenumbers :</span>\n<span class=\"sd\">            List of the edge number to create the wave port on.</span>\n<span class=\"sd\">            The list must have two entries, one entry for each of the two edges,</span>\n<span class=\"sd\">            or the method is not executed.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n<span class=\"sd\">            Port objcet port when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEdgePort</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">primivitivenames</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edgenumbers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">listp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateEdgePort</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;et:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;prim:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">primivitivenames</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">edgenumbers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span>\n                    <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;et:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;prim:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">primivitivenames</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;edge:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">edgenumbers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]],</span>\n                    <span class=\"s2\">&quot;external:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;btype:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">listnew</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">listnew</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">listp</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_port_info</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_ports_on_component_by_nets\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_ports_on_component_by_nets/#pyaedt.hfss3dlayout.Hfss3dLayout.create_ports_on_component_by_nets\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_ports_on_component_by_nets</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">component_name</span><span class=\"p\">,</span>\n        <span class=\"n\">nets</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create the ports on a component for a list of nets.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        component_name : str</span>\n<span class=\"sd\">            Component name.</span>\n<span class=\"sd\">        nets : str, list</span>\n<span class=\"sd\">            Nets to include.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n<span class=\"sd\">            Port Objects when successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEdgePort</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">listp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nets</span><span class=\"p\">]</span>\n        <span class=\"n\">net_array</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Nets&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">nets</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreatePortsOnComponentsByNet</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Components&quot;</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"p\">],</span> <span class=\"n\">net_array</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Port&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">listnew</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">listnew</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">listp</span><span class=\"p\">]</span>\n        <span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n                <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_port_info</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                    <span class=\"n\">ports</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ports</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_differential_port\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_differential_port/#pyaedt.hfss3dlayout.Hfss3dLayout.create_differential_port\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_differential_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">via_signal</span><span class=\"p\">,</span> <span class=\"n\">via_reference</span><span class=\"p\">,</span> <span class=\"n\">port_name</span><span class=\"p\">,</span> <span class=\"n\">deembed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a new differential port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        via_signal : str</span>\n<span class=\"sd\">            Signal pin.</span>\n<span class=\"sd\">        via_reference : float</span>\n<span class=\"sd\">            Reference pin.</span>\n<span class=\"sd\">        port_name : str</span>\n<span class=\"sd\">            New Port Name.</span>\n<span class=\"sd\">        deembed : bool, optional</span>\n<span class=\"sd\">            Either to deembed parasitics or not. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n<span class=\"sd\">            Port Object when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEdgePort</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">listp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"k\">if</span> <span class=\"n\">port_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Port already existing on via </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">port_name</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ToggleViaPin</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:elements&quot;</span><span class=\"p\">,</span> <span class=\"n\">via_signal</span><span class=\"p\">])</span>\n\n        <span class=\"n\">listnew</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">listnew</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">listp</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"s2\">&quot;Port&quot;</span><span class=\"p\">,</span> <span class=\"n\">port_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">AssignRefPort</span><span class=\"p\">([</span><span class=\"n\">port_name</span><span class=\"p\">],</span> <span class=\"n\">via_reference</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">deembed</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">port_name</span><span class=\"p\">),</span> <span class=\"s2\">&quot;DeembedParasiticPortInductance&quot;</span><span class=\"p\">,</span> <span class=\"n\">deembed</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EM Design&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_port_info</span><span class=\"p\">(</span><span class=\"n\">port_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_coax_port\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_coax_port/#pyaedt.hfss3dlayout.Hfss3dLayout.create_coax_port\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_coax_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vianame</span><span class=\"p\">,</span> <span class=\"n\">radial_extent</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">alignment</span><span class=\"o\">=</span><span class=\"s2\">&quot;lower&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a new coax port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        vianame : str</span>\n<span class=\"sd\">            Name of the via to create the port on.</span>\n<span class=\"sd\">        radial_extent : float</span>\n<span class=\"sd\">            Radial coax extension.</span>\n<span class=\"sd\">        layer : str</span>\n<span class=\"sd\">            Name of the layer to apply the reference to.</span>\n<span class=\"sd\">        alignment : str, optional</span>\n<span class=\"sd\">            Port alignment on the layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n<span class=\"sd\">            Port Object when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEdgePort</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">listp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"k\">if</span> <span class=\"n\">vianame</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Port already existing on via </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">vianame</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ToggleViaPin</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:elements&quot;</span><span class=\"p\">,</span> <span class=\"n\">vianame</span><span class=\"p\">])</span>\n\n        <span class=\"n\">listnew</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port_list</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">listnew</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">listp</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"s2\">&quot;Radial Extent Factor&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">radial_extent</span><span class=\"p\">),</span> <span class=\"s2\">&quot;EM Design&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"s2\">&quot;Layer Alignment&quot;</span><span class=\"p\">,</span> <span class=\"n\">alignment</span><span class=\"p\">,</span> <span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span>\n                    <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                    <span class=\"s2\">&quot;Pad Port Layer&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">layer</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_port_info</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_pin_port\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_pin_port/#pyaedt.hfss3dlayout.Hfss3dLayout.create_pin_port\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_pin_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">xpos</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ypos</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">top_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">bot_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a pin port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str</span>\n<span class=\"sd\">            Name of the pin port.</span>\n<span class=\"sd\">        xpos : float, optional</span>\n<span class=\"sd\">            X-axis position of the pin. The default is ``0``.</span>\n<span class=\"sd\">        ypos : float, optional</span>\n<span class=\"sd\">            Y-axis position of the pin. The default is ``0``.</span>\n<span class=\"sd\">        rotation : float, optional</span>\n<span class=\"sd\">            Rotation of the pin in degrees. The default is ``0``.</span>\n<span class=\"sd\">        top_layer : str, optional</span>\n<span class=\"sd\">            Top layer of the pin. The default is ``None``, in which case the top</span>\n<span class=\"sd\">            layer is assigned automatically.</span>\n<span class=\"sd\">        bot_layer : str</span>\n<span class=\"sd\">            Bottom layer of the pin. The default is ``None``, in which case the</span>\n<span class=\"sd\">            bottom layer is assigned automatically.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject3dLayout`</span>\n\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreatePin</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">all_signal_layers</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">top_layer</span><span class=\"p\">:</span>\n            <span class=\"n\">top_layer</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bot_layer</span><span class=\"p\">:</span>\n            <span class=\"n\">bot_layer</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreatePin</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Port&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;ReferencedPadstack:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Padstacks:NoPad SMT East&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;vposition:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;x:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">xpos</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ypos</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;vrotation:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;overrides hole:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;hole diameter:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;0mm&quot;</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;Pin:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;highest_layer:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">top_layer</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;lowest_layer:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">bot_layer</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_port_info</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.delete_port\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.delete_port/#pyaedt.hfss3dlayout.Hfss3dLayout.delete_port\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">portname</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete a port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        portname : str</span>\n<span class=\"sd\">            Name of the port.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.Delete</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oexcitation</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">(</span><span class=\"n\">portname</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">bound</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">portname</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_edb\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_edb/#pyaedt.hfss3dlayout.Hfss3dLayout.import_edb\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edb_full_path</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import EDB.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edb_full_path : str</span>\n<span class=\"sd\">            Full path to EDB.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportEDB</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;edb.def&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">edb_full_path</span><span class=\"p\">:</span>\n            <span class=\"n\">edb_full_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">edb_full_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;edb.def&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportEDB</span><span class=\"p\">(</span><span class=\"n\">edb_full_path</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_close_edb</span><span class=\"p\">()</span>\n        <span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetActiveProject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">design_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetActiveProject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetActiveDesign</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"n\">design_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.validate_full_design\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.validate_full_design/#pyaedt.hfss3dlayout.Hfss3dLayout.validate_full_design\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">validate_full_design</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputdir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ports</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Validate the design based on the expected value and save the information in the log file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the design to validate. The default is ``None``.</span>\n<span class=\"sd\">        outputdir : str, optional</span>\n<span class=\"sd\">            Output directory to save the log file to. The default is ``None``,</span>\n<span class=\"sd\">            in which case the file is exported to the working directory.</span>\n\n<span class=\"sd\">        ports : str, optional</span>\n<span class=\"sd\">            Number of excitations that are expected. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of validation messages.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ValidateDesign</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span>\n        <span class=\"k\">if</span> <span class=\"n\">outputdir</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">outputdir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;#### Design Validation Checks###&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># Routine outputs to the validation info to a log file in the project directory and also</span>\n        <span class=\"c1\"># returns the validation info to be used to update properties.xml file</span>\n\n        <span class=\"n\">validation_ok</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># Write an overall validation log file with all output from all checks</span>\n        <span class=\"c1\"># The design validation inside HFSS outputs to a separate log file which we merge into this overall file</span>\n        <span class=\"c1\">#</span>\n        <span class=\"n\">val_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">all_validate</span> <span class=\"o\">=</span> <span class=\"n\">outputdir</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">all_validation.log&quot;</span>\n        <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">all_validate</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">validation</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># Desktop Messages</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Desktop Messages:&quot;</span>\n            <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"n\">msgs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">GetMessages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"c1\"># need to check if design name is always this default name HFSSDesign1</span>\n            <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">msgs</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"c1\"># msg = msg.replace(&#39;&quot;&#39;,&#39;&#39;)</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\r\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Run Design Validation and write out the lines to the logger</span>\n\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">ValidateCircuit</span><span class=\"p\">()</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Design Validation Messages:&quot;</span>\n            <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;**** ERRORS Present - please check and confirm&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;**** Validation Completed Correctly&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Find the Excitations and check or list them out</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Excitation Messages:&quot;</span>\n            <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"n\">numportsdefined</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">ports</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">ports</span> <span class=\"o\">!=</span> <span class=\"n\">numportsdefined</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;**** Port Number Error! - Please check model&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"n\">validation_ok</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"c1\"># need to stop the simulation athis point</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">msg1</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Ports Requested: &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ports</span><span class=\"p\">)</span>\n                <span class=\"n\">msg2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Ports Defined: &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">numportsdefined</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg1</span><span class=\"p\">)</span>\n                <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg1</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg1</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg2</span><span class=\"p\">)</span>\n                <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg2</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg2</span><span class=\"p\">)</span>\n\n            <span class=\"n\">excitation_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n            <span class=\"k\">for</span> <span class=\"n\">excitation</span> <span class=\"ow\">in</span> <span class=\"n\">excitation_names</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Excitation name: &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">excitation</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">val_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n        <span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">val_list</span><span class=\"p\">,</span> <span class=\"n\">validation_ok</span>  <span class=\"c1\"># return all the info in a list for use later</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_scattering\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_scattering/#pyaedt.hfss3dlayout.Hfss3dLayout.create_scattering\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_scattering</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">plot_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;S Parameter Plot Nominal&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_excited</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a scattering report.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        plot_name : str, optional</span>\n<span class=\"sd\">            Name of the plot. The default is ``&quot;S Parameter Plot Nominal&quot;``.</span>\n<span class=\"sd\">        sweep_name : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        port_names : str or list, optional</span>\n<span class=\"sd\">            One or more port names. The default is ``None``.</span>\n<span class=\"sd\">        port_excited : optional</span>\n<span class=\"sd\">            The default is ``None``.</span>\n<span class=\"sd\">        variations : optional</span>\n<span class=\"sd\">            The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.CreateReport</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">solution_data</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Standard&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Modal&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span><span class=\"p\">:</span>\n            <span class=\"n\">solution_data</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Modal Solution Data&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;Terminal&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span><span class=\"p\">:</span>\n            <span class=\"n\">solution_data</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Terminal Solution Data&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">port_names</span><span class=\"p\">:</span>\n            <span class=\"n\">port_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">port_excited</span><span class=\"p\">:</span>\n            <span class=\"n\">port_excited</span> <span class=\"o\">=</span> <span class=\"n\">port_names</span>\n        <span class=\"n\">traces</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;dB(S(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;,&quot;</span> <span class=\"o\">+</span> <span class=\"n\">q</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;))&quot;</span> <span class=\"k\">for</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">port_names</span><span class=\"p\">),</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">port_excited</span><span class=\"p\">))]</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">create_report</span><span class=\"p\">(</span>\n            <span class=\"n\">traces</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"p\">,</span> <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"n\">variations</span><span class=\"p\">,</span> <span class=\"n\">report_category</span><span class=\"o\">=</span><span class=\"n\">solution_data</span><span class=\"p\">,</span> <span class=\"n\">plotname</span><span class=\"o\">=</span><span class=\"n\">plot_name</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.export_touchstone\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.export_touchstone/#pyaedt.hfss3dlayout.Hfss3dLayout.export_touchstone\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_touchstone</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">solution_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sweep_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">variations_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Export a Touchstone file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        solution_name : str, optional</span>\n<span class=\"sd\">            Name of the solution that has been solved.</span>\n<span class=\"sd\">        sweep_name : str, optional</span>\n<span class=\"sd\">            Name of the sweep that has been solved.</span>\n<span class=\"sd\">        file_name : str, optional</span>\n<span class=\"sd\">            Full path and name for the Touchstone file.</span>\n<span class=\"sd\">            The default is ``None``, in which case the Touchstone file is exported to</span>\n<span class=\"sd\">            the working directory.</span>\n<span class=\"sd\">        variations : list, optional</span>\n<span class=\"sd\">            List of all parameter variations. For example, ``[&quot;$AmbientTemp&quot;, &quot;$PowerIn&quot;]``.</span>\n<span class=\"sd\">            The default is ``None``.</span>\n<span class=\"sd\">        variations_value : list, optional</span>\n<span class=\"sd\">            List of all parameter variation values. For example, ``[&quot;22cel&quot;, &quot;100&quot;]``.</span>\n<span class=\"sd\">            The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ExportNetworkData</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_touchstone</span><span class=\"p\">(</span>\n            <span class=\"n\">solution_name</span><span class=\"o\">=</span><span class=\"n\">solution_name</span><span class=\"p\">,</span>\n            <span class=\"n\">sweep_name</span><span class=\"o\">=</span><span class=\"n\">sweep_name</span><span class=\"p\">,</span>\n            <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"n\">file_name</span><span class=\"p\">,</span>\n            <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"n\">variations</span><span class=\"p\">,</span>\n            <span class=\"n\">variations_value</span><span class=\"o\">=</span><span class=\"n\">variations_value</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.set_export_touchstone\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.set_export_touchstone/#pyaedt.hfss3dlayout.Hfss3dLayout.set_export_touchstone\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_export_touchstone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">activate</span><span class=\"p\">,</span> <span class=\"n\">export_dir</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Export the Touchstone file automatically if the simulation is successful.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        activate : bool</span>\n<span class=\"sd\">            Whether to export the Touchstone file after the simulation.</span>\n<span class=\"sd\">        export_dir str, optional</span>\n<span class=\"sd\">            Path to export the Touchstone file to. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.DesignOptions</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">activate</span><span class=\"p\">:</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NAME:options&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExportAfterSolve:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExportDir:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_dir</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">activate</span><span class=\"p\">:</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NAME:options&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExportAfterSolve:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">DesignOptions</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.set_meshing_settings\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.set_meshing_settings/#pyaedt.hfss3dlayout.Hfss3dLayout.set_meshing_settings\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_meshing_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mesh_method</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">,</span> <span class=\"n\">enable_intersections_check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">use_alternative_fallback</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Define the settings of the mesh.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        mesh_method : string</span>\n<span class=\"sd\">            Mesh method. The default is ``&quot;Phi&quot;``. Options are ``&quot;Phi&quot;``, ``&quot;PhiPlus&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Classic&quot;``.</span>\n<span class=\"sd\">        enable_intersections_check : bool, optional</span>\n<span class=\"sd\">            Whether to enable the alternative mesh intersections checks. The default is</span>\n<span class=\"sd\">            ``True``.</span>\n<span class=\"sd\">        use_alternative_fallback : bool, optional</span>\n<span class=\"sd\">            Whether to enable the alternative fall back mesh method. The default is ``True``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.DesignOptions</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NAME:options&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MeshingMethod:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mesh_method</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;EnableDesignIntersectionCheck:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">enable_intersections_check</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;UseAlternativeMeshMethodsAsFallBack:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_alternative_fallback</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">DesignOptions</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_frequency_sweep\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_frequency_sweep/#pyaedt.hfss3dlayout.Hfss3dLayout.create_frequency_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_frequency_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">setupname</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstart</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstop</span><span class=\"p\">,</span>\n        <span class=\"n\">num_of_freq_points</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sweeptype</span><span class=\"o\">=</span><span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_tol_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_max_solutions</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">use_q3d_for_dc</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a frequency sweep.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.0</span>\n<span class=\"sd\">           Use :func:`Hfss3dLayout.create_linear_count_sweep` instead.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;`create_frequency_sweep` is deprecated. Use `create_linear_count_sweep` instead.&quot;</span><span class=\"p\">,</span>\n            <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweeptype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;interpolating&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sweeptype</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Interpolating&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">sweeptype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;discrete&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sweeptype</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Discrete&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">sweeptype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;fast&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">sweeptype</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Fast&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_linear_count_sweep</span><span class=\"p\">(</span>\n            <span class=\"n\">setupname</span><span class=\"o\">=</span><span class=\"n\">setupname</span><span class=\"p\">,</span>\n            <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">unit</span><span class=\"p\">,</span>\n            <span class=\"n\">freqstart</span><span class=\"o\">=</span><span class=\"n\">freqstart</span><span class=\"p\">,</span>\n            <span class=\"n\">freqstop</span><span class=\"o\">=</span><span class=\"n\">freqstop</span><span class=\"p\">,</span>\n            <span class=\"n\">num_of_freq_points</span><span class=\"o\">=</span><span class=\"n\">num_of_freq_points</span><span class=\"p\">,</span>\n            <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"n\">sweepname</span><span class=\"p\">,</span>\n            <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"n\">save_fields</span><span class=\"p\">,</span>\n            <span class=\"n\">save_rad_fields_only</span><span class=\"o\">=</span><span class=\"n\">save_rad_fields_only</span><span class=\"p\">,</span>\n            <span class=\"n\">sweep_type</span><span class=\"o\">=</span><span class=\"n\">sweeptype</span><span class=\"p\">,</span>\n            <span class=\"n\">interpolation_tol_percent</span><span class=\"o\">=</span><span class=\"n\">interpolation_tol_percent</span><span class=\"p\">,</span>\n            <span class=\"n\">interpolation_max_solutions</span><span class=\"o\">=</span><span class=\"n\">interpolation_max_solutions</span><span class=\"p\">,</span>\n            <span class=\"n\">use_q3d_for_dc</span><span class=\"o\">=</span><span class=\"n\">use_q3d_for_dc</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_linear_count_sweep\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_linear_count_sweep/#pyaedt.hfss3dlayout.Hfss3dLayout.create_linear_count_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_linear_count_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">setupname</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstart</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstop</span><span class=\"p\">,</span>\n        <span class=\"n\">num_of_freq_points</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_tol_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_max_solutions</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span>\n        <span class=\"n\">use_q3d_for_dc</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a sweep with the specified number of points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup to attach to the sweep.</span>\n<span class=\"sd\">        unit : str</span>\n<span class=\"sd\">            Unit of the frequency. For example, ``&quot;MHz&quot;`` or ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        freqstart : float</span>\n<span class=\"sd\">            Starting frequency of the sweep.</span>\n<span class=\"sd\">        freqstop : float</span>\n<span class=\"sd\">            Stopping frequency of the sweep.</span>\n<span class=\"sd\">        num_of_freq_points : int</span>\n<span class=\"sd\">            Number of frequency points in the range.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        save_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save fields for a discrete sweep only. The</span>\n<span class=\"sd\">            default is ``True``.</span>\n<span class=\"sd\">        save_rad_fields_only : bool, optional</span>\n<span class=\"sd\">            Whether to save only radiated fields if</span>\n<span class=\"sd\">            ``save_fields=True``. The default is ``False``.</span>\n<span class=\"sd\">        sweep_type : str, optional</span>\n<span class=\"sd\">            Type of the sweep. Options are ``&quot;Fast&quot;``,</span>\n<span class=\"sd\">            ``&quot;Interpolating&quot;``, and ``&quot;Discrete&quot;``.  The default is</span>\n<span class=\"sd\">            ``&quot;Interpolating&quot;``.</span>\n<span class=\"sd\">        interpolation_tol_percent : float, optional</span>\n<span class=\"sd\">            Error tolerance threshold for the interpolation process.</span>\n<span class=\"sd\">            The default is ``0.5``.</span>\n<span class=\"sd\">        interpolation_max_solutions : int, optional</span>\n<span class=\"sd\">            Maximum number of solutions to evaluate for the</span>\n<span class=\"sd\">            interpolation process. The default is ``250``.</span>\n<span class=\"sd\">        use_q3d_for_dc : bool, optional</span>\n<span class=\"sd\">            Whether to use Q3D to solve the DC point. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS3DLayout` or bool</span>\n<span class=\"sd\">            Sweep object if successful, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddSweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Fast&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Invalid value for `sweep_type`. The value must be &#39;Discrete&#39;, &#39;Interpolating&#39;, or &#39;Fast&#39;.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">interpolation</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">interpolation</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">save_fields</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">save_fields</span><span class=\"p\">:</span>\n            <span class=\"n\">save_rad_fields_only</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">interpolation_tol</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_tol_percent</span> <span class=\"o\">/</span> <span class=\"mf\">100.0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">]:</span>\n                    <span class=\"n\">oldname</span> <span class=\"o\">=</span> <span class=\"n\">sweepname</span>\n                    <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">oldname</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Sweep has been renamed in </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span><span class=\"p\">,</span> <span class=\"n\">oldname</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweep</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">change_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;LinearCount&quot;</span><span class=\"p\">,</span> <span class=\"n\">freqstart</span><span class=\"p\">,</span> <span class=\"n\">freqstop</span><span class=\"p\">,</span> <span class=\"n\">num_of_freq_points</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">)</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;GenerateSurfaceCurrent&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_fields</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFieldsOnly&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_rad_fields_only</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;FastSweep&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SAbsError&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_tol</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;EnforcePassivity&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;UseQ3DForDC&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">use_q3d_for_dc</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaxSolutions&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_max_solutions</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linear count sweep </span><span class=\"si\">%s</span><span class=\"s2\"> has been correctly created.&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweep</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_linear_step_sweep\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_linear_step_sweep/#pyaedt.hfss3dlayout.Hfss3dLayout.create_linear_step_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_linear_step_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">setupname</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstart</span><span class=\"p\">,</span>\n        <span class=\"n\">freqstop</span><span class=\"p\">,</span>\n        <span class=\"n\">step_size</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_tol_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_max_solutions</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span>\n        <span class=\"n\">use_q3d_for_dc</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a sweep with the specified frequency step.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup to attach to the sweep.</span>\n<span class=\"sd\">        unit : str</span>\n<span class=\"sd\">            Unit of the frequency. For example, ``&quot;MHz&quot;`` or ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        freqstart : float</span>\n<span class=\"sd\">            Starting frequency of the sweep.</span>\n<span class=\"sd\">        freqstop : float</span>\n<span class=\"sd\">            Stopping frequency of the sweep.</span>\n<span class=\"sd\">        step_size : float</span>\n<span class=\"sd\">            Frequency size of the step.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        save_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save fields for a discrete sweep only. The</span>\n<span class=\"sd\">            default is ``True``.</span>\n<span class=\"sd\">        save_rad_fields_only : bool, optional</span>\n<span class=\"sd\">            Whether to save only radiated fields if</span>\n<span class=\"sd\">            ``save_fields=True``. The default is ``False``.</span>\n<span class=\"sd\">        sweep_type : str, optional</span>\n<span class=\"sd\">            Type of the sweep. Options are ``&quot;Fast&quot;``,</span>\n<span class=\"sd\">            ``&quot;Interpolating&quot;``, and ``&quot;Discrete&quot;``.  The default is</span>\n<span class=\"sd\">            ``&quot;Interpolating&quot;``.</span>\n<span class=\"sd\">        interpolation_tol_percent : float, optional</span>\n<span class=\"sd\">            Error tolerance threshold for the interpolation</span>\n<span class=\"sd\">            process. The default is ``0.5``.</span>\n<span class=\"sd\">        interpolation_max_solutions : int, optional</span>\n<span class=\"sd\">            Maximum number of solutions to evaluate for the</span>\n<span class=\"sd\">            interpolation process. The default is ``250``.</span>\n<span class=\"sd\">        use_q3d_for_dc : bool, optional</span>\n<span class=\"sd\">            Whether to use Q3D to solve the DC point. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS3DLayout` or bool</span>\n<span class=\"sd\">            Sweep object if successful, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddSweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Fast&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Invalid value for `sweep_type`. The value must be &#39;Discrete&#39;, &#39;Interpolating&#39;, or &#39;Fast&#39;.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">interpolation</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Interpolating&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">interpolation</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">save_fields</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">save_fields</span><span class=\"p\">:</span>\n            <span class=\"n\">save_rad_fields_only</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">interpolation_tol</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_tol_percent</span> <span class=\"o\">/</span> <span class=\"mf\">100.0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">]:</span>\n                    <span class=\"n\">oldname</span> <span class=\"o\">=</span> <span class=\"n\">sweepname</span>\n                    <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">oldname</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Sweep has been renamed in </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span><span class=\"p\">,</span> <span class=\"n\">oldname</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweep</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">change_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;LinearStep&quot;</span><span class=\"p\">,</span> <span class=\"n\">freqstart</span><span class=\"p\">,</span> <span class=\"n\">freqstop</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">)</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;GenerateSurfaceCurrent&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_fields</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFieldsOnly&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_rad_fields_only</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;FastSweep&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SAbsError&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_tol</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;EnforcePassivity&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;UseQ3DForDC&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">use_q3d_for_dc</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaxSolutions&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">interpolation_max_solutions</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linear step sweep </span><span class=\"si\">%s</span><span class=\"s2\"> has been correctly created.&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweep</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.create_single_point_sweep\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.create_single_point_sweep/#pyaedt.hfss3dlayout.Hfss3dLayout.create_single_point_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_single_point_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">setupname</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"p\">,</span>\n        <span class=\"n\">freq</span><span class=\"p\">,</span>\n        <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">save_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">save_rad_fields_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a sweep with a single frequency point.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup.</span>\n<span class=\"sd\">        unit : str</span>\n<span class=\"sd\">            Unit of the frequency. For example, ``&quot;MHz`` or ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        freq : float, list</span>\n<span class=\"sd\">            Frequency of the single point or list of frequencies to create distinct single points.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``.</span>\n<span class=\"sd\">        save_fields : bool, optional</span>\n<span class=\"sd\">            Whether to save fields for all points and subranges defined in the sweep. The default is ``False``.</span>\n<span class=\"sd\">        save_rad_fields_only : bool, optional</span>\n<span class=\"sd\">            Whether to save only radiating fields. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.SetupTemplates.SweepHFSS` or bool</span>\n<span class=\"sd\">            Sweep object if successful, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AddSweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;SinglePoint&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">add_subranges</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Frequency list is empty. Specify at least one frequency point.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">freq0</span> <span class=\"o\">=</span> <span class=\"n\">freq</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n                <span class=\"n\">add_subranges</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">freq0</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setupname</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n                <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">]:</span>\n                    <span class=\"n\">oldname</span> <span class=\"o\">=</span> <span class=\"n\">sweepname</span>\n                    <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">oldname</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Sweep has been renamed in </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span><span class=\"p\">,</span> <span class=\"n\">oldname</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">change_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;SinglePoint&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq0</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">unit</span><span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;GenerateSurfaceCurrent&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_fields</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFieldsOnly&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">save_rad_fields_only</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">add_subranges</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n                        <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">add_subrange</span><span class=\"p\">(</span><span class=\"n\">rangetype</span><span class=\"o\">=</span><span class=\"s2\">&quot;SinglePoint&quot;</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">unit</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Single point sweep </span><span class=\"si\">%s</span><span class=\"s2\"> has been correctly created.&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweepdata</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_import_cad</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cad_path</span><span class=\"p\">,</span> <span class=\"n\">cad_format</span><span class=\"o\">=</span><span class=\"s2\">&quot;gds&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">xml_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;gds&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportGDSII</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;dxf&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportAutoCAD</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;gerber&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportGerber</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;awr&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportAWRMicrowaveOffice</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;brd&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportExtracta</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;ipc2581&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportIPC</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;odb++&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oimport_export</span><span class=\"o\">.</span><span class=\"n\">ImportODB</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">method</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">active_project</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span>\n        <span class=\"n\">path_ext</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">cad_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">aedb_path</span><span class=\"p\">:</span>\n            <span class=\"n\">aedb_path</span> <span class=\"o\">=</span> <span class=\"n\">path_ext</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.aedb&quot;</span>\n        <span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">aedb_path</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">aedb_path</span><span class=\"p\">):</span>\n            <span class=\"n\">old_name</span> <span class=\"o\">=</span> <span class=\"n\">project_name</span>\n            <span class=\"n\">project_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">project_name</span><span class=\"p\">)</span>\n            <span class=\"n\">aedb_path</span> <span class=\"o\">=</span> <span class=\"n\">aedb_path</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">project_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;aedb_exists. Renaming it to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">project_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">xml_path</span><span class=\"p\">:</span>\n            <span class=\"n\">xml_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">xml_path</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;.tech&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">xml_path</span> <span class=\"o\">=</span> <span class=\"n\">tech_to_control_file</span><span class=\"p\">(</span><span class=\"n\">xml_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">cad_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;gds&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">cad_path</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">xml_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">cad_path</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">xml_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">set_as_active</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_close_edb</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">project_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">close_active_project</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">CloseProject</span><span class=\"p\">(</span><span class=\"n\">active_project</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_gds\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_gds/#pyaedt.hfss3dlayout.Hfss3dLayout.import_gds\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_gds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gds_path</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import a GDS file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        gds_path : str</span>\n<span class=\"sd\">            Full path to the GDS file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        control_file : str, optional</span>\n<span class=\"sd\">            Path to the XML or TECH file with the stackup information. The default is ``None``, in</span>\n<span class=\"sd\">            which case the stackup is not edited.</span>\n<span class=\"sd\">            If a TECH file is provided and the layer name starts with ``&quot;v&quot;``, the layer</span>\n<span class=\"sd\">            is mapped as a via layer.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the GDS file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the GDS file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportGDSII</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">gds_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gds&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_dxf\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_dxf/#pyaedt.hfss3dlayout.Hfss3dLayout.import_dxf\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_dxf</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dxf_path</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import a DXF file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        dxf_path : str</span>\n<span class=\"sd\">            Full path to the DXF file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        control_file : str, optional</span>\n<span class=\"sd\">            Path to the XML or TECH file with the stackup information. The default is ``None``, in</span>\n<span class=\"sd\">            which case the stackup is not edited.</span>\n<span class=\"sd\">            If a TECH file is provided and the layer name starts with ``&quot;v&quot;``, the layer</span>\n<span class=\"sd\">            is mapped as a via layer.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the DXF file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the DXF file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportDXF</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">dxf_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dxf&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_gerber\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_gerber/#pyaedt.hfss3dlayout.Hfss3dLayout.import_gerber\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_gerber</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gerber_path</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import a Gerber zip file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        gerber_path : str</span>\n<span class=\"sd\">            Full path to the Gerber zip file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        control_file : str, optional</span>\n<span class=\"sd\">            Path to the XML file with the stackup information. The default is ``None``, in</span>\n<span class=\"sd\">            which case the stackup is not edited.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the Gerber zip file file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the Gerber zip file file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportGerber</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">gerber_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gerber&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_brd\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_brd/#pyaedt.hfss3dlayout.Hfss3dLayout.import_brd\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_brd</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import a board file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_file : str</span>\n<span class=\"sd\">            Full path to the board file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the board file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the board file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportExtracta</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;brd&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_awr\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_awr/#pyaedt.hfss3dlayout.Hfss3dLayout.import_awr\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_awr</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import an AWR Microwave Office file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_file : str</span>\n<span class=\"sd\">            Full path to the AWR Microwave Office file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        control_file : str, optional</span>\n<span class=\"sd\">            Path to the XML file with the stackup information. The default is ``None``, in</span>\n<span class=\"sd\">            which case the stackup is not edited.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the AWR Microwave Office file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the AWR Microwave Office file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportAWRMicrowaveOffice</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;awr&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_ipc2581\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_ipc2581/#pyaedt.hfss3dlayout.Hfss3dLayout.import_ipc2581\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_ipc2581</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import an IPC2581 file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_file : str</span>\n<span class=\"sd\">            Full path to the IPC2581 file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        control_file : str, optional</span>\n<span class=\"sd\">            Path to the XML file with the stackup information. The default is ``None``, in</span>\n<span class=\"sd\">            which case the stackup is not edited.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the IPC2581 file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the IPC2581 file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportAWRMicrowaveOffice</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ipc2581&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.import_odb\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.import_odb/#pyaedt.hfss3dlayout.Hfss3dLayout.import_odb\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_odb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Import an ODB++ file into HFSS 3D Layout and assign the stackup from an XML file if present.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_file : str</span>\n<span class=\"sd\">            Full path to the ODB++ file.</span>\n<span class=\"sd\">        aedb_path : str, optional</span>\n<span class=\"sd\">            Full path to the AEDB file.</span>\n<span class=\"sd\">        control_file : str, optional</span>\n<span class=\"sd\">            Path to the XML file with the stackup information. The default is ``None``, in</span>\n<span class=\"sd\">            which case the stackup is not edited.</span>\n<span class=\"sd\">        set_as_active : bool, optional</span>\n<span class=\"sd\">            Whether to set the ODB++ file as active. The default is ``True``.</span>\n<span class=\"sd\">        close_active_project : bool, optional</span>\n<span class=\"sd\">            Whether to close the active project after loading the ODB++ file.</span>\n<span class=\"sd\">            The default is &#39;&#39;False``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ImportAWRMicrowaveOffice</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_import_cad</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;odb++&quot;</span><span class=\"p\">,</span> <span class=\"n\">aedb_path</span><span class=\"p\">,</span> <span class=\"n\">control_file</span><span class=\"p\">,</span> <span class=\"n\">set_as_active</span><span class=\"p\">,</span> <span class=\"n\">close_active_project</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.edit_cosim_options\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.edit_cosim_options/#pyaedt.hfss3dlayout.Hfss3dLayout.edit_cosim_options\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit_cosim_options</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">simulate_missing_solution</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">align_ports</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">renormalize_ports</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">renorm_impedance</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_override_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep_override_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">use_interpolating_sweep</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">use_y_matrix</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">interpolation_algorithm</span><span class=\"o\">=</span><span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Edit cosimulation options.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        simulate_missing_solution : bool, optional</span>\n<span class=\"sd\">            Whether the solver is to simulate a missing solution. The default is ``True``. If</span>\n<span class=\"sd\">            ``False``, the solver interpolates a missing solution.</span>\n<span class=\"sd\">        align_ports : bool, optional</span>\n<span class=\"sd\">            Whether the solver is to align microwave parts. The default is ``True``.</span>\n<span class=\"sd\">        renormalize_ports : bool, optional</span>\n<span class=\"sd\">            Whether to renormalize port impendance. The default is ``True``.</span>\n<span class=\"sd\">        renorm_impedance : float, optional</span>\n<span class=\"sd\">            Renormalization impedance in ohms. The default is ``50``.</span>\n<span class=\"sd\">        setup_override_name : str, optional</span>\n<span class=\"sd\">            Setup name if there is a setup override. The default is ``None``.</span>\n<span class=\"sd\">        sweep_override_name : str, optional</span>\n<span class=\"sd\">            Sweep name if there is a sweep override. The default is ``None``.</span>\n<span class=\"sd\">        use_interpolating_sweep : bool, optional</span>\n<span class=\"sd\">            Whether the solver is to use an interpolating sweep. The default is ``True``.</span>\n<span class=\"sd\">            If ``False``, the solver is to use a discrete sweep.</span>\n<span class=\"sd\">        use_y_matrix : bool, optional</span>\n<span class=\"sd\">            Whether the interpolation algorithm is to use the Y matrix. The default is</span>\n<span class=\"sd\">            ``True``.</span>\n<span class=\"sd\">        interpolation_algorithm : str, optional</span>\n<span class=\"sd\">            Interpolation algorithm to use. Options are ``&quot;auto&quot;``, ``&quot;lin&quot;``, ``&quot;shadH&quot;``,</span>\n<span class=\"sd\">            and ``&quot;shadNH&quot;``. The default is ``&quot;auto&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if successful and ``False`` if failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.EditCoSimulationOptions</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d = Hfss3dLayout()</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.edit_cosim_options(</span>\n<span class=\"sd\">        ...     simulate_missing_solution=True,</span>\n<span class=\"sd\">        ...     align_ports=True,</span>\n<span class=\"sd\">        ...     renormalize_ports=True,</span>\n<span class=\"sd\">        ...     renorm_impedance=50,</span>\n<span class=\"sd\">        ...     setup_override_name=None,</span>\n<span class=\"sd\">        ...     sweep_override_name=None,</span>\n<span class=\"sd\">        ...     use_interpolating_sweep=False,</span>\n<span class=\"sd\">        ...     use_y_matrix=True,</span>\n<span class=\"sd\">        ...     interpolation_algorithm=&quot;auto&quot;</span>\n<span class=\"sd\">        ... )</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">interpolation_algorithm</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lin&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;shadH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;shadNH&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong Interpolation Algorithm&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CoSimOptions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Override:=&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setup_override_name</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">setup_override_name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;OverrideSweep:=&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sweep_override_name</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sweep_override_name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SweepType:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">use_interpolating_sweep</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Interpolate:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">simulate_missing_solution</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YMatrix:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_y_matrix</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;AutoAlignPorts:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">align_ports</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;InterpAlg:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">interpolation_algorithm</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Renormalize:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">renormalize_ports</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;RenormImpedance:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">renorm_impedance</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">EditCoSimulationOptions</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.set_differential_pair\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.set_differential_pair/#pyaedt.hfss3dlayout.Hfss3dLayout.set_differential_pair\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_differential_pair</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_terminal</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_terminal</span><span class=\"p\">,</span>\n        <span class=\"n\">common_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">diff_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">common_ref_z</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n        <span class=\"n\">diff_ref_z</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">matched</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add a differential pair definition.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        positive_terminal : str</span>\n<span class=\"sd\">            Name of the terminal to use as the positive terminal.</span>\n<span class=\"sd\">        negative_terminal : str</span>\n<span class=\"sd\">            Name of the terminal to use as the negative terminal.</span>\n<span class=\"sd\">        common_name : str, optional</span>\n<span class=\"sd\">            Name for the common mode. The default is ``None``, in which case a unique name is assigned.</span>\n<span class=\"sd\">        diff_name : str, optional</span>\n<span class=\"sd\">            Name for the differential mode. The default is ``None``, in which case a unique name is assigned.</span>\n<span class=\"sd\">        common_ref_z : float, optional</span>\n<span class=\"sd\">            Reference impedance for the common mode in ohms. The default is ``25``.</span>\n<span class=\"sd\">        diff_ref_z : float, optional</span>\n<span class=\"sd\">            Reference impedance for the differential mode in ohms. The default is ``100``.</span>\n<span class=\"sd\">        active : bool, optional</span>\n<span class=\"sd\">            Whether to set the differential pair as active. The default is ``True``.</span>\n<span class=\"sd\">        matched : bool, optional</span>\n<span class=\"sd\">            Whether to set the differential pair as active. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.SetDiffPairs</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">diff_name</span><span class=\"p\">:</span>\n            <span class=\"n\">diff_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Diff&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">common_name</span><span class=\"p\">:</span>\n            <span class=\"n\">common_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Comm&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;Pos:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">positive_terminal</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Neg:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">negative_terminal</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;On:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">active</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;matched:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">matched</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Dif:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">diff_name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;DfZ:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">diff_ref_z</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"s2\">&quot;Com:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">common_name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;CmZ:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">common_ref_z</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:DiffPairs&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Pair:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">tmpfile1</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;tmp&quot;</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oexcitation</span><span class=\"o\">.</span><span class=\"n\">SaveDiffPairsToFile</span><span class=\"p\">(</span><span class=\"n\">tmpfile1</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">tmpfile1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n            <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n        <span class=\"n\">old_arg</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">data_arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;Pos:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;Neg:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;On:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;matched:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Dif:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;DfZ:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]),</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;Com:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;CmZ:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]),</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">old_arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">data_arg</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">arg2</span> <span class=\"ow\">in</span> <span class=\"n\">old_arg</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Pair:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">tmpfile1</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;ERROR: Cannot remove temp files.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oexcitation</span><span class=\"o\">.</span><span class=\"n\">SetDiffPairs</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.load_diff_pairs_from_file\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.load_diff_pairs_from_file/#pyaedt.hfss3dlayout.Hfss3dLayout.load_diff_pairs_from_file\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_diff_pairs_from_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load differtential pairs definition from file.</span>\n\n<span class=\"sd\">        You can use the ``save_diff_pairs_to_file`` method to obtain the file format.</span>\n<span class=\"sd\">        The ``File End Of Line`` must be UNIX (LF).</span>\n<span class=\"sd\">        New definitions are added only if compatible with the existing definition already defined in the project.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        filename : str</span>\n<span class=\"sd\">            Fully qualified name of the file containing the differential pairs definition.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.LoadDiffPairsFromFile</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">: unable to find the specified file.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">new_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">),</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.txt&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n                <span class=\"n\">filedata</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n            <span class=\"k\">with</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">new_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">filedata</span><span class=\"p\">:</span>\n                    <span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oexcitation</span><span class=\"o\">.</span><span class=\"n\">LoadDiffPairsFromFile</span><span class=\"p\">(</span><span class=\"n\">new_file</span><span class=\"p\">)</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">new_file</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.save_diff_pairs_to_file\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.save_diff_pairs_to_file/#pyaedt.hfss3dlayout.Hfss3dLayout.save_diff_pairs_to_file\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_diff_pairs_to_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save differtential pairs definition to a file.</span>\n\n<span class=\"sd\">        If a filee with the specified name already exists, it is overwritten.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        filename : str</span>\n<span class=\"sd\">            Fully qualified name of the file containing the differential pairs definition.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.SaveDiffPairsToFile</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oexcitation</span><span class=\"o\">.</span><span class=\"n\">SaveDiffPairsToFile</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.export_3d_model\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.export_3d_model/#pyaedt.hfss3dlayout.Hfss3dLayout.export_3d_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_3d_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Export the Ecad model to a 3D file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_name : str, optional</span>\n<span class=\"sd\">            Full name of the file to export. The default is None, in which case the file name is</span>\n<span class=\"sd\">            set to the design name and saved as a SAT file in the working directory.</span>\n<span class=\"sd\">            Extensions available are ``&quot;sat&quot;``, ``&quot;sab&quot;``, and ``&quot;sm3&quot;`` up to AEDT 2022R2 and</span>\n<span class=\"sd\">            Parasolid format `&quot;x_t&quot;` from AEDT 2023R1.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            File name if successful.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">file_name</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">aedt_version</span> <span class=\"o\">&gt;</span> <span class=\"s2\">&quot;2022.2&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.x_t&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ExportCAD</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:options&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FileName:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"p\">])</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.sat&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ExportAcis</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:options&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FileName:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">file_name</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.enable_rigid_flex\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.enable_rigid_flex/#pyaedt.hfss3dlayout.Hfss3dLayout.enable_rigid_flex\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_rigid_flex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Turn on or off the rigid flex of a board with bending if available.</span>\n\n<span class=\"sd\">        This function is the same for both turning on and off rigid flex.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if rigid flex is turned off, ``False``` if rigid flex is turned off.</span>\n<span class=\"sd\">            In non-graphical, ``True`` is always returned due to a bug in the native API.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">aedt_version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2022.2&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ProcessBentModelCmd</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">non_graphical</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;BendModel&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;1&quot;</span> <span class=\"k\">else</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.edit_hfss_extents\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.edit_hfss_extents/#pyaedt.hfss3dlayout.Hfss3dLayout.edit_hfss_extents\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit_hfss_extents</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">diel_extent_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">diel_extent_horizontal_padding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">diel_honor_primitives_on_diel_layers</span><span class=\"o\">=</span><span class=\"s2\">&quot;keep&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">air_extent_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">air_truncate_model_at_ground_layer</span><span class=\"o\">=</span><span class=\"s2\">&quot;keep&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">air_vertical_positive_padding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">air_vertical_negative_padding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">airbox_values_as_dim</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Edit HFSS 3D Layout extents.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        diel_extent_type : str, optional</span>\n<span class=\"sd\">            Dielectric extent type. The default is ``None``. Options are ``&quot;BboxExtent&quot;``,</span>\n<span class=\"sd\">            ``&quot;ConformalExtent&quot;``, and ``&quot;ConvexHullExtent&quot;``.</span>\n<span class=\"sd\">        diel_extent_horizontal_padding : str, optional</span>\n<span class=\"sd\">            Dielectric extent horizontal padding. The default is ``None``.</span>\n<span class=\"sd\">        diel_honor_primitives_on_diel_layers : str, optional</span>\n<span class=\"sd\">            Whether to set dielectric honor primitives on dielectric layers. The default is ``None``.</span>\n<span class=\"sd\">        air_extent_type : str, optional</span>\n<span class=\"sd\">            Airbox extent type. The default is ``None``. Options are ``&quot;BboxExtent&quot;``,</span>\n<span class=\"sd\">            ``&quot;ConformalExtent&quot;``, and ``&quot;ConvexHullExtent&quot;``.</span>\n<span class=\"sd\">        air_truncate_model_at_ground_layer : str, optional</span>\n<span class=\"sd\">            Whether to set airbox truncate model at ground layer. The default is ``None``.</span>\n<span class=\"sd\">        air_vertical_positive_padding : str, optional</span>\n<span class=\"sd\">            Airbox vertical positive padding. The default is ``None``.</span>\n<span class=\"sd\">        air_vertical_negative_padding : str, optional</span>\n<span class=\"sd\">            Airbox vertical negative padding. The default is ``None``.</span>\n<span class=\"sd\">        airbox_values_as_dim : bool, optional</span>\n<span class=\"sd\">            Either if inputs are dims or not. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:HfssExportInfo&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">diel_extent_type</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DielExtentType:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">diel_extent_type</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">diel_extent_horizontal_padding</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DielExt:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;Ext:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">diel_extent_horizontal_padding</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Dim:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">diel_honor_primitives_on_diel_layers</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;keep&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;HonorUserDiel:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">diel_honor_primitives_on_diel_layers</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">air_extent_type</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExtentType:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">air_extent_type</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">air_truncate_model_at_ground_layer</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;keep&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TruncAtGnd:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">air_truncate_model_at_ground_layer</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">air_vertical_positive_padding</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;AirPosZExt:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;Ext:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">air_vertical_positive_padding</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Dim:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">airbox_values_as_dim</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">air_vertical_negative_padding</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;AirNegZExt:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;Ext:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">air_vertical_negative_padding</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Dim:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">airbox_values_as_dim</span><span class=\"p\">])</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;UseStackupForZExtFact:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">EditHfssExtents</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_port_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">):</span>\n        <span class=\"n\">propnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetProperties</span><span class=\"p\">(</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">))</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"n\">propnames</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPropertyValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;EM Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Excitations:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">),</span> <span class=\"n\">prop</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">BoundaryObject3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Port&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.get_model_from_mesh_results\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.get_model_from_mesh_results/#pyaedt.hfss3dlayout.Hfss3dLayout.get_model_from_mesh_results\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_model_from_mesh_results</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the path for the parasolid file in the results folder.</span>\n<span class=\"sd\">        The parasolid file is generated after the mesh is created in 3D Layout.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        binary : str, optional</span>\n<span class=\"sd\">            Either if retrieve binary format of parasoli or not.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Path for the parasolid file in the results folder.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">startpath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">binary</span><span class=\"p\">:</span>\n            <span class=\"n\">model_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;model_sm3.x_t&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">model_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;model.x_b&quot;</span>\n\n        <span class=\"n\">out_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dirpath</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">dirpath</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">filenames</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">startpath</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">filenames</span>\n            <span class=\"k\">if</span> <span class=\"n\">fnmatch</span><span class=\"o\">.</span><span class=\"n\">fnmatch</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">out_files</span><span class=\"p\">:</span>\n            <span class=\"n\">out_files</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">getmtime</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">out_files</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span></div>\n\n<div class=\"viewcode-block\" id=\"Hfss3dLayout.edit_source_from_file\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.hfss3dlayout.Hfss3dLayout.edit_source_from_file/#pyaedt.hfss3dlayout.Hfss3dLayout.edit_source_from_file\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit_source_from_file</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">source_name</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"p\">,</span>\n        <span class=\"n\">is_time_domain</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">y_scale</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">impedance</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"n\">data_format</span><span class=\"o\">=</span><span class=\"s2\">&quot;Power&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">include_post_effects</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">incident_voltage</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Edit a source from file data.</span>\n<span class=\"sd\">        File data is a csv containing either frequency data or time domain data that will be converted through FFT.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        source_name : str</span>\n<span class=\"sd\">            Source Name.</span>\n<span class=\"sd\">        file_name : str</span>\n<span class=\"sd\">            Full name of the input file.</span>\n<span class=\"sd\">        is_time_domain : bool, optional</span>\n<span class=\"sd\">            Either if the input data is Time based or Frequency Based. Frequency based data are Mag/Phase (deg).</span>\n<span class=\"sd\">        x_scale : float, optional</span>\n<span class=\"sd\">            Scaling factor for x axis.</span>\n<span class=\"sd\">        y_scale : float, optional</span>\n<span class=\"sd\">            Scaling factor for y axis.</span>\n<span class=\"sd\">        impedance : float, optional</span>\n<span class=\"sd\">            Excitation impedance. Default is `50`.</span>\n<span class=\"sd\">        data_format : str, optional</span>\n<span class=\"sd\">            Either `&quot;Power&quot;`, `&quot;Current&quot;` or `&quot;Voltage&quot;`.</span>\n<span class=\"sd\">        encoding : str, optional</span>\n<span class=\"sd\">            Csv file encoding.</span>\n<span class=\"sd\">        include_post_effects : bool, optional</span>\n<span class=\"sd\">            Either if include or not post-processing effects. Default is `True`,</span>\n<span class=\"sd\">        incident_voltage : bool, optional</span>\n<span class=\"sd\">            Either if include or incident or total voltage. Default is `True`, for incident voltage.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Voltage&quot;</span>\n        <span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"p\">,</span> <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">parse_excitation_file</span><span class=\"p\">(</span>\n            <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"n\">file_name</span><span class=\"p\">,</span>\n            <span class=\"n\">is_time_domain</span><span class=\"o\">=</span><span class=\"n\">is_time_domain</span><span class=\"p\">,</span>\n            <span class=\"n\">x_scale</span><span class=\"o\">=</span><span class=\"n\">x_scale</span><span class=\"p\">,</span>\n            <span class=\"n\">y_scale</span><span class=\"o\">=</span><span class=\"n\">y_scale</span><span class=\"p\">,</span>\n            <span class=\"n\">impedance</span><span class=\"o\">=</span><span class=\"n\">impedance</span><span class=\"p\">,</span>\n            <span class=\"n\">data_format</span><span class=\"o\">=</span><span class=\"n\">data_format</span><span class=\"p\">,</span>\n            <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">,</span>\n            <span class=\"n\">out_mag</span><span class=\"o\">=</span><span class=\"n\">out</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">ds_name_mag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ds_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">source_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_mode_&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_Mag&quot;</span>\n        <span class=\"n\">ds_name_phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ds_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">source_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_mode_&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_Angle&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataset_exists</span><span class=\"p\">(</span><span class=\"n\">ds_name_mag</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_datasets</span><span class=\"p\">[</span><span class=\"n\">ds_name_mag</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_datasets</span><span class=\"p\">[</span><span class=\"n\">ds_name_mag</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">mag</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_datasets</span><span class=\"p\">[</span><span class=\"n\">ds_name_mag</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_dataset1d_design</span><span class=\"p\">(</span><span class=\"n\">ds_name_mag</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">mag</span><span class=\"p\">,</span> <span class=\"n\">xunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataset_exists</span><span class=\"p\">(</span><span class=\"n\">ds_name_phase</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_datasets</span><span class=\"p\">[</span><span class=\"n\">ds_name_phase</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">freq</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_datasets</span><span class=\"p\">[</span><span class=\"n\">ds_name_phase</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">phase</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_datasets</span><span class=\"p\">[</span><span class=\"n\">ds_name_phase</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_dataset1d_design</span><span class=\"p\">(</span><span class=\"n\">ds_name_phase</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"p\">,</span> <span class=\"n\">xunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">,</span> <span class=\"n\">yunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">source_name</span><span class=\"p\">:</span>\n                <span class=\"n\">str_val</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;TotalVoltage&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">incident_voltage</span><span class=\"p\">:</span>\n                    <span class=\"n\">str_val</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;IncidentVoltage&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">include_post_effects</span><span class=\"p\">:</span>\n                    <span class=\"n\">str_val</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IncludePortPostProcess&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">EditExcitations</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:Excitations&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"n\">source_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pwl(</span><span class=\"si\">{}</span><span class=\"s2\">, Freq)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ds_name_mag</span><span class=\"p\">),</span> <span class=\"s2\">&quot;pwl(</span><span class=\"si\">{}</span><span class=\"s2\">, Freq)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ds_name_phase</span><span class=\"p\">)],</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Terminations&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">source_name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">impedance</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;ohm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0ohm&quot;</span><span class=\"p\">]],</span>\n                    <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">str_val</span><span class=\"p\">),</span>\n                    <span class=\"p\">[],</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Source Excitation updated with Dataset.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Port not found.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/hfss3dlayout", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}