{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modules.solutions", "body": "<h1>Source code for pyaedt.modules.solutions</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">get_pyaedt_app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AEDT_UNITS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">db10</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">db20</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">unit_converter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">check_and_download_folder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">write_csv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">get_structured_mesh</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">is_notebook</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">plot_2d_chart</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">plot_3d_chart</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">plot_contour</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.plot</span> <span class=\"kn\">import</span> <span class=\"n\">plot_polar_chart</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.cad.elements3d</span> <span class=\"kn\">import</span> <span class=\"n\">FacePrimitive</span>\n\n<span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">pv</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pyvista</span> <span class=\"k\">as</span> <span class=\"nn\">pv</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"n\">pv</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<div class=\"viewcode-block\" id=\"SolutionData\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData/#pyaedt.modules.solutions.SolutionData\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SolutionData</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Contains information from the :func:`GetSolutionDataPerVariation` method.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">aedtdata</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span> <span class=\"o\">=</span> <span class=\"n\">aedtdata</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_of_variations</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">aedtdata</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_enable_pandas_output</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span> <span class=\"ow\">and</span> <span class=\"n\">pd</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nominal_variation</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nominal_variation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_sweeps</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_variations</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_intrinsic</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_intrinsic</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_sweep</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_sweep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_variation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_sweeps</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">intrinsic</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_sweeps</span><span class=\"p\">[</span><span class=\"n\">intrinsic</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span><span class=\"o\">.</span><span class=\"n\">GetSweepUnits</span><span class=\"p\">(</span><span class=\"n\">intrinsic</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_sweeps</span><span class=\"p\">[</span><span class=\"n\">intrinsic</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_solutions_data</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ifft</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_pandas_output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Set/Get a flag to use Pandas to export dict and lists. This applies to Solution data output.</span>\n<span class=\"sd\">        If ``True`` the property or method will return a pandas object in CPython environment.</span>\n<span class=\"sd\">        Default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_enable_pandas_output</span> <span class=\"ow\">and</span> <span class=\"n\">pd</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@enable_pandas_output</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enable_pandas_output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_enable_pandas_output</span> <span class=\"ow\">and</span> <span class=\"n\">pd</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_enable_pandas_output</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_solutions_data</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.set_active_variation\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.set_active_variation/#pyaedt.modules.solutions.SolutionData.set_active_variation\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_active_variation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">var_id</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Set the active variations to one of available variations in self.variations.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        var_id : int</span>\n<span class=\"sd\">            Index of Variations to assign.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">var_id</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_variation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">var_id</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span> <span class=\"o\">=</span> <span class=\"n\">var_id</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_variations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">variations_lists</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span><span class=\"p\">:</span>\n            <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetDesignVariableNames</span><span class=\"p\">():</span>\n                <span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetDesignVariableValue</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"n\">variations_lists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">variations_lists</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.variation_values\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.variation_values/#pyaedt.modules.solutions.SolutionData.variation_values\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">variation_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variation_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the list of the specific variation available values.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        variation_name : str</span>\n<span class=\"sd\">            Name of variation to return.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">variation_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"p\">[</span><span class=\"n\">variation_name</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vars_vals</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">variation_name</span> <span class=\"ow\">in</span> <span class=\"n\">el</span> <span class=\"ow\">and</span> <span class=\"n\">el</span><span class=\"p\">[</span><span class=\"n\">variation_name</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">vars_vals</span><span class=\"p\">:</span>\n                    <span class=\"n\">vars_vals</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"n\">variation_name</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">vars_vals</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intrinsics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get intrinsics dictionary on active variation.&quot;&quot;&quot;</span>\n        <span class=\"n\">_sweeps</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n        <span class=\"n\">intrinsics</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span><span class=\"o\">.</span><span class=\"n\">GetDesignVariableNames</span><span class=\"p\">()]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">intrinsics</span><span class=\"p\">:</span>\n            <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span><span class=\"o\">.</span><span class=\"n\">GetSweepValues</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n            <span class=\"n\">_sweeps</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">]</span>\n            <span class=\"n\">_sweeps</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"n\">fromkeys</span><span class=\"p\">(</span><span class=\"n\">_sweeps</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]))</span>\n        <span class=\"k\">return</span> <span class=\"n\">_sweeps</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nominal_variation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Nominal variation.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nominal_variation</span>\n\n    <span class=\"nd\">@nominal_variation</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nominal_variation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">val</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_of_variations</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nominal_variation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; not in Variations&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primary_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Primary sweep.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        ps : float</span>\n<span class=\"sd\">            Perimeter of the source.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_sweep</span>\n\n    <span class=\"nd\">@primary_sweep</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primary_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ps</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">ps</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primary_sweep</span> <span class=\"o\">=</span> <span class=\"n\">ps</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Expressions.&quot;&quot;&quot;</span>\n        <span class=\"n\">mydata</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nominal_variation</span><span class=\"o\">.</span><span class=\"n\">GetDataExpressions</span><span class=\"p\">()]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"n\">fromkeys</span><span class=\"p\">(</span><span class=\"n\">mydata</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.update_sweeps\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.update_sweeps/#pyaedt.modules.solutions.SolutionData.update_sweeps\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_sweeps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update sweeps.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Updated sweeps.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span><span class=\"o\">.</span><span class=\"n\">GetSweepNames</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetDesignVariableNames</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)))</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_quantity</span><span class=\"p\">(</span><span class=\"n\">unit</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        unit :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">:</span>\n            <span class=\"n\">keys_units</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())]</span>\n            <span class=\"k\">if</span> <span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">keys_units</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">el</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.init_solutions_data\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.init_solutions_data/#pyaedt.modules.solutions.SolutionData.init_solutions_data\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">init_solutions_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Initialize the database and store info in variables.&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_solution_data_real</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_solution_data_imag</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_mag</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_solution_data_mag</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_phase</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_solution_data_phase</span><span class=\"p\">()</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_solution_data_mag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">_solutions_mag</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">expr</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"n\">_solutions_mag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nominal_variation</span><span class=\"o\">.</span><span class=\"n\">GetDataUnits</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n                <span class=\"n\">_solutions_mag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span>\n                    <span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">])</span>\n                    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]))</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]:</span>\n                    <span class=\"n\">_solutions_mag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">_solutions_mag</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">_solutions_mag</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_solution_data_real</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"n\">sols_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"n\">solution_Data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">comb</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">):</span>\n                <span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetRealDataValues</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n                <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                    <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"n\">fromkeys</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetSweepValues</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))))</span>\n\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">comb</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">comb</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())]</span>\n                <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">values</span><span class=\"p\">):</span>\n                    <span class=\"n\">solution_Data</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"n\">solution</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">sols_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">solution_Data</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">sols_data</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">sols_data</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_solution_data_imag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"n\">sols_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"n\">solution_Data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">comb</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_original_data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">IsDataComplex</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n                    <span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetImagDataValues</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetRealDataValues</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)))</span>\n                    <span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">l</span>\n                <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsics</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                    <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">OrderedDict</span><span class=\"o\">.</span><span class=\"n\">fromkeys</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">GetSweepValues</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))))</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">comb</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">comb</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())]</span>\n                <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">values</span><span class=\"p\">):</span>\n                    <span class=\"n\">solution_Data</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"n\">solution</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">sols_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">solution_Data</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">sols_data</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">sols_data</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_solution_data_phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">data_phase</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">expr</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"n\">data_phase</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n                <span class=\"n\">data_phase</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arctan2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">]:</span>\n                    <span class=\"n\">data_phase</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expr</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">data_phase</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">data_phase</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">full_matrix_real_imag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the full available solution data in Real and Imaginary parts.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple of dicts</span>\n<span class=\"sd\">            (Real Dict, Imag Dict)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">full_matrix_mag_phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the full available solution data magnitude and phase in radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple of dicts</span>\n<span class=\"sd\">            (Mag Dict, Phase Dict).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_mag</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_phase</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.to_degrees\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.to_degrees/#pyaedt.modules.solutions.SolutionData.to_degrees\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_degrees</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert an input list from radians to degrees.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_list : list</span>\n<span class=\"sd\">            List of inputs in radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of inputs in degrees.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">360</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">input_list</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">input_list</span> <span class=\"o\">*</span> <span class=\"mi\">360</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.to_radians\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.to_radians/#pyaedt.modules.solutions.SolutionData.to_radians\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_radians</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert an input list from degrees to radians.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_list : list</span>\n<span class=\"sd\">            List of inputs in degrees.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">            List of inputs in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mi\">360</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">input_list</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">input_list</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mi\">360</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_variation_tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">it</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_variation</span><span class=\"p\">[</span><span class=\"n\">it</span><span class=\"p\">])</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">temp</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_intrinsic</span><span class=\"p\">[</span><span class=\"n\">it</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">temp</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_magnitude\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_magnitude/#pyaedt.modules.solutions.SolutionData.data_magnitude\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the data magnitude of an expression.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, optional</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``, in which case the</span>\n<span class=\"sd\">            active expression is used.</span>\n<span class=\"sd\">        convert_to_SI : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data to the SI unit system.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of data.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"k\">elif</span> <span class=\"n\">expression</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variation_tuple</span><span class=\"p\">()</span>\n        <span class=\"n\">solution_Data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_mag</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span>\n        <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span>\n        <span class=\"n\">sw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">sw</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">solution_Data</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)])</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">convert_to_SI</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]):</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_list_to_SI</span><span class=\"p\">(</span>\n                <span class=\"n\">sol</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sol</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_convert_list_to_SI</span><span class=\"p\">(</span><span class=\"n\">datalist</span><span class=\"p\">,</span> <span class=\"n\">dataunits</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a data list to the SI unit system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        datalist : list</span>\n<span class=\"sd\">           List of data to convert.</span>\n<span class=\"sd\">        dataunits :</span>\n\n<span class=\"sd\">        units :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">           List of the data converted to the SI unit system.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">datalist</span>\n        <span class=\"k\">if</span> <span class=\"n\">dataunits</span> <span class=\"ow\">in</span> <span class=\"n\">AEDT_UNITS</span> <span class=\"ow\">and</span> <span class=\"n\">units</span> <span class=\"ow\">in</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"n\">dataunits</span><span class=\"p\">]:</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"n\">dataunits</span><span class=\"p\">][</span><span class=\"n\">units</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">datalist</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">sol</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_db\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_db/#pyaedt.modules.solutions.SolutionData.data_db\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the data in the database for an expression and convert in db10.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.8</span>\n<span class=\"sd\">           Use :func:`data_db10` instead.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, optional</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n<span class=\"sd\">        convert_to_SI : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data to the SI unit system.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the data in the database for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">db10</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"p\">)]</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_db10\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_db10/#pyaedt.modules.solutions.SolutionData.data_db10\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_db10</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the data in the database for an expression and convert in db10.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, optional</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n<span class=\"sd\">        convert_to_SI : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data to the SI unit system.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the data in the database for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">db10</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"p\">)]</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_db20\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_db20/#pyaedt.modules.solutions.SolutionData.data_db20\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_db20</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the data in the database for an expression and convert in db20.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, optional</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n<span class=\"sd\">        convert_to_SI : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data to the SI unit system.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the data in the database for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">db20</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"p\">)]</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_phase\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_phase/#pyaedt.modules.solutions.SolutionData.data_phase\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">radians</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the phase part of the data for an expression.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, None</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n<span class=\"sd\">        radians : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data into radians or degree.</span>\n<span class=\"sd\">            The default is ``True`` for radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Phase data for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"n\">coefficient</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">radians</span><span class=\"p\">:</span>\n            <span class=\"n\">coefficient</span> <span class=\"o\">=</span> <span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">coefficient</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arctan2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_imag</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_real</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">coefficient</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_real</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_imag</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">))]</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primary_sweep_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the primary sweep for a given data and primary variable.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the primary sweep valid points for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primary_sweep_variations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the variations lists for a given primary variable.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the primary sweep valid points for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variation_tuple</span><span class=\"p\">()</span>\n\n        <span class=\"n\">solution_Data</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep_values</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">if</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">solution_Data</span><span class=\"p\">:</span>\n                <span class=\"n\">sol_dict</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({})</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">for</span> <span class=\"n\">sn</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">:</span>\n                    <span class=\"n\">sol_dict</span><span class=\"p\">[</span><span class=\"n\">sn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sol_dict</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sol</span>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_real\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_real/#pyaedt.modules.solutions.SolutionData.data_real\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_real</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the real part of the data for an expression.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, None</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n<span class=\"sd\">        convert_to_SI : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data to the SI unit system.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the real data for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variation_tuple</span><span class=\"p\">()</span>\n\n        <span class=\"n\">solution_Data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span>\n        <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep_values</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">solution_Data</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)])</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">convert_to_SI</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]):</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_list_to_SI</span><span class=\"p\">(</span>\n                <span class=\"n\">sol</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sol</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.data_imag\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.data_imag/#pyaedt.modules.solutions.SolutionData.data_imag\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_imag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">convert_to_SI</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the imaginary part of the data for an expression.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, optional</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n<span class=\"sd\">        convert_to_SI : bool, optional</span>\n<span class=\"sd\">            Whether to convert the data to the SI unit system.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the imaginary data for the expression.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variation_tuple</span><span class=\"p\">()</span>\n\n        <span class=\"n\">solution_Data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span>\n        <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep_values</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">solution_Data</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)])</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">convert_to_SI</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]):</span>\n            <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_list_to_SI</span><span class=\"p\">(</span>\n                <span class=\"n\">sol</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units_data</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sol</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.is_real_only\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.is_real_only/#pyaedt.modules.solutions.SolutionData.is_real_only\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_real_only</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if the expression has only real values or not.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        expression : str, optional</span>\n<span class=\"sd\">            Name of the expression. The default is ``None``,</span>\n<span class=\"sd\">            in which case the active expression is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if the Solution Data for specific expression contains only real values.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mf\">0.0</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.export_data_to_csv\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.export_data_to_csv/#pyaedt.modules.solutions.SolutionData.export_data_to_csv\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_data_to_csv</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save to output csv file the Solution Data.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        output : str,</span>\n<span class=\"sd\">            Full path to csv file.</span>\n<span class=\"sd\">        delimiter : str,</span>\n<span class=\"sd\">            CSV Delimiter. Default is ``&quot;;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">el</span> <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sweeps_names</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_real_only</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">):</span>\n                <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; (Real)&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; (Imag)&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n\n        <span class=\"n\">list_full</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">list_full</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">list_full</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">v</span><span class=\"p\">])</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_real_only</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"n\">list_full</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">v</span><span class=\"p\">])</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">write_csv</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">list_full</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"n\">delimiter</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.plot\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.plot/#pyaedt.modules.solutions.SolutionData.plot\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">curves</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">math_formula</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span>\n        <span class=\"n\">show_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">snapshot_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">is_polar</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a matplotlib plot based on a list of data.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        curves : list</span>\n<span class=\"sd\">            Curves to be plotted. If None, the first curve will be plotted.</span>\n<span class=\"sd\">        math_formula : str , optional</span>\n<span class=\"sd\">            Mathematical formula to apply to the plot curve.</span>\n<span class=\"sd\">            Valid values are `&quot;re&quot;`, `&quot;im&quot;`, `&quot;db20&quot;`, `&quot;db10&quot;`, `&quot;abs&quot;`, `&quot;mag&quot;`, `&quot;phasedeg&quot;`, `&quot;phaserad&quot;`.</span>\n<span class=\"sd\">            `None` value will plot only real value of the data stored in solution data.</span>\n<span class=\"sd\">        size : tuple, optional</span>\n<span class=\"sd\">            Image size in pixel (width, height).</span>\n<span class=\"sd\">        show_legend : bool</span>\n<span class=\"sd\">            Either to show legend or not. Flag will be ignored if number of curves to plot is greater than 15.</span>\n<span class=\"sd\">        xlabel : str</span>\n<span class=\"sd\">            Plot X label.</span>\n<span class=\"sd\">        ylabel : str</span>\n<span class=\"sd\">            Plot Y label.</span>\n<span class=\"sd\">        title : str</span>\n<span class=\"sd\">            Plot Title label.</span>\n<span class=\"sd\">        snapshot_path : str</span>\n<span class=\"sd\">            Full path to image file if a snapshot is needed.</span>\n<span class=\"sd\">        is_polar : bool, optional</span>\n<span class=\"sd\">            Set to `True` if this is a polar plot.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`matplotlib.plt`</span>\n<span class=\"sd\">            Matplotlib fig object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">curves</span><span class=\"p\">:</span>\n            <span class=\"n\">curves</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">curves</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">curves</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">curves</span><span class=\"p\">]</span>\n        <span class=\"n\">data_plot</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">sweep_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_polar</span><span class=\"p\">:</span>\n            <span class=\"n\">sw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to_radians</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep_values</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep_values</span>\n        <span class=\"k\">for</span> <span class=\"n\">curve</span> <span class=\"ow\">in</span> <span class=\"n\">curves</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">math_formula</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_real</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">),</span> <span class=\"n\">curve</span><span class=\"p\">])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;re&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_real</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;im&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_imag</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;db20&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_db20</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;db10&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_db10</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;mag&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;phasedeg&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_phase</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;phaserad&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">data_plot</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">sw</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_phase</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">(</span><span class=\"si\">{}</span><span class=\"s2\">)&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">math_formula</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">xlabel</span><span class=\"p\">:</span>\n            <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"n\">sweep_name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ylabel</span><span class=\"p\">:</span>\n            <span class=\"n\">ylabel</span> <span class=\"o\">=</span> <span class=\"n\">math_formula</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">title</span><span class=\"p\">:</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Simulation Results Plot&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data_plot</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">15</span><span class=\"p\">:</span>\n            <span class=\"n\">show_legend</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_polar</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">plot_polar_chart</span><span class=\"p\">(</span><span class=\"n\">data_plot</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">show_legend</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">snapshot_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">plot_2d_chart</span><span class=\"p\">(</span><span class=\"n\">data_plot</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">show_legend</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">snapshot_path</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.plot_3d\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.plot_3d/#pyaedt.modules.solutions.SolutionData.plot_3d\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot_3d</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">x_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">y_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">math_formula</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span>\n        <span class=\"n\">snapshot_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a matplotlib 3d plot based on a list of data.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        curve : str</span>\n<span class=\"sd\">            Curve to be plotted. If None, the first curve will be plotted.</span>\n<span class=\"sd\">        x_axis : str, optional</span>\n<span class=\"sd\">            X Axis sweep. Default is `&quot;Theta&quot;`.</span>\n<span class=\"sd\">        y_axis : str, optional</span>\n<span class=\"sd\">            Y Axis sweep. Default is `&quot;Phi&quot;`.</span>\n<span class=\"sd\">        math_formula : str , optional</span>\n<span class=\"sd\">            Mathematical formula to apply to the plot curve.</span>\n<span class=\"sd\">            Valid values are `&quot;re&quot;`, `&quot;im&quot;`, `&quot;db20&quot;`, `&quot;db10&quot;`, `&quot;abs&quot;`, `&quot;mag&quot;`, `&quot;phasedeg&quot;`, `&quot;phaserad&quot;`.</span>\n<span class=\"sd\">        size : tuple, optional</span>\n<span class=\"sd\">            Image size in pixel (width, height).</span>\n<span class=\"sd\">        snapshot_path : str</span>\n<span class=\"sd\">            Full path to image file if a snapshot is needed.</span>\n<span class=\"sd\">        is_polar : bool, optional</span>\n<span class=\"sd\">            Set to `True` if this is a polar plot.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`matplotlib.plt`</span>\n<span class=\"sd\">            Matplotlib fig object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">curve</span><span class=\"p\">:</span>\n            <span class=\"n\">curve</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_expression</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">math_formula</span><span class=\"p\">:</span>\n            <span class=\"n\">math_formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mag&quot;</span>\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"n\">x_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">y_axis_val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"n\">y_axis</span><span class=\"p\">)</span>\n\n        <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">y_axis_val</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_variation</span><span class=\"p\">[</span><span class=\"n\">y_axis</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">el</span>\n            <span class=\"n\">phi</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;re&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_real</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;im&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_imag</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;db20&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_db20</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;db10&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_db10</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;mag&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_magnitude</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;phasedeg&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_phase</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"n\">math_formula</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;phaserad&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_phase</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n        <span class=\"n\">active_sweep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active_intrinsic</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">]</span>\n        <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">active_sweep</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primary_sweep</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">new_r</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n                <span class=\"n\">new_r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">el</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]])</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">new_r</span>\n        <span class=\"n\">data_plot</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">xlabel</span><span class=\"p\">:</span>\n            <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"n\">x_axis</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ylabel</span><span class=\"p\">:</span>\n            <span class=\"n\">ylabel</span> <span class=\"o\">=</span> <span class=\"n\">y_axis</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">title</span><span class=\"p\">:</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Simulation Results Plot&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">plot_3d_chart</span><span class=\"p\">(</span><span class=\"n\">data_plot</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">snapshot_path</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.ifft\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.ifft/#pyaedt.modules.solutions.SolutionData.ifft\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ifft</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">curve_header</span><span class=\"o\">=</span><span class=\"s2\">&quot;NearE&quot;</span><span class=\"p\">,</span> <span class=\"n\">u_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;_u&quot;</span><span class=\"p\">,</span> <span class=\"n\">v_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;_v&quot;</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create IFFT of given complex data.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        curve_header : curve header. Solution data must contain 3 curves with X, Y and Z components of curve header.</span>\n<span class=\"sd\">        u_axis : str, optional</span>\n<span class=\"sd\">            U Axis name. Default is Hfss name &quot;_u&quot;</span>\n<span class=\"sd\">        v_axis : str, optional</span>\n<span class=\"sd\">            V Axis name. Default is Hfss name &quot;_v&quot;</span>\n<span class=\"sd\">        window : bool, optional</span>\n<span class=\"sd\">            Either if Hanning windowing has to be applied.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            IFFT Matrix.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"n\">u_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"n\">v_axis</span><span class=\"p\">)</span>\n\n        <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"s2\">&quot;Freq&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enable_pandas_output</span><span class=\"p\">:</span>\n            <span class=\"n\">E_realx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_imagx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_realy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_imagy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_realz</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_imagz</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">vals_real_Ex</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n            <span class=\"n\">vals_imag_Ex</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n            <span class=\"n\">vals_real_Ey</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n            <span class=\"n\">vals_imag_Ey</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n            <span class=\"n\">vals_real_Ez</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_real</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n            <span class=\"n\">vals_imag_Ez</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_solutions_imag</span><span class=\"p\">[</span><span class=\"n\">curve_header</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()]</span>\n\n            <span class=\"n\">E_realx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">vals_real_Ex</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_imagx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">vals_imag_Ex</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_realy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">vals_real_Ey</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_imagy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">vals_imag_Ey</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_realz</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">vals_real_Ez</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n            <span class=\"n\">E_imagz</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">vals_imag_Ez</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">Temp_E_compx</span> <span class=\"o\">=</span> <span class=\"n\">E_realx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">E_imagx</span>  <span class=\"c1\"># Here is the complex FD data matrix, ready for transforming</span>\n        <span class=\"n\">Temp_E_compy</span> <span class=\"o\">=</span> <span class=\"n\">E_realy</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">E_imagy</span>\n        <span class=\"n\">Temp_E_compz</span> <span class=\"o\">=</span> <span class=\"n\">E_realz</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">E_imagz</span>\n\n        <span class=\"n\">E_compx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s2\">&quot;complex_&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">E_compy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s2\">&quot;complex_&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">E_compz</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s2\">&quot;complex_&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">window</span><span class=\"p\">:</span>\n            <span class=\"n\">timewin</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hanning</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">))</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)):</span>\n                <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)):</span>\n                    <span class=\"n\">E_compx</span><span class=\"p\">[:,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">Temp_E_compx</span><span class=\"p\">[:,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">],</span> <span class=\"n\">timewin</span><span class=\"p\">)</span>\n                    <span class=\"n\">E_compy</span><span class=\"p\">[:,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">Temp_E_compy</span><span class=\"p\">[:,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">],</span> <span class=\"n\">timewin</span><span class=\"p\">)</span>\n                    <span class=\"n\">E_compz</span><span class=\"p\">[:,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">Temp_E_compz</span><span class=\"p\">[:,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">],</span> <span class=\"n\">timewin</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">E_compx</span> <span class=\"o\">=</span> <span class=\"n\">Temp_E_compx</span>\n            <span class=\"n\">E_compy</span> <span class=\"o\">=</span> <span class=\"n\">Temp_E_compy</span>\n            <span class=\"n\">E_compz</span> <span class=\"o\">=</span> <span class=\"n\">Temp_E_compz</span>\n\n        <span class=\"n\">E_time_x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">ifft</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">fftshift</span><span class=\"p\">(</span><span class=\"n\">E_compx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">E_time_y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">ifft</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">fftshift</span><span class=\"p\">(</span><span class=\"n\">E_compy</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">E_time_z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">ifft</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">fftshift</span><span class=\"p\">(</span><span class=\"n\">E_compz</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">E_time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)))</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">)):</span>\n            <span class=\"n\">E_time</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span>\n                <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">E_time_x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:])</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">E_time_y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:])</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">(</span><span class=\"n\">E_time_z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">:,</span> <span class=\"p\">:]))</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ifft</span> <span class=\"o\">=</span> <span class=\"n\">E_time</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ifft</span></div>\n\n<div class=\"viewcode-block\" id=\"SolutionData.ifft_to_file\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.SolutionData.ifft_to_file/#pyaedt.modules.solutions.SolutionData.ifft_to_file\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ifft_to_file</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">u_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;_u&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">v_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;_v&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">coord_system_center</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">db_val</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">num_frames</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">csv_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;res_&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save IFFT Matrix to a list of csv files (one per time step).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        u_axis : str, optional</span>\n<span class=\"sd\">            U Axis name. Default is Hfss name &quot;_u&quot;</span>\n<span class=\"sd\">        v_axis : str, optional</span>\n<span class=\"sd\">            V Axis name. Default is Hfss name &quot;_v&quot;</span>\n<span class=\"sd\">        coord_system_center : list, optional</span>\n<span class=\"sd\">            List of UV GlobalCS Center.</span>\n<span class=\"sd\">        db_val : bool, optional</span>\n<span class=\"sd\">            Either if data has to be exported in db or not.</span>\n<span class=\"sd\">        num_frames : int, optional</span>\n<span class=\"sd\">            Number of frames to export.</span>\n<span class=\"sd\">        csv_dir : str</span>\n<span class=\"sd\">            Output path</span>\n<span class=\"sd\">        name_str : str, optional</span>\n<span class=\"sd\">            csv file header.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Path to file containing the list of csv files.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">coord_system_center</span><span class=\"p\">:</span>\n            <span class=\"n\">coord_system_center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">t_matrix</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ifft</span>\n        <span class=\"n\">x_c_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"n\">u_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">y_c_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variation_values</span><span class=\"p\">(</span><span class=\"n\">v_axis</span><span class=\"p\">)</span>\n\n        <span class=\"n\">adj_x</span> <span class=\"o\">=</span> <span class=\"n\">coord_system_center</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">adj_y</span> <span class=\"o\">=</span> <span class=\"n\">coord_system_center</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">adj_z</span> <span class=\"o\">=</span> <span class=\"n\">coord_system_center</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_frames</span><span class=\"p\">:</span>\n            <span class=\"n\">frames</span> <span class=\"o\">=</span> <span class=\"n\">num_frames</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">frames</span> <span class=\"o\">=</span> <span class=\"n\">t_matrix</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">csv_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">csv_dir</span><span class=\"p\">):</span>\n            <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">csv_dir</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">csv_dir</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">name_str</span> <span class=\"ow\">in</span> <span class=\"n\">f</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;.csv&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n                <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">csv_dir</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">frame</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">frames</span><span class=\"p\">):</span>\n            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">csv_dir</span><span class=\"p\">,</span> <span class=\"n\">name_str</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.csv&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">list_full</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;z&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;val&quot;</span><span class=\"p\">]]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">y_c_list</span><span class=\"p\">):</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">x_c_list</span><span class=\"p\">):</span>\n                    <span class=\"n\">y_coord</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">adj_y</span>\n                    <span class=\"n\">x_coord</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">adj_x</span>\n                    <span class=\"n\">z_coord</span> <span class=\"o\">=</span> <span class=\"n\">adj_z</span>\n                    <span class=\"k\">if</span> <span class=\"n\">db_val</span><span class=\"p\">:</span>\n                        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">t_matrix</span><span class=\"p\">[</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]))</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">t_matrix</span><span class=\"p\">[</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span>\n                    <span class=\"n\">row_lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x_coord</span><span class=\"p\">,</span> <span class=\"n\">y_coord</span><span class=\"p\">,</span> <span class=\"n\">z_coord</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">]</span>\n                    <span class=\"n\">list_full</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row_lst</span><span class=\"p\">)</span>\n            <span class=\"n\">write_csv</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">list_full</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">csv_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n\n        <span class=\"n\">txt_file_name</span> <span class=\"o\">=</span> <span class=\"n\">csv_dir</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;fft_list.txt&quot;</span>\n        <span class=\"n\">textfile</span> <span class=\"o\">=</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">txt_file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">csv_list</span><span class=\"p\">:</span>\n            <span class=\"n\">textfile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">element</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">textfile</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">txt_file_name</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData/#pyaedt.modules.solutions.FfdSolutionData\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FfdSolutionData</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Contains Hfss Far Field Solution Data (ffd).&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">app</span><span class=\"p\">,</span>\n        <span class=\"n\">sphere_name</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n        <span class=\"n\">frequencies</span><span class=\"p\">,</span>\n        <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">taper</span><span class=\"o\">=</span><span class=\"s2\">&quot;flat&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">sbr_3d_comp_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">levels</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_port_indexes</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_max</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sphere_name</span> <span class=\"o\">=</span> <span class=\"n\">sphere_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sbr_comp</span> <span class=\"o\">=</span> <span class=\"n\">sbr_3d_comp_name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">frequencies</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">frequencies</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequencies</span> <span class=\"o\">=</span> <span class=\"n\">frequencies</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequencies</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"n\">variations</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">overwrite</span> <span class=\"o\">=</span> <span class=\"n\">overwrite</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_solutions</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_export_all_ffd</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_solutions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_lattice_vectors</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">taper</span> <span class=\"o\">=</span> <span class=\"n\">taper</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_ffd</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase_offset</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_ffd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">all_ports</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">valid_ffd</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span><span class=\"p\">[</span><span class=\"n\">all_ports</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]):</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span><span class=\"p\">[</span><span class=\"n\">all_ports</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n                <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()]</span>\n                <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()]</span>\n            <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">port</span><span class=\"p\">:</span>\n                    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">temp_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                <span class=\"n\">theta_range</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n                <span class=\"n\">phi_range</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">]):</span>\n                    <span class=\"n\">eep_txt</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">],</span> <span class=\"n\">skiprows</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n                    <span class=\"n\">Etheta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vectorize</span><span class=\"p\">(</span><span class=\"nb\">complex</span><span class=\"p\">)(</span><span class=\"n\">eep_txt</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">eep_txt</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                    <span class=\"n\">Ephi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vectorize</span><span class=\"p\">(</span><span class=\"nb\">complex</span><span class=\"p\">)(</span><span class=\"n\">eep_txt</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">eep_txt</span><span class=\"p\">[:,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n                    <span class=\"c1\"># eep=np.column_stack((etheta, ephi))</span>\n                    <span class=\"n\">temp_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">theta_range</span>\n                    <span class=\"n\">temp_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">phi_range</span>\n                    <span class=\"n\">temp_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Etheta</span>\n                    <span class=\"n\">temp_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;rEPhi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ephi</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp_dict</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">valid_ffd</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"n\">valid_ffd</span><span class=\"p\">:</span>\n                <span class=\"c1\"># differential area of sphere, based on observation angle</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">d_theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">theta_range</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">theta_range</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">d_phi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">phi_range</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">phi_range</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">diff_area</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">d_theta</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">d_phi</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">theta_range</span><span class=\"p\">))</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_samples</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">temp_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">])</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span><span class=\"p\">:</span>\n                    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_port_indexes</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_port_indexes</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_array_index</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solution_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DrivenModal&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unique_beams</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renormalize</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renormalize_dB</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renorm_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">valid_ffd</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;ERROR: Far Field Files are Missing&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">valid_ffd</span> <span class=\"o\">=</span> <span class=\"n\">valid_ffd</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lattice_vectors</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lattice_vectors</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lattice_vectors</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lattice_vectors</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase_offset</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mag_offset</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get/set the Active Frequency.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span>\n\n    <span class=\"nd\">@frequency</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">frequency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequencies</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_frequency</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ffd_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_all_solutions</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequencies</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_ffd</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase_offset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Additional phase offset in degrees on each port. Useful when element has more than one port.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase_offset</span>\n\n    <span class=\"nd\">@phase_offset</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase_offset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">phases</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">phases</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Number of phases must be equal to number of ports&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">phases_to_rad</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">phase</span> <span class=\"ow\">in</span> <span class=\"n\">phases</span><span class=\"p\">:</span>\n                <span class=\"n\">phases_to_rad</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase_offset</span> <span class=\"o\">=</span> <span class=\"n\">phases_to_rad</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mag_offset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Additional magnitude on each port. Useful when element has more than one port.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mag_offset</span>\n\n    <span class=\"nd\">@mag_offset</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">mag_offset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mags</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mags</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Number of magnitude must be equal to number of ports&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mag_offset</span> <span class=\"o\">=</span> <span class=\"n\">mags</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.get_array_index\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.get_array_index/#pyaedt.modules.solutions.FfdSolutionData.get_array_index\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_array_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">port_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get index of a given port.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        port_name : str</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_port_indexes</span> <span class=\"ow\">and</span> <span class=\"n\">port_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_port_indexes</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_port_indexes</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"n\">port_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;[&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;]&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">index_str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">index_str</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.array_min_max_values\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.array_min_max_values/#pyaedt.modules.solutions.FfdSolutionData.array_min_max_values\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">array_min_max_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Array bounding box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">row_min</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">row_max</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">col_min</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">col_max</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">portstring</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">:</span>\n            <span class=\"n\">index_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_array_index</span><span class=\"p\">(</span><span class=\"n\">portstring</span><span class=\"p\">)</span>\n            <span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">cols</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"n\">row_min</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span>\n        <span class=\"n\">row_max</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span>\n        <span class=\"n\">col_min</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">)</span>\n        <span class=\"n\">col_max</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">col_min</span><span class=\"p\">,</span> <span class=\"n\">col_max</span><span class=\"p\">,</span> <span class=\"n\">row_min</span><span class=\"p\">,</span> <span class=\"n\">row_max</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.array_center_and_edge\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.array_center_and_edge/#pyaedt.modules.solutions.FfdSolutionData.array_center_and_edge\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">array_center_and_edge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Find the center and edge of our array, assumes all ports in far field</span>\n<span class=\"sd\">        mapping file are active ports.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">AMax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">BMax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">RMax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">XMax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">YMax</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">CenterA</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">CenterB</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">CenterX</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">CenterY</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"c1\"># collecting all active cells inside the specified region</span>\n        <span class=\"n\">activeCells</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">)):</span>\n            <span class=\"n\">index_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_array_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">row</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">col</span>\n\n            <span class=\"n\">activeCells</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>  <span class=\"c1\"># because ffd is assuming all ffd files are active</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">activeCells</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"p\">[</span><span class=\"n\">a_min</span><span class=\"p\">,</span> <span class=\"n\">a_max</span><span class=\"p\">,</span> <span class=\"n\">b_min</span><span class=\"p\">,</span> <span class=\"n\">b_max</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">array_min_max_values</span><span class=\"p\">()</span>\n\n        <span class=\"n\">CenterA</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a_min</span> <span class=\"o\">+</span> <span class=\"n\">a_max</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">CenterB</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">b_min</span> <span class=\"o\">+</span> <span class=\"n\">b_max</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">CenterX</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">CenterA</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">CenterB</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span>\n        <span class=\"n\">CenterY</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">CenterA</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">CenterB</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterA</span> <span class=\"o\">=</span> <span class=\"n\">CenterA</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterB</span> <span class=\"o\">=</span> <span class=\"n\">CenterB</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterX</span> <span class=\"o\">=</span> <span class=\"n\">CenterX</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterY</span> <span class=\"o\">=</span> <span class=\"n\">CenterY</span>\n        <span class=\"c1\"># find the distance from the edge to the center</span>\n        <span class=\"n\">AMax</span> <span class=\"o\">=</span> <span class=\"n\">a_max</span> <span class=\"o\">-</span> <span class=\"n\">a_min</span>\n        <span class=\"n\">BMax</span> <span class=\"o\">=</span> <span class=\"n\">b_max</span> <span class=\"o\">-</span> <span class=\"n\">b_min</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AMax</span> <span class=\"o\">=</span> <span class=\"n\">AMax</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BMax</span> <span class=\"o\">=</span> <span class=\"n\">BMax</span>\n        <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">activeCells</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span>\n            <span class=\"n\">x_dis</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">CenterX</span><span class=\"p\">)</span>\n            <span class=\"n\">y_dis</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">CenterY</span><span class=\"p\">)</span>\n            <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x_dis</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">y_dis</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">XMax</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">XMax</span><span class=\"p\">,</span> <span class=\"n\">x_dis</span><span class=\"p\">)</span>\n            <span class=\"n\">YMax</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">YMax</span><span class=\"p\">,</span> <span class=\"n\">y_dis</span><span class=\"p\">)</span>\n            <span class=\"n\">RMax</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">RMax</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RMax</span> <span class=\"o\">=</span> <span class=\"n\">RMax</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">XMax</span> <span class=\"o\">=</span> <span class=\"n\">XMax</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">YMax</span> <span class=\"o\">=</span> <span class=\"n\">YMax</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RMax</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">XMax</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">YMax</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.element_location\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.element_location/#pyaedt.modules.solutions.FfdSolutionData.element_location\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">element_location</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Element location in the array.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : int</span>\n<span class=\"sd\">        b : int</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span>\n        <span class=\"n\">x_dis</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterX</span>\n        <span class=\"n\">y_dis</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterY</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">x_dis</span><span class=\"p\">,</span> <span class=\"n\">y_dis</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.assign_weight\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.assign_weight/#pyaedt.modules.solutions.FfdSolutionData.assign_weight\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_weight</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">taper</span><span class=\"o\">=</span><span class=\"s2\">&quot;flat&quot;</span><span class=\"p\">,</span> <span class=\"n\">port_cont</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Assign weight to array.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : int</span>\n<span class=\"sd\">            Inndex of array, column.</span>\n<span class=\"sd\">        b : int</span>\n<span class=\"sd\">            Inndex of array, row.</span>\n<span class=\"sd\">        taper : string, optional</span>\n<span class=\"sd\">            This is the type of taper we want to apply. The default is &#39;flat&#39;.</span>\n<span class=\"sd\">            It can be ``&quot;cosine&quot;``, ``&quot;triangular&quot;``, ``&quot;hamming&quot;`` or ``&quot;flat&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Weight to applied to specific index of array.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">taper</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;flat&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># Flat</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mag_offset</span><span class=\"p\">[</span><span class=\"n\">port_cont</span><span class=\"p\">]</span>\n\n        <span class=\"n\">cosinePow</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">edgeTaper_dB</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">200</span>\n\n        <span class=\"n\">edgeTaper</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"p\">((</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">edgeTaper_dB</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n        <span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mf\">1e-10</span>\n        <span class=\"n\">length_in_direction1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">max_length_in_dir1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">length_in_direction2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">max_length_in_dir2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># find the distance between current cell and array center in terms of index</span>\n        <span class=\"n\">length_in_direction1</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterA</span>\n        <span class=\"n\">length_in_direction2</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CenterB</span>\n        <span class=\"n\">max_length_in_dir1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AMax</span>\n        <span class=\"n\">max_length_in_dir2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BMax</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">taper</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;cosine&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># Cosine</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length_in_dir1</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">edgeTaper</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n                    <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">length_in_direction1</span> <span class=\"o\">/</span> <span class=\"n\">max_length_in_dir1</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"n\">cosinePow</span> <span class=\"o\">+</span> <span class=\"n\">edgeTaper</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length_in_dir2</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">edgeTaper</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n                    <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">length_in_direction2</span> <span class=\"o\">/</span> <span class=\"n\">max_length_in_dir2</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"n\">cosinePow</span> <span class=\"o\">+</span> <span class=\"n\">edgeTaper</span>\n        <span class=\"k\">elif</span> <span class=\"n\">taper</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;triangular&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># Triangular</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length_in_dir1</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">edgeTaper</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">length_in_direction1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">max_length_in_dir1</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"n\">edgeTaper</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length_in_dir2</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">edgeTaper</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">length_in_direction2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">max_length_in_dir2</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"n\">edgeTaper</span>\n        <span class=\"k\">elif</span> <span class=\"n\">taper</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hamming&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># Hamming Window</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length_in_dir1</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"mf\">0.54</span> <span class=\"o\">-</span> <span class=\"mf\">0.46</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">length_in_direction1</span> <span class=\"o\">/</span> <span class=\"n\">max_length_in_dir1</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length_in_dir2</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"mf\">0.54</span> <span class=\"o\">-</span> <span class=\"mf\">0.46</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">length_in_direction2</span> <span class=\"o\">/</span> <span class=\"n\">max_length_in_dir2</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">w1</span> <span class=\"o\">*</span> <span class=\"n\">w2</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mag_offset</span><span class=\"p\">[</span><span class=\"n\">port_cont</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.beamform\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.beamform/#pyaedt.modules.solutions.FfdSolutionData.beamform\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">beamform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">phi_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Compute the far field pattern calculated for a specific phi/scan angle requested.</span>\n<span class=\"sd\">        This is calculated based on the lattice vector spacing and the embedded element</span>\n<span class=\"sd\">        patterns of a ca-ddm or fa-ddm array in HFSS.</span>\n<span class=\"sd\">        Calculates phase shifts between array elements in A and B directions,</span>\n<span class=\"sd\">        PhaseShiftA and PhaseShiftB, given Wave Vector (k), lattice vectors</span>\n<span class=\"sd\">        (Ax, Ay, Bx, By), Scan angles (theta, phi) using formula below</span>\n<span class=\"sd\">        Phase Shift A = - (Ax*k*sin(theta)*cos(phi) + Ay*k*sin(theta)*sin(phi))</span>\n<span class=\"sd\">        Phase Shift B = - (Bx*k*sin(theta)*cos(phi) + By*k*sin(theta)*sin(phi)).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        phi_scan : int, float</span>\n<span class=\"sd\">            Spherical cs for desired scan angle of beam.</span>\n<span class=\"sd\">        theta_scan: : int, float</span>\n<span class=\"sd\">            Spherical cs for desired scan angle of beam.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Updated quantities dictionary.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">num_ports</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">array_center_and_edge</span><span class=\"p\">()</span>\n\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">299792458</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">c</span>\n\n        <span class=\"n\">theta_scan</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">theta_scan</span><span class=\"p\">)</span>\n        <span class=\"n\">phi_scan</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">)</span>\n\n        <span class=\"n\">phase_shift_A_rad</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">))</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">phase_shift_B_rad</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">))</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">w_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">w_dict_ang</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">w_dict_mag</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">array_positions</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">port_cont</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">port_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">:</span>\n            <span class=\"n\">index_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_array_index</span><span class=\"p\">(</span><span class=\"n\">port_name</span><span class=\"p\">)</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"n\">w_mag</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assign_weight</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">taper</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">taper</span><span class=\"p\">,</span> <span class=\"n\">port_cont</span><span class=\"o\">=</span><span class=\"n\">port_cont</span><span class=\"p\">)),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"n\">w_ang</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">phase_offset</span><span class=\"p\">[</span><span class=\"n\">port_cont</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">phase_shift_A_rad</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">phase_shift_B_rad</span><span class=\"p\">)</span>\n            <span class=\"n\">w_dict</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">w_mag</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">w_ang</span><span class=\"p\">)</span>\n            <span class=\"n\">w_dict_ang</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w_ang</span>\n            <span class=\"n\">w_dict_mag</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w_mag</span>\n            <span class=\"n\">array_positions</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">element_location</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n            <span class=\"n\">port_cont</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">length_of_ff_data</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"n\">rEtheta_fields</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">num_ports</span><span class=\"p\">,</span> <span class=\"n\">length_of_ff_data</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n        <span class=\"n\">rEphi_fields</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">num_ports</span><span class=\"p\">,</span> <span class=\"n\">length_of_ff_data</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num_ports</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n        <span class=\"c1\"># create port mapping</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">):</span>\n            <span class=\"n\">re_theta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># this is re_theta index of loaded data</span>\n            <span class=\"n\">re_phi</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;rEPhi&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># this is re_ohi index of loaded data</span>\n\n            <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">]</span>  <span class=\"c1\"># build 1xNumPorts array of weights</span>\n\n            <span class=\"n\">rEtheta_fields</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">re_theta</span>\n            <span class=\"n\">rEphi_fields</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">re_phi</span>\n\n            <span class=\"n\">theta_range</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">phi_range</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">Ntheta</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">theta_range</span><span class=\"p\">)</span>\n            <span class=\"n\">Nphi</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">phi_range</span><span class=\"p\">)</span>\n\n        <span class=\"n\">rEtheta_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">rEtheta_fields</span><span class=\"p\">)</span>\n        <span class=\"n\">rEtheta_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">rEtheta_fields_sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ntheta</span><span class=\"p\">,</span> <span class=\"n\">Nphi</span><span class=\"p\">))</span>\n\n        <span class=\"n\">rEphi_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">rEphi_fields</span><span class=\"p\">)</span>\n        <span class=\"n\">rEphi_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">rEphi_fields_sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ntheta</span><span class=\"p\">,</span> <span class=\"n\">Nphi</span><span class=\"p\">))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rEPhi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rEphi_fields_sum</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rEtheta_fields_sum</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETotal&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">rEphi_fields_sum</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">rEtheta_fields_sum</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">theta_range</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">phi_range</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;nPhi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Nphi</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;nTheta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ntheta</span>\n        <span class=\"n\">pin</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Pincident&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pin</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Incident Power: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">pin</span><span class=\"p\">)</span>\n        <span class=\"n\">real_gain</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETotal&quot;</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">pin</span> <span class=\"o\">/</span> <span class=\"mi\">377</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">real_gain</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;RealizedGain_dB&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">real_gain</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">real_gain</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_gain</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">real_gain</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Peak Realized Gain: </span><span class=\"si\">%s</span><span class=\"s2\"> dB&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Element_Location&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">array_positions</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.beamform_2beams\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.beamform_2beams/#pyaedt.modules.solutions.FfdSolutionData.beamform_2beams\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">beamform_2beams</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">phi_scan1</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta_scan1</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">phi_scan2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta_scan2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Compute the far field pattern calculated for a specific phi/scan angle requested.</span>\n<span class=\"sd\">        This is calculated based on the lattice vector spacing and the embedded element</span>\n<span class=\"sd\">        patterns of a ca-ddm or fa-ddm array in HFSS.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        phi_scan1 : int, float</span>\n<span class=\"sd\">            Spherical cs for desired scan angle of beam.</span>\n<span class=\"sd\">        theta_scan1: : int, float</span>\n<span class=\"sd\">            Spherical cs for desired scan angle of beam.</span>\n<span class=\"sd\">        phi_scan2 : int, float</span>\n<span class=\"sd\">            Spherical cs for desired scan angle of second beam.</span>\n<span class=\"sd\">        theta_scan2 : int, float</span>\n<span class=\"sd\">            Spherical cs for desired scan angle of second beam.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Updated quantities dictionary.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">num_ports</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">array_center_and_edge</span><span class=\"p\">()</span>\n\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">299792458</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">c</span>\n\n        <span class=\"c1\"># ---------------------- METHOD : CalculatePhaseShifts -------------------</span>\n        <span class=\"c1\"># Calculates phase shifts between array elements in A and B directions,</span>\n        <span class=\"c1\"># PhaseShiftA and PhaseShiftB, given Wave Vector (k), lattice vectors</span>\n        <span class=\"c1\"># (Ax, Ay, Bx, By), Scan angles (theta, phi) using formula below</span>\n        <span class=\"c1\"># Phase Shift A = - (Ax*k*sin(theta)*cos(phi) + Ay*k*sin(theta)*sin(phi))</span>\n        <span class=\"c1\"># Phase Shift B = - (Bx*k*sin(theta)*cos(phi) + By*k*sin(theta)*sin(phi))</span>\n        <span class=\"c1\"># ------------------------------------------------------------------------</span>\n\n        <span class=\"n\">theta_scan1</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">theta_scan1</span><span class=\"p\">)</span>\n        <span class=\"n\">phi_scan1</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">phi_scan1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">theta_scan2</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">theta_scan2</span><span class=\"p\">)</span>\n        <span class=\"n\">phi_scan2</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">phi_scan2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">phase_shift_A_rad1</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_scan1</span><span class=\"p\">))</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_scan1</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">phase_shift_B_rad1</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_scan1</span><span class=\"p\">))</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_scan1</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">phase_shift_A_rad2</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ax</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_scan2</span><span class=\"p\">))</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Ay</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_scan2</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">phase_shift_B_rad2</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Bx</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_scan2</span><span class=\"p\">))</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">By</span> <span class=\"o\">*</span> <span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_scan2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_scan2</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">w_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">w_dict_ang</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">w_dict_mag</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">array_positions</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">port_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">port_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">:</span>\n            <span class=\"n\">index_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_array_index</span><span class=\"p\">(</span><span class=\"n\">port_name</span><span class=\"p\">)</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">index_str</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">w_mag1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assign_weight</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">taper</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">taper</span><span class=\"p\">,</span> <span class=\"n\">port_count</span><span class=\"o\">=</span><span class=\"n\">port_count</span><span class=\"p\">)),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"n\">w_ang1</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">phase_shift_A_rad1</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">phase_shift_B_rad1</span>\n\n            <span class=\"n\">w_mag2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assign_weight</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">taper</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">taper</span><span class=\"p\">,</span> <span class=\"n\">port_count</span><span class=\"o\">=</span><span class=\"n\">port_count</span><span class=\"p\">)),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"n\">w_ang2</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">phase_shift_A_rad2</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">phase_shift_B_rad2</span>\n\n            <span class=\"n\">w_dict</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">w_mag1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">w_ang1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">w_mag2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">w_ang2</span><span class=\"p\">)</span>\n            <span class=\"n\">w_dict_ang</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">angle</span><span class=\"p\">(</span><span class=\"n\">w_dict</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">])</span>\n            <span class=\"n\">w_dict_mag</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">w_dict</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">])</span>\n\n            <span class=\"n\">array_positions</span><span class=\"p\">[</span><span class=\"n\">port_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">element_location</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n            <span class=\"n\">port_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">length_of_ff_data</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]][</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">rEtheta_fields</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">num_ports</span><span class=\"p\">,</span> <span class=\"n\">length_of_ff_data</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n        <span class=\"n\">rEphi_fields</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">num_ports</span><span class=\"p\">,</span> <span class=\"n\">length_of_ff_data</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num_ports</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n        <span class=\"c1\"># create port mapping</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_port_names</span><span class=\"p\">):</span>\n            <span class=\"n\">re_theta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># this is re_theta index of loaded data</span>\n            <span class=\"n\">re_phi</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;rEPhi&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># this is re_ohi index of loaded data</span>\n\n            <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">]</span>  <span class=\"c1\"># build 1xNumPorts array of weights</span>\n\n            <span class=\"n\">rEtheta_fields</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">re_theta</span>\n            <span class=\"n\">rEphi_fields</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">re_phi</span>\n\n            <span class=\"n\">theta_range</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">phi_range</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">port</span><span class=\"p\">][</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">Ntheta</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">theta_range</span><span class=\"p\">)</span>\n            <span class=\"n\">Nphi</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">phi_range</span><span class=\"p\">)</span>\n\n        <span class=\"n\">rEtheta_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">rEtheta_fields</span><span class=\"p\">)</span>\n        <span class=\"n\">rEtheta_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">rEtheta_fields_sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ntheta</span><span class=\"p\">,</span> <span class=\"n\">Nphi</span><span class=\"p\">))</span>\n\n        <span class=\"n\">rEphi_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">rEphi_fields</span><span class=\"p\">)</span>\n        <span class=\"n\">rEphi_fields_sum</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">rEphi_fields_sum</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Ntheta</span><span class=\"p\">,</span> <span class=\"n\">Nphi</span><span class=\"p\">))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rEPhi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rEphi_fields_sum</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETheta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rEtheta_fields_sum</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETotal&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">rEphi_fields_sum</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">rEtheta_fields_sum</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">theta_range</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">phi_range</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;nPhi&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Nphi</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;nTheta&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Ntheta</span>\n        <span class=\"n\">pin</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Pincident&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pin</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Incident Power: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">pin</span><span class=\"p\">)</span>\n        <span class=\"n\">real_gain</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;rETotal&quot;</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"n\">pin</span> <span class=\"o\">/</span> <span class=\"mi\">377</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">real_gain</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;RealizedGain_dB&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">real_gain</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">real_gain</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_gain</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">real_gain</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Peak Realized Gain: </span><span class=\"si\">%s</span><span class=\"s2\"> dB&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Element_Location&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">array_positions</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_far_field_mesh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">,</span> <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">convert_to_db</span><span class=\"p\">:</span>\n            <span class=\"n\">ff_data</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"n\">qty_str</span><span class=\"p\">])</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ff_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"n\">qty_str</span><span class=\"p\">]</span>\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]))</span>\n        <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_qtys</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">get_structured_mesh</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">ff_data</span><span class=\"o\">=</span><span class=\"n\">ff_data</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.get_lattice_vectors\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.get_lattice_vectors/#pyaedt.modules.solutions.FfdSolutionData.get_lattice_vectors\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_lattice_vectors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Compute Lattice vectors for Antenna Arrays or return default array in case of simple antenna analysis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sbr_comp</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sbr_comp</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">:</span>\n            <span class=\"n\">component_props</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;NativeComponentDefinitionProvider&quot;</span>\n            <span class=\"n\">comp_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">user_defined_components</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sbr_comp</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;Project&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">native_properties</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()):</span>\n                <span class=\"c1\"># Project opened</span>\n                <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">native_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">proj_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">close</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">proj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_list</span><span class=\"p\">:</span>\n                    <span class=\"n\">close</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">OpenProject</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">)</span>\n                <span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"n\">get_pyaedt_app</span><span class=\"p\">(</span><span class=\"n\">proj_name</span><span class=\"p\">,</span> <span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">native_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;Design&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">comp_units</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n                <span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">omodelsetup</span><span class=\"o\">.</span><span class=\"n\">GetLatticeVectors</span><span class=\"p\">()</span>\n                <span class=\"n\">source_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">available_report_quantities</span><span class=\"p\">(</span><span class=\"n\">quantities_category</span><span class=\"o\">=</span><span class=\"s2\">&quot;VSWR&quot;</span><span class=\"p\">)]</span>\n                <span class=\"k\">for</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"n\">source_names</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;[&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;]&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)])</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"n\">close</span><span class=\"p\">:</span>\n                    <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">close_project</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Project not opened</span>\n                <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">native_properties</span><span class=\"p\">[</span><span class=\"n\">component_props</span><span class=\"p\">][</span><span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">proj_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">close</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">proj_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_list</span><span class=\"p\">:</span>\n                    <span class=\"n\">close</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">OpenProject</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">)</span>\n                <span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"n\">get_pyaedt_app</span><span class=\"p\">(</span><span class=\"n\">proj_name</span><span class=\"p\">,</span> <span class=\"n\">comp_obj</span><span class=\"o\">.</span><span class=\"n\">native_properties</span><span class=\"p\">[</span><span class=\"n\">component_props</span><span class=\"p\">][</span><span class=\"s2\">&quot;Design&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">omodelsetup</span><span class=\"o\">.</span><span class=\"n\">GetLatticeVectors</span><span class=\"p\">()</span>\n                <span class=\"n\">comp_units</span> <span class=\"o\">=</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n                <span class=\"n\">source_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">available_report_quantities</span><span class=\"p\">(</span><span class=\"n\">quantities_category</span><span class=\"o\">=</span><span class=\"s2\">&quot;VSWR&quot;</span><span class=\"p\">)]</span>\n                <span class=\"k\">for</span> <span class=\"n\">port</span> <span class=\"ow\">in</span> <span class=\"n\">source_names</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;[&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;]&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">str1</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)])</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_native_indexes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"k\">if</span> <span class=\"n\">close</span><span class=\"p\">:</span>\n                    <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">close_project</span><span class=\"p\">(</span><span class=\"n\">save_project</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">unit_converter</span><span class=\"p\">(</span>\n                    <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">lattice_vectors</span><span class=\"p\">],</span>\n                    <span class=\"n\">unit_system</span><span class=\"o\">=</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">input_units</span><span class=\"o\">=</span><span class=\"n\">comp_units</span><span class=\"p\">,</span>\n                    <span class=\"n\">output_units</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">omodelsetup</span><span class=\"o\">.</span><span class=\"n\">GetLatticeVectors</span><span class=\"p\">()</span>\n                <span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">vec</span> <span class=\"ow\">in</span> <span class=\"n\">lattice_vectors</span>\n                <span class=\"p\">]</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">lattice_vectors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">lattice_vectors</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_export_all_ffd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">exported_name_base</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;eep&quot;</span>\n        <span class=\"n\">exported_name_map</span> <span class=\"o\">=</span> <span class=\"n\">exported_name_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.txt&quot;</span>\n        <span class=\"n\">sol_setup_name_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">path_dict</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">frequency</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">frequencies</span><span class=\"p\">:</span>\n            <span class=\"n\">full_setup_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">-</span><span class=\"si\">{}</span><span class=\"s2\">-</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sol_setup_name_str</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sphere_name</span><span class=\"p\">,</span> <span class=\"n\">frequency</span><span class=\"p\">)</span>\n            <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">/</span><span class=\"si\">{}</span><span class=\"s2\">/eep/&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"n\">full_setup_str</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session</span><span class=\"p\">:</span>\n                <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                <span class=\"n\">file_exists</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">pathexists</span><span class=\"p\">(</span><span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.txt&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">):</span>\n                <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                <span class=\"n\">file_exists</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.txt&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">file_exists</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.txt&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path_dict</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({})</span>\n            <span class=\"n\">time_before</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">overwrite</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">file_exists</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exporting Embedded Element Patterns...&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n                <span class=\"n\">variation</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oradfield</span><span class=\"o\">.</span><span class=\"n\">ExportElementPatternToFile</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;ExportFileName:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.ffd&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;SetupName:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sphere_name</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;IntrinsicVariationKey:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;Freq=&#39;&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;DesignVariationKey:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">variation</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;SolutionName:=&quot;</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_name</span><span class=\"p\">,</span>\n                        <span class=\"p\">]</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to export one Element Pattern.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.ffd&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Using Existing Embedded Element Patterns&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">/</span><span class=\"si\">{}</span><span class=\"s2\">/eep/&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_rpc_session_temp_folder</span><span class=\"p\">,</span> <span class=\"n\">full_setup_str</span><span class=\"p\">)</span>\n            <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">check_and_download_folder</span><span class=\"p\">(</span><span class=\"n\">local_path</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_map</span><span class=\"p\">):</span>\n                <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">exported_name_map</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n                    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">]</span>\n                <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>  <span class=\"c1\"># remove header</span>\n                <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                        <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">port</span><span class=\"p\">:</span>\n                            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"n\">path_dict</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">port</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">export_path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.ffd&quot;</span>\n        <span class=\"n\">elapsed_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">time_before</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exporting Embedded Element Patterns...Done: </span><span class=\"si\">%s</span><span class=\"s2\"> seconds&quot;</span><span class=\"p\">,</span> <span class=\"n\">elapsed_time</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">path_dict</span>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.plot_farfield_contour\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.plot_farfield_contour/#pyaedt.modules.solutions.FfdSolutionData.plot_farfield_contour\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot_farfield_contour</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">phi_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">theta_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;RectangularPlot&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">export_image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a Contour plot of specified quantity.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        qty_str : str, optional</span>\n<span class=\"sd\">            Quantity to plot. Default `&quot;RealizedGain&quot;`.</span>\n<span class=\"sd\">        phi_scan : float, int, optional</span>\n<span class=\"sd\">            Phi Scan Angle in degree. Default `0`.</span>\n<span class=\"sd\">        theta_scan : float, int, optional</span>\n<span class=\"sd\">            Theta Scan Angle in degree. Default `0`.</span>\n<span class=\"sd\">        title : str, optional</span>\n<span class=\"sd\">            Plot title. Default `&quot;RectangularPlot&quot;`.</span>\n<span class=\"sd\">        convert_to_db : bool, optional</span>\n<span class=\"sd\">            Either if the quantity has to be converted in db or not. Default is `True`.</span>\n<span class=\"sd\">        export_image_path : str, optional</span>\n<span class=\"sd\">            Full path to image file. Default is None to not export.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`matplotlib.plt`</span>\n<span class=\"sd\">            Matplotlib fig object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">,</span> <span class=\"n\">theta_scan</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">qty_str</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">qty_to_plot</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n            <span class=\"n\">qty_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Data&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">qty_to_plot</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">qty_str</span><span class=\"p\">]</span>\n        <span class=\"n\">qty_to_plot</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">qty_to_plot</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;nTheta&quot;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;nPhi&quot;</span><span class=\"p\">]))</span>\n        <span class=\"n\">th</span><span class=\"p\">,</span> <span class=\"n\">ph</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">convert_to_db</span><span class=\"p\">:</span>\n            <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;Gain&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span><span class=\"p\">:</span>\n                <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n            <span class=\"n\">qty_to_plot</span> <span class=\"o\">=</span> <span class=\"n\">factor</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">qty_to_plot</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">plot_contour</span><span class=\"p\">(</span>\n            <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">th</span><span class=\"p\">,</span>\n            <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">ph</span><span class=\"p\">,</span>\n            <span class=\"n\">qty_to_plot</span><span class=\"o\">=</span><span class=\"n\">qty_to_plot</span><span class=\"p\">,</span>\n            <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta (degree)&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi (degree)&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">levels</span><span class=\"p\">,</span>\n            <span class=\"n\">snapshot_path</span><span class=\"o\">=</span><span class=\"n\">export_image_path</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.plot_2d_cut\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.plot_2d_cut/#pyaedt.modules.solutions.FfdSolutionData.plot_2d_cut\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot_2d_cut</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">primary_sweep</span><span class=\"o\">=</span><span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">secondary_sweep_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">phi_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">theta_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Far Field Cut&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">export_image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a 2D plot of specified quantity in matplotlib.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        qty_str : str, optional</span>\n<span class=\"sd\">            Quantity to plot. Default `&quot;RealizedGain&quot;`.</span>\n<span class=\"sd\">        primary_sweep : str, optional.</span>\n<span class=\"sd\">            X Axis variable. Default is `&quot;phi&quot;`. Option is  `&quot;theta&quot;`.</span>\n<span class=\"sd\">        secondary_sweep_value : float, list, string, optional</span>\n<span class=\"sd\">            List of cuts on secondary sweep to plot. Options are `&quot;all&quot;`, single value float or list of float.</span>\n<span class=\"sd\">        phi_scan : float, int, optional</span>\n<span class=\"sd\">            Phi Scan Angle in degree. Default `0`.</span>\n<span class=\"sd\">        theta_scan : float, int, optional</span>\n<span class=\"sd\">            Theta Scan Angle in degree. Default `0`.</span>\n<span class=\"sd\">        title : str, optional</span>\n<span class=\"sd\">            Plot title. Default `&quot;RectangularPlot&quot;`.</span>\n<span class=\"sd\">        convert_to_db : bool, optional</span>\n<span class=\"sd\">            Either if the quantity has to be converted in db or not. Default is `True`.</span>\n<span class=\"sd\">        export_image_path : str, optional</span>\n<span class=\"sd\">            Full path to image file. Default is None to not export.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`matplotlib.plt`</span>\n<span class=\"sd\">            Matplotlib fig object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">,</span> <span class=\"n\">theta_scan</span><span class=\"p\">)</span>\n\n        <span class=\"n\">data_to_plot</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">qty_str</span><span class=\"p\">]</span>\n        <span class=\"n\">curves</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">primary_sweep</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">x_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Phi&quot;</span>\n            <span class=\"n\">y_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Theta&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">y_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Phi&quot;</span>\n            <span class=\"n\">x_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Theta&quot;</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">x_key</span><span class=\"p\">]</span>\n        <span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"n\">x_key</span>\n        <span class=\"k\">if</span> <span class=\"n\">x_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">data_to_plot</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">data_to_plot</span><span class=\"o\">.</span><span class=\"n\">T</span>\n        <span class=\"k\">if</span> <span class=\"n\">secondary_sweep_value</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;all&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">y_key</span><span class=\"p\">]:</span>\n                <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_find_nearest</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">y_key</span><span class=\"p\">],</span> <span class=\"n\">el</span><span class=\"p\">)</span>\n                <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">convert_to_db</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;Gain&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;Dir&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span><span class=\"p\">:</span>\n                        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                <span class=\"n\">curves</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">y_key</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">)])</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">secondary_sweep_value</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">list_inserted</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">secondary_sweep_value</span><span class=\"p\">:</span>\n                <span class=\"n\">theta_idx</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_find_nearest</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">y_key</span><span class=\"p\">],</span> <span class=\"n\">el</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">theta_idx</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">list_inserted</span><span class=\"p\">:</span>\n                    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">theta_idx</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"n\">convert_to_db</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"s2\">&quot;Gain&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;Dir&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span><span class=\"p\">:</span>\n                            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                    <span class=\"n\">curves</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">y_key</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">)])</span>\n                    <span class=\"n\">list_inserted</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">theta_idx</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">theta_idx</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_find_nearest</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">y_key</span><span class=\"p\">],</span> <span class=\"n\">secondary_sweep_value</span><span class=\"p\">)</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">theta_idx</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">convert_to_db</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;Gain&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;Dir&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">qty_str</span><span class=\"p\">:</span>\n                    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n            <span class=\"n\">curves</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">y_key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">y_key</span><span class=\"p\">][</span><span class=\"n\">theta_idx</span><span class=\"p\">])])</span>\n        <span class=\"n\">show_legend</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">curves</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">15</span><span class=\"p\">:</span>\n            <span class=\"n\">show_legend</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">plot_2d_chart</span><span class=\"p\">(</span>\n            <span class=\"n\">curves</span><span class=\"p\">,</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"n\">xlabel</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"n\">qty_str</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">snapshot_path</span><span class=\"o\">=</span><span class=\"n\">export_image_path</span><span class=\"p\">,</span> <span class=\"n\">show_legend</span><span class=\"o\">=</span><span class=\"n\">show_legend</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.polar_plot_3d\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.polar_plot_3d/#pyaedt.modules.solutions.FfdSolutionData.polar_plot_3d\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">polar_plot_3d</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">phi_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">theta_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;3D Plot&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">export_image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a 3d plot of specified quantity.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        qty_str : str, optional</span>\n<span class=\"sd\">            Quantity to plot. Default `&quot;RealizedGain&quot;`.</span>\n<span class=\"sd\">        phi_scan : float, int, optional</span>\n<span class=\"sd\">            Phi Scan Angle in degree. Default `0`.</span>\n<span class=\"sd\">        theta_scan : float, int, optional</span>\n<span class=\"sd\">            Theta Scan Angle in degree. Default `0`.</span>\n<span class=\"sd\">        title : str, optional</span>\n<span class=\"sd\">            Plot title. Default `&quot;3D Plot&quot;`.</span>\n<span class=\"sd\">        convert_to_db : bool, optional</span>\n<span class=\"sd\">            Either if the quantity has to be converted in db or not. Default is `True`.</span>\n<span class=\"sd\">        export_image_path : str, optional</span>\n<span class=\"sd\">            Full path to image file. Default is None to not export.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"p\">,</span> <span class=\"n\">theta_scan</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">convert_to_db</span><span class=\"p\">:</span>\n            <span class=\"n\">ff_data</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">log10</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">qty_str</span><span class=\"p\">])</span>\n            <span class=\"c1\"># renormalize to 0 and 1</span>\n            <span class=\"n\">ff_max_dB</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ff_data</span><span class=\"p\">)</span>\n            <span class=\"n\">ff_min_dB</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ff_data</span><span class=\"p\">)</span>\n            <span class=\"n\">ff_data_renorm</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ff_data</span> <span class=\"o\">-</span> <span class=\"n\">ff_min_dB</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">ff_max_dB</span> <span class=\"o\">-</span> <span class=\"n\">ff_min_dB</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ff_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">qty_str</span><span class=\"p\">]</span>\n            <span class=\"c1\"># renormalize to 0 and 1</span>\n            <span class=\"n\">ff_max</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">ff_data</span><span class=\"p\">)</span>\n            <span class=\"n\">ff_min</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">ff_data</span><span class=\"p\">)</span>\n            <span class=\"n\">ff_data_renorm</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ff_data</span> <span class=\"o\">-</span> <span class=\"n\">ff_max</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">ff_max</span> <span class=\"o\">-</span> <span class=\"n\">ff_min</span><span class=\"p\">)</span>\n\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]))</span>\n        <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">deg2rad</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">]))</span>\n        <span class=\"n\">phi_grid</span><span class=\"p\">,</span> <span class=\"n\">theta_grid</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">meshgrid</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">)</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"n\">ff_data_renorm</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">]),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">])))</span>\n\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_grid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">phi_grid</span><span class=\"p\">)</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta_grid</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">phi_grid</span><span class=\"p\">)</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta_grid</span><span class=\"p\">)</span>\n        <span class=\"n\">plot_3d_chart</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">],</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">snapshot_path</span><span class=\"o\">=</span><span class=\"n\">export_image_path</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_geometry</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">is_antenna_array</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">time_before</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exporting Geometry...&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># obj is being exported as model units, scaling factor needed for display</span>\n        <span class=\"n\">sf</span> <span class=\"o\">=</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">]</span>\n\n        <span class=\"n\">bounding_box</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">obounding_box</span>\n        <span class=\"n\">xmax</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">ymax</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">zmax</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\n        <span class=\"n\">geo_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"se\">\\\\</span><span class=\"s2\">geo</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">geo_path</span><span class=\"p\">):</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">geo_path</span><span class=\"p\">)</span>\n\n        <span class=\"n\">model_pv</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">get_model_plotter_geometries</span><span class=\"p\">(</span><span class=\"n\">plot_air_objects</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"n\">obj_meshes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_antenna_array</span><span class=\"p\">:</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">model_pv</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Element_Location&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">_cached_polydata</span>\n                    <span class=\"n\">translated_mesh</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n                    <span class=\"n\">offset_xyz</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">&quot;Element_Location&quot;</span><span class=\"p\">][</span><span class=\"n\">each</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">sf</span>\n                    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">offset_xyz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"n\">xmax</span><span class=\"p\">:</span>  <span class=\"c1\"># assume array is centere, factor of 2</span>\n                        <span class=\"n\">xmax</span> <span class=\"o\">=</span> <span class=\"n\">offset_xyz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n                    <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">offset_xyz</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"n\">ymax</span><span class=\"p\">:</span>  <span class=\"c1\"># assume array is centere, factor of 2</span>\n                        <span class=\"n\">ymax</span> <span class=\"o\">=</span> <span class=\"n\">offset_xyz</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n                    <span class=\"n\">translated_mesh</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">offset_xyz</span>\n                    <span class=\"n\">translated_mesh</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">offset_xyz</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"n\">color_cad</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">255</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"p\">]</span>\n\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">obj_meshes</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n                        <span class=\"n\">obj_meshes</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">translated_mesh</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">obj_meshes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">translated_mesh</span><span class=\"p\">,</span> <span class=\"n\">color_cad</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">])</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">center</span><span class=\"p\">:</span>\n                    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">obj_meshes</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">center</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">obj_meshes</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">)]</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">k</span> <span class=\"o\">/</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">center</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_max</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">xmax</span><span class=\"p\">,</span> <span class=\"n\">ymax</span><span class=\"p\">,</span> <span class=\"n\">zmax</span><span class=\"p\">]))</span>\n        <span class=\"n\">elapsed_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">time_before</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exporting Geometry...Done: </span><span class=\"si\">%s</span><span class=\"s2\"> seconds&quot;</span><span class=\"p\">,</span> <span class=\"n\">elapsed_time</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">mesh</span> <span class=\"ow\">in</span> <span class=\"n\">obj_meshes</span><span class=\"p\">:</span>\n            <span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj_meshes</span>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.polar_plot_3d_pyvista\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.polar_plot_3d_pyvista/#pyaedt.modules.solutions.FfdSolutionData.polar_plot_3d_pyvista\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">polar_plot_3d_pyvista</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">export_image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">show_as_standalone</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a 3d Polar Plot of Geometry with Radiation Pattern in Pyvista.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        qty_str : str, optional</span>\n<span class=\"sd\">            Quantity to plot. Default `&quot;RealizedGain&quot;`.</span>\n<span class=\"sd\">        convert_to_db : bool, optional</span>\n<span class=\"sd\">            Either if the quantity has to be converted in db or not. Default is `True`.</span>\n<span class=\"sd\">        export_image_path : str, optional</span>\n<span class=\"sd\">            Full path to image file. Default is None to not export.</span>\n<span class=\"sd\">        position : list, optional</span>\n<span class=\"sd\">            It can be a list of numpy list of origin of plot. Default is [0,0,0].</span>\n<span class=\"sd\">        rotation : list, optional</span>\n<span class=\"sd\">            It can be a list of numpy list of origin of plot.</span>\n<span class=\"sd\">            Default is [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]].</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">            Either if the plot has to be shown or not. Default is `True`.</span>\n<span class=\"sd\">        show_outside_notebook : bool, optional</span>\n<span class=\"sd\">            Either if the plot has to be shown as standalone or not. Default is `True`.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        PyVista object</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">position</span><span class=\"p\">:</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rotation</span><span class=\"p\">:</span>\n            <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta_scan</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">plot_min</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">40</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_far_field_mesh</span><span class=\"p\">(</span><span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"n\">qty_str</span><span class=\"p\">,</span> <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"n\">convert_to_db</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># plot everything together</span>\n        <span class=\"n\">rotation_euler</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rotation_to_euler_angles</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n        <span class=\"k\">if</span> <span class=\"n\">show_as_standalone</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Plotter</span><span class=\"p\">(</span><span class=\"n\">notebook</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">off_screen</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">show</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Plotter</span><span class=\"p\">(</span><span class=\"n\">notebook</span><span class=\"o\">=</span><span class=\"n\">is_notebook</span><span class=\"p\">(),</span> <span class=\"n\">off_screen</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">show</span><span class=\"p\">)</span>\n\n        <span class=\"n\">uf</span> <span class=\"o\">=</span> <span class=\"n\">UpdateBeamForm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n            <span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">update_phi</span><span class=\"p\">,</span>\n            <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">],</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.55</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.74</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;always&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">title_height</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n            <span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">update_theta</span><span class=\"p\">,</span>\n            <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">],</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.77</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.98</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;always&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">title_height</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># sargs = dict(height=0.4, vertical=True, position_x=0.05, position_y=0.5)</span>\n        <span class=\"n\">sargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n            <span class=\"n\">title_font_size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span>\n            <span class=\"n\">label_font_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"n\">shadow</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">n_labels</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n            <span class=\"n\">italic</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%.1f</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">font_family</span><span class=\"o\">=</span><span class=\"s2\">&quot;arial&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">vertical</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">position_x</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n            <span class=\"n\">position_y</span><span class=\"o\">=</span><span class=\"mf\">0.65</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n            <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.06</span><span class=\"p\">,</span>\n            <span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># ff_mesh_inst = p.add_mesh(uf.output,smooth_shading=True,cmap=&quot;jet&quot;,scalar_bar_args=sargs,opacity=0.5)</span>\n        <span class=\"c1\"># not sure why, but smooth_shading causes this to not update</span>\n\n        <span class=\"n\">ff_mesh_inst</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s2\">&quot;jet&quot;</span><span class=\"p\">,</span> <span class=\"n\">clim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">plot_min</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">],</span> <span class=\"n\">scalar_bar_args</span><span class=\"o\">=</span><span class=\"n\">sargs</span><span class=\"p\">)</span>\n        <span class=\"n\">cad_mesh</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_geometry</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">cad_mesh</span><span class=\"p\">:</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">toggle_vis_ff</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">):</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetVisibility</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">toggle_vis_cad</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">cad</span><span class=\"p\">:</span>\n                    <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">SetVisibility</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">scale</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetScale</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetOrientation</span><span class=\"p\">(</span><span class=\"n\">rotation_euler</span><span class=\"p\">)</span>\n                <span class=\"c1\"># p.add_mesh(ff_mesh, smooth_shading=True,cmap=&quot;jet&quot;)</span>\n                <span class=\"k\">return</span>\n\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_checkbox_button_widget</span><span class=\"p\">(</span><span class=\"n\">toggle_vis_ff</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Show Far Fields&quot;</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;white&quot;</span><span class=\"p\">,</span> <span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n            <span class=\"n\">slider_max</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_max</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">slider_max</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">slider_min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">slider_max</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">slider_min</span> <span class=\"o\">=</span> <span class=\"n\">slider_max</span>\n                <span class=\"n\">slider_max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">slider_min</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n                <span class=\"n\">scale</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"n\">slider_min</span><span class=\"p\">,</span> <span class=\"n\">slider_max</span><span class=\"p\">],</span>\n                <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Scale Plot&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.93</span><span class=\"p\">),</span>\n                <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.99</span><span class=\"p\">,</span> <span class=\"mf\">0.93</span><span class=\"p\">),</span>\n                <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">title_height</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"n\">cad</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cad_mesh</span><span class=\"p\">:</span>\n                <span class=\"n\">cad</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">cm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">show_scalar_bar</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">cm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_checkbox_button_widget</span><span class=\"p\">(</span><span class=\"n\">toggle_vis_cad</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Show Geometry&quot;</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">),</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;white&quot;</span><span class=\"p\">,</span> <span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">export_image_path</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"n\">export_image_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">p</span></div>\n\n<div class=\"viewcode-block\" id=\"FfdSolutionData.polar_plot_3d_pyvista_2beams\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FfdSolutionData.polar_plot_3d_pyvista_2beams/#pyaedt.modules.solutions.FfdSolutionData.polar_plot_3d_pyvista_2beams\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">polar_plot_3d_pyvista_2beams</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"s2\">&quot;RealizedGain&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">export_image_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a 3d Polar Plot with 2 beams of Geometry with Radiation Pattern in Pyvista.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        qty_str : str, optional</span>\n<span class=\"sd\">            Quantity to plot. Default `&quot;RealizedGain&quot;`.</span>\n<span class=\"sd\">        convert_to_db : bool, optional</span>\n<span class=\"sd\">            Either if the quantity has to be converted in db or not. Default is `True`.</span>\n<span class=\"sd\">        export_image_path : str, optional</span>\n<span class=\"sd\">            Full path to image file. Default is None to not export.</span>\n<span class=\"sd\">        position : list, optional</span>\n<span class=\"sd\">            It can be a list of numpy list of origin of plot. Default is [0,0,0].</span>\n<span class=\"sd\">        rotationn : list, optional</span>\n<span class=\"sd\">            It can be a list of numpy list of origin of plot.</span>\n<span class=\"sd\">            Default is [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]].</span>\n<span class=\"sd\">        show : bool, optional</span>\n<span class=\"sd\">            Either if the plot has to be shown or not. Default is `True`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        PyVista object</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">position</span><span class=\"p\">:</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rotation</span><span class=\"p\">:</span>\n            <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">beamform_2beams</span><span class=\"p\">(</span><span class=\"n\">phi_scan1</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta_scan1</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">phi_scan2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta_scan2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_far_field_mesh</span><span class=\"p\">(</span><span class=\"n\">qty_str</span><span class=\"o\">=</span><span class=\"n\">qty_str</span><span class=\"p\">,</span> <span class=\"n\">convert_to_db</span><span class=\"o\">=</span><span class=\"n\">convert_to_db</span><span class=\"p\">)</span>\n\n        <span class=\"n\">uf</span> <span class=\"o\">=</span> <span class=\"n\">Update2BeamForms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">)</span>\n        <span class=\"n\">rotation_euler</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rotation_to_euler_angles</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">Plotter</span><span class=\"p\">(</span><span class=\"n\">notebook</span><span class=\"o\">=</span><span class=\"n\">is_notebook</span><span class=\"p\">(),</span> <span class=\"n\">off_screen</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">show</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">768</span><span class=\"p\">])</span>\n\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n            <span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">update_phi1</span><span class=\"p\">,</span>\n            <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">],</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi1&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.35</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.64</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;always&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n            <span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">update_theta1</span><span class=\"p\">,</span>\n            <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">],</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta1&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.67</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.98</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">),</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;always&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n            <span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">update_phi2</span><span class=\"p\">,</span>\n            <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">],</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Phi2&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.35</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">),</span>\n            <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.64</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">),</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;always&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span>\n            <span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">update_theta2</span><span class=\"p\">,</span>\n            <span class=\"n\">rng</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">],</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Theta2&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">pointa</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.67</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">),</span>\n            <span class=\"n\">pointb</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.98</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">),</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;modern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">event_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;always&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">sargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">vertical</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">position_x</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">position_y</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ff_mesh_inst = p.add_mesh(uf.output,smooth_shading=True,cmap=&quot;jet&quot;,scalar_bar_args=sargs,opacity=0.5)</span>\n        <span class=\"c1\"># not sure why, but smooth_shading causes this to not update</span>\n        <span class=\"n\">plot_min</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_gain</span>\n        <span class=\"n\">ff_mesh_inst</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">uf</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s2\">&quot;jet&quot;</span><span class=\"p\">,</span> <span class=\"n\">clim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">plot_min</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">],</span> <span class=\"n\">scalar_bar_args</span><span class=\"o\">=</span><span class=\"n\">sargs</span><span class=\"p\">)</span>\n        <span class=\"n\">cad_mesh</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_geometry</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">cad_mesh</span><span class=\"p\">:</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">toggle_vis_ff</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">):</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetVisibility</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">toggle_vis_cad</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">cad</span><span class=\"p\">:</span>\n                    <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">SetVisibility</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">scale</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetScale</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n                <span class=\"n\">ff_mesh_inst</span><span class=\"o\">.</span><span class=\"n\">SetOrientation</span><span class=\"p\">(</span><span class=\"n\">rotation_euler</span><span class=\"p\">)</span>\n                <span class=\"c1\"># p.add_mesh(ff_mesh, smooth_shading=True,cmap=&quot;jet&quot;)</span>\n                <span class=\"k\">return</span>\n\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_checkbox_button_widget</span><span class=\"p\">(</span><span class=\"n\">toggle_vis_ff</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Show Far Fields&quot;</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;black&quot;</span><span class=\"p\">,</span> <span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n            <span class=\"n\">slider_max</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_max</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_gain</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">slider_max</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">slider_min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">slider_max</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">slider_min</span> <span class=\"o\">=</span> <span class=\"n\">slider_max</span>\n                <span class=\"n\">slider_max</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">slider_min</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_slider_widget</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">slider_max</span><span class=\"p\">],</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Scale Plot&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;MaterialIds&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cad_mesh</span><span class=\"o\">.</span><span class=\"n\">array_names</span><span class=\"p\">:</span>\n                <span class=\"n\">color_display_type</span> <span class=\"o\">=</span> <span class=\"n\">cad_mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;MaterialIds&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">color_display_type</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">cad</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">cm</span> <span class=\"ow\">in</span> <span class=\"n\">cad_mesh</span><span class=\"p\">:</span>\n                <span class=\"n\">cad</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_mesh</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">cm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">show_scalar_bar</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"n\">cm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n            <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">window_size</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_checkbox_button_widget</span><span class=\"p\">(</span><span class=\"n\">toggle_vis_cad</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">))</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Show Geometry&quot;</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">),</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">&quot;black&quot;</span><span class=\"p\">,</span> <span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">export_image_path</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"n\">export_image_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">p</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_find_nearest</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">searchsorted</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s2\">&quot;left&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">idx</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"n\">idx</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">idx</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_rotation_to_euler_angles</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">):</span>\n\n        <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">singular</span> <span class=\"o\">=</span> <span class=\"n\">sy</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1e-6</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">singular</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">)</span>\n            <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">)</span>\n            <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">])</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UpdateBeamForm</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c1\"># default parameters</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span> <span class=\"o\">=</span> <span class=\"n\">ff</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qty_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RealizedGain&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_db</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_both</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">beamform</span><span class=\"p\">(</span><span class=\"n\">phi_scan</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi</span><span class=\"p\">,</span> <span class=\"n\">theta_scan</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta</span><span class=\"p\">)</span>\n        <span class=\"c1\"># perc_of_maxgain= self.ff.max_gain/self.max_value</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">_get_far_field_mesh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qty_str</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_db</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">overwrite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_phi</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates the Pyvista Plot with new phi value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi</span> <span class=\"o\">=</span> <span class=\"n\">phi</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_both</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_theta</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates the Pyvista Plot with new theta value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta</span> <span class=\"o\">=</span> <span class=\"n\">theta</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_both</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Update2BeamForms</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_value</span> <span class=\"o\">=</span> <span class=\"n\">max_value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c1\"># default parameters</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span> <span class=\"o\">=</span> <span class=\"n\">ff</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qty_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RealizedGain&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_db</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_both</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">beamform_2beams</span><span class=\"p\">(</span>\n            <span class=\"n\">phi_scan1</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi1</span><span class=\"p\">,</span> <span class=\"n\">theta_scan1</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta1</span><span class=\"p\">,</span> <span class=\"n\">phi_scan2</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi2</span><span class=\"p\">,</span> <span class=\"n\">theta_scan2</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta2</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">_get_far_field_mesh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">qty_str</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_db</span><span class=\"p\">)</span>\n        <span class=\"n\">current_max</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;FarFieldData&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_value</span> <span class=\"o\">-</span> <span class=\"n\">current_max</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;FarFieldData&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"p\">[</span><span class=\"s2\">&quot;FarFieldData&quot;</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">delta</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">overwrite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">mesh</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_phi1</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">phi1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates the Pyvista Plot with new phi1 value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi1</span> <span class=\"o\">=</span> <span class=\"n\">phi1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_both</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_theta1</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theta1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates the Pyvista Plot with new theta1 value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta1</span> <span class=\"o\">=</span> <span class=\"n\">theta1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_both</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_phi2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">phi2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates the Pyvista Plot with new phi2 value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phi2</span> <span class=\"o\">=</span> <span class=\"n\">phi2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_both</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_theta2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theta2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates the Pyvista Plot with new theta2 value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theta2</span> <span class=\"o\">=</span> <span class=\"n\">theta2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_both</span><span class=\"p\">()</span>\n\n\n<div class=\"viewcode-block\" id=\"FieldPlot\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot/#pyaedt.modules.solutions.FieldPlot\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FieldPlot</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Creates and edits field plots.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    postprocessor : :class:`pyaedt.modules.PostProcessor.PostProcessor`</span>\n\n<span class=\"sd\">    objlist : list</span>\n<span class=\"sd\">        List of objects.</span>\n<span class=\"sd\">    solutionName : str</span>\n<span class=\"sd\">        Name of the solution.</span>\n<span class=\"sd\">    quantityName : str</span>\n<span class=\"sd\">        Name of the plot or the name of the object.</span>\n<span class=\"sd\">    intrinsincList : dict, optional</span>\n<span class=\"sd\">        Name of the intrinsic dictionary. The default is ``{}``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">postprocessor</span><span class=\"p\">,</span>\n        <span class=\"n\">objlist</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n        <span class=\"n\">surfacelist</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n        <span class=\"n\">linelist</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n        <span class=\"n\">cutplanelist</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n        <span class=\"n\">solutionName</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">quantityName</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">intrinsincList</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span> <span class=\"o\">=</span> <span class=\"n\">postprocessor</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span> <span class=\"o\">=</span> <span class=\"n\">postprocessor</span><span class=\"o\">.</span><span class=\"n\">ofieldsreporter</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">volume_indexes</span> <span class=\"o\">=</span> <span class=\"n\">objlist</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfaces_indexes</span> <span class=\"o\">=</span> <span class=\"n\">surfacelist</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line_indexes</span> <span class=\"o\">=</span> <span class=\"n\">linelist</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cutplane_indexes</span> <span class=\"o\">=</span> <span class=\"n\">cutplanelist</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solutionName</span> <span class=\"o\">=</span> <span class=\"n\">solutionName</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quantityName</span> <span class=\"o\">=</span> <span class=\"n\">quantityName</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span> <span class=\"o\">=</span> <span class=\"n\">intrinsincList</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Field_Plot&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotFolder</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Field_Plot&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Filled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">IsoVal</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Fringe&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SmoothShade</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AddGrid</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MapTransparency</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Refinement</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Transparency</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SmoothingLevel</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowUniform</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowSpacing</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MinArrowSpacing</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MaxArrowSpacing</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GridColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">PlotIsoSurface</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">PointSize</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CloudSpacing</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CloudMinSpacing</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CloudMaxSpacing</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plotGeomInfo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Plot geometry information.&quot;&quot;&quot;</span>\n        <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">volume_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfaces_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cutplane_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">volume_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Volume&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ObjList&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">volume_indexes</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">volume_indexes</span><span class=\"p\">:</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfaces_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">model_faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">nonmodel_faces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_objects</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfaces_indexes</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">FacePrimitive</span><span class=\"p\">):</span>\n                        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">id</span>\n                    <span class=\"n\">oname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByFaceID</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">oname</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">:</span>\n                        <span class=\"n\">model_faces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">nonmodel_faces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Surface&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">model_faces</span><span class=\"p\">:</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;FacesList&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">model_faces</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">model_faces</span><span class=\"p\">:</span>\n                    <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">nonmodel_faces</span><span class=\"p\">:</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NonModelFaceList&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nonmodel_faces</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">nonmodel_faces</span><span class=\"p\">:</span>\n                    <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cutplane_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Surface&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CutPlane&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cutplane_indexes</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cutplane_indexes</span><span class=\"p\">:</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line_indexes</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line_indexes</span><span class=\"p\">:</span>\n                <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">info</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intrinsicVar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Intrinsic variable.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list or dict</span>\n<span class=\"sd\">            List or dictionary of the variables for the field plot.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">while</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">):</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;:=&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">ll</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:=&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">var</span> <span class=\"o\">+=</span> <span class=\"n\">ll</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;=&#39;&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&#39; &quot;</span>\n                <span class=\"n\">l</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">:</span>\n                <span class=\"n\">var</span> <span class=\"o\">+=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;=&#39;&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsincList</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&#39; &quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">var</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plotsettings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Plot settings.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of plot settings.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfaces_indexes</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cutplane_indexes</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:PlotOnSurfaceSettings&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Filled:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Filled</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;IsoValType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">IsoVal</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SmoothShade:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SmoothShade</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;AddGrid:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AddGrid</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;MapTransparency:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MapTransparency</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Refinement:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Refinement</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Transparency:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Transparency</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SmoothingLevel:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SmoothingLevel</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Arrow3DSpacingSettings&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ArrowUniform:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowUniform</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowSpacing</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MinArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MinArrowSpacing</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MaxArrowSpacing</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"s2\">&quot;GridColor:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GridColor</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:PlotOnVolumeSettings&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;PlotIsoSurface:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">PlotIsoSurface</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;PointSize:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">PointSize</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Refinement:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Refinement</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;CloudSpacing:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CloudSpacing</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;CloudMinSpacing:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CloudMinSpacing</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;CloudMaxSpacing:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CloudMaxSpacing</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Arrow3DSpacingSettings&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ArrowUniform:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowUniform</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowSpacing</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MinArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MinArrowSpacing</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MaxArrowSpacing</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">surfacePlotInstruction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Surface plot settings.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of surface plot settings.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SolutionName:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solutionName</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;QuantityName:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quantityName</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;PlotFolder:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotFolder</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;UserSpecifyName:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;UserSpecifyFolder:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;StreamlinePlot:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;AdjacentSidePlot:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;FullModelPlot:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IntrinsicVar:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intrinsicVar</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;PlotGeomInfo:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotGeomInfo</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;FilterBoxes:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotsettings</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;EnableGaussianSmoothing:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">field_plot_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Field Plot Settings.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Field Plot Settings.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:FieldsPlotItemSettings&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:PlotOnSurfaceSettings&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Filled:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Filled</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;IsoValType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">IsoVal</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;AddGrid:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">AddGrid</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;MapTransparency:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MapTransparency</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Refinement:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Refinement</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Transparency:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Transparency</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SmoothingLevel:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SmoothingLevel</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ShadingType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SmoothShade</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Arrow3DSpacingSettings&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ArrowUniform:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowUniform</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ArrowSpacing</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MinArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MinArrowSpacing</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;MaxArrowSpacing:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MaxArrowSpacing</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"s2\">&quot;GridColor:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GridColor</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.create\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.create/#pyaedt.modules.solutions.FieldPlot.create\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a field plot.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span><span class=\"o\">.</span><span class=\"n\">CreateFieldPlot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfacePlotInstruction</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Field&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.update\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.update/#pyaedt.modules.solutions.FieldPlot.update\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update the field plot.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           This method works on any plot created inside PyAEDT.</span>\n<span class=\"sd\">           For Plot already existing in AEDT Design it may produce incorrect results.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span><span class=\"o\">.</span><span class=\"n\">ModifyFieldPlot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surfacePlotInstruction</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.update_field_plot_settings\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.update_field_plot_settings/#pyaedt.modules.solutions.FieldPlot.update_field_plot_settings\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_field_plot_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Modify the field plot settings.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span><span class=\"o\">.</span><span class=\"n\">SetFieldPlotSettings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:FieldsPlotItemSettings&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotsettings</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.delete\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.delete/#pyaedt.modules.solutions.FieldPlot.delete\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the field plot.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span><span class=\"o\">.</span><span class=\"n\">DeleteFieldPlot</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">field_plots</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.change_plot_scale\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.change_plot_scale/#pyaedt.modules.solutions.FieldPlot.change_plot_scale\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change_plot_scale</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">minimum_value</span><span class=\"p\">,</span> <span class=\"n\">maximum_value</span><span class=\"p\">,</span> <span class=\"n\">is_log</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">is_db</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Change Field Plot Scale.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        minimum_value : str, float</span>\n<span class=\"sd\">            Minimum value of the scale.</span>\n<span class=\"sd\">        maximum_value : str, float</span>\n<span class=\"sd\">            Maximum value of the scale.</span>\n<span class=\"sd\">        is_log : bool, optional</span>\n<span class=\"sd\">            Set to ``True`` if Log Scale is setup.</span>\n<span class=\"sd\">        is_db : bool, optional</span>\n<span class=\"sd\">            Set to ``True`` if dB Scale is setup.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.SetPlotFolderSettings</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:FieldsPlotSettings&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Real Time mode:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n        <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:ColorMaPSettings&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ColorMapType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Spectrum&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SpectrumType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Rainbow&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;UniformColor:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"mi\">127</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;RampColor:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">127</span><span class=\"p\">,</span> <span class=\"mi\">127</span><span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">args</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Scale3DSettings&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;minvalue:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">minimum_value</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;maxvalue:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">maximum_value</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;log:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"ow\">not</span> <span class=\"n\">is_log</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dB:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">is_db</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ScaleType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span><span class=\"o\">.</span><span class=\"n\">SetPlotFolderSettings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotFolder</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.export_image\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.export_image/#pyaedt.modules.solutions.FieldPlot.export_image\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">full_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">1920</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">1080</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"o\">=</span><span class=\"s2\">&quot;isometric&quot;</span><span class=\"p\">,</span> <span class=\"n\">display_wireframe</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Export the active plot to an image file.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           There are some limitations on HFSS 3D Layout plots.</span>\n\n<span class=\"sd\">        full_path : str, optional</span>\n<span class=\"sd\">            Path for saving the image file. PNG and GIF formats are supported.</span>\n<span class=\"sd\">            The default is ``None`` which export file in working_directory.</span>\n<span class=\"sd\">        width : int, optional</span>\n<span class=\"sd\">            Plot Width.</span>\n<span class=\"sd\">        height : int, optional</span>\n<span class=\"sd\">            Plot height.</span>\n<span class=\"sd\">        orientation : str, optional</span>\n<span class=\"sd\">            View of the exported plot. Options are ``isometric``,</span>\n<span class=\"sd\">            ``top``, ``bottom``, ``right``, ``left``, ``front``,</span>\n<span class=\"sd\">            ``back``, and any custom orientation.</span>\n<span class=\"sd\">        display_wireframe : bool, optional</span>\n<span class=\"sd\">            Set to ``True`` if the objects has to be put in wireframe mode.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Full path to exported file if successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportPlotImageToFile</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportModelImageToFile</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportPlotImageWithViewToFile</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oField</span><span class=\"o\">.</span><span class=\"n\">UpdateQuantityFieldsPlots</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotFolder</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">full_path</span><span class=\"p\">:</span>\n            <span class=\"n\">full_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.png&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">export_field_jpg</span><span class=\"p\">(</span>\n            <span class=\"n\">full_path</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plotFolder</span><span class=\"p\">,</span>\n            <span class=\"n\">orientation</span><span class=\"o\">=</span><span class=\"n\">orientation</span><span class=\"p\">,</span>\n            <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">height</span><span class=\"p\">,</span>\n            <span class=\"n\">display_wireframe</span><span class=\"o\">=</span><span class=\"n\">display_wireframe</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">status</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">full_path</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"FieldPlot.export_image_from_aedtplt\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modules.solutions.FieldPlot.export_image_from_aedtplt/#pyaedt.modules.solutions.FieldPlot.export_image_from_aedtplt\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_image_from_aedtplt</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"s2\">&quot;isometric&quot;</span><span class=\"p\">,</span> <span class=\"n\">plot_mesh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">scale_min</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">scale_max</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save an image of the active plot using PyVista.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            This method only works if the CPython with PyVista module is installed.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        export_path : str, optional</span>\n<span class=\"sd\">            Path where image will be saved.</span>\n<span class=\"sd\">            The default is ``None`` which export file in working_directory.</span>\n<span class=\"sd\">        view : str, optional</span>\n<span class=\"sd\">           View to export. Options are ``&quot;isometric&quot;``, ``&quot;xy&quot;``, ``&quot;xz&quot;``, ``&quot;yz&quot;``.</span>\n<span class=\"sd\">        plot_mesh : bool, optional</span>\n<span class=\"sd\">            Plot mesh.</span>\n<span class=\"sd\">        scale_min : float, optional</span>\n<span class=\"sd\">            Scale output min.</span>\n<span class=\"sd\">        scale_max : float, optional</span>\n<span class=\"sd\">            Scale output max.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Full path to exported file if successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.UpdateAllFieldsPlots</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.UpdateQuantityFieldsPlots</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ExportFieldPlot</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">export_path</span><span class=\"p\">:</span>\n            <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span>\n        <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span><span class=\"o\">.</span><span class=\"n\">major</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">plot_field_from_fieldplot</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">project_path</span><span class=\"o\">=</span><span class=\"n\">export_path</span><span class=\"p\">,</span>\n                <span class=\"n\">meshplot</span><span class=\"o\">=</span><span class=\"n\">plot_mesh</span><span class=\"p\">,</span>\n                <span class=\"n\">imageformat</span><span class=\"o\">=</span><span class=\"s2\">&quot;jpg&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">view</span><span class=\"p\">,</span>\n                <span class=\"n\">plot_label</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quantityName</span><span class=\"p\">,</span>\n                <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">scale_min</span><span class=\"o\">=</span><span class=\"n\">scale_min</span><span class=\"p\">,</span>\n                <span class=\"n\">scale_max</span><span class=\"o\">=</span><span class=\"n\">scale_max</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessor</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;This method works only on CPython with PyVista&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/modules/solutions", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}