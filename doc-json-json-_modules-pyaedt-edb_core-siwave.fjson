{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.edb_core.siwave", "body": "<h1>Source code for pyaedt.edb_core.siwave</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains these classes: ``CircuitPort``, ``CurrentSource``, ``EdbSiwave``,</span>\n<span class=\"sd\">``PinGroup``, ``ResistorSource``, ``Source``, ``SourceType``, and ``VoltageSource``.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.simulation_configuration</span> <span class=\"kn\">import</span> <span class=\"n\">SimulationConfiguration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.simulation_configuration</span> <span class=\"kn\">import</span> <span class=\"n\">SourceType</span>\n\n<span class=\"c1\"># from pyaedt.edb_core.edb_data.sources import SourceType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">CircuitPort</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">CurrentSource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">DCTerminal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">PinGroup</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">ResistorSource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.sources</span> <span class=\"kn\">import</span> <span class=\"n\">VoltageSource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.general</span> <span class=\"kn\">import</span> <span class=\"n\">convert_py_list_to_net_list</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SolverType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SweepType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.geometry_operators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n\n\n<div class=\"viewcode-block\" id=\"EdbSiwave\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave/#pyaedt.edb_core.siwave.EdbSiwave\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EdbSiwave</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages EDB methods related to Siwave Setup accessible from `Edb.core_siwave` property.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    edb_class : :class:`pyaedt.edb.Edb`</span>\n<span class=\"sd\">        Inherited parent object.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_siwave = edbapp.core_siwave</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">p_edb</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">p_edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_builder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Builder.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">builder</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;EDB.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_edb_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the Edb value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;EDB.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_active_layout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Active layout.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_cell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Cell.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_cell</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot; &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">db</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">excitations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all excitations.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all sources.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">sources</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">probes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all probes.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">probes</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pin_groups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;All Layout Pin groups.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of all layout pin groups.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">_pingroups</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">PinGroups</span><span class=\"p\">:</span>\n            <span class=\"n\">_pingroups</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">PinGroup</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">_pingroups</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_terminal_on_pins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a terminal on pins.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        source : VoltageSource, CircuitPort, CurrentSource or ResistorSource</span>\n<span class=\"sd\">            Name of the source.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_pin</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span>\n        <span class=\"n\">neg_pin</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span>\n\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">fromLayer_pos</span><span class=\"p\">,</span> <span class=\"n\">toLayer_pos</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetLayerRange</span><span class=\"p\">()</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">fromLayer_neg</span><span class=\"p\">,</span> <span class=\"n\">toLayer_neg</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetLayerRange</span><span class=\"p\">()</span>\n\n        <span class=\"n\">pos_pingroup_terminal</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span>\n            <span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">PadstackInstanceTerminal</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span>\n            <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">(),</span>\n            <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"n\">pos_pin</span><span class=\"p\">,</span>\n            <span class=\"n\">toLayer_pos</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_pingroup_terminal</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span>\n            <span class=\"mi\">20</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">PadstackInstanceTerminal</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span>\n            <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">(),</span>\n            <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"n\">neg_pin</span><span class=\"p\">,</span>\n            <span class=\"n\">toLayer_neg</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CoaxPort</span><span class=\"p\">,</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CircPort</span><span class=\"p\">,</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">LumpedPort</span><span class=\"p\">]:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">PortBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">PortBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetImpedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">impedance</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CircPort</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetIsCircuitPort</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetIsCircuitPort</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Isource</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kCurrentSource</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kCurrentSource</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourcePhase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Vsource</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kVoltageSource</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kVoltageSource</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourcePhase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Rlc</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">RlcBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">RlcBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">rvalue</span><span class=\"p\">))</span>\n            <span class=\"n\">Rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Rlc</span><span class=\"p\">()</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">CEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">LEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">REnabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">rvalue</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetRlcBoundaryParameters</span><span class=\"p\">(</span><span class=\"n\">Rlc</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_circuit_port_on_pin\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_circuit_port_on_pin/#pyaedt.edb_core.siwave.EdbSiwave.create_circuit_port_on_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_circuit_port_on_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin</span><span class=\"p\">,</span> <span class=\"n\">neg_pin</span><span class=\"p\">,</span> <span class=\"n\">impedance</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">port_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a circuit port on a pin.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin : Object</span>\n<span class=\"sd\">            Edb Pin</span>\n<span class=\"sd\">        neg_pin : Object</span>\n<span class=\"sd\">            Edb Pin</span>\n<span class=\"sd\">        impedance : float</span>\n<span class=\"sd\">            Port Impedance</span>\n<span class=\"sd\">        port_name : str, optional</span>\n<span class=\"sd\">            Port Name</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pins = edbapp.core_components.get_pin_from_component(&quot;U2A5&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp.core_siwave.create_circuit_port_on_pin(pins[0], pins[1], 50, &quot;port_name&quot;)</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Port Name.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">circuit_port</span> <span class=\"o\">=</span> <span class=\"n\">CircuitPort</span><span class=\"p\">()</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">impedance</span> <span class=\"o\">=</span> <span class=\"n\">impedance</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">port_name</span><span class=\"p\">:</span>\n            <span class=\"n\">port_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Port_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">port_name</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_terminal_on_pins</span><span class=\"p\">(</span><span class=\"n\">circuit_port</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_voltage_source_on_pin\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_voltage_source_on_pin/#pyaedt.edb_core.siwave.EdbSiwave.create_voltage_source_on_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_voltage_source_on_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin</span><span class=\"p\">,</span> <span class=\"n\">neg_pin</span><span class=\"p\">,</span> <span class=\"n\">voltage_value</span><span class=\"o\">=</span><span class=\"mf\">3.3</span><span class=\"p\">,</span> <span class=\"n\">phase_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">source_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a voltage source.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin : Object</span>\n<span class=\"sd\">            Positive Pin.</span>\n<span class=\"sd\">        neg_pin : Object</span>\n<span class=\"sd\">            Negative Pin.</span>\n<span class=\"sd\">        voltage_value : float, optional</span>\n<span class=\"sd\">            Value for the voltage. The default is ``3.3``.</span>\n<span class=\"sd\">        phase_value : optional</span>\n<span class=\"sd\">            Value for the phase. The default is ``0``.</span>\n<span class=\"sd\">        source_name : str, optional</span>\n<span class=\"sd\">            Name of the source. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Source Name</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pins = edbapp.core_components.get_pin_from_component(&quot;U2A5&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp.core_siwave.create_voltage_source_on_pin(pins[0], pins[1], 50, &quot;source_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">voltage_source</span> <span class=\"o\">=</span> <span class=\"n\">VoltageSource</span><span class=\"p\">()</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">voltage_value</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">phase_value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">source_name</span><span class=\"p\">:</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;VSource_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">source_name</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_terminal_on_pins</span><span class=\"p\">(</span><span class=\"n\">voltage_source</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_current_source_on_pin\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_current_source_on_pin/#pyaedt.edb_core.siwave.EdbSiwave.create_current_source_on_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_current_source_on_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin</span><span class=\"p\">,</span> <span class=\"n\">neg_pin</span><span class=\"p\">,</span> <span class=\"n\">current_value</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">phase_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">source_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a current source.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin : Object</span>\n<span class=\"sd\">            Positive pin.</span>\n<span class=\"sd\">        neg_pin : Object</span>\n<span class=\"sd\">            Negative pin.</span>\n<span class=\"sd\">        current_value : float, optional</span>\n<span class=\"sd\">            Value for the current. The default is ``0.1``.</span>\n<span class=\"sd\">        phase_value : optional</span>\n<span class=\"sd\">            Value for the phase. The default is ``0``.</span>\n<span class=\"sd\">        source_name : str, optional</span>\n<span class=\"sd\">            Name of the source. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Source Name.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pins = edbapp.core_components.get_pin_from_component(&quot;U2A5&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp.core_siwave.create_current_source_on_pin(pins[0], pins[1], 50, &quot;source_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">current_source</span> <span class=\"o\">=</span> <span class=\"n\">CurrentSource</span><span class=\"p\">()</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">current_value</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">phase_value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">source_name</span><span class=\"p\">:</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ISource_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">source_name</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_terminal_on_pins</span><span class=\"p\">(</span><span class=\"n\">current_source</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_resistor_on_pin\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_resistor_on_pin/#pyaedt.edb_core.siwave.EdbSiwave.create_resistor_on_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_resistor_on_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin</span><span class=\"p\">,</span> <span class=\"n\">neg_pin</span><span class=\"p\">,</span> <span class=\"n\">rvalue</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">resistor_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Resistor boundary between two given pins..</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin : Object</span>\n<span class=\"sd\">            Positive Pin.</span>\n<span class=\"sd\">        neg_pin : Object</span>\n<span class=\"sd\">            Negative Pin.</span>\n<span class=\"sd\">        rvalue : float, optional</span>\n<span class=\"sd\">            Resistance value. The default is ``1``.</span>\n<span class=\"sd\">        resistor_name : str, optional</span>\n<span class=\"sd\">            Name of the resistor. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the resistor.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; pins =edbapp.core_components.get_pin_from_component(&quot;U2A5&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp.core_siwave.create_resistor_on_pin(pins[0], pins[1],50,&quot;res_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">resistor</span> <span class=\"o\">=</span> <span class=\"n\">ResistorSource</span><span class=\"p\">()</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">rvalue</span> <span class=\"o\">=</span> <span class=\"n\">rvalue</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resistor_name</span><span class=\"p\">:</span>\n            <span class=\"n\">resistor_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Res_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n                <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">resistor_name</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">resistor</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_terminal_on_pins</span><span class=\"p\">(</span><span class=\"n\">resistor</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_gnd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"p\">):</span>\n        <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">is_net_in_component</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GND&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;GND&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">is_net_in_component</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PGND&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;PGND&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">is_net_in_component</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AGND&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;AGND&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">is_net_in_component</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DGND&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DGND&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_net_name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;No GND, PGND, AGND, DGND found. Please setup the negative net name manually.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">negative_net_name</span>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_circuit_port_on_net\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_circuit_port_on_net/#pyaedt.edb_core.siwave.EdbSiwave.create_circuit_port_on_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_circuit_port_on_net</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_component_name</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_net_name</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_component_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">impedance_value</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"n\">port_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a circuit port on a NET.</span>\n\n<span class=\"sd\">        It groups all pins belonging to the specified net and then applies the port on PinGroups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        positive_component_name : str</span>\n<span class=\"sd\">            Name of the positive component.</span>\n<span class=\"sd\">        positive_net_name : str</span>\n<span class=\"sd\">            Name of the positive net.</span>\n<span class=\"sd\">        negative_component_name : str, optional</span>\n<span class=\"sd\">            Name of the negative component. The default is ``None``, in which case the name of</span>\n<span class=\"sd\">            the positive net is assigned.</span>\n<span class=\"sd\">        negative_net_name : str, optional</span>\n<span class=\"sd\">            Name of the negative net name. The default is ``None`` which will look for GND Nets.</span>\n<span class=\"sd\">        impedance_value : float, optional</span>\n<span class=\"sd\">            Port impedance value. The default is ``50``.</span>\n<span class=\"sd\">        port_name : str, optional</span>\n<span class=\"sd\">            Name of the port. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The name of the port.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp.core_siwave.create_circuit_port_on_net(&quot;U2A5&quot;, &quot;V1P5_S3&quot;, &quot;U2A5&quot;, &quot;GND&quot;, 50, &quot;port_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_component_name</span><span class=\"p\">:</span>\n            <span class=\"n\">negative_component_name</span> <span class=\"o\">=</span> <span class=\"n\">positive_component_name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_gnd</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">circuit_port</span> <span class=\"o\">=</span> <span class=\"n\">CircuitPort</span><span class=\"p\">()</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">positive_net_name</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">negative_net_name</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">impedance</span> <span class=\"o\">=</span> <span class=\"n\">impedance_value</span>\n        <span class=\"n\">pos_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">positive_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">positive_component_name</span><span class=\"p\">,</span> <span class=\"n\">positive_net_name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">,</span> <span class=\"n\">negative_net_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">port_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">port_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Port_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">positive_component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">positive_net_name</span><span class=\"p\">,</span>\n                <span class=\"n\">negative_component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">negative_net_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">port_name</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_cmp</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_pins</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_node_cmp</span>\n        <span class=\"n\">circuit_port</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">neg_node_pins</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_pin_group_terminal</span><span class=\"p\">(</span><span class=\"n\">circuit_port</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_voltage_source_on_net\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_voltage_source_on_net/#pyaedt.edb_core.siwave.EdbSiwave.create_voltage_source_on_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_voltage_source_on_net</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_component_name</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_net_name</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_component_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">voltage_value</span><span class=\"o\">=</span><span class=\"mf\">3.3</span><span class=\"p\">,</span>\n        <span class=\"n\">phase_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">source_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a voltage source.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        positive_component_name : str</span>\n<span class=\"sd\">            Name of the positive component.</span>\n<span class=\"sd\">        positive_net_name : str</span>\n<span class=\"sd\">            Name of the positive net.</span>\n<span class=\"sd\">        negative_component_name : str, optional</span>\n<span class=\"sd\">            Name of the negative component. The default is ``None``, in which case the name of</span>\n<span class=\"sd\">            the positive net is assigned.</span>\n<span class=\"sd\">        negative_net_name : str, optional</span>\n<span class=\"sd\">            Name of the negative net name. The default is ``None`` which will look for GND Nets.</span>\n<span class=\"sd\">        voltage_value : float, optional</span>\n<span class=\"sd\">            Value for the voltage. The default is ``3.3``.</span>\n<span class=\"sd\">        phase_value : optional</span>\n<span class=\"sd\">            Value for the phase. The default is ``0``.</span>\n<span class=\"sd\">        source_name : str, optional</span>\n<span class=\"sd\">            Name of the source. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The name of the source.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.core_siwave.create_voltage_source_on_net(&quot;U2A5&quot;,&quot;V1P5_S3&quot;,&quot;U2A5&quot;,&quot;GND&quot;,3.3,0,&quot;source_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_component_name</span><span class=\"p\">:</span>\n            <span class=\"n\">negative_component_name</span> <span class=\"o\">=</span> <span class=\"n\">positive_component_name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_gnd</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">voltage_source</span> <span class=\"o\">=</span> <span class=\"n\">VoltageSource</span><span class=\"p\">()</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">positive_net_name</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">negative_net_name</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">voltage_value</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">phase_value</span>\n        <span class=\"n\">pos_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">positive_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">positive_component_name</span><span class=\"p\">,</span> <span class=\"n\">positive_net_name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">,</span> <span class=\"n\">negative_net_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">source_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Vsource_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">positive_component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">positive_net_name</span><span class=\"p\">,</span>\n                <span class=\"n\">negative_component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">negative_net_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">source_name</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_cmp</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_pins</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_node_cmp</span>\n        <span class=\"n\">voltage_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">neg_node_pins</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_pin_group_terminal</span><span class=\"p\">(</span><span class=\"n\">voltage_source</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_current_source_on_net\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_current_source_on_net/#pyaedt.edb_core.siwave.EdbSiwave.create_current_source_on_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_current_source_on_net</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_component_name</span><span class=\"p\">,</span>\n        <span class=\"n\">positive_net_name</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_component_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">negative_net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">current_value</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n        <span class=\"n\">phase_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">source_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a current source.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        positive_component_name : str</span>\n<span class=\"sd\">            Name of the positive component.</span>\n<span class=\"sd\">        positive_net_name : str</span>\n<span class=\"sd\">            Name of the positive net.</span>\n<span class=\"sd\">        negative_component_name : str, optional</span>\n<span class=\"sd\">            Name of the negative component. The default is ``None``, in which case the name of</span>\n<span class=\"sd\">            the positive net is assigned.</span>\n<span class=\"sd\">        negative_net_name : str, optional</span>\n<span class=\"sd\">            Name of the negative net name. The default is ``None`` which will look for GND Nets.</span>\n<span class=\"sd\">        current_value : float, optional</span>\n<span class=\"sd\">            Value for the current. The default is ``0.1``.</span>\n<span class=\"sd\">        phase_value : optional</span>\n<span class=\"sd\">            Value for the phase. The default is ``0``.</span>\n<span class=\"sd\">        source_name : str, optional</span>\n<span class=\"sd\">            Name of the source. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The name of the source.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.core_siwave.create_current_source_on_net(&quot;U2A5&quot;, &quot;V1P5_S3&quot;, &quot;U2A5&quot;, &quot;GND&quot;, 0.1, 0, &quot;source_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_component_name</span><span class=\"p\">:</span>\n            <span class=\"n\">negative_component_name</span> <span class=\"o\">=</span> <span class=\"n\">positive_component_name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">negative_net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">negative_net_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_gnd</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">current_source</span> <span class=\"o\">=</span> <span class=\"n\">CurrentSource</span><span class=\"p\">()</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">positive_net_name</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">negative_net_name</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">current_value</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">phase_value</span>\n        <span class=\"n\">pos_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">positive_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">positive_component_name</span><span class=\"p\">,</span> <span class=\"n\">positive_net_name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">negative_component_name</span><span class=\"p\">,</span> <span class=\"n\">negative_net_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">source_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Port_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">positive_component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">positive_net_name</span><span class=\"p\">,</span>\n                <span class=\"n\">negative_component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">negative_net_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">source_name</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_cmp</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_pins</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">neg_node_cmp</span>\n        <span class=\"n\">current_source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">neg_node_pins</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_pin_group_terminal</span><span class=\"p\">(</span><span class=\"n\">current_source</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_dc_terminal\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_dc_terminal/#pyaedt.edb_core.siwave.EdbSiwave.create_dc_terminal\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_dc_terminal</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">component_name</span><span class=\"p\">,</span>\n        <span class=\"n\">net_name</span><span class=\"p\">,</span>\n        <span class=\"n\">source_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a dc terminal.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        component_name : str</span>\n<span class=\"sd\">            Name of the positive component.</span>\n<span class=\"sd\">        net_name : str</span>\n<span class=\"sd\">            Name of the positive net.</span>\n\n<span class=\"sd\">        source_name : str, optional</span>\n<span class=\"sd\">            Name of the source. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            The name of the source.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edbapp = Edb(&quot;myaedbfolder&quot;, &quot;project name&quot;, &quot;release version&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.core_siwave.create_dc_terminal(&quot;U2A5&quot;, &quot;V1P5_S3&quot;, &quot;source_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">dc_source</span> <span class=\"o\">=</span> <span class=\"n\">DCTerminal</span><span class=\"p\">()</span>\n        <span class=\"n\">dc_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">net_name</span>\n        <span class=\"n\">pos_node_cmp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_component_by_name</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_node_pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">source_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DC_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">component_name</span><span class=\"p\">,</span>\n                <span class=\"n\">net_name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">dc_source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">source_name</span>\n        <span class=\"n\">dc_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">component_node</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_cmp</span>\n        <span class=\"n\">dc_source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span> <span class=\"o\">=</span> <span class=\"n\">pos_node_pins</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_pin_group_terminal</span><span class=\"p\">(</span><span class=\"n\">dc_source</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_exec_file\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_exec_file/#pyaedt.edb_core.siwave.EdbSiwave.create_exec_file\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_exec_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">add_dc</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">add_ac</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">add_syz</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an executable file.&quot;&quot;&quot;</span>\n        <span class=\"n\">workdir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edbpath</span><span class=\"p\">)</span>\n        <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">workdir</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edbpath</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.exec&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">):</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">add_ac</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExecAcSim</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">add_dc</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExecDcSim</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">add_syz</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;ExecSyzSim</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;SaveSiw</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.add_siwave_syz_analysis\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.add_siwave_syz_analysis/#pyaedt.edb_core.siwave.EdbSiwave.add_siwave_syz_analysis\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_siwave_syz_analysis</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">accuracy_level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">decade_count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"n\">sweeptype</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">start_freq</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">stop_freq</span><span class=\"o\">=</span><span class=\"mf\">1e9</span><span class=\"p\">,</span>\n        <span class=\"n\">step_freq</span><span class=\"o\">=</span><span class=\"mf\">1e6</span><span class=\"p\">,</span>\n        <span class=\"n\">discrete_sweep</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a SIwave AC analysis to EDB.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        accuracy_level : int, optional</span>\n<span class=\"sd\">           Level of accuracy of SI slider. The default is ``1``.</span>\n<span class=\"sd\">        decade_count : int</span>\n<span class=\"sd\">            The default is ``10``. The value for this parameter is used for these sweep types:</span>\n<span class=\"sd\">            linear count and decade count.</span>\n<span class=\"sd\">            This parameter is alternative to ``step_freq``, which is used for a linear scale sweep.</span>\n<span class=\"sd\">        sweeptype : int, optional</span>\n<span class=\"sd\">            Type of the sweep. The default is ``1``. Options are:</span>\n\n<span class=\"sd\">            - ``0``: linear count</span>\n<span class=\"sd\">            - ``1``: linear scale</span>\n<span class=\"sd\">            - ``2``: loc scale</span>\n<span class=\"sd\">        start_freq : float, optional</span>\n<span class=\"sd\">            Starting frequency. The default is ``1``.</span>\n<span class=\"sd\">        stop_freq : float, optional</span>\n<span class=\"sd\">            Stopping frequency. The default is ``1e9``.</span>\n<span class=\"sd\">        step_freq : float, optional</span>\n<span class=\"sd\">            Frequency size of the step. The default is ``1e6``.</span>\n<span class=\"sd\">        discrete_sweep : bool, optional</span>\n<span class=\"sd\">            Whether the sweep is discrete. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup`</span>\n<span class=\"sd\">            Setup object class.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">create_siwave_syz_setup</span><span class=\"p\">()</span>\n        <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;linear count&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweeptype</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;log scale&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">sweeptype</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;linear scale&quot;</span>\n        <span class=\"n\">start_freq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">start_freq</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">stop_freq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">stop_freq</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">third_arg</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">decade_count</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweeptype</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">third_arg</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">step_freq</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">si_slider_postion</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">accuracy_level</span><span class=\"p\">)</span>\n        <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">add_frequency_sweep</span><span class=\"p\">(</span>\n            <span class=\"n\">frequency_sweep</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"n\">sweep</span><span class=\"p\">,</span> <span class=\"n\">start_freq</span><span class=\"p\">,</span> <span class=\"n\">stop_freq</span><span class=\"p\">,</span> <span class=\"n\">third_arg</span><span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">discrete_sweep</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">freq_sweep_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;kDiscreteSweep&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_exec_file</span><span class=\"p\">(</span><span class=\"n\">add_ac</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.add_siwave_dc_analysis\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.add_siwave_dc_analysis/#pyaedt.edb_core.siwave.EdbSiwave.add_siwave_dc_analysis\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_siwave_dc_analysis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a Siwave DC analysis in EDB.</span>\n\n<span class=\"sd\">        If a setup is present, it is deleted and replaced with</span>\n<span class=\"sd\">        actual settings.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">           Source Reference to Ground settings works only from 2021.2</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Setup name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup`</span>\n<span class=\"sd\">            Setup object class.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb = Edb(&quot;pathtoaedb&quot;, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.core_siwave.add_siwave_ac_analysis()</span>\n<span class=\"sd\">        &gt;&gt;&gt; edb.core_siwave.add_siwave_dc_analysis2(&quot;my_setup&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">create_siwave_dc_setup</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_exec_file</span><span class=\"p\">(</span><span class=\"n\">add_dc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">setup</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_pin_group_terminal\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_pin_group_terminal/#pyaedt.edb_core.siwave.EdbSiwave.create_pin_group_terminal\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_pin_group_terminal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a pin group terminal.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        source : VoltageSource, CircuitPort, CurrentSource, DCTerminal or ResistorSource</span>\n<span class=\"sd\">            Name of the source.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"o\">.</span><span class=\"n\">Terminals</span><span class=\"p\">)]:</span>\n            <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Port already exists with same name. Renaming to </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"n\">pos_pin_group</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">create_pingroup_from_pins</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_node_net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">get_net_by_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pos_pingroup_term_name</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">pos_pingroup_terminal</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span>\n            <span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">PinGroupTerminal</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span>\n            <span class=\"n\">pos_node_net</span><span class=\"p\">,</span>\n            <span class=\"n\">pos_pingroup_term_name</span><span class=\"p\">,</span>\n            <span class=\"n\">pos_pin_group</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span><span class=\"p\">:</span>\n            <span class=\"n\">neg_pin_group</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">create_pingroup_from_pins</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">node_pins</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_node_net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">get_net_by_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_term_name</span> <span class=\"o\">=</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_N&quot;</span>\n            <span class=\"n\">neg_pingroup_terminal</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span>\n                <span class=\"mi\">20</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">PinGroupTerminal</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span>\n                <span class=\"n\">neg_node_net</span><span class=\"p\">,</span>\n                <span class=\"n\">neg_pingroup_term_name</span><span class=\"p\">,</span>\n                <span class=\"n\">neg_pin_group</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CoaxPort</span><span class=\"p\">,</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CircPort</span><span class=\"p\">,</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">LumpedPort</span><span class=\"p\">]:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">PortBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">PortBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">impedance</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CircPort</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetIsCircuitPort</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetIsCircuitPort</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Isource</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kCurrentSource</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kCurrentSource</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourcePhase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Vsource</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kVoltageSource</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kVoltageSource</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">magnitude</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourcePhase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> already exists. Renaming to </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Rlc</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">RlcBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">neg_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">RlcBoundary</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_pingroup_terminal</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">rvalue</span><span class=\"p\">))</span>\n            <span class=\"n\">Rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Rlc</span><span class=\"p\">()</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">CEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">LEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">REnabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">Rlc</span><span class=\"o\">.</span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">rvalue</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetRlcBoundaryParameters</span><span class=\"p\">(</span><span class=\"n\">Rlc</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">source_type</span> <span class=\"o\">==</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">DcTerminal</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kDcTerminal</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"n\">pos_pingroup_terminal</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.configure_siw_analysis_setup\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.configure_siw_analysis_setup/#pyaedt.edb_core.siwave.EdbSiwave.configure_siw_analysis_setup\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">configure_siw_analysis_setup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">simulation_setup</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">delete_existing_setup</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Configure Siwave analysis setup.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        simulation_setup :</span>\n<span class=\"sd\">            Edb_DATA.SimulationConfiguration object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">            bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">simulation_setup</span><span class=\"p\">,</span> <span class=\"n\">SimulationConfiguration</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">solver_type</span> <span class=\"o\">==</span> <span class=\"n\">SolverType</span><span class=\"o\">.</span><span class=\"n\">SiwaveSYZ</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">simsetup_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">simsetupdata</span><span class=\"o\">.</span><span class=\"n\">SimSetupInfo</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">simsetupdata</span><span class=\"o\">.</span><span class=\"n\">SIwave</span><span class=\"o\">.</span><span class=\"n\">SIWSimulationSettings</span><span class=\"p\">]()</span>\n            <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">Name</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">setup_name</span>\n            <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">PerformERC</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">UseCustomSettings</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">include_inter_plane_coupling</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">IncludeInterPlaneCoupling</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">include_inter_plane_coupling</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">xtalk_threshold</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">XtalkThreshold</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">xtalk_threshold</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_void_area</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MinVoidArea</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_void_area</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_pad_area_to_mesh</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MinPadAreaToMesh</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_pad_area_to_mesh</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_plane_area_to_mesh</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MinPlaneAreaToMesh</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_plane_area_to_mesh</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">snap_length_threshold</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">SnapLengthThreshold</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">snap_length_threshold</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">return_current_distribution</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">ReturnCurrentDistribution</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">return_current_distribution</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">ignore_non_functional_pads</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">AdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">IgnoreNonFunctionalPads</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">ignore_non_functional_pads</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_void_area</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">DcMinVoidAreaToMesh</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">min_void_area</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">simsetupdata</span><span class=\"o\">.</span><span class=\"n\">SweepData</span><span class=\"p\">(</span><span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">sweep_name</span><span class=\"p\">)</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">IsDiscrete</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>  <span class=\"c1\"># need True for package??</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">UseQ3DForDC</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">use_q3d_for_dc</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">RelativeSError</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">relative_error</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">InterpUsePortImpedance</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">EnforceCausality</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span><span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">start_freq</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1e-9</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">EnforcePassivity</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">enforce_passivity</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">PassivityTolerance</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">passivity_tolerance</span>\n                <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">Frequencies</span><span class=\"o\">.</span><span class=\"n\">Clear</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">sweep_type</span> <span class=\"o\">==</span> <span class=\"n\">SweepType</span><span class=\"o\">.</span><span class=\"n\">LogCount</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup_decade_count_sweep</span><span class=\"p\">(</span>\n                        <span class=\"n\">sweep</span><span class=\"p\">,</span>\n                        <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">start_freq</span><span class=\"p\">,</span>\n                        <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">stop_freq</span><span class=\"p\">,</span>\n                        <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">decade_count</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">Frequencies</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">simsetupdata</span><span class=\"o\">.</span><span class=\"n\">SweepData</span><span class=\"o\">.</span><span class=\"n\">SetFrequencies</span><span class=\"p\">(</span>\n                        <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">start_freq</span><span class=\"p\">,</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">stop_freq</span><span class=\"p\">,</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">step_freq</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">simsetup_info</span><span class=\"o\">.</span><span class=\"n\">SweepDataList</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">sweep</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exception in sweep configuration: </span><span class=\"si\">{0}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))</span>\n            <span class=\"n\">edb_sim_setup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">SIWaveSimulationSetup</span><span class=\"p\">(</span><span class=\"n\">simsetup_info</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cell</span><span class=\"o\">.</span><span class=\"n\">SimulationSetups</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cell</span><span class=\"o\">.</span><span class=\"n\">DeleteSimulationSetup</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup </span><span class=\"si\">{}</span><span class=\"s2\"> has been deleted&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()))</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cell</span><span class=\"o\">.</span><span class=\"n\">AddSimulationSetup</span><span class=\"p\">(</span><span class=\"n\">edb_sim_setup</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">solver_type</span> <span class=\"o\">==</span> <span class=\"n\">SolverType</span><span class=\"o\">.</span><span class=\"n\">SiwaveDC</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">dcir_setup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">simsetupdata</span><span class=\"o\">.</span><span class=\"n\">SimSetupInfo</span><span class=\"p\">[</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">simsetupdata</span><span class=\"o\">.</span><span class=\"n\">SIwave</span><span class=\"o\">.</span><span class=\"n\">SIWDCIRSimulationSettings</span>\n            <span class=\"p\">]()</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">Name</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">setup_name</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCSettings</span><span class=\"o\">.</span><span class=\"n\">ComputeInductance</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_compute_inductance</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCSettings</span><span class=\"o\">.</span><span class=\"n\">ContactRadius</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_contact_radius</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCSettings</span><span class=\"o\">.</span><span class=\"n\">DCSliderPos</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_slide_position</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCSettings</span><span class=\"o\">.</span><span class=\"n\">PlotJV</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_plot_jv</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCSettings</span><span class=\"o\">.</span><span class=\"n\">UseDCCustomSettings</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_use_dc_custom_settings</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">DcMinPlaneAreaToMesh</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_min_plane_area_to_mesh</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">DcMinVoidAreaToMesh</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_min_void_area_to_mesh</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">EnergyError</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_error_energy</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MaxInitMeshEdgeLength</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_max_init_mesh_edge_length</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MaxNumPasses</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_max_num_pass</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MeshBws</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_mesh_bondwires</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MeshVias</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_mesh_vias</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">MinNumPasses</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_min_num_pass</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">NumBwSides</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_num_bondwire_sides</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">NumViaSides</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_num_via_sides</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">PercentLocalRefinement</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_percent_local_refinement</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">PerformAdaptiveRefinement</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_perform_adaptive_refinement</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">RefineBws</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_refine_bondwires</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCAdvancedSettings</span><span class=\"o\">.</span><span class=\"n\">RefineVias</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_refine_vias</span>\n\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">DCReportConfigFile</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_report_config_file</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">DCReportShowActiveDevices</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_report_show_Active_devices</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">ExportDCThermalData</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_export_thermal_data</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">FullDCReportPath</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_full_report_path</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">IcepakTempFile</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_icepak_temp_file</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">ImportThermalData</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_import_thermal_data</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">PerPinResPath</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_per_pin_res_path</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">PerPinUsePinFormat</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_per_pin_use_pin_format</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">UseLoopResForPerPin</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_use_loop_res_for_per_pin</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">ViaReportPath</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_via_report_path</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">SimulationSettings</span><span class=\"o\">.</span><span class=\"n\">DCIRSettings</span><span class=\"o\">.</span><span class=\"n\">SourceTermsToGround</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">dc_source_terms_to_ground</span>\n            <span class=\"n\">dcir_setup</span><span class=\"o\">.</span><span class=\"n\">Name</span> <span class=\"o\">=</span> <span class=\"n\">simulation_setup</span><span class=\"o\">.</span><span class=\"n\">setup_name</span>\n            <span class=\"n\">sim_setup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">SIWaveDCIRSimulationSetup</span><span class=\"p\">(</span><span class=\"n\">dcir_setup</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">setup</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cell</span><span class=\"o\">.</span><span class=\"n\">SimulationSetups</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cell</span><span class=\"o\">.</span><span class=\"n\">DeleteSimulationSetup</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup </span><span class=\"si\">{}</span><span class=\"s2\"> has been delete&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()))</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cell</span><span class=\"o\">.</span><span class=\"n\">AddSimulationSetup</span><span class=\"p\">(</span><span class=\"n\">sim_setup</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_setup_decade_count_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">,</span> <span class=\"n\">start_freq</span><span class=\"p\">,</span> <span class=\"n\">stop_freq</span><span class=\"p\">,</span> <span class=\"n\">decade_count</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n        <span class=\"n\">start_f</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span><span class=\"n\">start_freq</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">start_f</span> <span class=\"o\">==</span> <span class=\"mf\">0.0</span><span class=\"p\">:</span>\n            <span class=\"n\">start_f</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Decade count sweep does not support a DC value. Defaulting starting frequency to 10Hz.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">stop_f</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span><span class=\"n\">stop_freq</span><span class=\"p\">)</span>\n        <span class=\"n\">decade_cnt</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span><span class=\"n\">decade_count</span><span class=\"p\">)</span>\n        <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">start_f</span>\n        <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">Frequencies</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">))</span>\n        <span class=\"k\">while</span> <span class=\"n\">freq</span> <span class=\"o\">&lt;</span> <span class=\"n\">stop_f</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">freq</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"n\">decade_cnt</span><span class=\"p\">)</span>\n            <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">Frequencies</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_rlc_component\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_rlc_component/#pyaedt.edb_core.siwave.EdbSiwave.create_rlc_component\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_rlc_component</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">pins</span><span class=\"p\">,</span>\n        <span class=\"n\">component_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">r_value</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span>\n        <span class=\"n\">c_value</span><span class=\"o\">=</span><span class=\"mf\">1e-9</span><span class=\"p\">,</span>\n        <span class=\"n\">l_value</span><span class=\"o\">=</span><span class=\"mf\">1e-9</span><span class=\"p\">,</span>\n        <span class=\"n\">is_parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create physical Rlc component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pins : list[Edb.Primitive.PadstackInstance]</span>\n<span class=\"sd\">             List of EDB pins, length must be 2, since only 2 pins component are currently supported.</span>\n\n<span class=\"sd\">        component_name : str</span>\n<span class=\"sd\">            Component name.</span>\n\n<span class=\"sd\">        r_value : float</span>\n<span class=\"sd\">            Resistor value.</span>\n\n<span class=\"sd\">        c_value : float</span>\n<span class=\"sd\">            Capacitance value.</span>\n\n<span class=\"sd\">        l_value : float</span>\n<span class=\"sd\">            Inductor value.</span>\n\n<span class=\"sd\">        is_parallel : bool</span>\n<span class=\"sd\">            Using parallel model when ``True``, series when ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        Component</span>\n<span class=\"sd\">            Created EDB component.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">create_rlc_component</span><span class=\"p\">(</span>\n            <span class=\"n\">pins</span><span class=\"p\">,</span>\n            <span class=\"n\">component_name</span><span class=\"o\">=</span><span class=\"n\">component_name</span><span class=\"p\">,</span>\n            <span class=\"n\">r_value</span><span class=\"o\">=</span><span class=\"n\">r_value</span><span class=\"p\">,</span>\n            <span class=\"n\">c_value</span><span class=\"o\">=</span><span class=\"n\">c_value</span><span class=\"p\">,</span>\n            <span class=\"n\">l_value</span><span class=\"o\">=</span><span class=\"n\">l_value</span><span class=\"p\">,</span>\n            <span class=\"n\">is_parallel</span><span class=\"o\">=</span><span class=\"n\">is_parallel</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># pragma no cover</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_pin_group\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_pin_group/#pyaedt.edb_core.siwave.EdbSiwave.create_pin_group\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_pin_group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reference_designator</span><span class=\"p\">,</span> <span class=\"n\">pin_numbers</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create pin group on the component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        reference_designator : str</span>\n<span class=\"sd\">            References designator of the component.</span>\n<span class=\"sd\">        pin_numbers : int, str, list</span>\n<span class=\"sd\">            List of pin names.</span>\n<span class=\"sd\">        group_name : str, optional</span>\n<span class=\"sd\">            Name of the pin group.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        PinGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pin_numbers</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">pin_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pin_numbers</span><span class=\"p\">]</span>\n        <span class=\"n\">pin_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pin_numbers</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">group_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">group_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">PinGroup</span><span class=\"o\">.</span><span class=\"n\">GetUniqueName</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">)</span>\n        <span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">[</span><span class=\"n\">reference_designator</span><span class=\"p\">]</span>\n        <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pin</span><span class=\"o\">.</span><span class=\"n\">pin</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">pin</span> <span class=\"ow\">in</span> <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">pins</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">pin_numbers</span><span class=\"p\">]</span>\n        <span class=\"n\">edb_pingroup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">PinGroup</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">pins</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">edb_pingroup</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">edb_pingroup</span><span class=\"o\">.</span><span class=\"n\">SetNet</span><span class=\"p\">(</span><span class=\"n\">pins</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_pin_group_on_net\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_pin_group_on_net/#pyaedt.edb_core.siwave.EdbSiwave.create_pin_group_on_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_pin_group_on_net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reference_designator</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create pin group on component by net name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        reference_designator : str</span>\n<span class=\"sd\">            References designator of the component.</span>\n<span class=\"sd\">        net_name : str</span>\n<span class=\"sd\">            Name of the net.</span>\n<span class=\"sd\">        group_name : str, optional</span>\n<span class=\"sd\">            Name of the pin group. The default value is ``None``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        PinGroup</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">reference_designator</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n        <span class=\"n\">pin_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pins</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_pin_group</span><span class=\"p\">(</span><span class=\"n\">reference_designator</span><span class=\"p\">,</span> <span class=\"n\">pin_names</span><span class=\"p\">,</span> <span class=\"n\">group_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_current_source_on_pin_group\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_current_source_on_pin_group/#pyaedt.edb_core.siwave.EdbSiwave.create_current_source_on_pin_group\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_current_source_on_pin_group</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin_group_name</span><span class=\"p\">,</span> <span class=\"n\">neg_pin_group_name</span><span class=\"p\">,</span> <span class=\"n\">magnitude</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create current source between two pin groups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin_group_name : str</span>\n<span class=\"sd\">            Name of the positive pin group.</span>\n<span class=\"sd\">        neg_pin_group_name : str</span>\n<span class=\"sd\">            Name of the negative pin group.</span>\n<span class=\"sd\">        magnitude : int, float, optional</span>\n<span class=\"sd\">            Magnitude of the source.</span>\n<span class=\"sd\">        phase : int, float, optional</span>\n<span class=\"sd\">            Phase of the source</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_pin_group</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">pos_pin_group_name</span><span class=\"p\">]</span>\n        <span class=\"n\">pos_terminal</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin_group</span><span class=\"o\">.</span><span class=\"n\">create_current_source_terminal</span><span class=\"p\">(</span><span class=\"n\">magnitude</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;isource&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_pin_group_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">neg_pin_group_name</span><span class=\"p\">]</span>\n        <span class=\"n\">neg_terminal</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin_group_name</span><span class=\"o\">.</span><span class=\"n\">create_current_source_terminal</span><span class=\"p\">()</span>\n        <span class=\"n\">neg_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_ref&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_terminal</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_voltage_source_on_pin_group\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_voltage_source_on_pin_group/#pyaedt.edb_core.siwave.EdbSiwave.create_voltage_source_on_pin_group\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_voltage_source_on_pin_group</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin_group_name</span><span class=\"p\">,</span> <span class=\"n\">neg_pin_group_name</span><span class=\"p\">,</span> <span class=\"n\">magnitude</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create voltage source between two pin groups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin_group_name : str</span>\n<span class=\"sd\">            Name of the positive pin group.</span>\n<span class=\"sd\">        neg_pin_group_name : str</span>\n<span class=\"sd\">            Name of the negative pin group.</span>\n<span class=\"sd\">        magnitude : int, float, optional</span>\n<span class=\"sd\">            Magnitude of the source.</span>\n<span class=\"sd\">        phase : int, float, optional</span>\n<span class=\"sd\">            Phase of the source</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_pin_group</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">pos_pin_group_name</span><span class=\"p\">]</span>\n        <span class=\"n\">pos_terminal</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin_group</span><span class=\"o\">.</span><span class=\"n\">create_voltage_source_terminal</span><span class=\"p\">(</span><span class=\"n\">magnitude</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;vsource&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_pin_group_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">neg_pin_group_name</span><span class=\"p\">]</span>\n        <span class=\"n\">neg_terminal</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin_group_name</span><span class=\"o\">.</span><span class=\"n\">create_voltage_source_terminal</span><span class=\"p\">(</span><span class=\"n\">magnitude</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_ref&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_terminal</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EdbSiwave.create_circuit_port_on_pin_group\"><a class=\"viewcode-back\" href=\"../../../../EDBAPI/_autosummary/pyaedt.edb_core.siwave.EdbSiwave.create_circuit_port_on_pin_group/#pyaedt.edb_core.siwave.EdbSiwave.create_circuit_port_on_pin_group\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_circuit_port_on_pin_group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos_pin_group_name</span><span class=\"p\">,</span> <span class=\"n\">neg_pin_group_name</span><span class=\"p\">,</span> <span class=\"n\">impedance</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a port between two pin groups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pos_pin_group_name : str</span>\n<span class=\"sd\">            Name of the positive pin group.</span>\n<span class=\"sd\">        neg_pin_group_name : str</span>\n<span class=\"sd\">            Name of the negative pin group.</span>\n<span class=\"sd\">        impedance : int, float, optional</span>\n<span class=\"sd\">            Impedance of the source.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pos_pin_group</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">pos_pin_group_name</span><span class=\"p\">]</span>\n        <span class=\"n\">pos_terminal</span> <span class=\"o\">=</span> <span class=\"n\">pos_pin_group</span><span class=\"o\">.</span><span class=\"n\">create_port_terminal</span><span class=\"p\">(</span><span class=\"n\">impedance</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;vsource&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_pin_group_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pin_groups</span><span class=\"p\">[</span><span class=\"n\">neg_pin_group_name</span><span class=\"p\">]</span>\n        <span class=\"n\">neg_terminal</span> <span class=\"o\">=</span> <span class=\"n\">neg_pin_group_name</span><span class=\"o\">.</span><span class=\"n\">create_port_terminal</span><span class=\"p\">(</span><span class=\"n\">impedance</span><span class=\"p\">)</span>\n        <span class=\"n\">neg_terminal</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_ref&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_terminal</span><span class=\"o\">.</span><span class=\"n\">SetReferenceTerminal</span><span class=\"p\">(</span><span class=\"n\">neg_terminal</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/siwave", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}