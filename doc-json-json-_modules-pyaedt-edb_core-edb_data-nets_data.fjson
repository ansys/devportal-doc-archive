{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "pyaedt.edb_core.edb_data.nets_data", "body": "<h1>Source code for pyaedt.edb_core.edb_data.nets_data</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.padstacks_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBPadstackInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.primitives_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBPrimitives</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n\n\n<div class=\"viewcode-block\" id=\"EDBNetsData\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.nets_data.EDBNetsData/#pyaedt.edb_core.edb_data.nets_data.EDBNetsData\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EDBNetsData</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Manages EDB functionalities for a primitives.</span>\n<span class=\"sd\">    It Inherits EDB Object properties.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb = Edb(myedb, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_net = edb.core_nets.nets[&quot;GND&quot;]</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_net.name # Class Property</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_net.GetName() # EDB Object Property</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Attribute not present&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raw_net</span><span class=\"p\">,</span> <span class=\"n\">core_app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">core_app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_components</span> <span class=\"o\">=</span> <span class=\"n\">core_app</span><span class=\"o\">.</span><span class=\"n\">core_components</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_primitive</span> <span class=\"o\">=</span> <span class=\"n\">core_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span> <span class=\"o\">=</span> <span class=\"n\">raw_net</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the Net Name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primitives</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the list of primitives that belongs to the net.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of :class:`pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">Primitives</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">padstack_instances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the list of primitives that belongs to the net.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of :class:`pyaedt.edb_core.edb_data.padstacks_data.EDBPadstackInstance`&quot;&quot;&quot;</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"n\">EDBPadstackInstance</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">PadstackInstances</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">name</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_power_ground</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Either to get/set boolean for power/ground net.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">IsPowerGround</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@is_power_ground</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_power_ground</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">SetIsPowerGround</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value has to be a boolean.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the list of components that touch the net.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.edb_core.edb_data.components_data.EDBComponent`]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">comps</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_components</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n                <span class=\"n\">comps</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"k\">return</span> <span class=\"n\">comps</span>\n\n<div class=\"viewcode-block\" id=\"EDBNetsData.delete\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.nets_data.EDBNetsData.delete/#pyaedt.edb_core.edb_data.nets_data.EDBNetsData.delete\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete this net from layout.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBNetsData.plot\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.nets_data.EDBNetsData.plot/#pyaedt.edb_core.edb_data.nets_data.EDBNetsData.plot\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">show_legend</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">save_plot</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Plot a net to Matplotlib 2D chart.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layers : str, list, optional</span>\n<span class=\"sd\">            Name of the layers to include in the plot. If `None` all the signal layers will be considered.</span>\n<span class=\"sd\">        show_legend : bool, optional</span>\n<span class=\"sd\">            If `True` the legend is shown in the plot. (default)</span>\n<span class=\"sd\">            If `False` the legend is not shown.</span>\n<span class=\"sd\">        save_plot : str, optional</span>\n<span class=\"sd\">            If `None` the plot will be shown.</span>\n<span class=\"sd\">            If a file path is specified the plot will be saved to such file.</span>\n<span class=\"sd\">        outline : list, optional</span>\n<span class=\"sd\">            List of points of the outline to plot.</span>\n<span class=\"sd\">        size : tuple, optional</span>\n<span class=\"sd\">            Image size in pixel (width, height).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">layers</span><span class=\"p\">,</span>\n            <span class=\"n\">show_legend</span><span class=\"o\">=</span><span class=\"n\">show_legend</span><span class=\"p\">,</span>\n            <span class=\"n\">save_plot</span><span class=\"o\">=</span><span class=\"n\">save_plot</span><span class=\"p\">,</span>\n            <span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"n\">outline</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">size</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBNetsData.get_smallest_trace_width\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.nets_data.EDBNetsData.get_smallest_trace_width/#pyaedt.edb_core.edb_data.nets_data.EDBNetsData.get_smallest_trace_width\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_smallest_trace_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the smallest trace width from paths.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Trace smallest width.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">current_value</span> <span class=\"o\">=</span> <span class=\"mf\">1e10</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_object</span><span class=\"o\">.</span><span class=\"n\">Primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;GetWidth&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">):</span>\n                <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">GetWidth</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">width</span> <span class=\"o\">&lt;</span> <span class=\"n\">current_value</span><span class=\"p\">:</span>\n                    <span class=\"n\">current_value</span> <span class=\"o\">=</span> <span class=\"n\">width</span>\n        <span class=\"k\">return</span> <span class=\"n\">current_value</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/edb_data/nets_data", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}