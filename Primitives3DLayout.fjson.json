{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.Primitives3DLayout", "body": "<h1>Source code for pyaedt.modeler.Primitives3DLayout</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.GeometryOperators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">Padstack</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Object3d</span> <span class=\"kn\">import</span> <span class=\"n\">_uname</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Circle3dLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Components3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">ComponentsSubCircuit3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Line3dLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Nets3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Pins3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Polygons3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">Rect3dLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Primitives</span> <span class=\"kn\">import</span> <span class=\"n\">default_materials</span>\n\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Primitives3DLayout</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages primitives in HFSS 3D Layout.</span>\n\n<span class=\"sd\">    This class is inherited in the caller application and is accessible through the primitives variable part</span>\n<span class=\"sd\">    of modeler object( eg. ``hfss3dlayout.modeler``).</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    modeler : :class:`pyaedt.modeler.Model3DLayout.Modeler3DLayout`</span>\n<span class=\"sd\">        Name of the modeler.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Basic usage demonstrated with an HFSS 3D Layout design:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss3dLayout()</span>\n<span class=\"sd\">    &gt;&gt;&gt; prim = aedtapp.modeler</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">partname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a part.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        partname : int or str</span>\n<span class=\"sd\">           Part ID or part name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        type</span>\n<span class=\"sd\">          Part object details.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">geometries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">el</span> <span class=\"o\">==</span> <span class=\"n\">partname</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">geometries</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_outside_desktop</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isoutsideDesktop</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components3d</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_init_prims</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_prims</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pins</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_nets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_power_nets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_nets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_modeler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">modeler</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">opadstackmanager</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Aedt oPadstackManager.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oPadstackManger = oDefinitionManager.GetManager(&quot;Padstack&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">opadstackmanager</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Components.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Components3DLayout`]</span>\n<span class=\"sd\">            Components objects.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Components3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">geometries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;All Geometries including voids.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of geometries.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">geom</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">polygons</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rectangles</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">circles</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voids</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">return</span> <span class=\"n\">geom</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">voids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;All voids.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of voids.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">geom</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">polygons_voids</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rectangles_voids</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lines_voids</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">circles_voids</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">geom</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">return</span> <span class=\"n\">geom</span>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.objects_by_layer\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.objects_by_layer/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.objects_by_layer\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">objects_by_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">object_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">include_voids</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the list of objects that belongs to a specific layer.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layer_name : str</span>\n<span class=\"sd\">            Name of the layer to filter.</span>\n<span class=\"sd\">        object_filter : str, list, optional</span>\n<span class=\"sd\">            Name of the category to include in search. Options are `&quot;poly&quot;`, `&quot;circle&quot;`,</span>\n<span class=\"sd\">            `&quot;rect&quot;`,`&quot;line&quot;`,`&quot;arc&quot;`, `&quot;via&quot;`,`&quot;pin&quot;` and `&quot;component&quot;`.</span>\n<span class=\"sd\">        include_voids : bool, optional</span>\n<span class=\"sd\">            Either if include or not the voids in search.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Objects found.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">object_filter</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">object_filter</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">object_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">object_filter</span><span class=\"p\">]</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">object_filter</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FilterObjectList</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">include_voids</span><span class=\"p\">:</span>\n                    <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FilterObjectList</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; void&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">,</span> <span class=\"n\">layer_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">objs</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.objects_by_net\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.objects_by_net/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.objects_by_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">objects_by_net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">object_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">include_voids</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the list of objects that belongs to a specific net.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        net_name : str</span>\n<span class=\"sd\">            Name of the net to filter.</span>\n<span class=\"sd\">        object_filter : str, list, optional</span>\n<span class=\"sd\">            Name of the category to include in search. Options are `&quot;poly&quot;`, `&quot;circle&quot;`,</span>\n<span class=\"sd\">            `&quot;rect&quot;`,`&quot;line&quot;`,`&quot;arc&quot;`, `&quot;via&quot;`,`&quot;pin&quot;` and `&quot;component&quot;`.</span>\n<span class=\"sd\">        include_voids : bool, optional</span>\n<span class=\"sd\">            Either if include or not the voids in search.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Objects found.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">object_filter</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">object_filter</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">object_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">object_filter</span><span class=\"p\">]</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">object_filter</span><span class=\"p\">:</span>\n                <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FilterObjectList</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">include_voids</span><span class=\"p\">:</span>\n                    <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FilterObjectList</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; void&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">objs</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">polygons</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Polygons.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Polygons3DLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span>\n        <span class=\"n\">poly_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;poly&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;plg&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">poly_types</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Polygons3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Lines.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Line3dLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span>\n        <span class=\"n\">poly_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;line&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;arc&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">poly_types</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Line3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">circles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Circles.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Circle3dLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;circle&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Circle3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rectangles</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Rectangles.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Rect3dLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rect&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Rect3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">polygons_voids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Void Polygons.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Polygons3DLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span>\n        <span class=\"n\">poly_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;poly&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;plg&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">poly_types</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; void&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Polygons3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">poly</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_polygons</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lines_voids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Void Lines.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Line3dLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span>\n        <span class=\"n\">poly_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;line&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;arc&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">poly</span> <span class=\"ow\">in</span> <span class=\"n\">poly_types</span><span class=\"p\">:</span>\n            <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"n\">poly</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; void&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Line3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">circles_voids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Void Circles.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Circle3dLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;circle void&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Circle3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rectangles_voids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Void Rectangles.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Rect3dLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rect void&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Rect3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">components_3d</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Components.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Components3DLayout`]</span>\n<span class=\"sd\">            Pyaedt Objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components3d</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">):</span>\n                <span class=\"n\">cmp_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetComponentInfo</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"n\">cmp_info</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;ComponentName&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cmp_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components3d</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">Components3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components3d</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Pins.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Pins3DLayout`]</span>\n<span class=\"sd\">            Pins Dictionary.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pins</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pins</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pin&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pins</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Pins3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pins</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">vias</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Vias.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Pins3DLayout`]</span>\n<span class=\"sd\">            Vias Dictionary.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;via&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Pins3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">is_pin</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_vias</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nets.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Nets3DLayout`]</span>\n<span class=\"sd\">            Nets Dictionary.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">power_nets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">n</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal_nets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">n</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">power_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nets.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Nets3DLayout`]</span>\n<span class=\"sd\">            Power Nets Dictionary.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_power_nets</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_power_nets</span>\n\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetNetClassNets</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;Power/Ground&gt;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_power_nets</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Nets3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_power_nets</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">signal_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nets.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict[str, :class:`pyaedt.modeler.object3dlayout.Nets3DLayout`]</span>\n<span class=\"sd\">            Signal Nets Dictionary.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_nets</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_nets</span>\n\n        <span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetNetClassNets</span><span class=\"p\">(</span><span class=\"s2\">&quot;Non Power/Ground&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objs</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_nets</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Nets3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signal_nets</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">defaultmaterial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Default materials.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of default materials.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">default_materials</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_design_type</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Logger.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;AEDT version.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Version of AEDT.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">modeler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Modeler.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_modeler</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Model units.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Padstack</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Padstack.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Padstack</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.new_padstack\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.new_padstack/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.new_padstack\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">new_padstack</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Padstack&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a `Padstack` object that can be used to create a padstack.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the padstack. The default is ``&quot;Padstack&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Padstack`</span>\n<span class=\"sd\">            Padstack object if a padstack with this name does not already exist.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">padstacks</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Padstack</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opadstackmanager</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">padstacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Read all padstacks from HFSS 3D Layout.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">List2list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opadstackmanager</span><span class=\"o\">.</span><span class=\"n\">GetNames</span><span class=\"p\">())</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"p\">:</span>\n            <span class=\"n\">props_all</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">List2list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opadstackmanager</span><span class=\"o\">.</span><span class=\"n\">GetData</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">props_all</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NAME:psd&quot;</span><span class=\"p\">:</span>\n                        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Padstack</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opadstackmanager</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">prop</span> <span class=\"ow\">in</span> <span class=\"n\">props</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;mat:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;plt:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plating</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hRg:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">holerange</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sbsh:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">solder_shape</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sbpl:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">solder_placement</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sbr:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">solder_rad</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sb2:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sb2</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sbn:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">solder_mat</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">prop</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;hle:=&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">hole</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">hole</span><span class=\"o\">.</span><span class=\"n\">sizes</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">hole</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">hole</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">hole</span><span class=\"o\">.</span><span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">prop</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NAME:pds&quot;</span><span class=\"p\">:</span>\n                        <span class=\"n\">layers_num</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">layers_num</span><span class=\"p\">:</span>\n                            <span class=\"n\">lay</span> <span class=\"o\">=</span> <span class=\"n\">prop</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                            <span class=\"n\">lay_name</span> <span class=\"o\">=</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                            <span class=\"n\">lay_id</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"n\">layername</span><span class=\"o\">=</span><span class=\"n\">lay_name</span><span class=\"p\">,</span> <span class=\"n\">layer_id</span><span class=\"o\">=</span><span class=\"n\">lay_id</span><span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layername</span> <span class=\"o\">=</span> <span class=\"n\">lay_name</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pad</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_hole</span><span class=\"p\">(</span>\n                                <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">][</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">antipad</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_hole</span><span class=\"p\">(</span>\n                                <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">thermal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add_hole</span><span class=\"p\">(</span>\n                                <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">connectionx</span> <span class=\"o\">=</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">connectiony</span> <span class=\"o\">=</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">lay_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">connectiondir</span> <span class=\"o\">=</span> <span class=\"n\">lay</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span>\n                            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">pass</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_padstacks</span>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.change_net_visibility\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.change_net_visibility/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.change_net_visibility\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change_net_visibility</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">netlist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">visible</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Change the visibility of one or more nets.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        netlist : str  or list, optional</span>\n<span class=\"sd\">            One or more nets to visualize. The default is ``None``.</span>\n<span class=\"sd\">            If no nets are provided all the nets in the design will be selected.</span>\n<span class=\"sd\">        visible : bool, optional</span>\n<span class=\"sd\">            Whether to make the selected nets visible.</span>\n<span class=\"sd\">            The default value is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SetNetVisible</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nets_dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">netlist</span><span class=\"p\">:</span>\n            <span class=\"n\">netlist</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span>\n        <span class=\"k\">elif</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">netlist</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selected net doesn&#39;t exist in current design.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">netlist</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">netlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">netlist</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">visible</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">visible</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;true&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">elif</span> <span class=\"n\">visible</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;false&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provide a valid string value for visibility.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">visible</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provide a valid type value for visibility.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">net</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">netlist</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_dictionary</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">visible</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">nets_dictionary</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">visible</span>\n\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Args&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">nets_dictionary</span><span class=\"p\">:</span>\n                <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n                <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Vis:=&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nets_dictionary</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetNetVisible</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Couldn&#39;t change nets visibility.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.create_via\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_via/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_via\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_via</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">padstack</span><span class=\"o\">=</span><span class=\"s2\">&quot;PlanarEMVia&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">hole_diam</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">top_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">bot_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">netname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a via based on an existing padstack.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        padstack : str, optional</span>\n<span class=\"sd\">            Name of the padstack. The default is ``&quot;PlanarEMVia&quot;``.</span>\n<span class=\"sd\">        x : float, optional</span>\n<span class=\"sd\">            Position on the X axis. The default is ``0``.</span>\n<span class=\"sd\">        y : float, optional</span>\n<span class=\"sd\">            Position on the Y axis. The default is ``0``.</span>\n<span class=\"sd\">        rotation : float, optional</span>\n<span class=\"sd\">            Angle rotation in degrees. The default is ``0``.</span>\n<span class=\"sd\">        hole_diam : float, optional</span>\n<span class=\"sd\">            Diameter of the hole. If ``None`` the default is ``1``,</span>\n<span class=\"sd\">            in which case the override is disabled.</span>\n<span class=\"sd\">        top_layer : str, optional</span>\n<span class=\"sd\">            Top layer. If ``None`` the first layer is taken.</span>\n<span class=\"sd\">        bot_layer : str, optional</span>\n<span class=\"sd\">            Bottom layer. If ``None`` the last layer is taken.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the via. If ``None`` a random name is generated.</span>\n<span class=\"sd\">        netname : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``, in which case no</span>\n<span class=\"sd\">            name is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str or bool</span>\n<span class=\"sd\">            Name of the via created when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateVia</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">all_signal_layers</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">top_layer</span><span class=\"p\">:</span>\n            <span class=\"n\">top_layer</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bot_layer</span><span class=\"p\">:</span>\n            <span class=\"n\">bot_layer</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;via&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">listnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">listnames</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;name:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ReferencedPadstack:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">padstack</span><span class=\"p\">),</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;vposition:=&quot;</span><span class=\"p\">),</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;x:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"s2\">&quot;y:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)])</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;vrotation:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">hole_diam</span><span class=\"p\">:</span>\n                <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;overrides hole:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;hole diameter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">hole_diam</span><span class=\"p\">)])</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;overrides hole:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;hole diameter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Pin:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;highest_layer:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">top_layer</span><span class=\"p\">)</span>\n            <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;lowest_layer:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bot_layer</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateVia</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">netname</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:BaseElementTab&quot;</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Net&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">netname</span><span class=\"p\">]],</span>\n                        <span class=\"p\">],</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">name</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.create_circle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_circle/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_circle\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_circle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layername</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a circle on a layer.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layername : str</span>\n<span class=\"sd\">            Name of the layer.</span>\n<span class=\"sd\">        x : float</span>\n<span class=\"sd\">            Position on the X axis.</span>\n<span class=\"sd\">        y : float</span>\n<span class=\"sd\">            Position on the Y axis.</span>\n<span class=\"sd\">        radius : float</span>\n<span class=\"sd\">            Radius of the circle.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the circle. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the circle created when successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateCircle</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;netname&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;`netname` is deprecated. Use `net_name` instead.&quot;</span><span class=\"p\">,</span>\n                <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;netname&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">listnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">listnames</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;circleGeometry:=&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;LayerName:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">layername</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;lw:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;x:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;y:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;r:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateCircle</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"n\">primitive</span> <span class=\"o\">=</span> <span class=\"n\">Circle3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circles</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">primitive</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_val</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Net&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.create_rectangle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_rectangle/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_rectangle\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_rectangle</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layername</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"p\">,</span> <span class=\"n\">corner_radius</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a rectangle on a layer.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layername : str</span>\n<span class=\"sd\">            Name of the layer.</span>\n<span class=\"sd\">        origin : list</span>\n<span class=\"sd\">            Origin of the coordinate system in a list of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        dimensions : list</span>\n<span class=\"sd\">            Dimensions for the box in a list of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        corner_radius : float, optional</span>\n<span class=\"sd\">        angle : float, optional</span>\n<span class=\"sd\">            Angle rotation in degrees. The default is ``0``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the rectangle. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the rectangle created when successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRectangle</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;netname&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;`netname` is deprecated. Use `net_name` instead.&quot;</span><span class=\"p\">,</span>\n                <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;netname&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">listnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">listnames</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rectGeometry:=&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;LayerName:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">layername</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;lw:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Ax:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Ay:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bx:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">dimensions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;By:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">dimensions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;cr:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">corner_radius</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ang=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateRectangle</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"n\">primitive</span> <span class=\"o\">=</span> <span class=\"n\">Rect3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rectangles</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">primitive</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_val</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Net&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.create_line\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_line/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_line\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_line</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">layername</span><span class=\"p\">,</span> <span class=\"n\">center_line_list</span><span class=\"p\">,</span> <span class=\"n\">lw</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">start_style</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end_style</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a line based on a list of points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        layername : str</span>\n<span class=\"sd\">            Name of the layer to create the line on.</span>\n<span class=\"sd\">        center_line_list : list</span>\n<span class=\"sd\">            List of centerline coordinates in the form of ``[x, y]``.</span>\n<span class=\"sd\">        lw : float, optional</span>\n<span class=\"sd\">            Line width. The default is ``1``.</span>\n<span class=\"sd\">        start_style :</span>\n<span class=\"sd\">            Starting style of the line. Options are:</span>\n\n<span class=\"sd\">            * ``0`` - Flat</span>\n<span class=\"sd\">            * ``1`` - Extended</span>\n<span class=\"sd\">            * ``2`` - Round</span>\n\n<span class=\"sd\">            The default is ``0``.</span>\n<span class=\"sd\">        end_style :</span>\n<span class=\"sd\">            Ending style of the line. The options are the same as</span>\n<span class=\"sd\">            those for ``start_style``. The default is ``0``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name  of the line. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the line created when successful.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateLine</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;netname&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;`netname` is deprecated. Use `net_name` instead.&quot;</span><span class=\"p\">,</span>\n                <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;netname&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">listnames</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjects</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">listnames</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lineGeometry:=&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;LayerName:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">layername</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;lw:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">lw</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;endstyle:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">end_style</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;StartCap:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">start_style</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;n:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">center_line_list</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;U:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">center_line_list</span><span class=\"p\">:</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;x:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;y:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateLine</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"n\">primitive</span> <span class=\"o\">=</span> <span class=\"n\">Line3dLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lines</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">primitive</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_val</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Net&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.arg_with_dim\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.arg_with_dim/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.arg_with_dim\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">arg_with_dim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">sUnits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Format arguments with dimensions.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        Value :</span>\n\n<span class=\"sd\">        sUnits :</span>\n<span class=\"sd\">             The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            String containing the value or value and the units if `sUnits` is not ``None``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">Value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">sUnits</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">sUnits</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">sUnits</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">val</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.place_3d_component\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.place_3d_component/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.place_3d_component\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">place_3d_component</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">component_path</span><span class=\"p\">,</span> <span class=\"n\">number_of_terminals</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">placement_layer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pos_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pos_y</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n    <span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Place a Hfss 3d Component in Hfss3dLayout.</span>\n\n<span class=\"sd\">        :param component_path:</span>\n<span class=\"sd\">        :param number_of_terminals:</span>\n<span class=\"sd\">        :param placement_layer:</span>\n<span class=\"sd\">        :return:</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">component_name</span><span class=\"p\">:</span>\n            <span class=\"n\">component_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">component_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">component_name</span><span class=\"p\">]</span>\n        <span class=\"n\">infos</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;Type:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">27</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;NumTerminals:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">number_of_terminals</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;DataSource:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ModifiedOn:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">1646294080</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Manufacturer:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Symbol:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;v1_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">component_name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ModelNames:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Footprint:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Description:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;InfoTopic:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;InfoHelpFile:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IconFile:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;BlueDot.bmp&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Library:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;OriginalLocation:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IEEE:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Author:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;OriginalAuthor:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;CreationDate:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">1646294079</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ExampleFile:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;HiddenComponent:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;CircuitEnv:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;GroupID:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Info:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">infos</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CircuitEnv:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Refbase:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;U&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NumParts:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ModSinceLib:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CompExtID:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;3DCompSourceFileName:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">component_path</span><span class=\"p\">)</span>\n\n        <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">o_component_manager</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">stack_layers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;0:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">all_layers</span><span class=\"p\">]</span>\n        <span class=\"n\">drawing</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">drawing_layers</span><span class=\"p\">]</span>\n        <span class=\"n\">arg_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos_x</span><span class=\"p\">)</span>\n        <span class=\"n\">arg_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos_y</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;definition_name:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">component_name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;placement:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;x:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">arg_x</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">arg_y</span><span class=\"p\">],</span>\n            <span class=\"s2\">&quot;layer:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">placement_layer</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;isCircuit:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;compInstName:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;rect_width:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mf\">0.01</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;StackupLayers:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">stack_layers</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;DrawLayers:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">drawing</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">comp_name</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateComponent</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"n\">ComponentsSubCircuit3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">comp_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components_3d</span><span class=\"p\">[</span><span class=\"n\">comp_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">comp</span>\n        <span class=\"k\">return</span> <span class=\"n\">comp</span>  <span class=\"c1\">#</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3DLayout.create_text\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_text/#pyaedt.modeler.Primitives3DLayout.Primitives3DLayout.create_text\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">create_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a text primitive object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        text : str</span>\n<span class=\"sd\">            Name for the text primitive object.</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            Position of the text.</span>\n<span class=\"sd\">        angle : float, optional</span>\n<span class=\"sd\">            Angle of the text. The default value is ``0``.</span>\n<span class=\"sd\">        font_size : int, optional</span>\n<span class=\"sd\">            Font size. The default value is ``12``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the text primitive.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_uname</span><span class=\"p\">(</span><span class=\"s2\">&quot;text_&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:Contents&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;textGeometry:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;LayerName:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Postprocessing&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;x:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;y:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">position</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;ang:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">angle</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;isPlot:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;font:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Arial&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;size:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">font_size</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;weight:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">3</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;just:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">4</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;mirror:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;text:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">text</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateText</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/Primitives3DLayout", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}