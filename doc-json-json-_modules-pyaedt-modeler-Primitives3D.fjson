{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.Primitives3D", "body": "<h1>Source code for pyaedt.modeler.Primitives3D</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">asin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">ceil</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">cos</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">degrees</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">pi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">radians</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">sqrt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">tan</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.actors</span> <span class=\"kn\">import</span> <span class=\"n\">Bird</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.actors</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.actors</span> <span class=\"kn\">import</span> <span class=\"n\">Vehicle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.GeometryOperators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.multiparts</span> <span class=\"kn\">import</span> <span class=\"n\">Environment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.multiparts</span> <span class=\"kn\">import</span> <span class=\"n\">MultiPartComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.Primitives</span> <span class=\"kn\">import</span> <span class=\"n\">Primitives</span>\n\n\n<div class=\"viewcode-block\" id=\"Primitives3D\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D/#pyaedt.modeler.Primitives3D.Primitives3D\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Primitives3D</span><span class=\"p\">(</span><span class=\"n\">Primitives</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages primitives in 3D tools.</span>\n\n<span class=\"sd\">    This class is inherited in the caller application and is</span>\n<span class=\"sd\">    accessible through the primitives variable part of modeler object(</span>\n<span class=\"sd\">    e.g. ``hfss.modeler`` or ``icepak.modeler``).</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    application : str</span>\n<span class=\"sd\">        Name of the application.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Basic usage demonstrated with an HFSS, Maxwell 3D, Icepak, Q3D, or Mechanical design:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">    &gt;&gt;&gt; prim = aedtapp.modeler</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">Primitives</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiparts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_box\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_box/#pyaedt.modeler.Primitives3D.Primitives3D.create_box\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">dimensions_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a box.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            Center point for the box in a list of ``[x, y, z]`` coordinates.</span>\n<span class=\"sd\">        dimensions_list : list</span>\n<span class=\"sd\">           Dimensions for the box in a list of ``[x, y, z]`` coordinates.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the box. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material.  The default is ``None``, in which case the</span>\n<span class=\"sd\">            default material is assigned. If the material name supplied is</span>\n<span class=\"sd\">            invalid, the default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateBox</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; origin = [0,0,0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; dimensions = [10,5,20]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #Material and name are not mandatory fields</span>\n<span class=\"sd\">        &gt;&gt;&gt; box_object = hfss.modeler.primivites.create_box(origin, dimensions, name=&quot;mybox&quot;, matname=&quot;copper&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Position Argument must be a valid 3 Element List&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dimensions_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Dimension Argument must be a valid 3 Element List&quot;</span>\n        <span class=\"n\">XPosition</span><span class=\"p\">,</span> <span class=\"n\">YPosition</span><span class=\"p\">,</span> <span class=\"n\">ZPosition</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"n\">XSize</span><span class=\"p\">,</span> <span class=\"n\">YSize</span><span class=\"p\">,</span> <span class=\"n\">ZSize</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">dimensions_list</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:BoxParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XPosition</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YPosition</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZPosition:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZPosition</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XSize:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XSize</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YSize:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YSize</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZSize:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZSize</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateBox</span><span class=\"p\">,</span> <span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_cylinder\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_cylinder/#pyaedt.modeler.Primitives3D.Primitives3D.create_cylinder\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_cylinder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cs_axis</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">numSides</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a cylinder.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cs_axis : int or str</span>\n<span class=\"sd\">            Axis of rotation of the starting point around the center point.</span>\n<span class=\"sd\">            :class:`pyaedt.constants.AXIS` Enumerator can be used as input.</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            Center point of the cylinder in a list of ``(x, y, z)`` coordinates.</span>\n<span class=\"sd\">        radius : float</span>\n<span class=\"sd\">            Radius of the cylinder.</span>\n<span class=\"sd\">        height : float</span>\n<span class=\"sd\">            Height of the cylinder.</span>\n<span class=\"sd\">        numSides : int, optional</span>\n<span class=\"sd\">            Number of sides. The default is ``0``, which is correct for</span>\n<span class=\"sd\">            a cylinder.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the cylinder. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is &#39;&#39;None``, in which case the</span>\n<span class=\"sd\">            default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateCylinder</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cylinder_object = aedtapp.modeler..create_cylinder(cs_axis=&#39;Z&#39;, position=[0,0,0],</span>\n<span class=\"sd\">        ...                                                   radius=2, height=3, name=&quot;mycyl&quot;,</span>\n<span class=\"sd\">        ...                                                   matname=&quot;vacuum&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">radius</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Radius must be greater than 0.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">szAxis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">Radius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span>\n        <span class=\"n\">Height</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CylinderParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Radius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Radius</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Height:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Height</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">szAxis</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NumSides:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">numSides</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateCylinder</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_polyhedron\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_polyhedron/#pyaedt.modeler.Primitives3D.Primitives3D.create_polyhedron\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_polyhedron</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">cs_axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">center_position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">),</span>\n        <span class=\"n\">start_position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">),</span>\n        <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span>\n        <span class=\"n\">num_sides</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a regular polyhedron.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cs_axis : optional</span>\n<span class=\"sd\">            Axis of rotation of the starting point around the center point.</span>\n<span class=\"sd\">            The default is ``None``, in which case the Z axis is used.</span>\n<span class=\"sd\">        center_position : list, optional</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the center position.</span>\n<span class=\"sd\">            The default is ``(0.0, 0.0, 0.0)``.</span>\n<span class=\"sd\">        start_position : list, optional</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the starting position.</span>\n<span class=\"sd\">            The default is ``(0.0, 0.0, 0.0)``.</span>\n<span class=\"sd\">        height : float, optional</span>\n<span class=\"sd\">            Height of the polyhedron. The default is ``1.0``.</span>\n<span class=\"sd\">        num_sides : int, optional</span>\n<span class=\"sd\">            Number of sides of the polyhedron. The default is ``12``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the polyhedron. The default is ``None``, in which the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which the</span>\n<span class=\"sd\">            default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRegularPolyhedron</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ret_obj = aedtapp.modeler.create_polyhedron(cs_axis=&#39;X&#39;, center_position=[0, 0, 0],</span>\n<span class=\"sd\">        ...                                             start_position=[0,5,0], height=0.5,</span>\n<span class=\"sd\">        ...                                              num_sides=8, name=&quot;mybox&quot;, matname=&quot;copper&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">cs_axis</span>\n        <span class=\"n\">cs_axis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">x_center</span><span class=\"p\">,</span> <span class=\"n\">y_center</span><span class=\"p\">,</span> <span class=\"n\">z_center</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">center_position</span><span class=\"p\">)</span>\n        <span class=\"n\">x_start</span><span class=\"p\">,</span> <span class=\"n\">y_start</span><span class=\"p\">,</span> <span class=\"n\">z_start</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">start_position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolyhedronParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x_center</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y_center</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z_center</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XStart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x_start</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YStart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y_start</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZStart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z_start</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Height:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NumSides:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">num_sides</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateRegularPolyhedron</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_cone\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_cone/#pyaedt.modeler.Primitives3D.Primitives3D.create_cone\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_cone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cs_axis</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">bottom_radius</span><span class=\"p\">,</span> <span class=\"n\">top_radius</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a cone.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cs_axis : str</span>\n<span class=\"sd\">            Axis of rotation of the starting point around the center point.</span>\n<span class=\"sd\">            The default is ``None``, in which case the Z axis is used.</span>\n<span class=\"sd\">        center_position : list, optional</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the center position</span>\n<span class=\"sd\">            of the bottom of the cone.</span>\n<span class=\"sd\">        bottom_radius : float</span>\n<span class=\"sd\">            Bottom radius of the cone.</span>\n<span class=\"sd\">        top_radius : float</span>\n<span class=\"sd\">            Top radius of the cone.</span>\n<span class=\"sd\">        height : float</span>\n<span class=\"sd\">            Height of the cone.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the cone. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateCone</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; cone_object = aedtapp.modeler.create_cone(cs_axis=&#39;Z&#39;, position=[0, 0, 0],</span>\n<span class=\"sd\">        ...                                           bottom_radius=2, top_radius=3, height=4,</span>\n<span class=\"sd\">        ...                                           name=&quot;mybox&quot;, matname=&quot;copper&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">bottom_radius</span> <span class=\"o\">==</span> <span class=\"n\">top_radius</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bottom radius and top radius must have different values.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">bottom_radius</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">bottom_radius</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bottom radius must be greater than 0.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">top_radius</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">top_radius</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Top radius must be greater than 0.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">height</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Height must be greater than 0.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"n\">szAxis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_axis</span><span class=\"p\">)</span>\n        <span class=\"n\">Height</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n        <span class=\"n\">RadiusBt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">bottom_radius</span><span class=\"p\">)</span>\n        <span class=\"n\">RadiusUp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">top_radius</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ConeParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">szAxis</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Height:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Height</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;BottomRadius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RadiusBt</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TopRadius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RadiusUp</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateCone</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_sphere\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_sphere/#pyaedt.modeler.Primitives3D.Primitives3D.create_sphere\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_sphere</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a sphere.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the center position</span>\n<span class=\"sd\">            of the sphere.</span>\n<span class=\"sd\">        radius : float</span>\n<span class=\"sd\">            Radius of the sphere.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the sphere. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateSphere</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; ret_object = aedtapp.modeler.create_sphere(position=[0,0,0], radius=2,</span>\n<span class=\"sd\">        ...                                            name=&quot;mysphere&quot;, matname=&quot;copper&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Position argument must be a valid 3 elements List.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">radius</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Radius must be greater than 0.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">Radius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:SphereParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Radius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Radius</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateSphere</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_torus\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_torus/#pyaedt.modeler.Primitives3D.Primitives3D.create_torus\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_torus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">major_radius</span><span class=\"p\">,</span> <span class=\"n\">minor_radius</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">material_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a torus.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        center : list</span>\n<span class=\"sd\">            Center point for the torus in a list of ``[x, y, z]`` coordinates.</span>\n<span class=\"sd\">        major_radius : float</span>\n<span class=\"sd\">           Major radius of the torus.</span>\n<span class=\"sd\">        minor_radius : float</span>\n<span class=\"sd\">           Minor radius of the torus.</span>\n<span class=\"sd\">        axis : str, optional</span>\n<span class=\"sd\">            Axis of revolution.</span>\n<span class=\"sd\">            The default is ``None``, in which case the Z axis is used.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the torus. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        material_name : str, optional</span>\n<span class=\"sd\">            Name of the material.  The default is ``None``, in which case the</span>\n<span class=\"sd\">            default material is assigned. If the material name supplied is</span>\n<span class=\"sd\">            invalid, the default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateTorus</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Create a torus named ``&quot;mytorus&quot;`` about the Z axis with a major</span>\n<span class=\"sd\">        radius of 1, minor radius of 0.5, and a material of ``&quot;copper&quot;``.</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; origin = [0, 0, 0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; torus = hfss.modeler.create_torus(origin, major_radius=1,</span>\n<span class=\"sd\">        ...                                   minor_radius=0.5, axis=&quot;Z&quot;,</span>\n<span class=\"sd\">        ...                                    name=&quot;mytorus&quot;, material_name=&quot;copper&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Center argument must be a valid 3 element sequence.&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if major_radius &lt;= 0 or minor_radius &lt;= 0:</span>\n        <span class=\"c1\">#     raise ValueError(&quot;Both major and minor radius must be greater than 0.&quot;)</span>\n        <span class=\"c1\"># if minor_radius &gt;= major_radius:</span>\n        <span class=\"c1\">#     raise ValueError(&quot;Major radius must be greater than minor radius.&quot;)</span>\n\n        <span class=\"n\">x_center</span><span class=\"p\">,</span> <span class=\"n\">y_center</span><span class=\"p\">,</span> <span class=\"n\">z_center</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">)</span>\n        <span class=\"n\">axis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"p\">)</span>\n        <span class=\"n\">major_radius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">major_radius</span><span class=\"p\">)</span>\n        <span class=\"n\">minor_radius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">minor_radius</span><span class=\"p\">)</span>\n\n        <span class=\"n\">first_argument</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:TorusParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x_center</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y_center</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z_center</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MajorRadius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">major_radius</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MinorRadius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">minor_radius</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"p\">)</span>\n        <span class=\"n\">second_argument</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material_name</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateTorus</span><span class=\"p\">,</span> <span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_bondwire\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_bondwire/#pyaedt.modeler.Primitives3D.Primitives3D.create_bondwire\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_bondwire</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">start_position</span><span class=\"p\">,</span>\n        <span class=\"n\">end_position</span><span class=\"p\">,</span>\n        <span class=\"n\">h1</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n        <span class=\"n\">h2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">,</span>\n        <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">bond_type</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">diameter</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span>\n        <span class=\"n\">facets</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a bondwire.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        start_position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the starting</span>\n<span class=\"sd\">            position of the bond pad.</span>\n<span class=\"sd\">        end_position :  list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the ending position</span>\n<span class=\"sd\">            of the bond pad.</span>\n<span class=\"sd\">        h1 : float, optional</span>\n<span class=\"sd\">            Height between the IC die I/O pad and the top of the bondwire.</span>\n<span class=\"sd\">            The default is ``0.2``.</span>\n<span class=\"sd\">        h2 : float, optional</span>\n<span class=\"sd\">            Height of the IC die I/O pad above the lead frame. The default</span>\n<span class=\"sd\">            is ``0``. A negative value indicates that the I/O pad is below</span>\n<span class=\"sd\">            the lead frame.</span>\n<span class=\"sd\">        alpha : float, optional</span>\n<span class=\"sd\">            Angle in degrees between the xy plane and the wire bond at the</span>\n<span class=\"sd\">            IC die I/O pad. The default is ``80``.</span>\n<span class=\"sd\">        beta : float, optional</span>\n<span class=\"sd\">            Angle in degrees between the xy plane and the wire bond at the</span>\n<span class=\"sd\">            lead frame. The default is ``5``.</span>\n<span class=\"sd\">        bond_type : int, optional</span>\n<span class=\"sd\">            Type of the boundwire, which indicates its shape. Options are:</span>\n\n<span class=\"sd\">            * &#39;&#39;0&#39;&#39; for JEDEC 5-point</span>\n<span class=\"sd\">            * ``1`` for JEDEC 4-point</span>\n<span class=\"sd\">            * &#39;&#39;2`` for Low</span>\n\n<span class=\"sd\">            The default is &#39;&#39;0``.</span>\n<span class=\"sd\">        diameter : float, optional</span>\n<span class=\"sd\">            Diameter of the wire. The default is ``0.025``.</span>\n<span class=\"sd\">        facets : int, optional</span>\n<span class=\"sd\">            Number of wire facets. The default is ``6``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the bondwire. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateBondwire</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; origin = [0,0,0]</span>\n<span class=\"sd\">        &gt;&gt;&gt; endpos = [10,5,20]</span>\n<span class=\"sd\">        &gt;&gt;&gt; #Material and name are not mandatory fields</span>\n<span class=\"sd\">        &gt;&gt;&gt; object_id = hfss.modeler.primivites.create_bondwire(origin, endpos,h1=0.5, h2=0.1, alpha=75, beta=4,</span>\n<span class=\"sd\">        ...                                                     bond_type=0, name=&quot;mybox&quot;, matname=&quot;copper&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">x_position</span><span class=\"p\">,</span> <span class=\"n\">y_position</span><span class=\"p\">,</span> <span class=\"n\">z_position</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">start_position</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">x_position</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">y_position</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">z_position</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Position Argument must be a valid 3 Element List&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">x_length</span><span class=\"p\">,</span> <span class=\"n\">y_length</span><span class=\"p\">,</span> <span class=\"n\">z_length</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">([</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">m</span> <span class=\"k\">for</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">start_position</span><span class=\"p\">,</span> <span class=\"n\">end_position</span><span class=\"p\">)])</span>\n        <span class=\"k\">if</span> <span class=\"n\">x_length</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">y_length</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">z_length</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Dimension Argument must be a valid 3 Element List&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bond_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">bondwire</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;JEDEC_5Points&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">bond_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">bondwire</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;JEDEC_4Points&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">bond_type</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">bondwire</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LOW&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong Profile Type&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">first_argument</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:BondwireParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WireType:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bondwire</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WireDiameter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">diameter</span><span class=\"p\">))</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NumSides:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">facets</span><span class=\"p\">))</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XPadPos:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x_position</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YPadPos:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y_position</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZPadPos:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z_position</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XDir:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x_length</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YDir:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y_length</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZDir:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z_length</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Distance:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">start_position</span><span class=\"p\">,</span> <span class=\"n\">end_position</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;h1:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">))</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;h2:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"p\">))</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;alpha:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;beta:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ReverseDirection:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">first_argument</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">second_argument</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateBondwire</span><span class=\"p\">(</span><span class=\"n\">first_argument</span><span class=\"p\">,</span> <span class=\"n\">second_argument</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_rectangle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_rectangle/#pyaedt.modeler.Primitives3D.Primitives3D.create_rectangle\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_rectangle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">csPlane</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">dimension_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">is_covered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a rectangle.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        csPlane : str or int</span>\n<span class=\"sd\">            Coordinate system plane for orienting the rectangle.</span>\n<span class=\"sd\">            :class:`pyaedt.constants.PLANE` Enumerator can be used as input.</span>\n<span class=\"sd\">        position : list or Position</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates of the lower-left corner of the rectangle or</span>\n<span class=\"sd\">            the position ApplicationName.modeler.Position(x,y,z) object.</span>\n<span class=\"sd\">        dimension_list : list</span>\n<span class=\"sd\">            List of ``[width, height]`` dimensions.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the rectangle. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default material is assigned.</span>\n<span class=\"sd\">        is_covered : bool, optional</span>\n<span class=\"sd\">            Whether the rectangle is covered. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRectangle</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">szAxis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_plane_to_axis_str</span><span class=\"p\">(</span><span class=\"n\">csPlane</span><span class=\"p\">)</span>\n        <span class=\"n\">XStart</span><span class=\"p\">,</span> <span class=\"n\">YStart</span><span class=\"p\">,</span> <span class=\"n\">ZStart</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">Width</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">dimension_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">Height</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">dimension_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:RectangleParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsCovered:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">is_covered</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XStart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XStart</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YStart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YStart</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZStart:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZStart</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Width:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Width</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Height:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Height</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">szAxis</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateRectangle</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_circle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_circle/#pyaedt.modeler.Primitives3D.Primitives3D.create_circle\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_circle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cs_plane</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">numSides</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">is_covered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a circle.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cs_plane : str or int</span>\n<span class=\"sd\">            Coordinate system plane for orienting the circle.</span>\n<span class=\"sd\">            :class:`pyaedt.constants.PLANE` Enumerator can be used as input.</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the center point of the circle.</span>\n<span class=\"sd\">        radius : float</span>\n<span class=\"sd\">            Radius of the circle.</span>\n<span class=\"sd\">        numSides : int, optional</span>\n<span class=\"sd\">            Number of sides. The default is ``0``, which is correct for a circle.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the circle. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateCircle</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">szAxis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_plane_to_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_plane</span><span class=\"p\">)</span>\n        <span class=\"n\">XCenter</span><span class=\"p\">,</span> <span class=\"n\">YCenter</span><span class=\"p\">,</span> <span class=\"n\">ZCenter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"n\">Radius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CircleParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsCovered:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">is_covered</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZCenter</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Radius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Radius</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">szAxis</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NumSegments:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">numSides</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateCircle</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_ellipse\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_ellipse/#pyaedt.modeler.Primitives3D.Primitives3D.create_ellipse\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_ellipse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cs_plane</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">major_radius</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">is_covered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an ellipse.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cs_plane : str or int</span>\n<span class=\"sd\">            Coordinate system plane for orienting the ellipse.</span>\n<span class=\"sd\">            :class:`pyaedt.constants.PLANE` Enumerator can be used as input.</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the center point of the ellipse.</span>\n<span class=\"sd\">        major_radius : float</span>\n<span class=\"sd\">            Base radius of the ellipse.</span>\n<span class=\"sd\">        ratio : float</span>\n<span class=\"sd\">            Aspect ratio of the secondary radius to the base radius.</span>\n<span class=\"sd\">        is_covered : bool, optional</span>\n<span class=\"sd\">            Whether the ellipse is covered. The default is ``True``,</span>\n<span class=\"sd\">            in which case the result is a 2D sheet object. If ``False,``</span>\n<span class=\"sd\">            the result is a closed 1D polyline object.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the ellipse. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default material is assigned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEllipse</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">szAxis</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">cs_plane_to_axis_str</span><span class=\"p\">(</span><span class=\"n\">cs_plane</span><span class=\"p\">)</span>\n        <span class=\"n\">XStart</span><span class=\"p\">,</span> <span class=\"n\">YStart</span><span class=\"p\">,</span> <span class=\"n\">ZStart</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">MajorRadius</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">major_radius</span><span class=\"p\">)</span>\n        <span class=\"n\">Ratio</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">ratio</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:EllipseParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsCovered:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">is_covered</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">XStart</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">YStart</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ZStart</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;MajRadius:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">MajorRadius</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Ratio:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Ratio</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;WhichAxis:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">szAxis</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span>\n        <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateEllipse</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_equationbased_curve\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_equationbased_curve/#pyaedt.modeler.Primitives3D.Primitives3D.create_equationbased_curve\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_equationbased_curve</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">x_t</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">y_t</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">z_t</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">t_start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">t_end</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_orient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_topwidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_height</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an equation-based curve.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x_t : str or float</span>\n<span class=\"sd\">            Expression for the X-component of the curve as a function of ``&quot;_t&quot;``.</span>\n<span class=\"sd\">            For example, ``&quot;3 * cos(_t)&quot;``.</span>\n<span class=\"sd\">        y_t : str or float</span>\n<span class=\"sd\">            Expression for the Y-component of the curve as a function of ``&quot;_t&quot;``</span>\n<span class=\"sd\">        z_t : str or float</span>\n<span class=\"sd\">            Expression for the Z-component of the curve as a function of ``&quot;_t&quot;``</span>\n<span class=\"sd\">        t_start : str or float</span>\n<span class=\"sd\">            Starting value of the parameter ``&quot;_t&quot;``.</span>\n<span class=\"sd\">        t_end : str or float</span>\n<span class=\"sd\">            Ending value of the parameter ``&quot;_t&quot;``.</span>\n<span class=\"sd\">        num_points : int, optional</span>\n<span class=\"sd\">            Number of vertices on the segmented curve. The default is ``0``,</span>\n<span class=\"sd\">            in which case the curve is non-segmented.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the created curve in the 3D modeler. The default is ``None``,</span>\n<span class=\"sd\">            in which case the default name is assigned.</span>\n<span class=\"sd\">        xsection_type : str, optional</span>\n<span class=\"sd\">            Type of the cross-section. Choices are ``&quot;Line&quot;``, ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">            ``&quot;Rectangle&quot;``, and ``&quot;Isosceles Trapezoid&quot;``. The default is ``None``.</span>\n<span class=\"sd\">        xsection_orient : str, optional</span>\n<span class=\"sd\">            Direction of the normal vector to the width of the cross-section.</span>\n<span class=\"sd\">            Choices are ``&quot;X&quot;``, ``&quot;Y&quot;``, ``&quot;Z&quot;``, and ``&quot;Auto&quot;``. The default is</span>\n<span class=\"sd\">            ``None``, in which case the direction is set to ``&quot;Auto&quot;``.</span>\n<span class=\"sd\">        xsection_width : float or str, optional</span>\n<span class=\"sd\">            Width or diameter of the cross-section for all types. The</span>\n<span class=\"sd\">            default is ``1``.</span>\n<span class=\"sd\">        xsection_topwidth : float or str, optional</span>\n<span class=\"sd\">            Top width of the cross-section for type ``&quot;Isosceles Trapezoid&quot;`` only.</span>\n<span class=\"sd\">            The default is ``1``.</span>\n<span class=\"sd\">        xsection_height : float or str</span>\n<span class=\"sd\">            Height of the cross-section for types ``&quot;Rectangle&quot;`` and ``&quot;Isosceles</span>\n<span class=\"sd\">            Trapezoid&quot;`` only. The default is ``1``.</span>\n<span class=\"sd\">        xsection_num_seg : int, optional</span>\n<span class=\"sd\">            Number of segments in the cross-section surface for types ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">            ``&quot;Rectangle&quot;``, and ``&quot;Isosceles Trapezoid&quot;``. The default is ``0``. The</span>\n<span class=\"sd\">            value must be ``0`` or greater than ``2``.</span>\n<span class=\"sd\">        xsection_bend_type : str, optional</span>\n<span class=\"sd\">            Type of the bend for the cross-section. The default is ``None``, in which</span>\n<span class=\"sd\">            case the bend type is set to ``&quot;Corner&quot;``. For the type ``&quot;Circle&quot;``, the</span>\n<span class=\"sd\">            bend type should be set to ``&quot;Curved&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateEquationCurve</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">x_section</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_crosssection_arguments</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">xsection_type</span><span class=\"p\">,</span>\n            <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"n\">xsection_orient</span><span class=\"p\">,</span>\n            <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">xsection_width</span><span class=\"p\">,</span>\n            <span class=\"n\">topwidth</span><span class=\"o\">=</span><span class=\"n\">xsection_topwidth</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">xsection_height</span><span class=\"p\">,</span>\n            <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">xsection_num_seg</span><span class=\"p\">,</span>\n            <span class=\"n\">bend_type</span><span class=\"o\">=</span><span class=\"n\">xsection_bend_type</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:EquationBasedCurveParameters&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;XtFunction:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x_t</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;YtFunction:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">y_t</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;ZtFunction:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">z_t</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;tStart:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">t_start</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;tEnd:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">t_end</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;NumOfPointsOnCurve:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">num_points</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Version:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">x_section</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateEquationCurve</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_helix\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_helix/#pyaedt.modeler.Primitives3D.Primitives3D.create_helix\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_helix</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">polyline_name</span><span class=\"p\">,</span>\n        <span class=\"n\">position</span><span class=\"p\">,</span>\n        <span class=\"n\">x_start_dir</span><span class=\"p\">,</span>\n        <span class=\"n\">y_start_dir</span><span class=\"p\">,</span>\n        <span class=\"n\">z_start_dir</span><span class=\"p\">,</span>\n        <span class=\"n\">num_thread</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">right_hand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">radius_increment</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">thread</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create an helix from a polyline.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        polyline_name : str</span>\n<span class=\"sd\">            Name of the polyline used as the base for the helix.</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the center point of the circle.</span>\n<span class=\"sd\">        x_start_dir : float</span>\n<span class=\"sd\">            Distance along x axis from the polyline.</span>\n<span class=\"sd\">        y_start_dir : float</span>\n<span class=\"sd\">            Distance along y axis from the polyline.</span>\n<span class=\"sd\">        z_start_dir : float</span>\n<span class=\"sd\">            Distance along z axis from the polyline.</span>\n<span class=\"sd\">        num_thread : int, optional</span>\n<span class=\"sd\">            Number of turns. The default value is ``1``.</span>\n<span class=\"sd\">        right_hand : bool, optional</span>\n<span class=\"sd\">            Whether the helix turning direction is right hand. The default value is ``True``.</span>\n<span class=\"sd\">        radius_increment : float, optional</span>\n<span class=\"sd\">            Radius change per turn. The default value is ``0.0``.</span>\n<span class=\"sd\">        thread : float</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateHelix</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">polyline_name</span> <span class=\"ow\">or</span> <span class=\"n\">polyline_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;The name of the polyline cannot be an empty string.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">x_center</span><span class=\"p\">,</span> <span class=\"n\">y_center</span><span class=\"p\">,</span> <span class=\"n\">z_center</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">polyline_name</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NewPartsModelFlag:=&quot;</span><span class=\"p\">),</span> <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Model&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">vArg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:HelixParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XCenter:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x_center</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YCenter:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y_center</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZCenter:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z_center</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;XStartDir:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">x_start_dir</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;YStartDir:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">y_start_dir</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ZStartDir:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">z_start_dir</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NumThread:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num_thread</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;RightHand:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">right_hand</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;RadiusIncrement:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">radius_increment</span><span class=\"p\">))</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Thread:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">))</span>\n\n        <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateHelix</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">,</span> <span class=\"n\">vArg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.convert_segments_to_line\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.convert_segments_to_line/#pyaedt.modeler.Primitives3D.Primitives3D.convert_segments_to_line\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_segments_to_line</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert a CreatePolyline list of segments to lines.</span>\n\n<span class=\"sd\">        This method applies to splines and 3-point arguments.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_name : int, str, or Object3d</span>\n<span class=\"sd\">            Specified for the object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">this_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve_object</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">)</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"n\">this_object</span><span class=\"o\">.</span><span class=\"n\">edges</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">))):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:Geometry3DPolylineTab&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">this_object</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1:Segment&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Segment Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">]],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_udm\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_udm/#pyaedt.modeler.Primitives3D.Primitives3D.create_udm\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_udm</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">udmfullname</span><span class=\"p\">,</span>\n        <span class=\"n\">udm_params_list</span><span class=\"p\">,</span>\n        <span class=\"n\">udm_library</span><span class=\"o\">=</span><span class=\"s2\">&quot;syslib&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a user-defined model.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        udmfullname : str</span>\n<span class=\"sd\">            Full name for the user-defined model, including the folder name.</span>\n<span class=\"sd\">        udm_params_list :</span>\n<span class=\"sd\">            List of user-defined object pairs for the model.</span>\n<span class=\"sd\">        udm_library : str, optional</span>\n<span class=\"sd\">            Name of the library for the user-defined model. The default is ``&quot;syslib&quot;``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the user-defined model. The default is ``None```.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.UserDefinedComponent`</span>\n<span class=\"sd\">            User-defined component object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateUserDefinedModel</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:UserDefinedModelParameters&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Definition&quot;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Options&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">vArgParamVector</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:GeometryParams&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">udm_params_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">name_param</span> <span class=\"o\">=</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">pair</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">name_param</span> <span class=\"o\">=</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">Name</span>\n                <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">Value</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"n\">vArgParamVector</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">name_param</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span> <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"s2\">&quot;0123456789&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">vArgParamVector</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">name_param</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span> <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">vArgParamVector</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:UDMParam&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">name_param</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span>\n                        <span class=\"s2\">&quot;DataType:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;String&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropType2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;PropFlag2:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"mi\">0</span><span class=\"p\">,</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vArgParamVector</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;DllName:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">udmfullname</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Library:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">udm_library</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Version:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;2.0&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ConnectionID:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">oname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">CreateUserDefinedModel</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">oname</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPartsForUserDefinedModel</span><span class=\"p\">(</span><span class=\"n\">oname</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">new_name</span> <span class=\"ow\">in</span> <span class=\"n\">obj_list</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span>\n            <span class=\"n\">udm_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_user_defined_component</span><span class=\"p\">(</span><span class=\"n\">oname</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"n\">udm_obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n            <span class=\"k\">return</span> <span class=\"n\">udm_obj</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_spiral\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_spiral/#pyaedt.modeler.Primitives3D.Primitives3D.create_spiral\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_spiral</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">internal_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"n\">spacing</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">faces</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">turns</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">elevation</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">material</span><span class=\"o\">=</span><span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a spiral inductor from a polyline.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        internal_radius : float, optional</span>\n<span class=\"sd\">            Internal starting point of spiral. Default is `10`.</span>\n<span class=\"sd\">        spacing : float, optional</span>\n<span class=\"sd\">            Internal pitch between two turns. Default is `1`.</span>\n<span class=\"sd\">        faces : int, optional</span>\n<span class=\"sd\">            Number of faces per turn. Default is `8` as an octagon.</span>\n<span class=\"sd\">        turns : int, optional</span>\n<span class=\"sd\">            Number of turns. Default is `10`.</span>\n<span class=\"sd\">        width : float, optional</span>\n<span class=\"sd\">            Spiral width. Default is `2`.</span>\n<span class=\"sd\">        thickness : float, optional</span>\n<span class=\"sd\">            Spiral thickness. Default is `1`.</span>\n<span class=\"sd\">        elevation : float, optional</span>\n<span class=\"sd\">            Spiral elevation. Default is`0`.</span>\n<span class=\"sd\">        material : str, optional</span>\n<span class=\"sd\">            Spiral material. Default is `&quot;copper&quot;`.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Spiral name. Default is `None`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.Polyline`</span>\n<span class=\"sd\">            Polyline object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">internal_radius</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Internal Radius must be greater than 0.&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">faces</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Faces must be greater than 0.&quot;</span>\n        <span class=\"n\">dtheta</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">faces</span>\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">internal_radius</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">elevation</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">internal_radius</span><span class=\"p\">,</span> <span class=\"n\">internal_radius</span> <span class=\"o\">*</span> <span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"n\">dtheta</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">elevation</span><span class=\"p\">)]</span>\n        <span class=\"n\">rin</span> <span class=\"o\">=</span> <span class=\"n\">internal_radius</span> <span class=\"o\">*</span> <span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"n\">dtheta</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">rin</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rin</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">faces</span><span class=\"p\">):</span>\n            <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">theta</span> <span class=\"o\">+=</span> <span class=\"n\">dtheta</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n            <span class=\"n\">dr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">width</span> <span class=\"o\">+</span> <span class=\"n\">spacing</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">rin</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">turns</span> <span class=\"o\">*</span> <span class=\"n\">faces</span> <span class=\"o\">-</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">faces</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">rin</span> <span class=\"o\">+=</span> <span class=\"n\">dr</span>\n            <span class=\"n\">theta</span> <span class=\"o\">+=</span> <span class=\"n\">dtheta</span>\n            <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"n\">pts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">x0</span> <span class=\"o\">+</span> <span class=\"n\">rin</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">),</span> <span class=\"n\">y0</span> <span class=\"o\">+</span> <span class=\"n\">rin</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n            <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">elevation</span><span class=\"p\">))</span>\n\n        <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">elevation</span><span class=\"p\">))</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span>\n            <span class=\"n\">pts</span><span class=\"p\">,</span> <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rectangle&quot;</span><span class=\"p\">,</span> <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">xsection_height</span><span class=\"o\">=</span><span class=\"n\">thickness</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"n\">p1</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.insert_3d_component\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.insert_3d_component/#pyaedt.modeler.Primitives3D.Primitives3D.insert_3d_component\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">insert_3d_component</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">comp_file</span><span class=\"p\">,</span>\n        <span class=\"n\">geo_params</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sz_mat_params</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">sz_design_params</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">targetCS</span><span class=\"o\">=</span><span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Insert a new 3D component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        comp_file : str</span>\n<span class=\"sd\">            Name of the component file.</span>\n<span class=\"sd\">        geo_params : dict, optional</span>\n<span class=\"sd\">            Geometrical parameters.</span>\n<span class=\"sd\">        sz_mat_params : str, optional</span>\n<span class=\"sd\">            Material parameters. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        sz_design_params : str, optional</span>\n<span class=\"sd\">            Design parameters. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        targetCS : str, optional</span>\n<span class=\"sd\">            Target coordinate system. The default is ``&quot;Global&quot;``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            3D component name. The default is ``None``.</span>\n<span class=\"sd\">        password : str, optional</span>\n<span class=\"sd\">            Password for encrypted components. The default is an empty string.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.UserDefinedComponent`</span>\n<span class=\"sd\">            User defined component object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Insert3DComponent</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">aedt_fh</span> <span class=\"o\">=</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">comp_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">aedt_fh</span><span class=\"p\">:</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">aedt_fh</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n            <span class=\"n\">_all_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">temp</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">_all_lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">break</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">_all_lines</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;IsEncrypted&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                    <span class=\"n\">line_list</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">line_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;True&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">password</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Password can&#39;t be an empty string.&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"n\">aedt_fh</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:InsertComponentData&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">sz_geo_params</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">geo_params</span><span class=\"p\">:</span>\n            <span class=\"n\">geometryparams</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_components3d_vars</span><span class=\"p\">(</span><span class=\"n\">comp_file</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">geometryparams</span><span class=\"p\">:</span>\n                <span class=\"n\">geo_params</span> <span class=\"o\">=</span> <span class=\"n\">geometryparams</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">geo_params</span><span class=\"p\">:</span>\n            <span class=\"n\">sz_geo_params</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">=&#39;</span><span class=\"si\">{1}</span><span class=\"s2\">&#39; &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">par</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">par</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">geo_params</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()])</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;TargetCS:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">targetCS</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ComponentFile:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">comp_file</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsLocal:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;UniqueIdentifier:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:InstanceParameters&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;GeometryParameters:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">sz_geo_params</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;MaterialParameters:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">sz_mat_params</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;DesignParameters:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">sz_design_params</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Password:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Insert3DComponent</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_object_name</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Get3DComponentPartNames</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">new_name</span> <span class=\"ow\">in</span> <span class=\"n\">obj_list</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_object</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span>\n                <span class=\"n\">udm_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_user_defined_component</span><span class=\"p\">(</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"n\">udm_obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                <span class=\"k\">return</span> <span class=\"n\">udm_obj</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.get_3d_component_object_list\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.get_3d_component_object_list/#pyaedt.modeler.Primitives3D.Primitives3D.get_3d_component_object_list\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_3d_component_object_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">componentname</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve all objects belonging to a 3D component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        componentname : str</span>\n<span class=\"sd\">            Name of the 3D component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of objects belonging to the 3D component.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oeditor.GetChildObject</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_is_object_oriented_enabled</span><span class=\"p\">():</span>\n            <span class=\"n\">compobj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"n\">componentname</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">compobj</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">compobj</span><span class=\"o\">.</span><span class=\"n\">GetChildNames</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Object Oriented Beta Option is not enabled in this Desktop.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_actor_folder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">actor_folder</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Folder </span><span class=\"si\">{}</span><span class=\"s2\"> does not exist.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;.json&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">fname</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span>\n            <span class=\"n\">fname</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;.a3dcomp&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">fname</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;At least one json and one a3dcomp file is needed.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize_multipart</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">MultiPartComponent</span><span class=\"o\">.</span><span class=\"n\">_t</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_variable_manager</span><span class=\"o\">.</span><span class=\"n\">independent_variable_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">MultiPartComponent</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.add_person\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.add_person/#pyaedt.modeler.Primitives3D.Primitives3D.add_person\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_person</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">actor_folder</span><span class=\"p\">,</span>\n        <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">global_offset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"n\">yaw</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">roll</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">actor_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a Walking Person Multipart from 3D Components.</span>\n\n<span class=\"sd\">        It requires a json file in the folder containing person</span>\n<span class=\"sd\">        infos. An example json file follows:</span>\n\n<span class=\"sd\">         .. code-block:: json</span>\n\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                &quot;name&quot;: &quot;person3&quot;,</span>\n<span class=\"sd\">                &quot;version&quot;: 1,</span>\n<span class=\"sd\">                &quot;class&quot;:&quot;person&quot;,</span>\n<span class=\"sd\">                &quot;stride&quot;:&quot;0.76meter&quot;,</span>\n<span class=\"sd\">                &quot;xlim&quot;:[&quot;-.43&quot;,&quot;.43&quot;],</span>\n<span class=\"sd\">                &quot;ylim&quot;:[&quot;-.25&quot;,&quot;.25&quot;],</span>\n<span class=\"sd\">                &quot;parts&quot;: {</span>\n<span class=\"sd\">                    &quot;arm_left&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;arm_left.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;-.04&quot;,&quot;0&quot;,&quot;1.37&quot;],</span>\n<span class=\"sd\">                        &quot;rotation&quot;:&quot;-30deg&quot;,</span>\n<span class=\"sd\">                        &quot;compensation_angle&quot;:&quot;-15deg&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;Y&quot;</span>\n<span class=\"sd\">                        },</span>\n<span class=\"sd\">                    &quot;arm_right&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;arm_right.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;0&quot;,&quot;0&quot;,&quot;1.37&quot;],</span>\n<span class=\"sd\">                        &quot;rotation&quot;:&quot;30deg&quot;,</span>\n<span class=\"sd\">                        &quot;compensation_angle&quot;:&quot;30deg&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;Y&quot;</span>\n<span class=\"sd\">                        },</span>\n<span class=\"sd\">                    &quot;leg_left&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;leg_left.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;0&quot;,&quot;0&quot;,&quot;.9&quot;],</span>\n<span class=\"sd\">                        &quot;rotation&quot;:&quot;20deg&quot;,</span>\n<span class=\"sd\">                        &quot;compensation_angle&quot;:&quot;22.5deg&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;Y&quot;</span>\n<span class=\"sd\">                        },</span>\n<span class=\"sd\">                    &quot;leg_right&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;leg_right.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;-.04&quot;,&quot;0&quot;,&quot;.9375&quot;],</span>\n<span class=\"sd\">                        &quot;rotation&quot;:&quot;-20deg&quot;,</span>\n<span class=\"sd\">                        &quot;compensation_angle&quot;:&quot;-22.5deg&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;Y&quot;</span>\n<span class=\"sd\">                        },</span>\n<span class=\"sd\">                    &quot;torso&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;torso.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation&quot;:null,</span>\n<span class=\"sd\">                        &quot;compensation_angle&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:null</span>\n<span class=\"sd\">                        }</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            }</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        actor_folder : str</span>\n<span class=\"sd\">            Path to the actor folder. It must contain a json settings</span>\n<span class=\"sd\">            file and a 3dcomponent (.a3dcomp).</span>\n<span class=\"sd\">        speed :  float, optional</span>\n<span class=\"sd\">            Object movement speed with time (m_per_sec).</span>\n<span class=\"sd\">        global_offset : list, optional</span>\n<span class=\"sd\">            Offset from Global Coordinate System [x,y,z] in meters.</span>\n<span class=\"sd\">        yaw : float, optional</span>\n<span class=\"sd\">            Yaw Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        pitch : float, optional</span>\n<span class=\"sd\">            Pitch Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        roll : float, optional</span>\n<span class=\"sd\">            Roll Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        relative_cs_name : str</span>\n<span class=\"sd\">            Relative CS Name of the actor. ``None`` for Global CS.</span>\n<span class=\"sd\">        actor_name : str</span>\n<span class=\"sd\">            If provided, it overrides the actor name in the JSON.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.actors.Person`</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Insert3DComponent</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_multipart</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_actor_folder</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">person1</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"n\">speed</span><span class=\"p\">,</span> <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"n\">relative_cs_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">actor_name</span><span class=\"p\">:</span>\n            <span class=\"n\">person1</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">actor_name</span>\n        <span class=\"n\">person1</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">global_offset</span>\n        <span class=\"n\">person1</span><span class=\"o\">.</span><span class=\"n\">yaw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">person1</span><span class=\"o\">.</span><span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">person1</span><span class=\"o\">.</span><span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">person1</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiparts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">person1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">person1</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.add_vehicle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.add_vehicle/#pyaedt.modeler.Primitives3D.Primitives3D.add_vehicle\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_vehicle</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">actor_folder</span><span class=\"p\">,</span>\n        <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">global_offset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"n\">yaw</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">roll</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">actor_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a Moving Vehicle Multipart from 3D Components.</span>\n\n<span class=\"sd\">        It requires a json file in the folder containing vehicle</span>\n<span class=\"sd\">        infos. An example json file follows:</span>\n\n<span class=\"sd\">         .. code-block:: json</span>\n\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                &quot;name&quot;: &quot;vehicle3&quot;,</span>\n<span class=\"sd\">                &quot;version&quot;: 1,</span>\n<span class=\"sd\">                &quot;type&quot;:&quot;mustang&quot;,</span>\n<span class=\"sd\">                &quot;class&quot;:&quot;vehicle&quot;,</span>\n<span class=\"sd\">                &quot;xlim&quot;:[&quot;-1.94&quot;,&quot;2.8&quot;],</span>\n<span class=\"sd\">                &quot;ylim&quot;:[&quot;-.91&quot;,&quot;.91&quot;],</span>\n<span class=\"sd\">                &quot;parts&quot;: {</span>\n<span class=\"sd\">                    &quot;wheels_front&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;wheels_front.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;1.8970271810532&quot; ,&quot;0&quot; ,&quot;0.34809664860487&quot;],</span>\n<span class=\"sd\">                        &quot;tire_radius&quot;:&quot;0.349&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;Y&quot;</span>\n<span class=\"sd\">                        },</span>\n<span class=\"sd\">                    &quot;wheels_rear&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;wheels_rear.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;-0.82228746728897&quot; ,&quot;0&quot;,&quot;0.34809664860487&quot;],</span>\n<span class=\"sd\">                        &quot;tire_radius&quot;:&quot;0.349&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;Y&quot;</span>\n<span class=\"sd\">                        },</span>\n<span class=\"sd\">                    &quot;body&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;body.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:null,</span>\n<span class=\"sd\">                        &quot;tire_radius&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:null</span>\n<span class=\"sd\">                        }</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            }</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        actor_folder : str</span>\n<span class=\"sd\">            Path to the actor directory. It must contain a json settings file</span>\n<span class=\"sd\">            and a 3dcomponent (``.a3dcomp`` file).</span>\n<span class=\"sd\">        speed :  float, optional</span>\n<span class=\"sd\">            Object movement speed with time (m_per_sec).</span>\n<span class=\"sd\">        global_offset : list, optional</span>\n<span class=\"sd\">            Offset from Global Coordinate System [x,y,z] in meters.</span>\n<span class=\"sd\">        yaw : float, optional</span>\n<span class=\"sd\">            Yaw Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        pitch : float, optional</span>\n<span class=\"sd\">            Pitch Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        roll : float, optional</span>\n<span class=\"sd\">            Roll Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        relative_cs_name : str</span>\n<span class=\"sd\">            Relative CS Name of the actor. ``None`` for Global CS.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.actors.Vehicle`</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Insert3DComponent</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_multipart</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_actor_folder</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">vehicle</span> <span class=\"o\">=</span> <span class=\"n\">Vehicle</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"n\">speed</span><span class=\"p\">,</span> <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"n\">relative_cs_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">actor_name</span><span class=\"p\">:</span>\n            <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">actor_name</span>\n        <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">global_offset</span>\n        <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">yaw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">vehicle</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiparts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">vehicle</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">vehicle</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.add_bird\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.add_bird/#pyaedt.modeler.Primitives3D.Primitives3D.add_bird\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_bird</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">actor_folder</span><span class=\"p\">,</span>\n        <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">global_offset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"n\">yaw</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">roll</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">flapping_rate</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">actor_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a Bird Multipart from 3D Components.</span>\n\n<span class=\"sd\">        It requires a json file in the folder containing bird infos. An example json file is showed here.</span>\n\n<span class=\"sd\">         .. code-block:: json</span>\n\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                &quot;name&quot;: &quot;bird1&quot;,</span>\n<span class=\"sd\">                &quot;version&quot;: 1,</span>\n<span class=\"sd\">                &quot;class&quot;:&quot;bird&quot;,</span>\n<span class=\"sd\">                &quot;xlim&quot;:[&quot;-.7&quot;,&quot;2.75&quot;],</span>\n<span class=\"sd\">                &quot;ylim&quot;:[&quot;-1.2&quot;,&quot;1.2&quot;],</span>\n<span class=\"sd\">                &quot;parts&quot;: {</span>\n<span class=\"sd\">                    &quot;body&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;body.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:null</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                        &quot;wing_right&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;wing_left.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;.001778&quot; ,&quot;.00508&quot; ,&quot;.00762&quot;],</span>\n<span class=\"sd\">                        &quot;rotation&quot;:&quot;-45deg&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;X&quot;</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                        &quot;wing_left&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;wing_right.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:[&quot;.001778&quot; ,&quot;-.00508&quot; ,&quot;.00762&quot;],</span>\n<span class=\"sd\">                        &quot;rotation&quot;:&quot;45deg&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:&quot;X&quot;</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                        &quot;tail&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;tail.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:null</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                        &quot;beak&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;beak.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:null</span>\n<span class=\"sd\">                    }</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            }</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        actor_folder : str</span>\n<span class=\"sd\">            Path to the actor directory. It must contain a json settings file and a</span>\n<span class=\"sd\">            3dcomponent (``.a3dcomp`` file)</span>\n<span class=\"sd\">        speed :  float, optional</span>\n<span class=\"sd\">            Object movement speed with time (m_per_sec).</span>\n<span class=\"sd\">        global_offset : list, optional</span>\n<span class=\"sd\">            Offset from Global Coordinate System [x,y,z] in meters.</span>\n<span class=\"sd\">        yaw : float, optional</span>\n<span class=\"sd\">            Yaw Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        pitch : float, optional</span>\n<span class=\"sd\">            Pitch Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        roll : float, optional</span>\n<span class=\"sd\">            Roll Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        flapping_rate : float, optional</span>\n<span class=\"sd\">            Motion flapping rate in Hz.</span>\n<span class=\"sd\">        relative_cs_name : str</span>\n<span class=\"sd\">            Relative CS Name of the actor. ``None`` for Global CS.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.actors.Bird`</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Insert3DComponent</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; app = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; bird_dir = &quot;path/to/bird/directory&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; bird1 = app.modeler.add_bird(bird_dir, 1.0, [19, 4, 3], 120, -5, flapping_rate=30)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_multipart</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_actor_folder</span><span class=\"p\">(</span><span class=\"n\">actor_folder</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">bird</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span><span class=\"p\">(</span>\n            <span class=\"n\">actor_folder</span><span class=\"p\">,</span>\n            <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"n\">speed</span><span class=\"p\">,</span>\n            <span class=\"n\">flapping_rate</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">flapping_rate</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hz&quot;</span><span class=\"p\">),</span>\n            <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"n\">relative_cs_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">actor_name</span><span class=\"p\">:</span>\n            <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">actor_name</span>\n        <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">global_offset</span>\n        <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"n\">yaw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">bird</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiparts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bird</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">bird</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.add_environment\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.add_environment/#pyaedt.modeler.Primitives3D.Primitives3D.add_environment\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_environment</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env_folder</span><span class=\"p\">,</span> <span class=\"n\">global_offset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">yaw</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">roll</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">environment_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add an Environment Multipart Component from Json file.</span>\n\n<span class=\"sd\">         .. code-block:: json</span>\n\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                &quot;name&quot;: &quot;open1&quot;,</span>\n<span class=\"sd\">                &quot;version&quot;: 1,</span>\n<span class=\"sd\">                &quot;class&quot;:&quot;environment&quot;,</span>\n<span class=\"sd\">                &quot;xlim&quot;:[&quot;-5&quot;,&quot;95&quot;],</span>\n<span class=\"sd\">                &quot;ylim&quot;:[&quot;-60&quot;,&quot;60&quot;],</span>\n<span class=\"sd\">                &quot;parts&quot;: {</span>\n<span class=\"sd\">                    &quot;open_area&quot;: {</span>\n<span class=\"sd\">                        &quot;comp_name&quot;: &quot;open1.a3dcomp&quot;,</span>\n<span class=\"sd\">                        &quot;offset&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_cs&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation&quot;:null,</span>\n<span class=\"sd\">                        &quot;rotation_axis&quot;:null,</span>\n<span class=\"sd\">                        &quot;duplicate_number&quot;:null,</span>\n<span class=\"sd\">                        &quot;duplicate_vector&quot;:null</span>\n<span class=\"sd\">                        }</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            }</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        env_folder : str</span>\n<span class=\"sd\">            Path to the actor directory. It must contain a json</span>\n<span class=\"sd\">            settings file and a 3dcomponent (``.a3dcomp`` file).</span>\n<span class=\"sd\">        global_offset : list, optional</span>\n<span class=\"sd\">            Offset from Global Coordinate System [x,y,z] in meters.</span>\n<span class=\"sd\">        yaw : float, optional</span>\n<span class=\"sd\">            Yaw Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        pitch : float, optional</span>\n<span class=\"sd\">            Pitch Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        roll : float, optional</span>\n<span class=\"sd\">            Roll Rotation from Global Coordinate System in deg.</span>\n<span class=\"sd\">        relative_cs_name : str</span>\n<span class=\"sd\">            Relative CS Name of the actor. ``None`` for Global CS.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.multiparts.Environment`</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Insert3DComponent</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_multipart</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_actor_folder</span><span class=\"p\">(</span><span class=\"n\">env_folder</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">environment</span> <span class=\"o\">=</span> <span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"n\">env_folder</span><span class=\"p\">,</span> <span class=\"n\">relative_cs_name</span><span class=\"o\">=</span><span class=\"n\">relative_cs_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">environment_name</span><span class=\"p\">:</span>\n            <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">environment_name</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">global_offset</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">yaw</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multiparts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">environment</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">environment</span></div>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.create_choke\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.create_choke/#pyaedt.modeler.Primitives3D.Primitives3D.create_choke\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_choke</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_file</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a chock from json setting file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        json_file : str</span>\n<span class=\"sd\">            Full path of the json file return for the function check_choke_values.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of</span>\n<span class=\"sd\">            bool</span>\n<span class=\"sd\">                ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">            :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">                3D object core.</span>\n<span class=\"sd\">            list of</span>\n<span class=\"sd\">                :class:`pyaedt.modeler.Object3d.Object3d`</span>\n<span class=\"sd\">                    3D object winding.</span>\n<span class=\"sd\">                list</span>\n<span class=\"sd\">                    list of point coordinates of the winding.</span>\n<span class=\"sd\">            for each winding.</span>\n<span class=\"sd\">        [bool, core_obj, [first_winding_obj, first_winding_point_list],</span>\n<span class=\"sd\">         [second_winding_obj, second_winding_point_list], etc...]</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Json file has to be like the following example.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; dictionary_values = hfss.modeler.check_choke_values(&quot;C:/Example/Of/Path/myJsonFile.json&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; mychoke = hfss.modeler.create_choke(&quot;C:/Example/Of/Path/myJsonFile_Corrected.json&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">read_file</span><span class=\"p\">:</span>\n            <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">read_file</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;CHOKE INFO: &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">))</span>\n\n        <span class=\"n\">security_factor</span> <span class=\"o\">=</span> <span class=\"mf\">1.1</span>\n        <span class=\"n\">sr</span> <span class=\"o\">=</span> <span class=\"n\">security_factor</span>\n        <span class=\"n\">segment_number</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Wire Section&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Hexagon&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">segment_number</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n            <span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Circle&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Wire Section&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Octagon&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">segment_number</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n            <span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Circle&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Wire Section&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Circle&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Circle&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">sep_layer</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer Type&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Separate&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">name_core</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">material_core</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">in_rad_core</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">out_rad_core</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">height_core</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">chamfer</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Chamfer&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">name_wind</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">material_wind</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">in_rad_wind</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">out_rad_wind</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">height_wind</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">w_dia</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Wire Diameter&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">turns</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">turns2</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">turns3</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">teta</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">chamf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding_follow_chamfer</span><span class=\"p\">(</span><span class=\"n\">chamfer</span><span class=\"p\">,</span> <span class=\"n\">sr</span><span class=\"p\">,</span> <span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">returned_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_core</span><span class=\"p\">(</span><span class=\"n\">name_core</span><span class=\"p\">,</span> <span class=\"n\">material_core</span><span class=\"p\">,</span> <span class=\"n\">in_rad_core</span><span class=\"p\">,</span> <span class=\"n\">out_rad_core</span><span class=\"p\">,</span> <span class=\"n\">height_core</span><span class=\"p\">,</span> <span class=\"n\">chamfer</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Double&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer Type&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Linked&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_double_linked_winding</span><span class=\"p\">(</span>\n                    <span class=\"n\">name_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">material_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">in_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">out_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">height_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta2</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns2</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamf</span><span class=\"p\">,</span>\n                    <span class=\"n\">sr</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;make_double_linked_winding&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_double_winding</span><span class=\"p\">(</span>\n                    <span class=\"n\">name_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">material_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">in_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">out_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">height_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta2</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns2</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamf</span><span class=\"p\">,</span>\n                    <span class=\"n\">sr</span><span class=\"p\">,</span>\n                    <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;make_double_winding&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Triple&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer Type&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Linked&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_triple_linked_winding</span><span class=\"p\">(</span>\n                    <span class=\"n\">name_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">material_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">in_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">out_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">height_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta2</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta3</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns2</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns3</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamf</span><span class=\"p\">,</span>\n                    <span class=\"n\">sr</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;make_triple_linked_winding&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_triple_winding</span><span class=\"p\">(</span>\n                    <span class=\"n\">name_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">material_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">in_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">out_rad_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">height_wind</span><span class=\"p\">,</span>\n                    <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta2</span><span class=\"p\">,</span>\n                    <span class=\"n\">teta3</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns2</span><span class=\"p\">,</span>\n                    <span class=\"n\">turns3</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n                    <span class=\"n\">chamf</span><span class=\"p\">,</span>\n                    <span class=\"n\">sr</span><span class=\"p\">,</span>\n                    <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;make_triple_winding&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding</span><span class=\"p\">(</span>\n                <span class=\"n\">name_wind</span><span class=\"p\">,</span> <span class=\"n\">material_wind</span><span class=\"p\">,</span> <span class=\"n\">in_rad_wind</span><span class=\"p\">,</span> <span class=\"n\">out_rad_wind</span><span class=\"p\">,</span> <span class=\"n\">height_wind</span><span class=\"p\">,</span> <span class=\"n\">teta</span><span class=\"p\">,</span> <span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"n\">chamf</span><span class=\"p\">,</span> <span class=\"n\">sep_layer</span>\n            <span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;make_winding&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">list_duplicated_object</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">)):</span>\n                <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span>\n                    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">segment_number</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">returned_list</span> <span class=\"o\">=</span> <span class=\"n\">returned_list</span> <span class=\"o\">+</span> <span class=\"n\">list_object</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">segment_number</span><span class=\"p\">)</span>\n            <span class=\"n\">returned_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Number of Windings&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Number of Windings&quot;</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]:</span>\n                <span class=\"n\">number_duplication</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">number_duplication</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Common&quot;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">number_duplication</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">)):</span>\n                        <span class=\"n\">duplication</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span>\n                            <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name_wind</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material_wind</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n                        <span class=\"n\">duplication_points</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                        <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span>\n                            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">segment_number</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">list_duplicated_object</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">duplication</span><span class=\"p\">,</span> <span class=\"n\">duplication_points</span><span class=\"p\">])</span>\n\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">duplication</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span>\n                        <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name_wind</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material_wind</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"n\">duplication_points</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">segment_number</span><span class=\"p\">)</span>\n                    <span class=\"n\">list_duplicated_object</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">duplication</span><span class=\"p\">,</span> <span class=\"n\">duplication_points</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_duplication</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">list_object</span><span class=\"p\">)):</span>\n                            <span class=\"n\">duplication</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span>\n                                <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name_wind</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material_wind</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">360</span> <span class=\"o\">/</span> <span class=\"n\">number_duplication</span><span class=\"p\">)</span>\n                            <span class=\"n\">duplication_points</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                            <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span>\n                                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">segment_number</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"n\">list_duplicated_object</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">duplication</span><span class=\"p\">,</span> <span class=\"n\">duplication_points</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_duplication</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                        <span class=\"n\">duplication</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span>\n                            <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name_wind</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material_wind</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">360</span> <span class=\"o\">/</span> <span class=\"n\">number_duplication</span><span class=\"p\">)</span>\n                        <span class=\"n\">duplication_points</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                        <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">duplication</span><span class=\"o\">.</span><span class=\"n\">set_crosssection_properties</span><span class=\"p\">(</span>\n                            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">segment_number</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">list_duplicated_object</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">duplication</span><span class=\"p\">,</span> <span class=\"n\">duplication_points</span><span class=\"p\">])</span>\n            <span class=\"n\">returned_list</span> <span class=\"o\">=</span> <span class=\"n\">returned_list</span> <span class=\"o\">+</span> <span class=\"n\">list_duplicated_object</span>\n\n        <span class=\"n\">returned_list</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">success</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">returned_list</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_winding</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">in_rad</span><span class=\"p\">,</span> <span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">teta</span><span class=\"p\">,</span> <span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"n\">chamf</span><span class=\"p\">,</span> <span class=\"n\">sep_layer</span><span class=\"p\">):</span>\n\n        <span class=\"n\">teta_r</span> <span class=\"o\">=</span> <span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">teta</span><span class=\"p\">)</span>\n        <span class=\"n\">points_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"n\">in_rad</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"n\">in_rad</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">chamf</span><span class=\"p\">],</span>\n            <span class=\"p\">[(</span><span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"n\">chamf</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"n\">chamf</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">out_rad</span> <span class=\"o\">-</span> <span class=\"n\">chamf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">chamf</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">chamf</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">out_rad</span> <span class=\"o\">-</span> <span class=\"n\">chamf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n            <span class=\"p\">[(</span><span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"n\">chamf</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"n\">chamf</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">in_rad</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"n\">in_rad</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">chamf</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">in_rad</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"n\">in_rad</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">teta_r</span><span class=\"p\">),</span> <span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">chamf</span><span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">points_list1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">union_polyline1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">turns</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">union_polyline2</span> <span class=\"o\">=</span> <span class=\"n\">polyline</span><span class=\"o\">.</span><span class=\"n\">duplicate_around_axis</span><span class=\"p\">(</span>\n                <span class=\"n\">cs_axis</span><span class=\"o\">=</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">teta</span><span class=\"p\">,</span> <span class=\"n\">nclones</span><span class=\"o\">=</span><span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"n\">create_new_objects</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">union_polyline2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">union_polyline</span> <span class=\"o\">=</span> <span class=\"n\">union_polyline1</span> <span class=\"o\">+</span> <span class=\"n\">union_polyline2</span>\n        <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">union_polyline</span><span class=\"p\">)):</span>\n            <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"n\">list_positions</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">union_polyline</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">union_polyline</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sep_layer</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n                <span class=\"n\">list_positions</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"n\">list_positions</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">list_positions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">list_positions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">height</span><span class=\"p\">])</span>\n            <span class=\"n\">list_positions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">list_positions</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">list_positions</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">height</span><span class=\"p\">])</span>\n            <span class=\"n\">true_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_positions</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n            <span class=\"n\">true_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">turns</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">teta</span><span class=\"p\">)</span>\n            <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">true_polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">true_polyline</span><span class=\"p\">,</span> <span class=\"n\">list_positions</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">list_positions</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_double_linked_winding</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">material</span><span class=\"p\">,</span>\n        <span class=\"n\">in_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">out_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n        <span class=\"n\">teta</span><span class=\"p\">,</span>\n        <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">turns</span><span class=\"p\">,</span>\n        <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n        <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">sr</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_double_winding</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">material</span><span class=\"p\">,</span>\n            <span class=\"n\">in_rad</span><span class=\"p\">,</span>\n            <span class=\"n\">out_rad</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"p\">,</span>\n            <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n            <span class=\"n\">teta</span><span class=\"p\">,</span>\n            <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">turns</span><span class=\"p\">,</span>\n            <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n            <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">sr</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">points_out_wind</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">points_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"n\">points_out_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">points_out_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">points_out_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">height</span><span class=\"p\">]</span>\n        <span class=\"n\">points_in_wind</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">height</span><span class=\"p\">])</span>\n        <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n        <span class=\"n\">points_in_wind</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n\n        <span class=\"n\">outer_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">points_out_wind</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">turns</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">teta</span><span class=\"p\">)</span>\n        <span class=\"n\">inner_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">points_in_wind</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">inner_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">turns_in_wind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">teta_in_wind</span><span class=\"p\">)</span>\n        <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"n\">turns_in_wind</span> <span class=\"o\">*</span> <span class=\"n\">teta_in_wind</span> <span class=\"o\">-</span> <span class=\"n\">turns</span> <span class=\"o\">*</span> <span class=\"n\">teta</span><span class=\"p\">)</span>\n\n        <span class=\"n\">list_polyline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">inner_polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">list_polyline</span><span class=\"p\">)):</span>\n            <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"n\">list_positions</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">list_polyline</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">list_polyline</span><span class=\"p\">)</span>\n        <span class=\"n\">true_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_positions</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">true_polyline</span><span class=\"p\">,</span> <span class=\"n\">list_positions</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_triple_linked_winding</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">material</span><span class=\"p\">,</span>\n        <span class=\"n\">in_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">out_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n        <span class=\"n\">teta</span><span class=\"p\">,</span>\n        <span class=\"n\">teta_mid_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">turns</span><span class=\"p\">,</span>\n        <span class=\"n\">turns_mid_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n        <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">sr</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_triple_winding</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">material</span><span class=\"p\">,</span>\n            <span class=\"n\">in_rad</span><span class=\"p\">,</span>\n            <span class=\"n\">out_rad</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"p\">,</span>\n            <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n            <span class=\"n\">teta</span><span class=\"p\">,</span>\n            <span class=\"n\">teta_mid_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">turns</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">turns_mid_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n            <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n            <span class=\"n\">sr</span><span class=\"p\">,</span>\n            <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">points_out_wind</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">points_mid_wind</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">points_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">list_object</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n            <span class=\"n\">points_out_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">points_out_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">points_out_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">height</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"n\">points_mid_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">points_mid_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">points_mid_wind</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n        <span class=\"n\">points_mid_wind</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">points_out_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n        <span class=\"n\">points_in_wind</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">height</span><span class=\"p\">])</span>\n        <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n        <span class=\"n\">points_in_wind</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">points_in_wind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">points_mid_wind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n\n        <span class=\"n\">outer_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">points_out_wind</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">turns</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">teta</span><span class=\"p\">)</span>\n        <span class=\"n\">mid_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">points_mid_wind</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">mid_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">turns_mid_wind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">teta_mid_wind</span><span class=\"p\">)</span>\n        <span class=\"n\">inner_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">points_in_wind</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n\n        <span class=\"n\">inner_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">180</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">turns_in_wind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">teta_in_wind</span><span class=\"p\">)</span>\n        <span class=\"n\">mid_polyline</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"n\">turns</span> <span class=\"o\">*</span> <span class=\"n\">teta</span> <span class=\"o\">-</span> <span class=\"n\">turns_mid_wind</span> <span class=\"o\">*</span> <span class=\"n\">teta_mid_wind</span><span class=\"p\">)</span>\n        <span class=\"n\">mid_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"n\">turns_in_wind</span> <span class=\"o\">*</span> <span class=\"n\">teta_in_wind</span> <span class=\"o\">-</span> <span class=\"n\">turns_mid_wind</span> <span class=\"o\">*</span> <span class=\"n\">teta_mid_wind</span><span class=\"p\">)</span>\n        <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"n\">turns_in_wind</span> <span class=\"o\">*</span> <span class=\"n\">teta_in_wind</span> <span class=\"o\">-</span> <span class=\"n\">turns_mid_wind</span> <span class=\"o\">*</span> <span class=\"n\">teta_mid_wind</span><span class=\"p\">)</span>\n\n        <span class=\"n\">list_polyline</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">inner_polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mid_polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">outer_polyline</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">list_polyline</span><span class=\"p\">)):</span>\n            <span class=\"n\">list_positions</span> <span class=\"o\">=</span> <span class=\"n\">list_positions</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_vertices_of_line</span><span class=\"p\">(</span><span class=\"n\">list_polyline</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">list_polyline</span><span class=\"p\">)</span>\n        <span class=\"n\">true_polyline</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_polyline</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"n\">list_positions</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">true_polyline</span><span class=\"p\">,</span> <span class=\"n\">list_positions</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_double_winding</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">material</span><span class=\"p\">,</span>\n        <span class=\"n\">in_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">out_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n        <span class=\"n\">teta</span><span class=\"p\">,</span>\n        <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">turns</span><span class=\"p\">,</span>\n        <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n        <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">sr</span><span class=\"p\">,</span>\n        <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"n\">chamf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding_follow_chamfer</span><span class=\"p\">(</span><span class=\"n\">chamfer</span><span class=\"p\">,</span> <span class=\"n\">sr</span><span class=\"p\">,</span> <span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">in_rad_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">out_rad_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">out_rad</span> <span class=\"o\">-</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">height_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">in_rad</span><span class=\"p\">,</span> <span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">teta</span><span class=\"p\">,</span> <span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"n\">chamf</span><span class=\"p\">,</span> <span class=\"n\">sep_layer</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">material</span><span class=\"p\">,</span>\n                <span class=\"n\">in_rad_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">out_rad_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">height_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">list_object</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_triple_winding</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">material</span><span class=\"p\">,</span>\n        <span class=\"n\">in_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">out_rad</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">w_dia</span><span class=\"p\">,</span>\n        <span class=\"n\">teta</span><span class=\"p\">,</span>\n        <span class=\"n\">teta_mid_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">turns</span><span class=\"p\">,</span>\n        <span class=\"n\">turns_mid_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">chamfer</span><span class=\"p\">,</span>\n        <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n        <span class=\"n\">sr</span><span class=\"p\">,</span>\n        <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"n\">chamf</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding_follow_chamfer</span><span class=\"p\">(</span><span class=\"n\">chamfer</span><span class=\"p\">,</span> <span class=\"n\">sr</span><span class=\"p\">,</span> <span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"n\">chamf_mid_wind</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding_follow_chamfer</span><span class=\"p\">(</span><span class=\"n\">chamfer</span><span class=\"p\">,</span> <span class=\"n\">sr</span><span class=\"p\">,</span> <span class=\"n\">w_dia</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">in_rad_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">in_rad_mid_wind</span> <span class=\"o\">=</span> <span class=\"n\">in_rad</span> <span class=\"o\">+</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">out_rad_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">out_rad</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">out_rad_mid_wind</span> <span class=\"o\">=</span> <span class=\"n\">out_rad</span> <span class=\"o\">-</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">height_in_wind</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">height_mid_wind</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">w_dia</span>\n        <span class=\"n\">list_object</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">in_rad</span><span class=\"p\">,</span> <span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">teta</span><span class=\"p\">,</span> <span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"n\">chamf</span><span class=\"p\">,</span> <span class=\"n\">sep_layer</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">material</span><span class=\"p\">,</span>\n                <span class=\"n\">in_rad_mid_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">out_rad_mid_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">height_mid_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">teta_mid_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">turns_mid_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">chamf_mid_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_make_winding</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">material</span><span class=\"p\">,</span>\n                <span class=\"n\">in_rad_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">out_rad_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">height_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">teta_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">turns_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">chamf_in_wind</span><span class=\"p\">,</span>\n                <span class=\"n\">sep_layer</span><span class=\"p\">,</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">list_object</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_core</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">material</span><span class=\"p\">,</span> <span class=\"n\">in_rad</span><span class=\"p\">,</span> <span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">chamfer</span><span class=\"p\">):</span>\n        <span class=\"n\">tool</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_cylinder</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">in_rad</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tool&quot;</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">core</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_cylinder</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">out_rad</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">material</span><span class=\"p\">)</span>\n        <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">:</span>\n            <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">chamfer</span><span class=\"p\">(</span><span class=\"n\">chamfer</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">core</span>\n\n<div class=\"viewcode-block\" id=\"Primitives3D.check_choke_values\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.Primitives3D.Primitives3D.check_choke_values/#pyaedt.modeler.Primitives3D.Primitives3D.check_choke_values\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">check_choke_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_file</span><span class=\"p\">,</span> <span class=\"n\">create_another_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Verify the values in the json file and create another one with corrected values next to the first one.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        json_file : str</span>\n<span class=\"sd\">            Full path to json file;</span>\n<span class=\"sd\">            Specific json file containing all the parameters to design your on choke.</span>\n<span class=\"sd\">        create_another_file : bool</span>\n<span class=\"sd\">            Create another file next to the first one in adding _Corrected to the file name if it is True</span>\n<span class=\"sd\">            else truncate the existing file</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        dictionary : class : &#39;dict&#39;</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Dictionary of the Json file has to be like the following example :</span>\n<span class=\"sd\">        dictionary = {</span>\n<span class=\"sd\">        &quot;Number of Windings&quot;: {&quot;1&quot;: True, &quot;2&quot;: False, &quot;3&quot;: False, &quot;4&quot;: False},</span>\n<span class=\"sd\">        &quot;Layer&quot;: {&quot;Simple&quot;: True, &quot;Double&quot;: False, &quot;Triple&quot;: False},</span>\n<span class=\"sd\">        &quot;Layer Type&quot;: {&quot;Separate&quot;: True, &quot;Linked&quot;: False},</span>\n<span class=\"sd\">        &quot;Similar Layer&quot;: {&quot;Similar&quot;: True, &quot;Different&quot;: False},</span>\n<span class=\"sd\">        &quot;Mode&quot;: {&quot;Differential&quot;: True, &quot;Common&quot;: False},</span>\n<span class=\"sd\">        &quot;Wire Section&quot;: {&quot;None&quot;: False, &quot;Hexagon&quot;: False, &quot;Octagon&quot;: True, &quot;Circle&quot;: False},</span>\n<span class=\"sd\">        &quot;Core&quot;: {&quot;Name&quot;: &quot;Core&quot;, &quot;Material&quot;: &quot;ferrite&quot;, &quot;Inner Radius&quot;: 11, &quot;Outer Radius&quot;: 17, &quot;Height&quot;: 7,</span>\n<span class=\"sd\">        &quot;Chamfer&quot;: 0.8},</span>\n<span class=\"sd\">        &quot;Outer Winding&quot;: {&quot;Name&quot;: &quot;Winding&quot;, &quot;Material&quot;: &quot;copper&quot;, &quot;Inner Radius&quot;: 12, &quot;Outer Radius&quot;: 16,</span>\n<span class=\"sd\">        &quot;Height&quot;: 8, &quot;Wire Diameter&quot;: 1, &quot;Turns&quot;: 10, &quot;Coil Pit(deg)&quot;: 9, &quot;Occupation(%)&quot;: 0},</span>\n<span class=\"sd\">        &quot;Mid Winding&quot;: {&quot;Turns&quot;: 8, &quot;Coil Pit(deg)&quot;: 0.1, &quot;Occupation(%)&quot;: 0},</span>\n<span class=\"sd\">        &quot;Inner Winding&quot;: {&quot;Turns&quot;: 12, &quot;Coil Pit(deg)&quot;: 0.1, &quot;Occupation(%)&quot;: 0}</span>\n<span class=\"sd\">        }</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; import json</span>\n<span class=\"sd\">        &gt;&gt;&gt; with open(&quot;C:/Example/Of/Path/myJsonFile.json&quot;, &quot;w&quot;) as outfile:</span>\n<span class=\"sd\">        &gt;&gt;&gt;     json.dump(dictionary, outfile)</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">        &gt;&gt;&gt; dictionary_values = hfss.modeler.check_choke_values(&quot;C:/Example/Of/Path/myJsonFile.json&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">dictionary_model</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Number of Windings&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;4&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Simple&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Double&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Triple&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Layer Type&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Separate&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Linked&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Similar Layer&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Similar&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Different&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Mode&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Differential&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Common&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Wire Section&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;None&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hexagon&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Octagon&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Circle&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ferrite&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">:</span> <span class=\"mi\">17</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Chamfer&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Winding&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;copper&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Wire Diameter&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n            <span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">security_factor</span> <span class=\"o\">=</span> <span class=\"mf\">1.1</span>\n        <span class=\"n\">sr</span> <span class=\"o\">=</span> <span class=\"n\">security_factor</span>\n        <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">read_file</span><span class=\"p\">:</span>\n            <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">read_file</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">dictionary_model</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Missing or incorrect key </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Missing or incorrect key </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n                        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">f_key</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">count_true</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">f_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Number of Windings&quot;</span>\n                <span class=\"ow\">or</span> <span class=\"n\">f_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Layer&quot;</span>\n                <span class=\"ow\">or</span> <span class=\"n\">f_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Layer Type&quot;</span>\n                <span class=\"ow\">or</span> <span class=\"n\">f_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Similar Layer&quot;</span>\n                <span class=\"ow\">or</span> <span class=\"n\">f_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Mode&quot;</span>\n                <span class=\"ow\">or</span> <span class=\"n\">f_key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Wire Section&quot;</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">s_key</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">f_key</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">f_key</span><span class=\"p\">][</span><span class=\"n\">s_key</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">count_true</span><span class=\"p\">:</span>\n                            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">f_key</span><span class=\"p\">][</span><span class=\"n\">s_key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                        <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">f_key</span><span class=\"p\">][</span><span class=\"n\">s_key</span><span class=\"p\">]:</span>\n                            <span class=\"n\">count_true</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;A character entered is invalid. The values of the dictionary </span><span class=\"si\">%s</span><span class=\"s2\"> must be boolean&quot;</span> <span class=\"o\">%</span> <span class=\"n\">f_key</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                        <span class=\"k\">break</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">core_name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">core_name</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">core_name</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Core Name must be a non-null string. A default name Core has been set.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Core&quot;</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">core_material</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">core_material</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">checkifmaterialexists</span><span class=\"p\">(</span><span class=\"n\">core_material</span><span class=\"p\">):</span>\n                    <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">_get_aedt_case_name</span><span class=\"p\">(</span><span class=\"n\">core_material</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> is not in the material library.&quot;</span>\n                        <span class=\"s2\">&quot; It can be add using the method add_material&quot;</span> <span class=\"o\">%</span> <span class=\"n\">core_material</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ferrite&quot;</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Core Material must be a non-null string. A default material Core has been set.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ferrite&quot;</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">winding_name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">winding_name</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">winding_name</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Outer Winding Name must be a non-null string. A default name Winding has been set.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Winding&quot;</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">winding_material</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">winding_material</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">checkifmaterialexists</span><span class=\"p\">(</span><span class=\"n\">winding_material</span><span class=\"p\">):</span>\n                    <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">materials</span><span class=\"o\">.</span><span class=\"n\">_get_aedt_case_name</span><span class=\"p\">(</span><span class=\"n\">winding_material</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> is not in the material library.&quot;</span>\n                        <span class=\"s2\">&quot; It can be add using the method add_material&quot;</span> <span class=\"o\">%</span> <span class=\"n\">winding_material</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;copper&quot;</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Outer Winding Material must be a non-null string.&quot;</span> <span class=\"s2\">&quot; A default material Winding has been set.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Material&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;copper&quot;</span>\n\n        <span class=\"n\">in_rad_core</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Inner Radius(Core)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">out_rad_core</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Outer Radius(Core)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">height_core</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Height(Core)&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a strictly positive float&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">core_chamfer</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Core&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Chamfer&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">core_chamfer</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The character entered is invalid. Chamfer must be a positive float.&quot;</span> <span class=\"s2\">&quot; It must be changed&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The character entered is invalid. Chamfer must be a positive float.&quot;</span> <span class=\"s2\">&quot; It must be changed&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">in_rad_wind</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Inner Radius(Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">out_rad_wind</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Outer Radius(Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">height_wind</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Height(Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Turns(Outer Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive integer&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">wind_pit</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Coil Pit(Outer Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">dia_wire</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Wire Diameter&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Wire Diameter&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">turns2</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Turns(Mid Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive integer&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">wind_pit2</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Coil Pit(Mid Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">turns3</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Turns(Inner Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive integer&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">wind_pit3</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_value_type</span><span class=\"p\">(</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">],</span>\n            <span class=\"nb\">float</span><span class=\"p\">,</span>\n            <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Coil Pit(Inner Winding)&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;a strictly positive float&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">are_inequations_checkable</span><span class=\"p\">:</span>\n            <span class=\"n\">teta</span> <span class=\"o\">=</span> <span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">wind_pit</span><span class=\"p\">)</span>\n            <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">wind_pit2</span><span class=\"p\">)</span>\n            <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">wind_pit3</span><span class=\"p\">)</span>\n            <span class=\"n\">nb_wind</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Number of Windings&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;2&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">nb_wind</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Number of Windings&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;3&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">nb_wind</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Number of Windings&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;4&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">nb_wind</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n            <span class=\"n\">nb_lay</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Double&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">nb_lay</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Triple&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">nb_lay</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">in_rad_wind</span> <span class=\"o\">&gt;</span> <span class=\"n\">in_rad_core</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">nb_lay</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">in_rad_wind</span> <span class=\"o\">=</span> <span class=\"n\">in_rad_core</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">nb_lay</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Inner Radius&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">in_rad_wind</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Inner Radius of the winding is too high. The maximum value has been set instead.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">out_rad_wind</span> <span class=\"o\">&lt;</span> <span class=\"n\">out_rad_core</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">nb_lay</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">out_rad_wind</span> <span class=\"o\">=</span> <span class=\"n\">out_rad_core</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">nb_lay</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Outer Radius&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">out_rad_wind</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Outer Radius of the winding is too low. The minimum value has been set instead.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">height_wind</span> <span class=\"o\">&lt;</span> <span class=\"n\">height_core</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">nb_lay</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">:</span>\n                <span class=\"n\">height_wind</span> <span class=\"o\">=</span> <span class=\"n\">height_core</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">nb_lay</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Height&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">height_wind</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Height of the winding is too low. The minimum value has been set instead.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">in_rad_wind</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns</span><span class=\"p\">:</span>\n                <span class=\"n\">turns</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">in_rad_wind</span><span class=\"p\">))</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Number of turns of the winding is too high. The maximum value has been set instead.&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">teta</span> <span class=\"o\">&gt;</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns</span><span class=\"p\">:</span>\n                <span class=\"n\">teta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">degrees_default_rounded</span><span class=\"p\">(</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Winding Pit is too high. The maximum value has been set instead.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">elif</span> <span class=\"n\">teta</span> <span class=\"o\">&lt;</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">in_rad_wind</span><span class=\"p\">):</span>\n                <span class=\"n\">teta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">degrees_over_rounded</span><span class=\"p\">(</span><span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">in_rad_wind</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Winding Pit is too low. The minimum value has been set instead.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">teta</span> <span class=\"o\">=</span> <span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">teta</span><span class=\"p\">)</span>\n\n            <span class=\"n\">occ</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns</span> <span class=\"o\">*</span> <span class=\"n\">teta</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">occ</span> <span class=\"o\">==</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n                <span class=\"n\">teta</span> <span class=\"o\">=</span> <span class=\"n\">teta</span> <span class=\"o\">-</span> <span class=\"mf\">0.0003</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta</span>\n                <span class=\"k\">if</span> <span class=\"n\">teta</span> <span class=\"o\">&lt;</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">in_rad_wind</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">turns</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">turns</span> <span class=\"o\">=</span> <span class=\"n\">turns</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"n\">occ</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns</span> <span class=\"o\">*</span> <span class=\"n\">teta</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n            <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Outer Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">occ</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Similar Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Different&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Double&quot;</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Triple&quot;</span><span class=\"p\">]:</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns2</span><span class=\"p\">:</span>\n                        <span class=\"n\">turns2</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">)))</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns2</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Number of turns of the winding of the second layer is too high. &quot;</span>\n                            <span class=\"s2\">&quot;The maximum value has been set instead.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">turns2</span> <span class=\"o\">&lt;</span> <span class=\"n\">turns</span><span class=\"p\">:</span>\n                        <span class=\"n\">turns2</span> <span class=\"o\">=</span> <span class=\"n\">turns</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns2</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Number of turns of the winding of the second layer should be &quot;</span>\n                            <span class=\"s2\">&quot;at least equal to those of the first layer.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">teta2</span> <span class=\"o\">&gt;</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns2</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">degrees_default_rounded</span><span class=\"p\">(</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta2</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Winding Pit of the second layer is too high. The maximum value has been set instead.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">elif</span> <span class=\"n\">teta2</span> <span class=\"o\">&lt;</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">)):</span>\n                        <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">degrees_over_rounded</span><span class=\"p\">(</span>\n                            <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">)),</span> <span class=\"mi\">3</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta2</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Winding Pit of the second layer is too low. The minimum value has been set instead.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">teta2</span><span class=\"p\">)</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta2</span>\n\n                    <span class=\"n\">occ2</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns2</span> <span class=\"o\">*</span> <span class=\"n\">teta2</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">occ2</span> <span class=\"o\">&lt;</span> <span class=\"n\">occ</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">turns</span> <span class=\"o\">*</span> <span class=\"n\">teta</span> <span class=\"o\">/</span> <span class=\"n\">turns2</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta2</span>\n                        <span class=\"n\">occ2</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns2</span> <span class=\"o\">*</span> <span class=\"n\">teta2</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Occupation of the second layer should be at least equal to that of the first layer.&quot;</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">occ2</span> <span class=\"o\">==</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta2</span> <span class=\"o\">=</span> <span class=\"n\">teta2</span> <span class=\"o\">-</span> <span class=\"mf\">0.0002</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta2</span>\n                    <span class=\"n\">occ2</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns2</span> <span class=\"o\">*</span> <span class=\"n\">teta2</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n                    <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">occ2</span>\n                    <span class=\"c1\"># TODO if occ2 == 100: method can be improve</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layer&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Triple&quot;</span><span class=\"p\">]:</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns3</span><span class=\"p\">:</span>\n                        <span class=\"n\">turns3</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">)))</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns3</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Number of turns of the winding of the third layer is too high. &quot;</span>\n                            <span class=\"s2\">&quot;The maximum value has been set instead.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">turns3</span> <span class=\"o\">&lt;</span> <span class=\"n\">turns2</span><span class=\"p\">:</span>\n                        <span class=\"n\">turns3</span> <span class=\"o\">=</span> <span class=\"n\">turns2</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns3</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Number of turns of the winding of the third layer should be &quot;</span>\n                            <span class=\"s2\">&quot;at least equal to those of the second layer.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">teta3</span> <span class=\"o\">&gt;</span> <span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns3</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">degrees_default_rounded</span><span class=\"p\">(</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span> <span class=\"o\">/</span> <span class=\"n\">turns3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta3</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Winding Pit of the third layer is too high. The maximum value has been set instead.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">elif</span> <span class=\"n\">teta3</span> <span class=\"o\">&lt;</span> <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">)):</span>\n                        <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">degrees_over_rounded</span><span class=\"p\">(</span>\n                            <span class=\"n\">asin</span><span class=\"p\">((</span><span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">in_rad_wind</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">dia_wire</span><span class=\"p\">)),</span> <span class=\"mi\">3</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta3</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Winding Pit of the third layer is too low. The minimum value has been set instead.&quot;</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">teta3</span><span class=\"p\">)</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta3</span>\n\n                    <span class=\"n\">occ3</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns3</span> <span class=\"o\">*</span> <span class=\"n\">teta3</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">occ3</span> <span class=\"o\">&lt;</span> <span class=\"n\">occ2</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">turns2</span> <span class=\"o\">*</span> <span class=\"n\">teta2</span> <span class=\"o\">/</span> <span class=\"n\">turns3</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta3</span>\n                        <span class=\"n\">occ3</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns3</span> <span class=\"o\">*</span> <span class=\"n\">teta3</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">occ3</span> <span class=\"o\">==</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n                        <span class=\"n\">teta3</span> <span class=\"o\">=</span> <span class=\"n\">teta3</span> <span class=\"o\">-</span> <span class=\"mf\">0.0001</span>\n                        <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta3</span>\n                    <span class=\"n\">occ3</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">turns3</span> <span class=\"o\">*</span> <span class=\"n\">teta3</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">180</span> <span class=\"o\">/</span> <span class=\"n\">nb_wind</span><span class=\"p\">)</span>\n                    <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">occ3</span>\n                    <span class=\"c1\"># TODO if occ3 == 100: method can be improve</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Coil Pit(deg)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">teta</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Turns&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">turns</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Mid Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">occ</span>\n                <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s2\">&quot;Inner Winding&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Occupation(%)&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">occ</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">create_another_file</span><span class=\"p\">:</span>\n                <span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"n\">extension_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">)</span>\n                <span class=\"n\">new_path</span> <span class=\"o\">=</span> <span class=\"n\">root_path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_Corrected&quot;</span> <span class=\"o\">+</span> <span class=\"n\">extension_path</span>\n                <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">new_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>\n                    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">outfile</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>\n                    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">outfile</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">]</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_make_winding_follow_chamfer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chamfer</span><span class=\"p\">,</span> <span class=\"n\">security_factor</span><span class=\"p\">,</span> <span class=\"n\">wire_diameter</span><span class=\"p\">,</span> <span class=\"n\">layer_number</span><span class=\"p\">):</span>\n        <span class=\"n\">sr</span> <span class=\"o\">=</span> <span class=\"n\">security_factor</span>\n        <span class=\"n\">w_rad_inc</span> <span class=\"o\">=</span> <span class=\"n\">layer_number</span> <span class=\"o\">*</span> <span class=\"n\">sr</span> <span class=\"o\">*</span> <span class=\"n\">wire_diameter</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">w_rad_inc</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">w_rad_inc</span> <span class=\"o\">+</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">chamfer</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"k\">return</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">distance</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_value_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">taken_value</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span><span class=\"p\">,</span> <span class=\"n\">part_message1</span><span class=\"p\">,</span> <span class=\"n\">part_message2</span><span class=\"p\">):</span>\n        <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"n\">are_inequations_checkable</span>\n        <span class=\"k\">if</span> <span class=\"n\">value_type</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">receiving_variable</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">taken_value</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">receiving_variable</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;The character entered is invalid. &quot;</span>\n                        <span class=\"o\">+</span> <span class=\"n\">part_message1</span>\n                        <span class=\"o\">+</span> <span class=\"s2\">&quot;  must be &quot;</span>\n                        <span class=\"o\">+</span> <span class=\"n\">part_message2</span>\n                        <span class=\"o\">+</span> <span class=\"s2\">&quot;.  It must be changed&quot;</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">receiving_variable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The character entered is invalid. &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"n\">part_message1</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot;  must be &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"n\">part_message2</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot;.  It must be changed&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">elif</span> <span class=\"n\">value_type</span> <span class=\"o\">==</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">receiving_variable</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">taken_value</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">receiving_variable</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;The character entered is invalid. &quot;</span>\n                        <span class=\"o\">+</span> <span class=\"n\">part_message1</span>\n                        <span class=\"o\">+</span> <span class=\"s2\">&quot;  must be &quot;</span>\n                        <span class=\"o\">+</span> <span class=\"n\">part_message2</span>\n                        <span class=\"o\">+</span> <span class=\"s2\">&quot;.  It must be changed&quot;</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"n\">receiving_variable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The character entered is invalid. &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"n\">part_message1</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot;  must be &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"n\">part_message2</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot;.  It must be changed&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">are_inequations_checkable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">receiving_variable</span><span class=\"p\">,</span> <span class=\"n\">are_inequations_checkable</span></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/Primitives3D", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}