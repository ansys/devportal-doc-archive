{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.schematic", "body": "<h1>Source code for pyaedt.modeler.schematic</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AEDT_UNITS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.cad.Modeler</span> <span class=\"kn\">import</span> <span class=\"n\">Modeler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.circuits.object3dcircuit</span> <span class=\"kn\">import</span> <span class=\"n\">CircuitComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.circuits.PrimitivesEmit</span> <span class=\"kn\">import</span> <span class=\"n\">EmitComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.circuits.PrimitivesEmit</span> <span class=\"kn\">import</span> <span class=\"n\">EmitComponents</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.circuits.PrimitivesMaxwellCircuit</span> <span class=\"kn\">import</span> <span class=\"n\">MaxwellCircuitComponents</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.circuits.PrimitivesNexxim</span> <span class=\"kn\">import</span> <span class=\"n\">NexximComponents</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.circuits.PrimitivesTwinBuilder</span> <span class=\"kn\">import</span> <span class=\"n\">TwinBuilderComponents</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.pcb.Primitives3DLayout</span> <span class=\"kn\">import</span> <span class=\"n\">Primitives3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.LayerStackup</span> <span class=\"kn\">import</span> <span class=\"n\">Layers</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelerCircuit</span><span class=\"p\">(</span><span class=\"n\">Modeler</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;ModelerCircuit class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.AnalysisNexxim.FieldAnalysisCircuit`</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Circuit</span>\n<span class=\"sd\">    &gt;&gt;&gt; app = Circuit()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_modeler = app.modeler</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">o_def_manager</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odefinition_manager</span>\n        <span class=\"n\">Modeler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">o_component_manager</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Component manager object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">o_component_manager</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">o_model_manager</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Model manager object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">o_model_manager</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">oeditor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Oeditor Module.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor = oDesign.SetActiveEditor(&quot;SchematicEditor&quot;)&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oeditor</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">obounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Bounding box.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox()&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetModelBoundingBox</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">zoom_to_fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Zoom To Fit.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ZoomToFit</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ZoomToFit</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connect_schematic_components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">firstcomponent</span><span class=\"p\">,</span> <span class=\"n\">secondcomponent</span><span class=\"p\">,</span> <span class=\"n\">pinnum_first</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">pinnum_second</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Connect schematic components.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        firstcomponent : str</span>\n<span class=\"sd\">           Starting (right) component.</span>\n<span class=\"sd\">        secondcomponent : str</span>\n<span class=\"sd\">           Ending (left) component for the connection line.</span>\n<span class=\"sd\">        pinnum_first : str, optional</span>\n<span class=\"sd\">             Number of the pin at which to terminate the connection from the right end of the</span>\n<span class=\"sd\">             starting component. The default is ``2``.</span>\n<span class=\"sd\">        pinnum_second : str, optional</span>\n<span class=\"sd\">             Number of the pin at which to termiante the connection from the left end of the</span>\n<span class=\"sd\">             ending component. The default is ``1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateWire</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">obj1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">[</span><span class=\"n\">firstcomponent</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Port&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">:</span>\n            <span class=\"n\">pos1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPropertyValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;BaseElementTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Component Location&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">pos1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()[:</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.0000254</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pos1</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;GPort&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">:</span>\n                <span class=\"n\">pos1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">0.00254</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pins1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">get_pins</span><span class=\"p\">(</span><span class=\"n\">firstcomponent</span><span class=\"p\">)</span>\n            <span class=\"n\">pos1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">get_pin_location</span><span class=\"p\">(</span><span class=\"n\">firstcomponent</span><span class=\"p\">,</span> <span class=\"n\">pins1</span><span class=\"p\">[</span><span class=\"n\">pinnum_first</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">[</span><span class=\"n\">secondcomponent</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Port&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">:</span>\n            <span class=\"n\">pos2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPropertyValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;BaseElementTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Component Location&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">pos2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()[:</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.0000254</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pos2</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;GPort&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">:</span>\n                <span class=\"n\">pos2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">0.00254</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pins2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">get_pins</span><span class=\"p\">(</span><span class=\"n\">secondcomponent</span><span class=\"p\">)</span>\n            <span class=\"n\">pos2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">get_pin_location</span><span class=\"p\">(</span><span class=\"n\">secondcomponent</span><span class=\"p\">,</span> <span class=\"n\">pins2</span><span class=\"p\">[</span><span class=\"n\">pinnum_second</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">create_wire</span><span class=\"p\">([</span><span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">pos2</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_components_selections</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"n\">return_as_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">sels</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">selections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">selections</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">sel</span> <span class=\"ow\">in</span> <span class=\"n\">selections</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">sel</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"n\">sels</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">schematic</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">[</span><span class=\"n\">sel</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">sel</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">CircuitComponent</span><span class=\"p\">,</span> <span class=\"n\">EmitComponent</span><span class=\"p\">)):</span>\n                <span class=\"n\">sels</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sel</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">schematic</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sel</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">InstanceName</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]:</span>\n                        <span class=\"n\">sels</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">composed_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">return_as_list</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sels</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sels</span>\n\n\n<div class=\"viewcode-block\" id=\"ModelerNexxim\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.schematic.ModelerNexxim/#pyaedt.modeler.schematic.ModelerNexxim\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ModelerNexxim</span><span class=\"p\">(</span><span class=\"n\">ModelerCircuit</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;ModelerNexxim class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.AnalysisNexxim.FieldAnalysisCircuit`</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"n\">ModelerCircuit</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_schematic</span> <span class=\"o\">=</span> <span class=\"n\">NexximComponents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layouteditor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">roughnessunits</span><span class=\"o\">=</span><span class=\"s2\">&quot;um&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span> <span class=\"o\">=</span> <span class=\"n\">Primitives3DLayout</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layouteditor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the Circuit Layout Editor.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.SetActiveEditor(&quot;Layout&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">layouteditor</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">schematic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Schematic Component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.PrimitivesNexxim.NexximComponents`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_schematic</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Schematic Component.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.13</span>\n<span class=\"sd\">           Use :func:`Circuit.modeler.schematic` instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.PrimitivesNexxim.NexximComponents`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_schematic</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;EDB.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.Edb`</span>\n<span class=\"sd\">            edb_core object if it exists.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO Check why it crashes when multiple circuits are created</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Model units.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetActiveUnits</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SetActiveUnits</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layouteditor</span><span class=\"o\">.</span><span class=\"n\">GetActiveUnits</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Primitives.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Primitives3DLayout.Primitives3DLayout`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primitives</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Primitives.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.13</span>\n<span class=\"sd\">           Use :func:`Circuit.modeler.layout` instead.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Primitives3DLayout.Primitives3DLayout`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span>\n\n    <span class=\"nd\">@model_units</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">units</span> <span class=\"ow\">in</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Invalid units string </span><span class=\"si\">{0}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; Set the model units as a string e.g. &quot;mm&quot; &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetActivelUnits</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Units Parameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Units:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Rescale:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n\n<div class=\"viewcode-block\" id=\"ModelerNexxim.move\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.schematic.ModelerNexxim.move/#pyaedt.modeler.schematic.ModelerNexxim.move\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;meter&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Move the selections by ``[x, y]``.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        selections : list</span>\n<span class=\"sd\">            List of the selections.</span>\n<span class=\"sd\">        pos : list</span>\n<span class=\"sd\">            Offset for the ``[x, y]`` axis.</span>\n<span class=\"sd\">        units : str</span>\n<span class=\"sd\">            Offset for the Y axis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Move</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sels</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_components_selections</span><span class=\"p\">(</span><span class=\"n\">selections</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sels</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;No Component Found.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">x_location</span> <span class=\"o\">=</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">][</span><span class=\"n\">units</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">y_location</span> <span class=\"o\">=</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">][</span><span class=\"n\">units</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Move</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">sels</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:MoveParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;xdelta:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">x_location</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ydelta:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">y_location</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Disconnect:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Rubberband:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"ModelerNexxim.rotate\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.schematic.ModelerNexxim.rotate/#pyaedt.modeler.schematic.ModelerNexxim.rotate\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selections</span><span class=\"p\">,</span> <span class=\"n\">degrees</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rotate the selections by degrees.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        selections : list</span>\n<span class=\"sd\">            List of the selections.</span>\n<span class=\"sd\">        degrees : optional</span>\n<span class=\"sd\">            Angle rotation in degrees. The default is ``90``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Rotate</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sels</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_components_selections</span><span class=\"p\">(</span><span class=\"n\">selections</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sels</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;No Component Found.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Rotate</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">sels</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:RotateParameters&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Degrees:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">degrees</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Disconnect:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Rubberband:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"ModelerTwinBuilder\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.schematic.ModelerTwinBuilder/#pyaedt.modeler.schematic.ModelerTwinBuilder\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ModelerTwinBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelerCircuit</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;ModelerTwinBuilder class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.AnalysisTwinBuilder.AnalysisTwinBuilder`</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"n\">ModelerCircuit</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span> <span class=\"o\">=</span> <span class=\"n\">TwinBuilderComponents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        .. deprecated:: 0.4.13</span>\n<span class=\"sd\">           Use :func:`TwinBuilder.modeler.schematic` instead.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">schematic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Schematic Object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.PrimitivesTwinBuilder.TwinBuilderComponents`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ModelerEmit\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.schematic.ModelerEmit/#pyaedt.modeler.schematic.ModelerEmit\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ModelerEmit</span><span class=\"p\">(</span><span class=\"n\">ModelerCircuit</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;ModelerEmit class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.AnalysisEmit`</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"n\">ModelerCircuit</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span> <span class=\"o\">=</span> <span class=\"n\">EmitComponents</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelerMaxwellCircuit</span><span class=\"p\">(</span><span class=\"n\">ModelerCircuit</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;ModelerMaxwellCircuit class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.AnalysisMaxwellCircuit`</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"n\">ModelerCircuit</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span> <span class=\"o\">=</span> <span class=\"n\">MaxwellCircuitComponents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">schematic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Schematic Object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.PrimitivesMaxwellCircuit.MaxwellCircuitComponents`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_components</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/schematic", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}