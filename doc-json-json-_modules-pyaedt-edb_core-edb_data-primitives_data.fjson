{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "pyaedt.edb_core.edb_data.primitives_data", "body": "<h1>Source code for pyaedt.edb_core.edb_data.primitives_data</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.general</span> <span class=\"kn\">import</span> <span class=\"n\">convert_py_list_to_net_list</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EDBPrimitives</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages EDB functionalities for a primitives.</span>\n<span class=\"sd\">    It Inherits EDB Object properties.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb = Edb(myedb, edbversion=&quot;2021.2&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_prim = edb.core_primitives.primitives[0]</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_prim.is_void # Class Property</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb_prim.IsVoid() # EDB Object Property</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Attribute not present&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raw_primitive</span><span class=\"p\">,</span> <span class=\"n\">core_app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">core_app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_stackup</span> <span class=\"o\">=</span> <span class=\"n\">core_app</span><span class=\"o\">.</span><span class=\"n\">stackup</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_net</span> <span class=\"o\">=</span> <span class=\"n\">core_app</span><span class=\"o\">.</span><span class=\"n\">core_nets</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span> <span class=\"o\">=</span> <span class=\"n\">raw_primitive</span>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.area\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.area/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.area\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">area</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">include_voids</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the total area.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        include_voids : bool, optional</span>\n<span class=\"sd\">            Either if the voids have to be included in computation.</span>\n<span class=\"sd\">            The default value is ``True``.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Area</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">include_voids</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">Voids</span><span class=\"p\">:</span>\n                <span class=\"n\">area</span> <span class=\"o\">-=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Area</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">area</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_void</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Either if the primitive is a void or not.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"p\">,</span> <span class=\"s2\">&quot;IsVoid&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">IsVoid</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Primitive ID.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GetId</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_eval_arc_points</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-12</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the points of the arc</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p1 : list</span>\n<span class=\"sd\">            Arc starting point.</span>\n<span class=\"sd\">        p2 : list</span>\n<span class=\"sd\">            Arc ending point.</span>\n<span class=\"sd\">        h : float</span>\n<span class=\"sd\">            Arc height.</span>\n<span class=\"sd\">        n : int</span>\n<span class=\"sd\">            Number of points to generate along the arc.</span>\n<span class=\"sd\">        tol : float</span>\n<span class=\"sd\">            Geometric tolerance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list, list</span>\n<span class=\"sd\">            Points generated along the arc.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">h</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">h</span> <span class=\"o\">*=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">xa</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x2</span> <span class=\"o\">-</span> <span class=\"n\">x1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">ya</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">y2</span> <span class=\"o\">-</span> <span class=\"n\">y1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"n\">xo</span> <span class=\"o\">=</span> <span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"n\">xa</span>\n        <span class=\"n\">yo</span> <span class=\"o\">=</span> <span class=\"n\">y1</span> <span class=\"o\">+</span> <span class=\"n\">ya</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">xa</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">ya</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># chord angle</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">a</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">r</span><span class=\"p\">)</span>  <span class=\"c1\"># chord angle</span>\n\n        <span class=\"c1\"># center of the circle</span>\n        <span class=\"n\">xc</span> <span class=\"o\">=</span> <span class=\"n\">xo</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">ya</span> <span class=\"o\">/</span> <span class=\"n\">a</span>\n        <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">yo</span> <span class=\"o\">-</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">xa</span> <span class=\"o\">/</span> <span class=\"n\">a</span>\n\n        <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">((</span><span class=\"n\">y1</span> <span class=\"o\">-</span> <span class=\"n\">yc</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"o\">-</span> <span class=\"n\">xc</span><span class=\"p\">))</span>\n        <span class=\"n\">xr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">yr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">dth</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">th</span>\n            <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"n\">xc</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">alpha</span> <span class=\"o\">-</span> <span class=\"n\">dth</span><span class=\"p\">)</span>\n            <span class=\"n\">yi</span> <span class=\"o\">=</span> <span class=\"n\">yc</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">alpha</span> <span class=\"o\">-</span> <span class=\"n\">dth</span><span class=\"p\">)</span>\n            <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">)</span>\n            <span class=\"n\">yr</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">yi</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">reverse</span><span class=\"p\">:</span>\n            <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n            <span class=\"n\">yr</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"c1\"># fmt: on</span>\n        <span class=\"k\">return</span> <span class=\"n\">xr</span><span class=\"p\">,</span> <span class=\"n\">yr</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_points_for_plot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">my_net_points</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get the points to be plotted.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">point</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">my_net_points</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_arc</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">):</span>\n                <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">())</span>\n                <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">())</span>\n                <span class=\"c1\"># i += 1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">arc_h</span> <span class=\"o\">=</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">GetArcHeight</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n                <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">my_net_points</span><span class=\"p\">):</span>\n                    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">my_net_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n                <span class=\"n\">x_arc</span><span class=\"p\">,</span> <span class=\"n\">y_arc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_eval_arc_points</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">arc_h</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n                <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">x_arc</span><span class=\"p\">)</span>\n                <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">y_arc</span><span class=\"p\">)</span>\n                <span class=\"c1\"># i += 1</span>\n        <span class=\"c1\"># fmt: on</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.points\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.points/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.points\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arc_segments</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the list of points with arcs converted to segments.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        arc_segments : int</span>\n<span class=\"sd\">            Number of facets to convert an arc. Default is `6`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list, list</span>\n<span class=\"sd\">            x and y list of points.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">my_net_points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Points</span><span class=\"p\">)</span>\n            <span class=\"n\">xt</span><span class=\"p\">,</span> <span class=\"n\">yt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_points_for_plot</span><span class=\"p\">(</span><span class=\"n\">my_net_points</span><span class=\"p\">,</span> <span class=\"n\">arc_segments</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">xt</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[]</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">orient_polygon</span><span class=\"p\">(</span><span class=\"n\">xt</span><span class=\"p\">,</span> <span class=\"n\">yt</span><span class=\"p\">,</span> <span class=\"n\">clockwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">voids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a list of voids of the given primitive if any.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of :class:`pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">voids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">void</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">Voids</span><span class=\"p\">:</span>\n            <span class=\"n\">voids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">voids</span>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.points_raw\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.points_raw/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.points_raw\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points_raw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a list of Edb points.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Edb Points.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">my_net_points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Points</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">point</span> <span class=\"ow\">in</span> <span class=\"n\">my_net_points</span><span class=\"p\">:</span>\n                <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">points</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">points</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.is_arc\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.is_arc/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.is_arc\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_arc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Either if a point is an arc or not.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">IsArc</span><span class=\"p\">()</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the type of the primitive.</span>\n<span class=\"sd\">        Allowed outputs are `&quot;Circle&quot;`, `&quot;Rectangle&quot;`,`&quot;Polygon&quot;`,`&quot;Path&quot;`,`&quot;Bondwire&quot;`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Circle&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Path&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Polygon&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Rectangle&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Bondwire&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">str_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">str_type</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">types</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">str_type</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return EDB Net Object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get or Set the primitive net name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@net_name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">SetNet</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value inserted not found. Input has to be layer name or net object.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_net</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">:</span>\n            <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_net</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">net_object</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">SetNet</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value inserted not found. Input has to be layer name or net object.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the primitive edb layer object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetLayer</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get or Set the primitive layer name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@layer_name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layer_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">:</span>\n            <span class=\"n\">lay</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_core_stackup</span><span class=\"o\">.</span><span class=\"n\">stackup_layers</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">_edb_layer</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">SetLayer</span><span class=\"p\">(</span><span class=\"n\">lay</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">SetLayer</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value inserted not found. Input has to be layer name or layer object.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value inserted not found. Input has to be layer name or layer object.&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.delete\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.delete/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.delete\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete this primtive.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.get_connected_object_id_set\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.get_connected_object_id_set/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.get_connected_object_id_set\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_connected_object_id_set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Produce a list of all geometries physically connected to a given layout object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Found connected objects IDs with Layout object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">layoutInst</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetLayout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetLayoutInstance</span><span class=\"p\">()</span>\n        <span class=\"n\">layoutObjInst</span> <span class=\"o\">=</span> <span class=\"n\">layoutInst</span><span class=\"o\">.</span><span class=\"n\">GetLayoutObjInstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># 2nd arg was []</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">loi</span><span class=\"o\">.</span><span class=\"n\">GetLayoutObj</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetId</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">loi</span> <span class=\"ow\">in</span> <span class=\"n\">layoutInst</span><span class=\"o\">.</span><span class=\"n\">GetConnectedObjects</span><span class=\"p\">(</span><span class=\"n\">layoutObjInst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Items</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.convert_to_polygon\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.convert_to_polygon/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.convert_to_polygon\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_polygon</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert path to polygon.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        Converted polygon.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Path&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">polygon_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n            <span class=\"n\">polygon</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span><span class=\"n\">polygon_data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">polygon</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.add_void\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.add_void/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.add_void\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_void</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">point_list</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a void to current primitive.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        point_list : list</span>\n<span class=\"sd\">            Point list in the format of `[[x1,y1], [x2,y2],..,[xn,yn]]`.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if successful, either  ``False``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">Shape</span><span class=\"p\">(</span><span class=\"s2\">&quot;polygon&quot;</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"o\">=</span><span class=\"n\">point_list</span><span class=\"p\">)</span>\n        <span class=\"n\">_poly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">shape_to_polygon_data</span><span class=\"p\">(</span><span class=\"n\">plane</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">_poly</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">_poly</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">_poly</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to create void polygon data&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">prim</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Primitive</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">active_layout</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">(),</span> <span class=\"n\">_poly</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">AddVoid</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.subtract\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.subtract/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.subtract\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">primitives</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Subtract active primitive with one or more primitives.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        primitives : :class:`pyaedt.edb_core.edb_data.EDBPrimitives` or EDB PolygonData or EDB Primitive or list</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of :class:`pyaedt.edb_core.edb_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">primitives</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">primitives</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">primitives</span><span class=\"p\">]</span>\n        <span class=\"n\">primi_polys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">,</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">):</span>\n                <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">)</span>\n        <span class=\"n\">list_poly</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">Subtract</span><span class=\"p\">(</span><span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">([</span><span class=\"n\">poly</span><span class=\"p\">]),</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">primi_polys</span><span class=\"p\">))</span>\n        <span class=\"n\">new_polys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">list_poly</span><span class=\"p\">:</span>\n            <span class=\"n\">voids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voids</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">list_poly</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">list_void</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"n\">void_to_subtract</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">if</span> <span class=\"n\">voids</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">void</span> <span class=\"ow\">in</span> <span class=\"n\">voids</span><span class=\"p\">:</span>\n                        <span class=\"n\">void_pdata</span> <span class=\"o\">=</span> <span class=\"n\">void</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n                        <span class=\"n\">int_data2</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">GetIntersectionType</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">int_data2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"n\">int_data2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                            <span class=\"n\">void_to_subtract</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                        <span class=\"k\">elif</span> <span class=\"n\">int_data2</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                            <span class=\"n\">list_void</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">void_to_subtract</span><span class=\"p\">:</span>\n                        <span class=\"n\">polys_cleans</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Subtract</span><span class=\"p\">(</span>\n                            <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">void_to_subtract</span><span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">polys_clean</span> <span class=\"ow\">in</span> <span class=\"n\">polys_cleans</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">polys_clean</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n                                <span class=\"n\">void_to_append</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">list_void</span> <span class=\"k\">if</span> <span class=\"n\">polys_clean</span><span class=\"o\">.</span><span class=\"n\">GetIntersectionType</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n                                <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                                    <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                                            <span class=\"n\">polys_clean</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">void_to_append</span>\n                                        <span class=\"p\">),</span>\n                                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                                    <span class=\"p\">)</span>\n                                <span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                            <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                                    <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">list_void</span>\n                                <span class=\"p\">),</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                        <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                                <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">list_void</span>\n                            <span class=\"p\">),</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">,</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">):</span>\n                <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_polys</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.intersect\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.intersect/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.intersect\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intersect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">primitives</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Intersect active primitive with one or more primitives.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        primitives : :class:`pyaedt.edb_core.edb_data.EDBPrimitives` or EDB PolygonData or EDB Primitive or list</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of :class:`pyaedt.edb_core.edb_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">primitives</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">primitives</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">primitives</span><span class=\"p\">]</span>\n        <span class=\"n\">primi_polys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">,</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">):</span>\n                <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">)</span>\n        <span class=\"n\">list_poly</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">Intersect</span><span class=\"p\">(</span><span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">([</span><span class=\"n\">poly</span><span class=\"p\">]),</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">primi_polys</span><span class=\"p\">))</span>\n        <span class=\"n\">new_polys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">list_poly</span><span class=\"p\">:</span>\n            <span class=\"n\">voids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voids</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">list_poly</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">list_void</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"n\">void_to_subtract</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">if</span> <span class=\"n\">voids</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">void</span> <span class=\"ow\">in</span> <span class=\"n\">voids</span><span class=\"p\">:</span>\n                        <span class=\"n\">void_pdata</span> <span class=\"o\">=</span> <span class=\"n\">void</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n                        <span class=\"n\">int_data2</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">GetIntersectionType</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">int_data2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"n\">int_data2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                            <span class=\"n\">void_to_subtract</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                        <span class=\"k\">elif</span> <span class=\"n\">int_data2</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                            <span class=\"n\">list_void</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">void_to_subtract</span><span class=\"p\">:</span>\n                        <span class=\"n\">polys_cleans</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Subtract</span><span class=\"p\">(</span>\n                            <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">(</span><span class=\"n\">void_to_subtract</span><span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">polys_clean</span> <span class=\"ow\">in</span> <span class=\"n\">polys_cleans</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">polys_clean</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n                                <span class=\"n\">void_to_append</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">list_void</span> <span class=\"k\">if</span> <span class=\"n\">polys_clean</span><span class=\"o\">.</span><span class=\"n\">GetIntersectionType</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n                        <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                            <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                                    <span class=\"n\">polys_clean</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">void_to_append</span>\n                                <span class=\"p\">),</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                            <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                                    <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">list_void</span>\n                                <span class=\"p\">),</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                        <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                                <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">list_void</span>\n                            <span class=\"p\">),</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">,</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">):</span>\n                <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_polys</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBPrimitives.unite\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.unite/#pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives.unite\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">primitives</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Unite active primitive with one or more primitives.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        primitives : :class:`pyaedt.edb_core.edb_data.EDBPrimitives` or EDB PolygonData or EDB Primitive or list</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of :class:`pyaedt.edb_core.edb_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">primitives</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">primitives</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">primitives</span><span class=\"p\">]</span>\n        <span class=\"n\">primi_polys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">,</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">):</span>\n                <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">())</span>\n                <span class=\"k\">except</span><span class=\"p\">:</span>\n                    <span class=\"n\">primi_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">)</span>\n        <span class=\"n\">list_poly</span> <span class=\"o\">=</span> <span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">Unite</span><span class=\"p\">(</span><span class=\"n\">convert_py_list_to_net_list</span><span class=\"p\">([</span><span class=\"n\">poly</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">primi_polys</span><span class=\"p\">))</span>\n        <span class=\"n\">new_polys</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">list_poly</span><span class=\"p\">:</span>\n            <span class=\"n\">voids</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">voids</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">list_poly</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">list_void</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">if</span> <span class=\"n\">voids</span><span class=\"p\">:</span>\n                    <span class=\"k\">for</span> <span class=\"n\">void</span> <span class=\"ow\">in</span> <span class=\"n\">voids</span><span class=\"p\">:</span>\n                        <span class=\"n\">void_pdata</span> <span class=\"o\">=</span> <span class=\"n\">void</span><span class=\"o\">.</span><span class=\"n\">primitive_object</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n                        <span class=\"n\">int_data2</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">GetIntersectionType</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">int_data2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                            <span class=\"n\">list_void</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">void_pdata</span><span class=\"p\">)</span>\n                <span class=\"n\">new_polys</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">create_polygon</span><span class=\"p\">(</span>\n                            <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">voids</span><span class=\"o\">=</span><span class=\"n\">list_void</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">prim</span> <span class=\"ow\">in</span> <span class=\"n\">primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">,</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">):</span>\n                <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">prim</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_polys</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/edb_data/primitives_data", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}