{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.modelerpcb", "body": "<h1>Source code for pyaedt.modeler.modelerpcb</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">warnings</span> <span class=\"kn\">import</span> <span class=\"n\">warn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb</span> <span class=\"kn\">import</span> <span class=\"n\">Edb</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AEDT_UNITS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">get_filename_without_extension</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">inside_desktop</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.cad.Modeler</span> <span class=\"kn\">import</span> <span class=\"n\">Modeler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.pcb.object3dlayout</span> <span class=\"kn\">import</span> <span class=\"n\">ComponentsSubCircuit3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.pcb.Primitives3DLayout</span> <span class=\"kn\">import</span> <span class=\"n\">Primitives3DLayout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.LayerStackup</span> <span class=\"kn\">import</span> <span class=\"n\">Layers</span>\n\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout/#pyaedt.modeler.modelerpcb.Modeler3DLayout\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Modeler3DLayout</span><span class=\"p\">(</span><span class=\"n\">Modeler</span><span class=\"p\">,</span> <span class=\"n\">Primitives3DLayout</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages Modeler 3D layouts.</span>\n<span class=\"sd\">    This class is inherited in the caller application and is accessible through the modeler variable</span>\n<span class=\"sd\">    object (for example, ``hfss3dlayout.modeler``).</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app : :class:`pyaedt.application.Analysis3DLayout.FieldAnalysis3DLayout`</span>\n<span class=\"sd\">            Inherited parent object.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">    &gt;&gt;&gt; hfss = Hfss3dLayout()</span>\n<span class=\"sd\">    &gt;&gt;&gt; my_modeler = hfss.modeler</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Loading Modeler.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">Modeler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Modeler loaded.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;EDB loaded.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"n\">Layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">roughnessunits</span><span class=\"o\">=</span><span class=\"s2\">&quot;um&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Layers loaded.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">Primitives3DLayout</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Primitives loaded.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">o_def_manager</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odefinition_manager</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rigid_flex</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">oeditor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Oeditor Module.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor = oDesign.SetActiveEditor(&quot;Layout&quot;)&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oeditor</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">o_component_manager</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component manager object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">o_component_manager</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">o_model_manager</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Model manager object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">o_model_manager</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_folder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.aedb&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_folder</span><span class=\"p\">,</span> <span class=\"s2\">&quot;edb.def&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;EBD.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb.Edb`</span>\n<span class=\"sd\">             EDB.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">remote_api</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_file</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">inside_desktop</span> <span class=\"ow\">and</span> <span class=\"n\">is_ironpython</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span> <span class=\"o\">=</span> <span class=\"n\">Edb</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_folder</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_name</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span><span class=\"p\">,</span>\n                    <span class=\"n\">isaedtowned</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">oproject</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">inside_desktop</span> <span class=\"ow\">and</span> <span class=\"n\">is_ironpython</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_timestamp_changed</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">close_edb</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span> <span class=\"o\">=</span> <span class=\"n\">Edb</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_folder</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_name</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span><span class=\"p\">,</span>\n                    <span class=\"n\">isaedtowned</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">oproject</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Logger.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.fit_all\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.fit_all/#pyaedt.modeler.modelerpcb.Modeler3DLayout.fit_all\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fit_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Fit all.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ZoomToFit()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">RestoreWindow</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ZoomToFit</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">RestoreWindow</span><span class=\"p\">()</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Model units.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetActiveUnits</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.SetActivelUnits</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetActiveUnits</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@model_units</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">units</span> <span class=\"ow\">in</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"s2\">&quot;Length&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Invalid units string </span><span class=\"si\">{0}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the model units as a string (for example, &quot;mm&quot;).&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">SetActiveUnits</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Units Parameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Units:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Rescale:=&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primitives</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Primitives.</span>\n\n<span class=\"sd\">        .. deprecated:: 0.4.15</span>\n<span class=\"sd\">            There is no need to use the ``primitives`` property anymore. You can instantiate</span>\n<span class=\"sd\">            methods for primitives directly from the modeler.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Primitives3DLayout.Primitives3DLayout`</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">mess</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;`primitives` is deprecated.</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">mess</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; Use `app.modeler` directly to instantiate primitives methods.&quot;</span>\n        <span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">mess</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">obounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Bounding box.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetModelBoundingBox</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetModelBoundingBox</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">units</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}{1}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">val</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">xpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">ypos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ypos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">xpos</span><span class=\"p\">,</span> <span class=\"n\">ypos</span><span class=\"p\">,</span> <span class=\"n\">zpos</span>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.change_property\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.change_property/#pyaedt.modeler.modelerpcb.Modeler3DLayout.change_property\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">property_object</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"p\">,</span> <span class=\"n\">property_tab</span><span class=\"o\">=</span><span class=\"s2\">&quot;BaseElementTab&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Change an oeditor property.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        property_object : str</span>\n<span class=\"sd\">            Name of the property object. It can be the name of an excitation or field reporter.</span>\n<span class=\"sd\">            For example, ``Excitations:Port1`` or ``FieldsReporter:Mag_H``.</span>\n<span class=\"sd\">        property_name : str</span>\n<span class=\"sd\">            Name of the property. For example, ``Rotation Angle``.</span>\n<span class=\"sd\">        property_value : str, list</span>\n<span class=\"sd\">            Value of the property. It is a string for a single value and a list of three elements for</span>\n<span class=\"sd\">            ``[x,y,z]`` coordianates.</span>\n<span class=\"sd\">        property_tab : str</span>\n<span class=\"sd\">            Name of the tab to update. Options are ``BaseElementTab``, ``EM Design``, and</span>\n<span class=\"sd\">            ``FieldsPostProcessorTab``. The default is ``BaseElementTab``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">xpos</span><span class=\"p\">,</span> <span class=\"n\">ypos</span><span class=\"p\">,</span> <span class=\"n\">zpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pos_with_arg</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">property_tab</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_object</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">xpos</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">ypos</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Z:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">zpos</span><span class=\"p\">]],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">property_tab</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_object</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"p\">]],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)):</span>\n            <span class=\"n\">xpos</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">property_tab</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_object</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">xpos</span><span class=\"p\">]],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong Property Value&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Property </span><span class=\"si\">{}</span><span class=\"s2\"> Changed correctly.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">property_name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.merge_design\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.merge_design/#pyaedt.modeler.modelerpcb.Modeler3DLayout.merge_design\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">merge_design</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">merged_design</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pos_x</span><span class=\"o\">=</span><span class=\"s2\">&quot;0.0&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos_y</span><span class=\"o\">=</span><span class=\"s2\">&quot;0.0&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos_z</span><span class=\"o\">=</span><span class=\"s2\">&quot;0.0&quot;</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"o\">=</span><span class=\"s2\">&quot;0.0&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Merge a design into another.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        merged_design : :class:`pyaedt.hfss3dlayout.Hfss3dLayout`</span>\n<span class=\"sd\">            Design to merge.</span>\n<span class=\"sd\">        pos_x : float, str</span>\n<span class=\"sd\">            X Offset.</span>\n<span class=\"sd\">        pos_y : float, str</span>\n<span class=\"sd\">            Y Offset.</span>\n<span class=\"sd\">        pos_z : float, str</span>\n<span class=\"sd\">            Z Offset.</span>\n<span class=\"sd\">        rotation : float, str</span>\n<span class=\"sd\">            Rotation angle in deg.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Object3d.ComponentsSubCircuit3DLayout`</span>\n<span class=\"sd\">            Object if successful.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">des_name</span> <span class=\"o\">=</span> <span class=\"n\">merged_design</span><span class=\"o\">.</span><span class=\"n\">design_name</span>\n        <span class=\"n\">merged_design</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"o\">.</span><span class=\"n\">CopyDesign</span><span class=\"p\">(</span><span class=\"n\">des_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">PasteDesign</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">comp_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">cmp_info</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetComponentInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"n\">cmp_info</span> <span class=\"ow\">and</span> <span class=\"n\">des_name</span> <span class=\"ow\">in</span> <span class=\"n\">cmp_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                    <span class=\"n\">comp_name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">comp_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">comp</span> <span class=\"o\">=</span> <span class=\"n\">ComponentsSubCircuit3DLayout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">comp_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components_3d</span><span class=\"p\">[</span><span class=\"n\">comp_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">comp</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"n\">comp_name</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;3D Placement&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"n\">comp_name</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Local Origin&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">])</span>\n        <span class=\"n\">pos_x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos_x</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos_y</span><span class=\"p\">)</span>\n        <span class=\"n\">pos_z</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">pos_z</span><span class=\"p\">)</span>\n        <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">rotation</span><span class=\"p\">,</span> <span class=\"s2\">&quot;deg&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"n\">comp_name</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Location&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">pos_x</span><span class=\"p\">,</span> <span class=\"n\">pos_y</span><span class=\"p\">,</span> <span class=\"n\">pos_z</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">property_object</span><span class=\"o\">=</span><span class=\"n\">comp_name</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rotation Angle&quot;</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"o\">=</span><span class=\"n\">rotation</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">comp</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.change_clip_plane_position\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.change_clip_plane_position/#pyaedt.modeler.modelerpcb.Modeler3DLayout.change_clip_plane_position\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change_clip_plane_position</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">clip_name</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Change the clip plane position.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        clip_name : str</span>\n<span class=\"sd\">            Name of the clip plane.</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x,y,z]`` coordinates for the new position.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">change_property</span><span class=\"p\">(</span><span class=\"n\">clip_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Location&quot;</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.colinear_heal\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.colinear_heal/#pyaedt.modeler.modelerpcb.Modeler3DLayout.colinear_heal\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">colinear_heal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">selection</span><span class=\"p\">,</span> <span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Remove small edges of one or more primitives.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        selection : str or list</span>\n<span class=\"sd\">            One or more primitives to heal.</span>\n<span class=\"sd\">        tolerance :  float, optional</span>\n<span class=\"sd\">            Tolerance value. The default is ``0.1``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Heal</span>\n\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d=Hfss3dLayout(specified_version=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.layers.add_layer(&quot;TOP&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; l1=h3d.modeler.create_line(&quot;TOP&quot;, [[0,0],[100,0]],  0.5, name=&quot;poly_1&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; l2=h3d.modeler.create_line(&quot;TOP&quot;, [[100,0],[120,-35]],  0.5, name=&quot;poly_2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.unite([l1,l2])</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.colinear_heal(&quot;poly_2&quot;, 0.25)</span>\n<span class=\"sd\">        True</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">selection</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">selection</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Heal</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Repair&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Selection:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">selection</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Type:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Colinear&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Tol:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">tolerance</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.expand\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.expand/#pyaedt.modeler.modelerpcb.Modeler3DLayout.expand\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_to_expand</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">expand_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;ROUND&quot;</span><span class=\"p\">,</span> <span class=\"n\">replace_original</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Expand the object by a specific size.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_to_expand : str</span>\n<span class=\"sd\">            Name of the object.</span>\n<span class=\"sd\">        size : float, optional</span>\n<span class=\"sd\">            Size of the expansion. The default is ``1``.</span>\n<span class=\"sd\">        expand_type : str, optional</span>\n<span class=\"sd\">            Type of the expansion. Options are ``&quot;ROUND&quot;``, ``&quot;MITER&quot;``, and</span>\n<span class=\"sd\">            ``&quot;CORNER&quot;``. The default is ``&quot;ROUND&quot;``.</span>\n<span class=\"sd\">        replace_original : bool, optional</span>\n<span class=\"sd\">             Whether to replace the original object. The default is ``False``, in which case</span>\n<span class=\"sd\">             a new object is created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Name of the object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Expand</span>\n\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d=Hfss3dLayout(specified_version=&quot;2021.2&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.layers.add_layer(&quot;TOP&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.create_rectangle(&quot;TOP&quot;, [20,20],[50,50], name=&quot;rect_1&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.create_line(&quot;TOP&quot;,[[25,25],[40,40]], name=&quot;line_3&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; out1 = h3d.modeler.expand(&quot;line_3&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; print(out1)</span>\n<span class=\"sd\">        line_4</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">object_to_expand</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_to_expand</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPropertyValue</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BaseElementTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">object_to_expand</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PlacementLayer&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetPolygonDef</span><span class=\"p\">(</span><span class=\"n\">object_to_expand</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPoints</span><span class=\"p\">()</span>\n        <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">poly</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">GetX</span><span class=\"p\">(),</span> <span class=\"n\">poly</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">GetY</span><span class=\"p\">()]</span>\n        <span class=\"n\">geom_names</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjectsByPoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">layer</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Expand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg_with_dim</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">),</span> <span class=\"n\">expand_type</span><span class=\"p\">,</span> <span class=\"n\">replace_original</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:elements&quot;</span><span class=\"p\">,</span> <span class=\"n\">object_to_expand</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">replace_original</span><span class=\"p\">:</span>\n            <span class=\"n\">new_geom_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">i</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">FindObjectsByPoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">layer</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">geom_names</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_geom_names</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">object_to_expand</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.import_cadence_brd\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.import_cadence_brd/#pyaedt.modeler.modelerpcb.Modeler3DLayout.import_cadence_brd\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_cadence_brd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">brd_filename</span><span class=\"p\">,</span> <span class=\"n\">edb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">edb_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Import a cadence board.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        brd_filename : str</span>\n<span class=\"sd\">            Full path and name of the BRD file to import.</span>\n<span class=\"sd\">        edb_path : str, optional</span>\n<span class=\"sd\">            Path where the EDB is to be created. The default is ``None``, in which</span>\n<span class=\"sd\">            case the project directory is used.</span>\n<span class=\"sd\">        edb_name : str, optional</span>\n<span class=\"sd\">            Name of the EDB. The default is ``None``, in which</span>\n<span class=\"sd\">            case the board name is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oImportExport.ImportExtracta</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edb_path</span><span class=\"p\">:</span>\n            <span class=\"n\">edb_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">projdir</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edb_name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">brd_filename</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oimportexport</span><span class=\"o\">.</span><span class=\"n\">ImportExtracta</span><span class=\"p\">(</span>\n            <span class=\"n\">brd_filename</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">edb_path</span><span class=\"p\">,</span> <span class=\"n\">edb_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.aedb&quot;</span><span class=\"p\">),</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">edb_path</span><span class=\"p\">,</span> <span class=\"n\">edb_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.xml&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">GetActiveProject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.modeler_variable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.modeler_variable/#pyaedt.modeler.modelerpcb.Modeler3DLayout.modeler_variable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">modeler_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve a modeler variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        value :</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_units</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.import_ipc2581\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.import_ipc2581/#pyaedt.modeler.modelerpcb.Modeler3DLayout.import_ipc2581\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">import_ipc2581</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ipc_filename</span><span class=\"p\">,</span> <span class=\"n\">edb_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">edb_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Import an IPC file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        ipc_filename : str</span>\n<span class=\"sd\">            Full path and name of the IPC file.</span>\n<span class=\"sd\">        edb_path : str, optional</span>\n<span class=\"sd\">            Path where the EDB is to be created. The default is ``None``, in which</span>\n<span class=\"sd\">            case the project directory is used.</span>\n<span class=\"sd\">        edb_name : str, optional</span>\n<span class=\"sd\">            Name of the EDB. The default is ``None``, in which</span>\n<span class=\"sd\">            case the board name is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oImportExport.ImportIPC</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edb_path</span><span class=\"p\">:</span>\n            <span class=\"n\">edb_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">projdir</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">edb_name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">ipc_filename</span><span class=\"p\">)</span>\n            <span class=\"n\">edb_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oimportexport</span><span class=\"o\">.</span><span class=\"n\">ImportIPC</span><span class=\"p\">(</span>\n            <span class=\"n\">ipc_filename</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">edb_path</span><span class=\"p\">,</span> <span class=\"n\">edb_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.aedb&quot;</span><span class=\"p\">),</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">edb_path</span><span class=\"p\">,</span> <span class=\"n\">edb_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.xml&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_desktop</span><span class=\"o\">.</span><span class=\"n\">GetActiveProject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.subtract\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.subtract/#pyaedt.modeler.modelerpcb.Modeler3DLayout.subtract\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">subtract</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"p\">,</span> <span class=\"n\">tool</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Subtract objects from one or more names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        blank : str</span>\n<span class=\"sd\">            Name of the geometry to subtract from.</span>\n<span class=\"sd\">        tool : str or list</span>\n<span class=\"sd\">            One or more names of the geometries to subtract.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Subtract</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">blank</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"p\">)</span>\n        <span class=\"n\">tool</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:primitives&quot;</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">tool</span><span class=\"p\">:</span>\n            <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Subtract</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.convert_to_selections\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.convert_to_selections/#pyaedt.modeler.modelerpcb.Modeler3DLayout.convert_to_selections\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_to_selections</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects_to_split</span><span class=\"p\">,</span> <span class=\"n\">return_list</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert one or more object to selections.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects_to_split : str, int, list</span>\n<span class=\"sd\">            One or more objects to convert to selections. A list can contain</span>\n<span class=\"sd\">            both strings (object names) and integers (object IDs).</span>\n<span class=\"sd\">        return_list : bool, option</span>\n<span class=\"sd\">            Whether to return a list of the selections. The default is</span>\n<span class=\"sd\">            ``False``, in which case a string of the selections is returned.</span>\n<span class=\"sd\">            If ``True``, a list of the selections is returned.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str or list</span>\n<span class=\"sd\">           String or list of the selections.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">objects_to_split</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">objects_to_split</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">objects_to_split</span><span class=\"p\">]</span>\n        <span class=\"n\">objnames</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">objects_to_split</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">):</span>\n                <span class=\"n\">objnames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">if</span> <span class=\"n\">return_list</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">objnames</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">objnames</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.unite\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.unite/#pyaedt.modeler.modelerpcb.Modeler3DLayout.unite\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objectlists</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Unite objects from names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objectlists : list</span>\n<span class=\"sd\">            List of objects to unite.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Unite</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:primitives&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">objectlists</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">objectlists</span><span class=\"p\">:</span>\n                <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Unite</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Input list must contain at least two elements.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.intersect\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.intersect/#pyaedt.modeler.modelerpcb.Modeler3DLayout.intersect\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">intersect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objectlists</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Intersect objects from names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objectlists : list</span>\n<span class=\"sd\">            List of objects to intersect.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Intersect</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:primitives&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">objectlists</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">objectlists</span><span class=\"p\">:</span>\n                <span class=\"n\">vArg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Intersect</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Input list must contain at least two elements.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.duplicate\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.duplicate/#pyaedt.modeler.modelerpcb.Modeler3DLayout.duplicate\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objectlists</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">direction_vector</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate one or more elements along a vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objectlists : list</span>\n<span class=\"sd\">            List of elements to duplicate.</span>\n<span class=\"sd\">        count : int</span>\n\n<span class=\"sd\">        direction_vector : list</span>\n<span class=\"sd\">            List of ``[x,y]`` coordinates for the direction vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Duplicate</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objectlists</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">objectlists</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">objectlists</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Duplicate</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:options&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;count:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:elements&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">objectlists</span><span class=\"p\">)],</span> <span class=\"n\">direction_vector</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.duplicate_across_layers\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.duplicate_across_layers/#pyaedt.modeler.modelerpcb.Modeler3DLayout.duplicate_across_layers\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">duplicate_across_layers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Duplicate one or more elements along a vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list</span>\n<span class=\"sd\">            List of elements to duplicate.</span>\n<span class=\"sd\">        layers : str, list</span>\n<span class=\"sd\">            Layer name on which duplicate object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DuplicateAcrossLyrs</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">layers</span><span class=\"p\">]</span>\n        <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:elements&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">objects</span>\n        <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:layers&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">layers</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DuplicateAcrossLyrs</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">,</span> <span class=\"n\">varg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleanup_objects</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.set_temperature_dependence\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.set_temperature_dependence/#pyaedt.modeler.modelerpcb.Modeler3DLayout.set_temperature_dependence\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_temperature_dependence</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">include_temperature_dependence</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">enable_feedback</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">ambient_temp</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span>\n        <span class=\"n\">create_project_var</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the temperature dependence for the design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        include_temperature_dependence : bool, optional</span>\n<span class=\"sd\">            Whether to include the temperature setting for the design. The default is ``True``.</span>\n<span class=\"sd\">        enable_feedback : bool, optional</span>\n<span class=\"sd\">            Whether to enable feedback. The default is ``True``.</span>\n<span class=\"sd\">        ambient_temp : float, optional</span>\n<span class=\"sd\">            Ambient temperature. The default is ``22``.</span>\n<span class=\"sd\">        create_project_var : bool, optional</span>\n<span class=\"sd\">            Whether to create a project variable for the ambient temperature.</span>\n<span class=\"sd\">            The default is ``False``. If ``True,`` ``$AmbientTemp`` is created.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.SetTemperatureSettings</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Set the temperature dependence for the design.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">create_project_var</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;$AmbientTemp&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ambient_temp</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;cel&quot;</span>\n            <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;$AmbientTemp&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ambient_temp</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;cel&quot;</span>\n        <span class=\"n\">vargs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:TemperatureSettings&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;IncludeTempDependence:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">include_temperature_dependence</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;EnableFeedback:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">enable_feedback</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Temperature:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">var</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">SetTemperatureSettings</span><span class=\"p\">(</span><span class=\"n\">vargs1</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to enable the temperature dependence.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Assigned Objects Temperature&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.set_spice_model\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.set_spice_model/#pyaedt.modeler.modelerpcb.Modeler3DLayout.set_spice_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_spice_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"p\">,</span> <span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">subcircuit_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pin_map</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign a Spice model to a component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        component_name : str</span>\n<span class=\"sd\">            Name of the component.</span>\n<span class=\"sd\">        model_path : str, optional</span>\n<span class=\"sd\">            Full path to the model file. The default is ``None``.</span>\n<span class=\"sd\">        model_name : str, optional</span>\n<span class=\"sd\">            Name of the model. The default is ``None``, in which case the model name is the file name without an</span>\n<span class=\"sd\">            extension.</span>\n<span class=\"sd\">        subcircuit_name : str, optional</span>\n<span class=\"sd\">            Name of the subcircuit. The default is ``None``, in which case the subcircuit name is the model name.</span>\n<span class=\"sd\">        pin_map : list, optional</span>\n<span class=\"sd\">            List of ``[spice_pin_name, aedt_pin_name]`` to customize the pin mapping between Spice pins and</span>\n<span class=\"sd\">            AEDT pins.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Hfss3dLayout</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d = Hfss3dLayout(&quot;myproject&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; h3d.modeler.set_spice_model(component_name=&quot;A1&quot;,</span>\n<span class=\"sd\">        ...                             modelpath=&quot;pathtospfile&quot;,</span>\n<span class=\"sd\">        ...                             modelname=&quot;spicemodelname&quot;,</span>\n<span class=\"sd\">        ...                             subcircuit_name=&quot;SUBCK1&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">model_name</span><span class=\"p\">:</span>\n            <span class=\"n\">model_name</span> <span class=\"o\">=</span> <span class=\"n\">get_filename_without_extension</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">model_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">o_model_manager</span><span class=\"o\">.</span><span class=\"n\">GetNames</span><span class=\"p\">()):</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">model_name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Name:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">model_name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ModTime:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">1643711258</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Library:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;LibLocation:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ModelType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dcirspice&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Description:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ImageFile:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SymbolPinConfiguration:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PortInfoBlk&quot;</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PortOrderBlk&quot;</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;filename:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">model_path</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;modelname:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">model_name</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">o_model_manager</span><span class=\"o\">.</span><span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">subcircuit_name</span><span class=\"p\">:</span>\n            <span class=\"n\">subcircuit_name</span> <span class=\"o\">=</span> <span class=\"n\">model_name</span>\n        <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">model_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;subckt&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n                    <span class=\"n\">pinNames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; |</span><span class=\"se\">\\t</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">pinNames</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pinNames</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"n\">pinNames</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pinNames</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"k\">break</span>\n        <span class=\"n\">componentPins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"p\">[</span><span class=\"n\">component_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pins</span>\n        <span class=\"n\">componentPins</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pin_map</span><span class=\"p\">:</span>\n            <span class=\"n\">pin_map</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">componentPins</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pinNames</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">pn</span> <span class=\"ow\">in</span> <span class=\"n\">pinNames</span><span class=\"p\">:</span>\n                    <span class=\"n\">pin_map</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pn</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">pin_map</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">componentPins</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">args2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;CompPropEnabled:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Pid:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Pmo:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;CompPropType:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;PinPairRLC:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;RLCModelType:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"mi\">4</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SPICE_file_path:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">model_path</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SPICE_model_name:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">model_name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;SPICE_subckt:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">subcircuit_name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;terminal_pin_map:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">pin_map</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ModelChanges&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:UpdateModel0&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ComponentNames&quot;</span><span class=\"p\">,</span> <span class=\"n\">component_name</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Prop:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">args2</span><span class=\"p\">]]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">UpdateModels</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Spice Model Correctly assigned to </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">component_name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Modeler3DLayout.clip_plane\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.modelerpcb.Modeler3DLayout.clip_plane/#pyaedt.modeler.modelerpcb.Modeler3DLayout.clip_plane\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clip_plane</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a clip plane in Layout.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            It works only in AEDT from 2022R2.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the clip plane.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;CS&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ClipPlane</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/modelerpcb", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}