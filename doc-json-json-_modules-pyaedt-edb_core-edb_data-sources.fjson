{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "pyaedt.edb_core.edb_data.sources", "body": "<h1>Source code for pyaedt.edb_core.edb_data.sources</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.nets_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBNetsData</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.padstacks_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBPadstackInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.primitives_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBPrimitives</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">NodeType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SourceType</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides for handling nodes for Siwave sources.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_component</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_net</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_node_type</span> <span class=\"o\">=</span> <span class=\"n\">NodeType</span><span class=\"o\">.</span><span class=\"n\">Positive</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component name containing the node.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_component</span>\n\n    <span class=\"nd\">@component</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_component</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Net of the node.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_net</span>\n\n    <span class=\"nd\">@net</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_net</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">node_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Type of the node.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_node_type</span>\n\n    <span class=\"nd\">@node_type</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">node_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_node_type</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Name of the node.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_json_format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"n\">dict_out</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">return</span> <span class=\"n\">dict_out</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node_dict</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">node_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Source</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides for handling Siwave sources.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Vsource</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positive_node</span> <span class=\"o\">=</span> <span class=\"n\">PinGroup</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_negative_node</span> <span class=\"o\">=</span> <span class=\"n\">PinGroup</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_amplitude</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_r</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_l</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_c</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_physical_resistor</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positive_node</span><span class=\"o\">.</span><span class=\"n\">node_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">NodeType</span><span class=\"o\">.</span><span class=\"n\">Positive</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positive_node</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pos_term&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_negative_node</span><span class=\"o\">.</span><span class=\"n\">node_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">NodeType</span><span class=\"o\">.</span><span class=\"n\">Negative</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_negative_node</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;neg_term&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Source name.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Source type.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span>\n\n    <span class=\"nd\">@source_type</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"mf\">1e-6</span>\n            <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"mf\">5e7</span>\n            <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_r</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_l</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_c</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">positive_node</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Positive node of the source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positive_node</span>\n\n    <span class=\"nd\">@positive_node</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">positive_node</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"n\">PinGroup</span><span class=\"p\">)):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positive_node</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">negative_node</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Negative node of the source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_negative_node</span>\n\n    <span class=\"nd\">@negative_node</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">negative_node</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">,</span> <span class=\"n\">PinGroup</span><span class=\"p\">)):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_negative_node</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"c1\">#</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">amplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Amplitude value of the source. Either amperes for current source or volts for</span>\n<span class=\"sd\">        voltage source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_amplitude</span>\n\n    <span class=\"nd\">@amplitude</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">amplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_amplitude</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Phase of the source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span>\n\n    <span class=\"nd\">@phase</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Impedance values of the source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span>\n\n    <span class=\"nd\">@impedance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">r_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_r</span>\n\n    <span class=\"nd\">@r_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">r_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_r</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">l_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_l</span>\n\n    <span class=\"nd\">@l_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">l_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_l</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">c_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_c</span>\n\n    <span class=\"nd\">@c_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">c_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_c</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_physical_resistor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_physical_resistor</span>\n\n    <span class=\"nd\">@create_physical_resistor</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_physical_resistor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_physical_resistor</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_json_format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"n\">dict_out</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;_positive_node&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;_negative_node&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">_json_format</span><span class=\"p\">()</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]]</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">dict_out</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">return</span> <span class=\"n\">dict_out</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source_dict</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">source_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;positive_node&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">positive_node</span><span class=\"o\">.</span><span class=\"n\">_read_json</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;negative_node&quot;</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">negative_node</span><span class=\"o\">.</span><span class=\"n\">_read_json</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PinGroup</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages pin groups.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">edb_pin_group</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">pedb</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_group</span> <span class=\"o\">=</span> <span class=\"n\">edb_pin_group</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_component</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_node_pins</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_net</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_active_layout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Name.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_component</span>\n\n    <span class=\"nd\">@component</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">component</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_component</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">node_pins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Node pins.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_node_pins</span>\n\n    <span class=\"nd\">@node_pins</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">node_pins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_node_pins</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Net.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_net</span>\n\n    <span class=\"nd\">@net</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_net</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_terminal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">is_reference</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">pg_term</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_group</span><span class=\"o\">.</span><span class=\"n\">GetPinGroupTerminal</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">pg_term</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">PinGroupTerminal</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_active_layout</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_group</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">(),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_group</span><span class=\"p\">,</span>\n                <span class=\"n\">is_reference</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pg_term</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_current_source_terminal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">magnitude</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"n\">terminal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_terminal</span><span class=\"p\">()</span>\n        <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kCurrentSource</span><span class=\"p\">)</span>\n        <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb_value</span><span class=\"p\">(</span><span class=\"n\">magnitude</span><span class=\"p\">))</span>\n        <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourcePhase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">terminal</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_voltage_source_terminal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">magnitude</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"n\">terminal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_terminal</span><span class=\"p\">()</span>\n        <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">SetBoundaryType</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">BoundaryType</span><span class=\"o\">.</span><span class=\"n\">kVoltageSource</span><span class=\"p\">)</span>\n        <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourceAmplitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb_value</span><span class=\"p\">(</span><span class=\"n\">magnitude</span><span class=\"p\">))</span>\n        <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">SetSourcePhase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">terminal</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CircuitPort</span><span class=\"p\">(</span><span class=\"n\">Source</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages a circuit port.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">impedance</span><span class=\"o\">=</span><span class=\"s2\">&quot;50&quot;</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"n\">impedance</span>\n        <span class=\"n\">Source</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">CircPort</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Impedance.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span>\n\n    <span class=\"nd\">@impedance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get type.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VoltageSource</span><span class=\"p\">(</span><span class=\"n\">Source</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages a voltage source.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">VoltageSource</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnitude</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1V&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0Deg&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.05&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Vsource</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Magnitude.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnitude</span>\n\n    <span class=\"nd\">@magnitude</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnitude</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Phase.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span>\n\n    <span class=\"nd\">@phase</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Impedance.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span>\n\n    <span class=\"nd\">@impedance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Source type.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CurrentSource</span><span class=\"p\">(</span><span class=\"n\">Source</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages a current source.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CurrentSource</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnitude</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.1A&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0Deg&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1e7&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Isource</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Magnitude.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnitude</span>\n\n    <span class=\"nd\">@magnitude</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_magnitude</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Phase.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span>\n\n    <span class=\"nd\">@phase</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_phase</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Impedance.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span>\n\n    <span class=\"nd\">@impedance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_impedance</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Source type.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DCTerminal</span><span class=\"p\">(</span><span class=\"n\">Source</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages a dc terminal source.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">DCTerminal</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">DcTerminal</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Source type.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ResistorSource</span><span class=\"p\">(</span><span class=\"n\">Source</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages a resistor source.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ResistorSource</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rvalue</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;50&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span> <span class=\"o\">=</span> <span class=\"n\">SourceType</span><span class=\"o\">.</span><span class=\"n\">Rlc</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rvalue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Resistance value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rvalue</span>\n\n    <span class=\"nd\">@rvalue</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rvalue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rvalue</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">source_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Source type.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_source_type</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommonExcitation</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">pedb</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span> <span class=\"o\">=</span> <span class=\"n\">edb_terminal</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Port Name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Net Name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Net Object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.nets_data.EDBNetsData`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">EDBNetsData</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Terminal Type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetTerminalType</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">boundary_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Boundary Type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetBoundaryType</span><span class=\"p\">()</span>\n\n\n<div class=\"viewcode-block\" id=\"ExcitationPorts\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationPorts/#pyaedt.edb_core.edb_data.sources.ExcitationPorts\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ExcitationPorts</span><span class=\"p\">(</span><span class=\"n\">CommonExcitation</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages excitation properties.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    pedb : pyaedt.edb.Edb</span>\n<span class=\"sd\">        Edb object from Edblib.</span>\n<span class=\"sd\">    edb_terminal : Ansys.Ansoft.Edb.Cell.Terminal.EdgeTerminal</span>\n<span class=\"sd\">        Edge terminal instance from edblib.</span>\n\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    This example shows how to access this class.</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb = Edb(&quot;myaedb.aedb&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; exc = edb.excitations</span>\n<span class=\"sd\">    &gt;&gt;&gt; print(exc[&quot;Port1&quot;].name)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">):</span>\n        <span class=\"n\">CommonExcitation</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_properties</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetProductSolverOption</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">ProductId</span><span class=\"o\">.</span><span class=\"n\">Designer</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HFSS&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">p</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hfss_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get hfss port type.&quot;&quot;&quot;</span>\n        <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&#39;HFSS Type&#39;=&#39;.*?&#39;&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_properties</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">txt</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">horizontal_extent_factor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get horizontal extent factor.&quot;&quot;&quot;</span>\n        <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&#39;Horizontal Extent Factor&#39;=&#39;.*?&#39;&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_properties</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">vertical_extent_factor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get vertical extent factor.&quot;&quot;&quot;</span>\n        <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&#39;Vertical Extent Factor&#39;=&#39;.*?&#39;&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_properties</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">radial_extent_factor</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get radial extent factor.&quot;&quot;&quot;</span>\n        <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&#39;Radial Extent Factor&#39;=&#39;.*?&#39;&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_properties</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pec_launch_width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get pec launch width.&quot;&quot;&quot;</span>\n        <span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&#39;PEC Launch Width&#39;=&#39;.*?&#39;&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_properties</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">txt</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">impedance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Impedance of the port.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetImpedance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_circuit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return ``True`` if is a circuit port.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetIsCircuitPort</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Magnitude.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetSourceAmplitude</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Phase.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetSourcePhase</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">renormalize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Either if renormalize is active or not.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPortPostProcessingProp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">DoRenormalize</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">deembed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Either if deembed is active or not.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPortPostProcessingProp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">DoDeembed</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">deembed_gapport_inductance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Deembed Gap Port Inductance value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPortPostProcessingProp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">DoDeembedGapL</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">deembed_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Deembed Length.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPortPostProcessingProp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">DeembedLength</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">renormalize_z0</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Renormalize Z0 value (real, imag).&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPortPostProcessingProp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">RenormalizionZ0</span><span class=\"o\">.</span><span class=\"n\">ToComplex</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Item1</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPortPostProcessingProp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">RenormalizionZ0</span><span class=\"o\">.</span><span class=\"n\">ToComplex</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Item2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reference_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;This returns the object assigned as reference. It can be a primitive or a padstack instance.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.padstacks_data.EDBPadstackInstance` or</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span><span class=\"p\">:</span>\n            <span class=\"n\">term</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">terminal_type</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">EdgeTerminal</span><span class=\"p\">:</span>\n                <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetEdges</span><span class=\"p\">()</span>\n                <span class=\"n\">edgeType</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">GetEdgeType</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">edgeType</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">EdgeType</span><span class=\"o\">.</span><span class=\"n\">PadEdge</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_pad_edge_terminal_reference_pin</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_edge_terminal_reference_primitive</span><span class=\"p\">()</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">terminal_type</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">PinGroupTerminal</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_pin_group_terminal_reference_pin</span><span class=\"p\">()</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">terminal_type</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">PointTerminal</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_point_terminal_reference_primitive</span><span class=\"p\">()</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">terminal_type</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">PadstackInstanceTerminal</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_padstack_terminal_reference_pin</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid Terminal Type=</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"o\">.</span><span class=\"n\">GetTerminalType</span><span class=\"p\">()))</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reference_net_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Net name to which reference_object belongs.&quot;&quot;&quot;</span>\n        <span class=\"n\">ref_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reference_object</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reference_object</span>\n        <span class=\"k\">if</span> <span class=\"n\">ref_obj</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">ref_obj</span><span class=\"o\">.</span><span class=\"n\">net_name</span>\n        <span class=\"k\">return</span>  <span class=\"c1\"># pragma: no cover</span>\n\n<div class=\"viewcode-block\" id=\"ExcitationPorts.get_padstack_terminal_reference_pin\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_padstack_terminal_reference_pin/#pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_padstack_terminal_reference_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_padstack_terminal_reference_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get a list of pad stacks instances and serves Coax wave ports,</span>\n<span class=\"sd\">        pingroup terminals, PadEdge terminals.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        gnd_net_name_preference : str, optional</span>\n<span class=\"sd\">            Preferred reference net name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.padstack_data.EDBPadstackInstance`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetIsCircuitPort</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_pin_group_terminal_reference_pin</span><span class=\"p\">()</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">padStackInstance</span><span class=\"p\">,</span> <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Get the pastack instance of the terminal</span>\n        <span class=\"n\">compInst</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">compInst</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_closest_pin</span><span class=\"p\">(</span><span class=\"n\">padStackInstance</span><span class=\"p\">,</span> <span class=\"n\">pins</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"ExcitationPorts.get_pin_group_terminal_reference_pin\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_pin_group_terminal_reference_pin/#pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_pin_group_terminal_reference_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_pin_group_terminal_reference_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a list of pins and serves terminals connected to pingroups.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        gnd_net_name_preference : str, optional</span>\n<span class=\"sd\">            Preferred reference net name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.padstack_data.EDBPadstackInstance`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">refTerm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetReferenceTerminal</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetTerminalType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">PinGroupTerminal</span><span class=\"p\">:</span>\n            <span class=\"n\">padStackInstance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetPinGroup</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetPins</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">pingroup</span> <span class=\"o\">=</span> <span class=\"n\">refTerm</span><span class=\"o\">.</span><span class=\"n\">GetPinGroup</span><span class=\"p\">()</span>\n            <span class=\"n\">refPinList</span> <span class=\"o\">=</span> <span class=\"n\">pingroup</span><span class=\"o\">.</span><span class=\"n\">GetPins</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_closest_pin</span><span class=\"p\">(</span><span class=\"n\">padStackInstance</span><span class=\"p\">,</span> <span class=\"n\">refPinList</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetTerminalType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">PadstackInstanceTerminal</span><span class=\"p\">:</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">padStackInstance</span><span class=\"p\">,</span> <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">refTerm</span><span class=\"o\">.</span><span class=\"n\">GetTerminalType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Terminal</span><span class=\"o\">.</span><span class=\"n\">TerminalType</span><span class=\"o\">.</span><span class=\"n\">PinGroupTerminal</span><span class=\"p\">:</span>\n                <span class=\"n\">pingroup</span> <span class=\"o\">=</span> <span class=\"n\">refTerm</span><span class=\"o\">.</span><span class=\"n\">GetPinGroup</span><span class=\"p\">()</span>\n                <span class=\"n\">refPinList</span> <span class=\"o\">=</span> <span class=\"n\">pingroup</span><span class=\"o\">.</span><span class=\"n\">GetPins</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_closest_pin</span><span class=\"p\">(</span><span class=\"n\">padStackInstance</span><span class=\"p\">,</span> <span class=\"n\">refPinList</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">returnOK</span><span class=\"p\">,</span> <span class=\"n\">refTermPSI</span><span class=\"p\">,</span> <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">refTerm</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n                    <span class=\"k\">return</span> <span class=\"n\">EDBPadstackInstance</span><span class=\"p\">(</span><span class=\"n\">refTermPSI</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># pragma: no cover</span></div>\n\n<div class=\"viewcode-block\" id=\"ExcitationPorts.get_edge_terminal_reference_primitive\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_edge_terminal_reference_primitive/#pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_edge_terminal_reference_primitive\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_edge_terminal_reference_primitive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check and  return a primitive instance that serves Edge ports,</span>\n<span class=\"sd\">        wave ports and coupled edge ports that are directly connedted to primitives.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">ref_layer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetReferenceLayer</span><span class=\"p\">()</span>\n        <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetEdges</span><span class=\"p\">()</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">prim_value</span><span class=\"p\">,</span> <span class=\"n\">point_data</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">point_data</span><span class=\"o\">.</span><span class=\"n\">X</span>\n        <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">point_data</span><span class=\"o\">.</span><span class=\"n\">Y</span>\n        <span class=\"n\">shape_pd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">PointData</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span>\n        <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">ref_layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">primitive</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span><span class=\"o\">.</span><span class=\"n\">Primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">layer_name</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">layer_name</span><span class=\"p\">:</span>\n                <span class=\"n\">prim_shape_data</span> <span class=\"o\">=</span> <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">prim_shape_data</span><span class=\"o\">.</span><span class=\"n\">PointInPolygon</span><span class=\"p\">(</span><span class=\"n\">shape_pd</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># pragma: no cover</span></div>\n\n<div class=\"viewcode-block\" id=\"ExcitationPorts.get_point_terminal_reference_primitive\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_point_terminal_reference_primitive/#pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_point_terminal_reference_primitive\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_point_terminal_reference_primitive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Find and return the primitive reference for the point terminal or the padstack instance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.padstacks_data.EDBPadstackInstance` or</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.primitives_data.EDBPrimitives`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">ref_term</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetReferenceTerminal</span><span class=\"p\">()</span>  <span class=\"c1\"># return value is type terminal</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">point_data</span><span class=\"p\">,</span> <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">ref_term</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n        <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">point_data</span><span class=\"o\">.</span><span class=\"n\">X</span>\n        <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">point_data</span><span class=\"o\">.</span><span class=\"n\">Y</span>\n        <span class=\"n\">shape_pd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">PointData</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span>\n        <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">primitive</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span><span class=\"o\">.</span><span class=\"n\">Primitives</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">layer_name</span><span class=\"p\">:</span>\n                <span class=\"n\">prim_shape_data</span> <span class=\"o\">=</span> <span class=\"n\">primitive</span><span class=\"o\">.</span><span class=\"n\">GetPolygonData</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">prim_shape_data</span><span class=\"o\">.</span><span class=\"n\">PointInPolygon</span><span class=\"p\">(</span><span class=\"n\">shape_pd</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">EDBPrimitives</span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">vias</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_padstack</span><span class=\"o\">.</span><span class=\"n\">padstack_instances</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">layer_name</span> <span class=\"ow\">in</span> <span class=\"n\">vias</span><span class=\"o\">.</span><span class=\"n\">layer_range_names</span><span class=\"p\">:</span>\n                <span class=\"n\">plane</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">Shape</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;rectangle&quot;</span><span class=\"p\">,</span> <span class=\"n\">pointA</span><span class=\"o\">=</span><span class=\"n\">vias</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">pointB</span><span class=\"o\">=</span><span class=\"n\">vias</span><span class=\"o\">.</span><span class=\"n\">padstack_definition</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">rectangle_data</span> <span class=\"o\">=</span> <span class=\"n\">vias</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_primitives</span><span class=\"o\">.</span><span class=\"n\">shape_to_polygon_data</span><span class=\"p\">(</span><span class=\"n\">plane</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">rectangle_data</span><span class=\"o\">.</span><span class=\"n\">PointInPolygon</span><span class=\"p\">(</span><span class=\"n\">shape_pd</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">vias</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"ExcitationPorts.get_pad_edge_terminal_reference_pin\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_pad_edge_terminal_reference_pin/#pyaedt.edb_core.edb_data.sources.ExcitationPorts.get_pad_edge_terminal_reference_pin\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_pad_edge_terminal_reference_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the closest pin padstack instances and serves any edge terminal connected to a pad.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        gnd_net_name_preference : str, optional</span>\n<span class=\"sd\">            Preferred reference net name. Optianal, default is `None` which will auto compute the gnd name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.edb_core.edb_data.padstacks_data.EDBPadstackInstance`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">comp_inst</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span>\n        <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_components</span><span class=\"o\">.</span><span class=\"n\">get_pin_from_component</span><span class=\"p\">(</span><span class=\"n\">comp_inst</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetEdges</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">pad_edge_pstack_inst</span><span class=\"p\">,</span> <span class=\"n\">pad_edge_layer</span><span class=\"p\">,</span> <span class=\"n\">pad_edge_polygon_data</span> <span class=\"o\">=</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_closest_pin</span><span class=\"p\">(</span><span class=\"n\">pad_edge_pstack_inst</span><span class=\"p\">,</span> <span class=\"n\">pins</span><span class=\"p\">,</span> <span class=\"n\">gnd_net_name_preference</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_closest_pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ref_pin</span><span class=\"p\">,</span> <span class=\"n\">pin_list</span><span class=\"p\">,</span> <span class=\"n\">gnd_net</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">pad_stack_inst_point</span><span class=\"p\">,</span> <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"n\">ref_pin</span><span class=\"o\">.</span><span class=\"n\">GetPositionAndRotation</span><span class=\"p\">()</span>  <span class=\"c1\"># get the xy of the padstack</span>\n        <span class=\"k\">if</span> <span class=\"n\">gnd_net</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">power_ground_net_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gnd_net</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">power_ground_net_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">net</span> <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">core_nets</span><span class=\"o\">.</span><span class=\"n\">power_nets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()]</span>\n        <span class=\"n\">comp_ref_pins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pin_list</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">power_ground_net_names</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">comp_ref_pins</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Terminal with PadStack Instance Name </span><span class=\"si\">{}</span><span class=\"s2\"> component has no reference pins.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ref_pin</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n            <span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"n\">closest_pin_distance</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">pin_obj</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">pin</span> <span class=\"ow\">in</span> <span class=\"n\">comp_ref_pins</span><span class=\"p\">:</span>  <span class=\"c1\"># find the distance to all the pins to the terminal pin</span>\n            <span class=\"k\">if</span> <span class=\"n\">pin</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">ref_pin</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">():</span>  <span class=\"c1\"># skip the reference psi</span>\n                <span class=\"k\">continue</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">pin_point</span><span class=\"p\">,</span> <span class=\"n\">rotation</span> <span class=\"o\">=</span> <span class=\"n\">pin</span><span class=\"o\">.</span><span class=\"n\">GetPositionAndRotation</span><span class=\"p\">()</span>\n            <span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">pad_stack_inst_point</span><span class=\"o\">.</span><span class=\"n\">Distance</span><span class=\"p\">(</span><span class=\"n\">pin_point</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">closest_pin_distance</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">closest_pin_distance</span> <span class=\"o\">=</span> <span class=\"n\">distance</span>\n                <span class=\"n\">pin_obj</span> <span class=\"o\">=</span> <span class=\"n\">pin</span>\n            <span class=\"k\">elif</span> <span class=\"n\">closest_pin_distance</span> <span class=\"o\">&lt;</span> <span class=\"n\">distance</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">closest_pin_distance</span> <span class=\"o\">=</span> <span class=\"n\">distance</span>\n                <span class=\"n\">pin_obj</span> <span class=\"o\">=</span> <span class=\"n\">pin</span>\n        <span class=\"k\">if</span> <span class=\"n\">pin_obj</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EDBPadstackInstance</span><span class=\"p\">(</span><span class=\"n\">pin_obj</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ExcitationSources\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationSources/#pyaedt.edb_core.edb_data.sources.ExcitationSources\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ExcitationSources</span><span class=\"p\">(</span><span class=\"n\">CommonExcitation</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manage sources properties.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    pedb : pyaedt.edb.Edb</span>\n<span class=\"sd\">        Edb object from Edblib.</span>\n<span class=\"sd\">    edb_terminal : Ansys.Ansoft.Edb.Cell.Terminal.EdgeTerminal</span>\n<span class=\"sd\">        Edge terminal instance from edblib.</span>\n\n\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    This example shows how to access this class.</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb = Edb(&quot;myaedb.aedb&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; all_sources = edb.sources</span>\n<span class=\"sd\">    &gt;&gt;&gt; print(all_sources[&quot;VSource1&quot;].name)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">):</span>\n        <span class=\"n\">CommonExcitation</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">magnitude</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the magnitude of the source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetSourceAmplitude</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">phase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the phase of the source.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_terminal</span><span class=\"o\">.</span><span class=\"n\">GetSourcePhase</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ExcitationProbes\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationProbes/#pyaedt.edb_core.edb_data.sources.ExcitationProbes\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ExcitationProbes</span><span class=\"p\">(</span><span class=\"n\">CommonExcitation</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manage probes properties.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    pedb : pyaedt.edb.Edb</span>\n<span class=\"sd\">        Edb object from Edblib.</span>\n<span class=\"sd\">    edb_terminal : Ansys.Ansoft.Edb.Cell.Terminal.EdgeTerminal</span>\n<span class=\"sd\">        Edge terminal instance from edblib.</span>\n\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    This example shows how to access this class.</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Edb</span>\n<span class=\"sd\">    &gt;&gt;&gt; edb = Edb(&quot;myaedb.aedb&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; probes = edb.probes</span>\n<span class=\"sd\">    &gt;&gt;&gt; print(probes[&quot;Probe1&quot;].name)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">):</span>\n        <span class=\"n\">CommonExcitation</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_terminal</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ExcitationDifferential\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.edb_core.edb_data.sources.ExcitationDifferential/#pyaedt.edb_core.edb_data.sources.ExcitationDifferential\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ExcitationDifferential</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manage differential excitation properties.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pedb</span><span class=\"p\">,</span> <span class=\"n\">edb_boundle_terminal</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span> <span class=\"o\">=</span> <span class=\"n\">pedb</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_boundle_terminal</span> <span class=\"o\">=</span> <span class=\"n\">edb_boundle_terminal</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Port Name.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_boundle_terminal</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get edb.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">terminals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get terminals belonging to this excitation.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">():</span> <span class=\"n\">ExcitationPorts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edb_boundle_terminal</span><span class=\"o\">.</span><span class=\"n\">GetTerminals</span><span class=\"p\">())}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reference_net_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Reference Name. Not applicable to Differential pairs.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/edb_data/sources", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}