{"parents": [{"link": "../../", "title": "Module code"}], "title": "pyaedt.q3d", "body": "<h1>Source code for pyaedt.q3d</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;This module contains these classes: ``Q2d``, ``Q3d``, and ``QExtractor`.&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.Analysis3D</span> <span class=\"kn\">import</span> <span class=\"n\">FieldAnalysis3D</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.application.Variables</span> <span class=\"kn\">import</span> <span class=\"n\">decompose_variable_value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">MATRIXOPERATIONSQ2D</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">MATRIXOPERATIONSQ3D</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">generate_unique_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.geometry_operators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span> <span class=\"k\">as</span> <span class=\"n\">go</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">BoundaryObject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modules.Boundary</span> <span class=\"kn\">import</span> <span class=\"n\">Matrix</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QExtractor</span><span class=\"p\">(</span><span class=\"n\">FieldAnalysis3D</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Extracts a 2D or 3D field analysis.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    FieldAnalysis3D :</span>\n\n<span class=\"sd\">    FieldAnalysis2D :</span>\n\n<span class=\"sd\">    object :</span>\n\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">design_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Design file.&quot;&quot;&quot;</span>\n        <span class=\"n\">design_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;design_data.json&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">design_file</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">Q3DType</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">FieldAnalysis3D</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">Q3DType</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">omatrix</span><span class=\"o\">.</span><span class=\"n\">ListReduceMatrixes</span><span class=\"p\">()):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">excitations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all excitation names.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of excitation names. Excitations with multiple modes will return one</span>\n<span class=\"sd\">            excitation for each mode.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">insert_reduced_matrix</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">operation_name</span><span class=\"p\">,</span>\n        <span class=\"n\">source_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rm_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">new_net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">new_source_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">new_sink_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Insert a new reduced matrix.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        operation_name : str</span>\n<span class=\"sd\">            Name of the operation to create.</span>\n<span class=\"sd\">        source_names : list, str, optional</span>\n<span class=\"sd\">            List of sources or nets or arguments needed for the operation. The default</span>\n<span class=\"sd\">            is ``None``.</span>\n<span class=\"sd\">        rm_name : str, optional</span>\n<span class=\"sd\">            Name of the reduced matrix. The default is ``None``.</span>\n<span class=\"sd\">        new_net_name : str, optional</span>\n<span class=\"sd\">            Name of the new net. The default is ``None``.</span>\n<span class=\"sd\">        new_source_name : str, optional</span>\n<span class=\"sd\">            Name of the new source. The default is ``None``.</span>\n<span class=\"sd\">        new_sink_name : str, optional</span>\n<span class=\"sd\">            Name of the new sink. The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.Matrix`</span>\n<span class=\"sd\">            Matrix object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rm_name</span><span class=\"p\">:</span>\n            <span class=\"n\">rm_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">operation_name</span><span class=\"p\">)</span>\n        <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rm_name</span><span class=\"p\">,</span> <span class=\"n\">operation_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">new_net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">new_net_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">new_source_name</span><span class=\"p\">:</span>\n            <span class=\"n\">new_source_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">new_sink_name</span><span class=\"p\">:</span>\n            <span class=\"n\">new_sink_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sink&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">source_names</span><span class=\"p\">,</span> <span class=\"n\">new_net_name</span><span class=\"p\">,</span> <span class=\"n\">new_source_name</span><span class=\"p\">,</span> <span class=\"n\">new_sink_name</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">matrix</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_all_sources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get all setup sources.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list of str</span>\n<span class=\"sd\">            List of all setup sources.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.GetAllSources</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_traces_for_plot</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">get_self_terms</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">get_mutual_terms</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">first_element_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">second_element_filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get a list of traces of specified designs ready to use in plot reports.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        get_self_terms : bool, optional</span>\n<span class=\"sd\">            Whether to get self terms. The default is ``True``.</span>\n<span class=\"sd\">        get_mutual_terms : bool, optional</span>\n<span class=\"sd\">            Whether to get mutual terms. The default is ``True``.</span>\n<span class=\"sd\">        first_element_filter : str, optional</span>\n<span class=\"sd\">            Filter to apply to the first element of the equation.</span>\n<span class=\"sd\">            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.</span>\n<span class=\"sd\">        second_element_filter : str, optional</span>\n<span class=\"sd\">            Filter to apply to the second element of the equation.</span>\n<span class=\"sd\">            This parameter accepts ``*`` and ``?`` as special characters. The default is ``None``.</span>\n<span class=\"sd\">        category : str</span>\n<span class=\"sd\">            Plot category name as in the report, including operator.</span>\n<span class=\"sd\">            The default is ``&quot;C&quot;``, which is the plot category name for capacitance.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            Traces of specified designs ready to use in plot reports.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Q3d</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss = Q3d(project_path)</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.get_traces_for_plot(first_element_filter=&quot;Bo?1&quot;,</span>\n<span class=\"sd\">        ...                           second_element_filter=&quot;GND*&quot;, category=&quot;C&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_sources_for_plot</span><span class=\"p\">(</span>\n            <span class=\"n\">get_self_terms</span><span class=\"o\">=</span><span class=\"n\">get_self_terms</span><span class=\"p\">,</span>\n            <span class=\"n\">get_mutual_terms</span><span class=\"o\">=</span><span class=\"n\">get_mutual_terms</span><span class=\"p\">,</span>\n            <span class=\"n\">first_element_filter</span><span class=\"o\">=</span><span class=\"n\">first_element_filter</span><span class=\"p\">,</span>\n            <span class=\"n\">second_element_filter</span><span class=\"o\">=</span><span class=\"n\">second_element_filter</span><span class=\"p\">,</span>\n            <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">category</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_mesh_stats</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">mesh_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">setup_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;CG&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export mesh statistics to a file.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setup_name : str</span>\n<span class=\"sd\">            Setup name.</span>\n<span class=\"sd\">        variation_string : str, optional</span>\n<span class=\"sd\">            Variation list. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">        mesh_path : str, optional</span>\n<span class=\"sd\">            Full path to the mesh statistics file. The default is ``None``, in which</span>\n<span class=\"sd\">            case the working directory is used.</span>\n<span class=\"sd\">        setup_type : str, optional</span>\n<span class=\"sd\">            Setup type in Q3D. Options are ``&quot;CG&quot;``, ``&quot;AC RL&quot;``, and ``&quot;DC RL&quot;``. The</span>\n<span class=\"sd\">            default is ``&quot;CG&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            File path.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ExportMeshStats</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">mesh_path</span><span class=\"p\">:</span>\n            <span class=\"n\">mesh_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;meshstats.ms&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportMeshStats</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">,</span> <span class=\"n\">variation_string</span><span class=\"p\">,</span> <span class=\"n\">setup_type</span><span class=\"p\">,</span> <span class=\"n\">mesh_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">mesh_path</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">edit_sources</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">cg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">acrl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dcrl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set up the source loaded for Q3D or Q2D in multiple sources simultaneously.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cg : dict, optional</span>\n<span class=\"sd\">            Dictionary of input sources to modify the module and phase of a CG solution.</span>\n<span class=\"sd\">            Dictionary values can be:</span>\n<span class=\"sd\">            - 1 Value to set up ``0deg`` as the default</span>\n<span class=\"sd\">            - 2 Values tuple or list (magnitude and phase)</span>\n<span class=\"sd\">        acrl : dict, optional</span>\n<span class=\"sd\">            Dictionary of input sources to modify the module and phase of an ACRL solution.</span>\n<span class=\"sd\">            Dictionary values can be:</span>\n<span class=\"sd\">            - 1 Value to set up 0deg as the default</span>\n<span class=\"sd\">            - 2 Values tuple or list (magnitude and phase)</span>\n<span class=\"sd\">        dcrl : dict, optional</span>\n<span class=\"sd\">            Dictionary of input sources to modify the module and phase of a DCRL solution, This</span>\n<span class=\"sd\">            parameter is only available for Q3D. Dictionary values can be:</span>\n<span class=\"sd\">            - 1 Value to set up ``0deg`` as the default</span>\n<span class=\"sd\">            - 2 Values tuple or list (magnitude and phase)</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; sources_cg = {&quot;Box1&quot;: (&quot;1V&quot;, &quot;0deg&quot;), &quot;Box1_2&quot;: &quot;1V&quot;}</span>\n<span class=\"sd\">        &gt;&gt;&gt; sources_acrl = {&quot;Box1:Source1&quot;: (&quot;5A&quot;, &quot;0deg&quot;)}</span>\n<span class=\"sd\">        &gt;&gt;&gt; sources_dcrl = {&quot;Box1_1:Source2&quot;: (&quot;5V&quot;, &quot;0deg&quot;)}</span>\n<span class=\"sd\">        &gt;&gt;&gt; hfss.edit_sources(sources_cg, sources_acrl, sources_dcrl)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">setting_AC</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">setting_CG</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">setting_DC</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">cg</span><span class=\"p\">:</span>\n            <span class=\"n\">net_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Names&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">excitation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">excitation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">cg</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">excitation</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Not existing net &quot;</span> <span class=\"o\">+</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">net_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Values&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">phase_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Values&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Magnitude&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">phase_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Phase&quot;</span><span class=\"p\">]</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">cg</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vals</span>\n                    <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0deg&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0deg&quot;</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">value_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">phase_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">setting_CG</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Cap&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value Type:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;N&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_list</span><span class=\"p\">,</span> <span class=\"n\">value_list</span><span class=\"p\">,</span> <span class=\"n\">phase_list</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">setting_CG</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CGSources&quot;</span><span class=\"p\">,</span> <span class=\"n\">net_list</span><span class=\"p\">,</span> <span class=\"n\">value_list</span><span class=\"p\">,</span> <span class=\"n\">phase_list</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">acrl</span><span class=\"p\">:</span>\n            <span class=\"n\">source_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Names&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;V&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">acrl</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">excitation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">excitation</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Not existing excitation &quot;</span> <span class=\"o\">+</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">source_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Values&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">phase_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Values&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Magnitude&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">phase_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Phase&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">acrl</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vals</span>\n                    <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0deg&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0deg&quot;</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">magnitude</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                    <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">magnitude</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"n\">unit</span>\n\n                <span class=\"n\">value_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">phase_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">setting_AC</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AC&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value Type:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">,</span> <span class=\"n\">source_list</span><span class=\"p\">,</span> <span class=\"n\">value_list</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">setting_AC</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:RLSources&quot;</span><span class=\"p\">,</span> <span class=\"n\">source_list</span><span class=\"p\">,</span> <span class=\"n\">value_list</span><span class=\"p\">,</span> <span class=\"n\">phase_list</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">dcrl</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;V&quot;</span>\n            <span class=\"n\">source_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Names&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">dcrl</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">excitation</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">excitations</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">excitation</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Not existing excitation &quot;</span> <span class=\"o\">+</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">source_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Source Values&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Magnitude&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">vals</span> <span class=\"ow\">in</span> <span class=\"n\">dcrl</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">magnitude</span> <span class=\"o\">=</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">magnitude</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                    <span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">magnitude</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">vals</span> <span class=\"o\">+=</span> <span class=\"n\">unit</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vals</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">vals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">value_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"n\">setting_DC</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:DC&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value Type:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">,</span> <span class=\"n\">source_list</span><span class=\"p\">,</span> <span class=\"n\">value_list</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_solution_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">EditSources</span><span class=\"p\">(</span><span class=\"n\">setting_AC</span><span class=\"p\">,</span> <span class=\"n\">setting_CG</span><span class=\"p\">,</span> <span class=\"n\">setting_DC</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">osolution</span><span class=\"o\">.</span><span class=\"n\">EditSources</span><span class=\"p\">(</span><span class=\"n\">setting_CG</span><span class=\"p\">,</span> <span class=\"n\">setting_AC</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">export_matrix_data</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"p\">,</span>\n        <span class=\"n\">problem_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">reduce_matrix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">r_unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;ohm&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">l_unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;nH&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">c_unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;pF&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">g_unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;mho&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">freq_unit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matrix_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">export_AC_DC_res</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">field_width</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">use_sci_notation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">length_setting</span><span class=\"o\">=</span><span class=\"s2\">&quot;Distributed&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"s2\">&quot;1meter&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export matrix data.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_name : str</span>\n<span class=\"sd\">            Full path to save the matrix data to.</span>\n<span class=\"sd\">            Options for file extensions are: ``*.m``, ``*.lvl``, ``*.csv``,</span>\n<span class=\"sd\">            and ``*.txt``.</span>\n<span class=\"sd\">        problem_type : str, optional</span>\n<span class=\"sd\">            Problem type. The default value is ``None``, in which case ``&quot;C&quot;`` is</span>\n<span class=\"sd\">            used. Options are ``&quot;C&quot;``, ``&quot;AC RL&quot;``, and ``&quot;DC RL&quot;``.</span>\n<span class=\"sd\">        variations : str, optional</span>\n<span class=\"sd\">            Design variation. The default is ``None``, in which case the</span>\n<span class=\"sd\">            current nominal variation is used.</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Setup name. The default value is ``None``, in which case the first</span>\n<span class=\"sd\">            analysis setup is used.</span>\n<span class=\"sd\">        sweep : str, optional</span>\n<span class=\"sd\">            Solution frequency. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default adaptive is used.</span>\n<span class=\"sd\">        reduce_matrix : str, optional</span>\n<span class=\"sd\">            Name of the matrix to display.</span>\n<span class=\"sd\">            Default value is ``&quot;Original&quot;``.</span>\n<span class=\"sd\">        r_unit : str, optional</span>\n<span class=\"sd\">            Resistance unit value.</span>\n<span class=\"sd\">            The default value is ``&quot;ohm&quot;``.</span>\n<span class=\"sd\">        l_unit : str, optional</span>\n<span class=\"sd\">            Inductance unit value.</span>\n<span class=\"sd\">            The default value is ``&quot;nH&quot;``.</span>\n<span class=\"sd\">        c_unit : str, optional</span>\n<span class=\"sd\">            Capacitance unit value.</span>\n<span class=\"sd\">            Default value is ``&quot;pF&quot;``.</span>\n<span class=\"sd\">        g_unit : str, optional</span>\n<span class=\"sd\">            Conductance unit value.</span>\n<span class=\"sd\">            The default value is ``&quot;mho&quot;``.</span>\n<span class=\"sd\">        freq : str, optional</span>\n<span class=\"sd\">            Selected frequency.</span>\n<span class=\"sd\">            The default value is ``&quot;0Hz&quot;``.</span>\n<span class=\"sd\">        freq_unit : str, optional</span>\n<span class=\"sd\">            Frequency unit. The default value is ``None``, in which case the</span>\n<span class=\"sd\">            default unit is used.</span>\n<span class=\"sd\">        matrix_type : str, optional</span>\n<span class=\"sd\">            Matrix Type.</span>\n<span class=\"sd\">            Possible Values are &quot;Maxwell&quot;, &quot;Spice&quot; and &quot;Couple&quot;.</span>\n<span class=\"sd\">            The default value is ``None``.</span>\n<span class=\"sd\">        export_AC_DC_res : bool, optional</span>\n<span class=\"sd\">            Whether to add the AC and DC res.</span>\n<span class=\"sd\">            The default value is ``False``.</span>\n<span class=\"sd\">        precision : int, optional</span>\n<span class=\"sd\">            Precision format.</span>\n<span class=\"sd\">            The default value is ``15``.</span>\n<span class=\"sd\">        field_width : int, optional</span>\n<span class=\"sd\">            Field Width.</span>\n<span class=\"sd\">            The default value is ``20``.</span>\n<span class=\"sd\">        use_sci_notation : bool, optional</span>\n<span class=\"sd\">            Use sci notation.</span>\n<span class=\"sd\">            Whether to use scientific notation.</span>\n<span class=\"sd\">            The default value is ``True``.  When ``False``, the display format is used.</span>\n<span class=\"sd\">        length_setting : str, optional</span>\n<span class=\"sd\">            Length setting if the design si 2D.</span>\n<span class=\"sd\">            The default value is ``&quot;Distributed&quot;``.</span>\n<span class=\"sd\">        length : str, optional</span>\n<span class=\"sd\">            Length.</span>\n<span class=\"sd\">            The default value is ``&quot;1meter&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;.m&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;.lvl&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;.csv&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;.txt&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Extension is invalid. Possible extensions are *.m, *.lvl, *.csv, and *.txt.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_is3d</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">problem_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">problem_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CG&quot;</span>\n                <span class=\"k\">if</span> <span class=\"n\">matrix_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">matrix_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Maxwell, Spice, Couple&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">matrix_type_array</span> <span class=\"o\">=</span> <span class=\"n\">matrix_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">matrix_type_array</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Maxwell&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Spice&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Couple&quot;</span><span class=\"p\">]]:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid input matrix type. Possible values are Maxwell, Spice, and Couple.&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">problem_type_array</span> <span class=\"o\">=</span> <span class=\"n\">problem_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">problem_type_array</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;CG&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;RL&quot;</span><span class=\"p\">]]:</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;CG&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">problem_type_array</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">matrix_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">matrix_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Maxwell, Spice, Couple&quot;</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">matrix_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">matrix_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Maxwell, Couple&quot;</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">matrix_type_array</span> <span class=\"o\">=</span> <span class=\"n\">matrix_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n                            <span class=\"k\">if</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">matrix_type_array</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spice&quot;</span><span class=\"p\">]:</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Spice can&#39;t be a matrix type if problem type is RL.&quot;</span><span class=\"p\">)</span>\n                                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid problem type. Possible values are CG and RL.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">problem_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">problem_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;C&quot;</span>\n                <span class=\"k\">if</span> <span class=\"n\">matrix_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">matrix_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Maxwell, Spice, Couple&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">matrix_type_array</span> <span class=\"o\">=</span> <span class=\"n\">matrix_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">matrix_type_array</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Maxwell&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Spice&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Couple&quot;</span><span class=\"p\">]]:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid input matrix type. Possible values are Maxwell, Spice, and Couple.&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">problem_type_array</span> <span class=\"o\">=</span> <span class=\"n\">problem_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">problem_type_array</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AC RL&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DC RL&quot;</span><span class=\"p\">]]:</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;C&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">problem_type_array</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">matrix_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">matrix_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Maxwell, Spice, Couple&quot;</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">matrix_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                            <span class=\"n\">matrix_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Maxwell, Couple&quot;</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">matrix_type_array</span> <span class=\"o\">=</span> <span class=\"n\">matrix_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span>\n                            <span class=\"k\">if</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">matrix_type_array</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spice&quot;</span><span class=\"p\">]:</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Spice can&#39;t be a matrix type if problem type is AC RL or DC RL.&quot;</span><span class=\"p\">)</span>\n                                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid problem type. Possible values are C, AC RL, and DC RL.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">variations</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">variations_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"p\">)):</span>\n                    <span class=\"n\">variation</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">x</span><span class=\"p\">],</span>\n                        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"n\">x</span><span class=\"p\">],</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">variations_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">variation</span><span class=\"p\">)</span>\n                <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">variations_list</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setup_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span>\n        <span class=\"k\">elif</span> <span class=\"n\">setup_name</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup named: </span><span class=\"si\">%s</span><span class=\"s2\"> is invalid. Provide a valid analysis setup name.&quot;</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_array</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;: &quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sweep_array</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep is invalid. Provide a valid sweep.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">+</span> <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">reduce_matrix</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">reduce_matrix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Original&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">[</span><span class=\"n\">matrix</span> <span class=\"k\">for</span> <span class=\"n\">matrix</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span> <span class=\"k\">if</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">reduce_matrix</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Matrix doesn&#39;t exist. Provide an existing matrix.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;List of matrix parameters is empty. Cannot export a valid matrix.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">r_unit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">r_unit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ohm&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">r_unit</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;ohm&quot;</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provide a valid unit for resistor.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">l_unit</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;H&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provide a valid unit for inductor.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">c_unit</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;fF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;nF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;uF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;farad&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provide a valid unit for capacitance.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">g_unit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">g_unit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mho&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">g_unit</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;fSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;pSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;nSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;uSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;mSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Sie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;kSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;megSie&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;mho&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;perohm&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;apV&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">]:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provide a valid unit for conductance.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">freq</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;(\\d+)\\s*(\\w+)&quot;</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"s2\">&quot;Analysis&quot;</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"n\">setup_name</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Adaptive Freq&quot;</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">freq_unit</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetDefaultUnit</span><span class=\"p\">(</span><span class=\"s2\">&quot;Frequency&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">freq_unit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">parse_dim_arg</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">,</span> <span class=\"n\">freq_unit</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesktop</span><span class=\"o\">.</span><span class=\"n\">GetDefaultUnit</span><span class=\"p\">(</span><span class=\"s2\">&quot;Frequency&quot;</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">export_AC_DC_res</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">export_AC_DC_res</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">precision</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Precision type must be integer.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">field_width</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">field_width</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">field_width</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Field width type must be integer.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">use_sci_notation</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">use_sci_notation</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">use_sci_notation</span><span class=\"p\">:</span>\n                <span class=\"n\">use_sci_notation</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">use_sci_notation</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_is3d</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">length_setting</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Distributed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Lumped&quot;</span><span class=\"p\">]:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Length setting is invalid.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"n\">length</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1meter&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;(\\d+)\\s*(\\w+)&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;fm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;pm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;nm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;um&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;cm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;dm&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;meter&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;km&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;copper_oz&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;ft&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;in&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mil&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mile&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mileNaut&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mileTerr&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;uin&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;yd&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unit length is invalid.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportMatrixData</span><span class=\"p\">(</span>\n                    <span class=\"n\">file_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">problem_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">variations</span><span class=\"p\">,</span>\n                    <span class=\"n\">analysis_setup</span><span class=\"p\">,</span>\n                    <span class=\"n\">reduce_matrix</span><span class=\"p\">,</span>\n                    <span class=\"n\">r_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">l_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">c_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">g_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">freq</span><span class=\"p\">,</span>\n                    <span class=\"n\">length_setting</span><span class=\"p\">,</span>\n                    <span class=\"n\">length</span><span class=\"p\">,</span>\n                    <span class=\"n\">matrix_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">export_AC_DC_res</span><span class=\"p\">,</span>\n                    <span class=\"n\">precision</span><span class=\"p\">,</span>\n                    <span class=\"n\">field_width</span><span class=\"p\">,</span>\n                    <span class=\"n\">use_sci_notation</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export of matrix data was unsuccessful.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"o\">.</span><span class=\"n\">ExportMatrixData</span><span class=\"p\">(</span>\n                    <span class=\"n\">file_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">problem_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">variations</span><span class=\"p\">,</span>\n                    <span class=\"n\">analysis_setup</span><span class=\"p\">,</span>\n                    <span class=\"n\">reduce_matrix</span><span class=\"p\">,</span>\n                    <span class=\"n\">r_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">l_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">c_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">g_unit</span><span class=\"p\">,</span>\n                    <span class=\"n\">freq</span><span class=\"p\">,</span>\n                    <span class=\"n\">matrix_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">export_AC_DC_res</span><span class=\"p\">,</span>\n                    <span class=\"n\">precision</span><span class=\"p\">,</span>\n                    <span class=\"n\">field_width</span><span class=\"p\">,</span>\n                    <span class=\"n\">use_sci_notation</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export of matrix data was unsuccessful.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">export_equivalent_circuit</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sweep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">variations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matrix_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"n\">user_changed_settings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">include_cap</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">include_cond</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">include_dcr</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">include_dcl</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">include_acr</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">include_acl</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">include_r</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">include_l</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">add_resistance</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">parse_pin_names</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">export_distributed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">lumped_length</span><span class=\"o\">=</span><span class=\"s2\">&quot;1meter&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">rise_time_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">rise_time_unit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">coupling_limit_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cap_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ind_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">res_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cond_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">file_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;HSPICE&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">include_cpp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export matrix data.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_name : str</span>\n<span class=\"sd\">            Full path for saving the matrix data to.</span>\n<span class=\"sd\">            Options for file extensions are CIR, SML, SP, PKG, SPC, LIB, CKT, BSP,</span>\n<span class=\"sd\">            DML, and ICM.</span>\n<span class=\"sd\">        setup_name : str, optional</span>\n<span class=\"sd\">            Setup name.</span>\n<span class=\"sd\">            The default value is ``None``, in which case the first analysis setup is used.</span>\n<span class=\"sd\">        sweep : str, optional</span>\n<span class=\"sd\">            Solution frequency. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default adaptive is used.</span>\n<span class=\"sd\">        variations : list or str, optional</span>\n<span class=\"sd\">            Design variation. The default is ``None``, in which case the</span>\n<span class=\"sd\">            current nominal variation is used. If you provide a</span>\n<span class=\"sd\">            design variation, use the format ``{Name}:{Value}``.</span>\n<span class=\"sd\">        matrix_name : str, optional</span>\n<span class=\"sd\">            Name of the matrix to show. The default is ``&quot;Original&quot;``.</span>\n<span class=\"sd\">        num_cells : int, optional</span>\n<span class=\"sd\">            Number of cells in export.</span>\n<span class=\"sd\">            Default value is 2.</span>\n<span class=\"sd\">        user_changed_settings : bool, optional</span>\n<span class=\"sd\">            Whether user has changed settings or not, defaulted to True.</span>\n<span class=\"sd\">            Default value is False.</span>\n<span class=\"sd\">        include_cap : bool, optional</span>\n<span class=\"sd\">            Include Capacitance.</span>\n<span class=\"sd\">            Default value is True.</span>\n<span class=\"sd\">        include_cond : bool, optional</span>\n<span class=\"sd\">            Include Conductance.</span>\n<span class=\"sd\">            Default value is True.</span>\n<span class=\"sd\">        coupling_limit_type : int, optional</span>\n<span class=\"sd\">            Coupling limit types.</span>\n<span class=\"sd\">            Values can be: ``&quot;By Value&quot; -&gt; 0`` or ``&quot;By Fraction Of Self Term&quot; -&gt; 1``.</span>\n<span class=\"sd\">            If None, no coupling limits are set.</span>\n<span class=\"sd\">            Default value is None.</span>\n<span class=\"sd\">        include_dcr : bool, optional</span>\n<span class=\"sd\">            Flag indicates whether to export DC resistance matrix.</span>\n<span class=\"sd\">            Default value is ``False``.</span>\n<span class=\"sd\">        include_dcl : bool, optional</span>\n<span class=\"sd\">            Flag indicates whether to export DC Inductance matrix.</span>\n<span class=\"sd\">            Default value is ``False``.</span>\n<span class=\"sd\">        include_acr : bool, optional</span>\n<span class=\"sd\">            Flag indicates whether to export AC resistance matrix.</span>\n<span class=\"sd\">            Default value is ``False``.</span>\n<span class=\"sd\">        include_acl : bool, optional</span>\n<span class=\"sd\">            Flag indicates whether to export AC inductance matrix.</span>\n<span class=\"sd\">            Default value is ``False``.</span>\n<span class=\"sd\">        include_r : bool, optional</span>\n<span class=\"sd\">            Flag indicates whether to export resistance.</span>\n<span class=\"sd\">            Default value is True.</span>\n<span class=\"sd\">        include_l : bool, optional</span>\n<span class=\"sd\">            Flag indicates whether to export inductance.</span>\n<span class=\"sd\">            Default value is True.</span>\n<span class=\"sd\">        add_resistance : bool, optional</span>\n<span class=\"sd\">            Adds the DC and AC resistance.</span>\n<span class=\"sd\">            Default value is True.</span>\n<span class=\"sd\">        parse_pin_names : bool, optional</span>\n<span class=\"sd\">            Parse pin names.</span>\n<span class=\"sd\">            Default value is False.</span>\n<span class=\"sd\">        export_distributed : bool, optional</span>\n<span class=\"sd\">            Flag to tell whether to export in distributed mode or Lumped mode.</span>\n<span class=\"sd\">            Default value is True.</span>\n<span class=\"sd\">        lumped_length : str, optional</span>\n<span class=\"sd\">            Length of the design.</span>\n<span class=\"sd\">            Default value is 1 meter.</span>\n<span class=\"sd\">        rise_time_value : str, optional</span>\n<span class=\"sd\">            Rise time to calculate the number of cells.</span>\n<span class=\"sd\">            Default value is 1e-09.</span>\n<span class=\"sd\">        rise_time_unit : str, optional</span>\n<span class=\"sd\">            Rise time unit.</span>\n<span class=\"sd\">            Default is s.</span>\n<span class=\"sd\">        cap_limit : str, optional</span>\n<span class=\"sd\">            Capacitance limit.</span>\n<span class=\"sd\">            Default value is 1pF if coupling_limit_type is 0.</span>\n<span class=\"sd\">            Default value is 0.01 if coupling_limit_type is 1.</span>\n<span class=\"sd\">        cond_limit : str, optional</span>\n<span class=\"sd\">            Conductance limit.</span>\n<span class=\"sd\">            Default value is 1mSie if coupling_limit_type is 0.</span>\n<span class=\"sd\">            Default value is 0.01 if coupling_limit_type is 1.</span>\n<span class=\"sd\">        res_limit : str, optional</span>\n<span class=\"sd\">            Resistance limit.</span>\n<span class=\"sd\">            Default value is 1ohm if coupling_limit_type is 0.</span>\n<span class=\"sd\">            Default value is 0.01 if coupling_limit_type is 1.</span>\n<span class=\"sd\">        ind_limit : str, optional</span>\n<span class=\"sd\">            Inductance limit.</span>\n<span class=\"sd\">            Default value is 1nH if coupling_limit_type is 0.</span>\n<span class=\"sd\">            Default value is 0.01 if coupling_limit_type is 1.</span>\n<span class=\"sd\">        model_name : str, optional</span>\n<span class=\"sd\">            Model name or name of the sub circuit (Optional).</span>\n<span class=\"sd\">            If None then file_name is considered as model name.</span>\n<span class=\"sd\">        freq : str, optional</span>\n<span class=\"sd\">            Sweep frequency in Hz.</span>\n<span class=\"sd\">            Default value is 0.</span>\n<span class=\"sd\">        file_type : str, optional</span>\n<span class=\"sd\">            The type of file format.</span>\n<span class=\"sd\">            Type of HSPICE file format. (All HSPICE file formats have the same extension,</span>\n<span class=\"sd\">            which is ``*.sp``.) Options are:</span>\n<span class=\"sd\">            &quot;Hspice&quot;: simple HSPICE file format.</span>\n<span class=\"sd\">            &quot;Welement&quot;: Nexxim/HSPICE W Element file format</span>\n<span class=\"sd\">            &quot;RLGC&quot;: Nexxim/HSPICE RLGC W Element file format</span>\n<span class=\"sd\">            Default value is Hspice.</span>\n<span class=\"sd\">        include_cpp : bool, optional</span>\n<span class=\"sd\">            Whether to include chip package control.</span>\n<span class=\"sd\">            Default value is False.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;.cir&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.sml&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.sp&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.pkg&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.spc&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.lib&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.ckt&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.bsp&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.dml&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;.icm&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Extension is invalid. Possible extensions are .cir, .sml, .sp, .pkg, .spc,&quot;</span>\n                <span class=\"s2\">&quot; .lib, .ckt, .bsp, .dml, .icm.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setup_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">setup_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span>\n        <span class=\"k\">elif</span> <span class=\"n\">setup_name</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analysis_setup</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setup named: </span><span class=\"si\">%s</span><span class=\"s2\"> is invalid. Provide a valid analysis setup name.&quot;</span><span class=\"p\">,</span> <span class=\"n\">setup_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweep</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_solutions</span><span class=\"o\">.</span><span class=\"n\">default_adaptive</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sweep_array</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;: &quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_analysis_sweeps</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sweep_array</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep is invalid. Provide a valid sweep.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">analysis_setup</span> <span class=\"o\">=</span> <span class=\"n\">setup_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">+</span> <span class=\"n\">sweep</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">variations</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"p\">:</span>\n                <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">variations_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"p\">)):</span>\n                    <span class=\"n\">variation</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"n\">x</span><span class=\"p\">],</span>\n                        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"n\">x</span><span class=\"p\">],</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">variations_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">variation</span><span class=\"p\">)</span>\n                <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">variations_list</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">variations_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Variations must be provided as a list.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">variations</span><span class=\"p\">)):</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provided variation name doesn&#39;t exist.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">available_variations</span><span class=\"o\">.</span><span class=\"n\">nominal_w_values_dict</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provided variation value doesn&#39;t exist.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"n\">variation</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">=&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">variations_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">variation</span><span class=\"p\">)</span>\n            <span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">variations_list</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">matrix_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">matrix_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Original&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">[</span><span class=\"n\">matrix</span> <span class=\"k\">for</span> <span class=\"n\">matrix</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrices</span> <span class=\"k\">if</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">matrix_name</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Matrix doesn&#39;t exist. Provide an existing matrix.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;List of matrix parameters is empty. Cannot export a valid matrix.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">coupling_limits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CouplingLimits&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CouplingLimitType:=&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">coupling_limit_type</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">coupling_limit_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Possible values are 0 = &quot;By Value&quot; or 1 = &quot;By Fraction Of Self Term&quot;.&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">elif</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">coupling_limit_value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;By Value&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">coupling_limit_value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;By Fraction Of Self Term&quot;</span>\n\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">coupling_limit_value</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">cond_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">cond_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1mSie&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">cond_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">cond_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.01&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">cond_limit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">cond_limit</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;fSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;pSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;nSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;uSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;sie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;kSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;megSie&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;mho&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;perohm&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid conductance unit.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CondLimit:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cond_limit</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">cap_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">cap_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1pF&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">cap_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">cap_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.01&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">cap_limit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">cap_limit</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;fF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;nF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;uF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mF&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;farad&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid capacitance unit.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;CapLimit:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cap_limit</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">ind_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">ind_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1nH&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">ind_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">ind_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.01&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">ind_limit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">ind_limit</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;fH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;nH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;uH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;H&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid inductance unit.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IndLimit:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ind_limit</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">res_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">res_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1ohm&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">res_limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">coupling_limit_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">res_limit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0.01&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">res_limit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">res_limit</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;uOhm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mOhm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ohm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;kOhm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;megOhm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GOhm&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid resistance unit.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ResLimit:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">res_limit</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">coupling_limit_value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;None&quot;</span>\n            <span class=\"n\">coupling_limits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">coupling_limit_value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">model_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">model_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span>\n        <span class=\"k\">elif</span> <span class=\"n\">model_name</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid project name.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">lumped_length</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;cm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ft&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;in&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;km&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;light year&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;meter&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;mil&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;mile&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;mileNaut&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;mileTerr&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;mm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;nm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;pm&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;uin&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;um&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;yd&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid lumped length unit.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">rise_time_value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">rise_time_value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;1e-9&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">rise_time_unit</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">rise_time_unit</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;fs&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ps&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ns&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;us&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ms&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;s&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hour&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;day&quot;</span><span class=\"p\">]:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid rise time unit.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">rise_time_unit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;s&quot;</span>\n\n        <span class=\"n\">rise_time</span> <span class=\"o\">=</span> <span class=\"n\">rise_time_value</span> <span class=\"o\">+</span> <span class=\"n\">rise_time_unit</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">file_type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;hspice&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;welement&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rlgc&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid file type, possible solutions are Hspice, Welement, RLGC.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">include_cpp</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">aedt_version</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2023.2&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">include_dcr</span><span class=\"p\">,</span> <span class=\"n\">include_dcl</span><span class=\"p\">,</span> <span class=\"n\">include_acr</span><span class=\"p\">,</span> <span class=\"n\">include_acl</span><span class=\"p\">,</span> <span class=\"n\">add_resistance</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Select DC/AC resistance/inductance to include &quot;</span>\n                        <span class=\"s2\">&quot;the chip package control data in export circuit.&quot;</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">circuit_settings</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetCircuitSettings</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">setting</span> <span class=\"ow\">in</span> <span class=\"n\">circuit_settings</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">setting</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n                            <span class=\"k\">if</span> <span class=\"n\">setting</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NAME:CPPInfo&quot;</span><span class=\"p\">:</span>\n                                <span class=\"n\">cpp_settings</span> <span class=\"o\">=</span> <span class=\"n\">setting</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">include_cpp</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">cpp_settings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_is3d</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">ExportCircuit</span><span class=\"p\">(</span>\n                    <span class=\"n\">analysis_setup</span><span class=\"p\">,</span>\n                    <span class=\"n\">variations</span><span class=\"p\">,</span>\n                    <span class=\"n\">file_name</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:CircuitData&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MatrixName:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">matrix_name</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;NumberOfCells:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">num_cells</span><span class=\"p\">),</span>\n                        <span class=\"s2\">&quot;UserHasChangedSettings:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">user_changed_settings</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeCap:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_cap</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeCond:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_cond</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"n\">coupling_limits</span><span class=\"p\">],</span>\n                        <span class=\"s2\">&quot;IncludeDCR:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_dcr</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncudeDCL:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_dcl</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeACR:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_acr</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeACL:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_acl</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;ADDResistance:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">add_resistance</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;ParsePinNames:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">parse_pin_names</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeCPP:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_cpp</span><span class=\"p\">,</span>\n                        <span class=\"n\">cpp_settings</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"n\">model_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">freq</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export of equivalent circuit was unsuccessful.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">ExportCircuit</span><span class=\"p\">(</span>\n                    <span class=\"n\">analysis_setup</span><span class=\"p\">,</span>\n                    <span class=\"n\">variations</span><span class=\"p\">,</span>\n                    <span class=\"n\">file_name</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:CircuitData&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;MatrixName:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">matrix_name</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;NumberOfCells:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">num_cells</span><span class=\"p\">),</span>\n                        <span class=\"s2\">&quot;UserHasChangedSettings:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">user_changed_settings</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeCap:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_cap</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeCond:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_cond</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span><span class=\"n\">coupling_limits</span><span class=\"p\">],</span>\n                        <span class=\"s2\">&quot;IncludeR:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_r</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;IncludeL:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">include_l</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;ExportDistributed:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">export_distributed</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;LumpedLength:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">lumped_length</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;RiseTime:=&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">rise_time</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"n\">model_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">file_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">freq</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export of equivalent circuit was unsuccessful.&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<div class=\"viewcode-block\" id=\"Q3d\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d/#pyaedt.q3d.Q3d\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Q3d</span><span class=\"p\">(</span><span class=\"n\">QExtractor</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides the Q3D app interface.</span>\n\n<span class=\"sd\">    This class allows you to create an instance of Q3D and link to an</span>\n<span class=\"sd\">    existing project or create a new one.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    projectname : str, optional</span>\n<span class=\"sd\">        Name of the project to select or the full path to the project</span>\n<span class=\"sd\">        or AEDTZ archive to open. The default is ``None``, in which</span>\n<span class=\"sd\">        case an attempt is made to get an active project. If no</span>\n<span class=\"sd\">        projects are present, an empty project is created.</span>\n<span class=\"sd\">    designname : str, optional</span>\n<span class=\"sd\">        Name of the design to select. The default is ``None``, in</span>\n<span class=\"sd\">        which case an attempt is made to get an active design. If no</span>\n<span class=\"sd\">        designs are present, an empty design is created.</span>\n<span class=\"sd\">    solution_type : str, optional</span>\n<span class=\"sd\">        Solution type to apply to the design. The default is</span>\n<span class=\"sd\">        ``None``, in which case the default type is applied.</span>\n<span class=\"sd\">    setup_name : str, optional</span>\n<span class=\"sd\">        Name of the setup to use as the nominal. The default is</span>\n<span class=\"sd\">        ``None``, in which case the active setup is used or nothing</span>\n<span class=\"sd\">        is used.</span>\n<span class=\"sd\">    specified_version : str, optional</span>\n<span class=\"sd\">        Version of AEDT to use. The default is ``None``, in which case</span>\n<span class=\"sd\">        the active version or latest installed version is used.</span>\n<span class=\"sd\">        This parameter is ignored when Script is launched within AEDT.</span>\n<span class=\"sd\">    non_graphical : bool, optional</span>\n<span class=\"sd\">        Whether to launch AEDT in non-graphical mode. The default</span>\n<span class=\"sd\">        is ``False``, in which case AEDT is launched in graphical mode.</span>\n<span class=\"sd\">        This parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    new_desktop_session : bool, optional</span>\n<span class=\"sd\">        Whether to launch an instance of AEDT in a new thread, even if</span>\n<span class=\"sd\">        another instance of the ``specified_version`` is active on the</span>\n<span class=\"sd\">        machine. The default is ``True``. This parameter is ignored when</span>\n<span class=\"sd\">        a script is launched within AEDT.</span>\n<span class=\"sd\">    close_on_exit : bool, optional</span>\n<span class=\"sd\">        Whether to release AEDT on exit. The default is ``False``.</span>\n<span class=\"sd\">    student_version : bool, optional</span>\n<span class=\"sd\">        Whether to open the AEDT student version. The default is ``False``.</span>\n<span class=\"sd\">        This parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    machine : str, optional</span>\n<span class=\"sd\">        Machine name to connect the oDesktop session to. This works only in</span>\n<span class=\"sd\">        2022 R2 and later. The remote server must be up and running with the</span>\n<span class=\"sd\">        command `&quot;ansysedt.exe -grpcsrv portnum&quot;`. If the machine is `&quot;localhost&quot;`,</span>\n<span class=\"sd\">        the server also starts if not present.</span>\n<span class=\"sd\">    port : int, optional</span>\n<span class=\"sd\">        Port number on which to start the oDesktop communication on an already</span>\n<span class=\"sd\">        existing server. This parameter is ignored when a new server is created.</span>\n<span class=\"sd\">        It works only in 2022 R2 and later. The remote server must be up and</span>\n<span class=\"sd\">        running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">    aedt_process_id : int, optional</span>\n<span class=\"sd\">        Process ID for the instance of AEDT to point PyAEDT at. The default is</span>\n<span class=\"sd\">        ``None``. This parameter is only used when ``new_desktop_session = False``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an instance of Q3D and connect to an existing Q3D</span>\n<span class=\"sd\">    design or create a new Q3D design if one does not exist.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Q3d</span>\n<span class=\"sd\">    &gt;&gt;&gt; app = Q3d()</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">QExtractor</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Q3D Extractor&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MATRIXOPERATIONS</span> <span class=\"o\">=</span> <span class=\"n\">MATRIXOPERATIONSQ3D</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nets in a Q3D project.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of nets in a Q3D project.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.ListNets</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nets_data</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">ListNets</span><span class=\"p\">())</span>\n        <span class=\"n\">net_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">nets_data</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n                <span class=\"n\">net_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">net_names</span>\n\n<div class=\"viewcode-block\" id=\"Q3d.objects_from_nets\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.objects_from_nets/#pyaedt.q3d.Q3d.objects_from_nets\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">objects_from_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nets</span><span class=\"p\">,</span> <span class=\"n\">materials</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Find the objects that belongs to a net. Material can be applied as filter.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        nets : str, list</span>\n<span class=\"sd\">            Nets to search for. Case insensitive.</span>\n<span class=\"sd\">        materials : str, list, optional</span>\n<span class=\"sd\">            Materials to filter the nets objects. Case insensitive.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of net name and objects that belongs to it.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">nets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nets</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">materials</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">materials</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">materials</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">materials</span><span class=\"p\">:</span>\n            <span class=\"n\">materials</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">materials</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">materials</span><span class=\"p\">]</span>\n        <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">nets</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">bound</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;Net&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">:</span>\n                    <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">materials</span><span class=\"p\">:</span>\n                        <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">obj_list</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">material_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">materials</span>\n                        <span class=\"p\">]</span>\n                    <span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">net</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">obj_list</span>\n        <span class=\"k\">return</span> <span class=\"n\">objects</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.net_sources\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.net_sources/#pyaedt.q3d.Q3d.net_sources\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net_sources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check if a net has sources and return a list of source names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        net_name : str</span>\n<span class=\"sd\">            Name of the net to search for.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of source names.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Q3d</span>\n<span class=\"sd\">        &gt;&gt;&gt; q3d = Q3d(&quot;my_project&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; net = q3d.net_sources(&quot;Net1&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">net_id</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SignalNet&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">net_name</span> <span class=\"ow\">and</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">net_id</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">break</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">net_name</span> <span class=\"ow\">or</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">net_id</span><span class=\"p\">:</span>\n                    <span class=\"n\">sources</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sources</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.net_sinks\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.net_sinks/#pyaedt.q3d.Q3d.net_sinks\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">net_sinks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check if a net has sinks and return a list of sink names.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        net_name : str</span>\n<span class=\"sd\">            Name of the net to search for.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of sink names.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Q3d</span>\n<span class=\"sd\">        &gt;&gt;&gt; q3d = Q3d(&quot;my_project&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; net = q3d.net_sinks(&quot;Net1&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sinks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">net_id</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SignalNet&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">net_name</span> <span class=\"ow\">and</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">net_id</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ID&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">break</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Sink&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">net_name</span> <span class=\"ow\">or</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">net_id</span><span class=\"p\">:</span>\n                <span class=\"n\">sinks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sinks</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.auto_identify_nets\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.auto_identify_nets/#pyaedt.q3d.Q3d.auto_identify_nets\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">auto_identify_nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Identify nets automatically.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AutoIdentifyNets</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">original_nets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">AutoIdentifyNets</span><span class=\"p\">()</span>\n        <span class=\"n\">new_nets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nets</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">original_nets</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">net</span> <span class=\"ow\">in</span> <span class=\"n\">new_nets</span><span class=\"p\">:</span>\n            <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetExcitationAssignment</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">))],</span> <span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">objects</span><span class=\"p\">})</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SignalNet&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">new_nets</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> Nets have been identified: </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">),</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">)))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;No new nets identified&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.assign_net\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.assign_net/#pyaedt.q3d.Q3d.assign_net\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">net_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;Signal&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign a net to a list of objects.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        objects : list, str</span>\n<span class=\"sd\">            List of objects to assign the net to. It can be a single object.</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ```None``, in which case the</span>\n<span class=\"sd\">            default name is used.</span>\n<span class=\"sd\">        net_type : str, bool</span>\n<span class=\"sd\">            Type of net to create. Options are ``&quot;Signal&quot;``, ``&quot;Ground&quot;`` and ``&quot;Floating&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;Signal&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Source object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSignalNet</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignGroundNet</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignFloatingNet</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt import Q3d</span>\n<span class=\"sd\">        &gt;&gt;&gt; q3d = Q3d()</span>\n<span class=\"sd\">        &gt;&gt;&gt; box = q3d.modeler.create_box([30, 30, 30], [10, 10, 10], name=&quot;mybox&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; net_name = &quot;my_net&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; net = q3d.assign_net(box, net_name)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">objects</span><span class=\"p\">})</span>\n        <span class=\"n\">type_bound</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SignalNet&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">net_type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;ground&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_bound</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;GroundNet&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">net_type</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;floating&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_bound</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;FloatingNet&quot;</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">type_bound</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.assign_source_to_objectface\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.assign_source_to_objectface/#pyaedt.q3d.Q3d.assign_source_to_objectface\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_source_to_objectface</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">source_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a source on a face of an object.</span>\n\n<span class=\"sd\">        The face ID is selected based on the axis direction. It is the face that</span>\n<span class=\"sd\">        has the maximum/minimum in this axis direction.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_name : str, int</span>\n<span class=\"sd\">            Name of the object or face ID.</span>\n<span class=\"sd\">        axisdir : int, optional</span>\n<span class=\"sd\">            Initial axis direction. Options are ``0`` to ``5``. The default is ``0``.</span>\n<span class=\"sd\">        source_name : str, optional</span>\n<span class=\"sd\">            Name of the source. The default is ``None``.</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``, in which case the ``object_name`` is considered.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Source object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSource</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">object_name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_get_faceid_on_axis</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">source_name</span><span class=\"p\">:</span>\n            <span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">object_name</span>\n        <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n                <span class=\"p\">{</span><span class=\"s2\">&quot;Faces&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"s2\">&quot;ParentBndID&quot;</span><span class=\"p\">:</span> <span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TerminalType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ConstantVoltage&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">:</span> <span class=\"n\">net_name</span><span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source_name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.assign_source_to_sheet\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.assign_source_to_sheet/#pyaedt.q3d.Q3d.assign_source_to_sheet\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_source_to_sheet</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sheetname</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">netname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sourcename</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">terminal_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a source on a sheet.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sheetname : str</span>\n<span class=\"sd\">            Name of the sheet to create the source on.</span>\n<span class=\"sd\">        objectname :  str, optional</span>\n<span class=\"sd\">            Name of the parent object. The default is ``None``.</span>\n<span class=\"sd\">        netname : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``.</span>\n<span class=\"sd\">        sourcename : str,  optional</span>\n<span class=\"sd\">            Name of the source. The default is ``None``.</span>\n<span class=\"sd\">        terminal_type : str</span>\n<span class=\"sd\">            Type of the terminal. Options are ``voltage`` and ``current``. The default is ``voltage``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Source object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSource</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sourcename</span><span class=\"p\">:</span>\n            <span class=\"n\">sourcename</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sheetname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">sheetname</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">sheetname</span><span class=\"p\">]})</span>\n        <span class=\"k\">if</span> <span class=\"n\">objectname</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;ParentBndID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">objectname</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">terminal_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;current&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">terminal_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UniformCurrent&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">terminal_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ConstantVoltage&quot;</span>\n\n        <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;TerminalType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">terminal_str</span>\n        <span class=\"k\">if</span> <span class=\"n\">netname</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">netname</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">sheetname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TerminalType&quot;</span><span class=\"p\">:</span> <span class=\"n\">terminal_str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">:</span> <span class=\"n\">netname</span><span class=\"p\">})</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sourcename</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.assign_sink_to_objectface\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.assign_sink_to_objectface/#pyaedt.q3d.Q3d.assign_sink_to_objectface\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_sink_to_objectface</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sink_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">net_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a sink on a face of an object.</span>\n\n<span class=\"sd\">        The face ID is selected based on the axis direction. It is the face that has</span>\n<span class=\"sd\">        the maximum or minimum in this axis direction.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_name : str, int</span>\n<span class=\"sd\">            Name of the object or face ID.</span>\n<span class=\"sd\">        axisdir : int, optional</span>\n<span class=\"sd\">            Initial axis direction. Options are ``0`` to ``5``. The default is ``0``.</span>\n<span class=\"sd\">        sink_name : str, optional</span>\n<span class=\"sd\">            Name of the sink. The default is ``None``.</span>\n<span class=\"sd\">        net_name : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``, in which case the ``object_name`` is considered.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Sink object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSink</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">object_name</span>\n            <span class=\"n\">object_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetObjectNameByFaceID</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">_get_faceid_on_axis</span><span class=\"p\">(</span><span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"n\">axisdir</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sink_name</span><span class=\"p\">:</span>\n            <span class=\"n\">sink_name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sink&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">net_name</span><span class=\"p\">:</span>\n            <span class=\"n\">net_name</span> <span class=\"o\">=</span> <span class=\"n\">object_name</span>\n        <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n                <span class=\"p\">{</span><span class=\"s2\">&quot;Faces&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"s2\">&quot;ParentBndID&quot;</span><span class=\"p\">:</span> <span class=\"n\">object_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TerminalType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ConstantVoltage&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">:</span> <span class=\"n\">net_name</span><span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sink_name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Sink&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.assign_sink_to_sheet\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.assign_sink_to_sheet/#pyaedt.q3d.Q3d.assign_sink_to_sheet\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_sink_to_sheet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sheetname</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">netname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sinkname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">terminal_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;voltage&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Generate a sink on a sheet.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        sheetname :</span>\n<span class=\"sd\">            Name of the sheet to create the sink on.</span>\n<span class=\"sd\">        objectname : str, optional</span>\n<span class=\"sd\">            Name of the parent object. The default is ``None``.</span>\n<span class=\"sd\">        netname : str, optional</span>\n<span class=\"sd\">            Name of the net. The default is ``None``.</span>\n<span class=\"sd\">        sinkname : str, optional</span>\n<span class=\"sd\">            Name of the sink. The default is ``None``.</span>\n<span class=\"sd\">        terminal_type : str</span>\n<span class=\"sd\">            Type of the terminal. Options are ``voltage`` and ``current``. The default is ``voltage``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Source object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSink</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sinkname</span><span class=\"p\">:</span>\n            <span class=\"n\">sinkname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Source&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sheetname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">sheetname</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">sheetname</span><span class=\"p\">]})</span>\n        <span class=\"k\">if</span> <span class=\"n\">objectname</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;ParentBndID&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">objectname</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">terminal_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;current&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">terminal_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UniformCurrent&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">terminal_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ConstantVoltage&quot;</span>\n\n        <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;TerminalType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">terminal_str</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">netname</span><span class=\"p\">:</span>\n            <span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">netname</span>\n\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">sheetname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TerminalType&quot;</span><span class=\"p\">:</span> <span class=\"n\">terminal_str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Net&quot;</span><span class=\"p\">:</span> <span class=\"n\">netname</span><span class=\"p\">})</span>\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sinkname</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Sink&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.create_frequency_sweep\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.create_frequency_sweep/#pyaedt.q3d.Q3d.create_frequency_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_frequency_sweep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"n\">freqstart</span><span class=\"p\">,</span> <span class=\"n\">freqstop</span><span class=\"p\">,</span> <span class=\"n\">freqstep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a frequency sweep.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup that is attached to the sweep.</span>\n<span class=\"sd\">        units : str</span>\n<span class=\"sd\">            Units of the frequency. For example, ``&quot;MHz&quot;`` or</span>\n<span class=\"sd\">            ``&quot;GHz&quot;``. The default is ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        freqstart :</span>\n<span class=\"sd\">            Starting frequency of the sweep.</span>\n<span class=\"sd\">        freqstop :</span>\n<span class=\"sd\">            Stopping frequency of the sweep.</span>\n<span class=\"sd\">        freqstep : optional</span>\n<span class=\"sd\">            Frequency step point.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``, in which case the</span>\n<span class=\"sd\">            default name is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertSweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setupname</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n                <span class=\"k\">for</span> <span class=\"n\">sw</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"o\">==</span> <span class=\"n\">sw</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> is already present. Rename and retry.&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStart&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;GHz&quot;</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">freqstop</span><span class=\"p\">:</span>\n                    <span class=\"n\">freqstop</span> <span class=\"o\">=</span> <span class=\"n\">freqstart</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">freqstep</span><span class=\"p\">:</span>\n                    <span class=\"n\">freqstep</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">freqstop</span> <span class=\"o\">-</span> <span class=\"n\">freqstart</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">11</span>\n                    <span class=\"k\">if</span> <span class=\"n\">freqstep</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">freqstep</span> <span class=\"o\">=</span> <span class=\"n\">freqstart</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;GHz&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStep&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstep</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;GHz&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Interpolating&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LinearStep&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweepdata</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.create_discrete_sweep\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.create_discrete_sweep/#pyaedt.q3d.Q3d.create_discrete_sweep\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_discrete_sweep</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">setupname</span><span class=\"p\">,</span> <span class=\"n\">freqstart</span><span class=\"p\">,</span> <span class=\"n\">freqstop</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">freqstep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s2\">&quot;GHz&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">savefields</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a discrete sweep with a single frequency value.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        setupname : str</span>\n<span class=\"sd\">            Name of the setup that the sweeps belongs to.</span>\n<span class=\"sd\">        freqstart : float</span>\n<span class=\"sd\">            Starting point for the discrete frequency.</span>\n<span class=\"sd\">        freqstop : float, optional</span>\n<span class=\"sd\">            Stopping point for the discrete frequency. If ``None``,</span>\n<span class=\"sd\">            a single-point sweep is performed.</span>\n<span class=\"sd\">        freqstep : float, optional</span>\n<span class=\"sd\">            Step point for the discrete frequency. If ``None``,</span>\n<span class=\"sd\">            11 points are created.</span>\n<span class=\"sd\">        units : str, optional</span>\n<span class=\"sd\">            Units of the discrete frequency. For example, ``&quot;MHz&quot;`` or</span>\n<span class=\"sd\">            ``&quot;GHz&quot;``. The default is ``&quot;GHz&quot;``.</span>\n<span class=\"sd\">        sweepname : str, optional</span>\n<span class=\"sd\">            Name of the sweep. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is used.</span>\n<span class=\"sd\">        savefields : bool, optional</span>\n<span class=\"sd\">            Whether to save fields. The default is ``False``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        SweepMatrix</span>\n<span class=\"sd\">            Sweep option.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.InsertSweep</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">sweepname</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">setupname</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_names</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">setupname</span><span class=\"p\">:</span>\n                <span class=\"n\">setupdata</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n                <span class=\"k\">for</span> <span class=\"n\">sw</span> <span class=\"ow\">in</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sweepname</span> <span class=\"o\">==</span> <span class=\"n\">sw</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sweep </span><span class=\"si\">%s</span><span class=\"s2\"> already present. Rename and retry.&quot;</span><span class=\"p\">,</span> <span class=\"n\">sweepname</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span> <span class=\"o\">=</span> <span class=\"n\">setupdata</span><span class=\"o\">.</span><span class=\"n\">add_sweep</span><span class=\"p\">(</span><span class=\"n\">sweepname</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Discrete&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStart&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstart</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;GHz&quot;</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">freqstop</span><span class=\"p\">:</span>\n                    <span class=\"n\">freqstop</span> <span class=\"o\">=</span> <span class=\"n\">freqstart</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">freqstep</span><span class=\"p\">:</span>\n                    <span class=\"n\">freqstep</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">freqstop</span> <span class=\"o\">-</span> <span class=\"n\">freqstart</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">11</span>\n                    <span class=\"k\">if</span> <span class=\"n\">freqstep</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">freqstep</span> <span class=\"o\">=</span> <span class=\"n\">freqstart</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeEnd&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstop</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;GHz&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeStep&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freqstep</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;GHz&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">savefields</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;SaveRadFields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Discrete&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s2\">&quot;RangeType&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LinearStep&quot;</span>\n                <span class=\"n\">sweepdata</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"n\">sweepdata</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q3d.set_material_thresholds\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q3d.set_material_thresholds/#pyaedt.q3d.Q3d.set_material_thresholds\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_material_thresholds</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">insulator_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">perfect_conductor_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">magnetic_threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set material threshold.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        insulator_threshold : float, optional</span>\n<span class=\"sd\">            Threshold for the insulator or conductor. The default is &quot;None&quot;, in which</span>\n<span class=\"sd\">            case the threshold is set to 10000.</span>\n<span class=\"sd\">        perfect_conductor_threshold : float, optional</span>\n<span class=\"sd\">            Threshold that decides whether a conductor is perfectly conducting. This value</span>\n<span class=\"sd\">            must be higher than the value for the insulator threshold. The default is ``None``,</span>\n<span class=\"sd\">            in which case the value is set to 1E+030.</span>\n<span class=\"sd\">        magnetic_threshold : float, optional</span>\n<span class=\"sd\">            Threshold that decides whether a material is magnetic. The default is &quot;None&quot;,</span>\n<span class=\"sd\">            in which case the value is set to 1.01.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">insulator_threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">insulator_threshold</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">perfect_conductor_threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">perfect_conductor_threshold</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s2\">&quot;1E+30&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">perfect_conductor_threshold</span> <span class=\"o\">&lt;</span> <span class=\"n\">insulator_threshold</span><span class=\"p\">:</span>\n                    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Perfect conductor threshold must be higher than insulator threshold.&quot;</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">magnetic_threshold</span><span class=\"p\">:</span>\n                <span class=\"n\">magnetic_threshold</span> <span class=\"o\">=</span> <span class=\"mf\">1.01</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">use_grpc_api</span><span class=\"p\">:</span>\n                <span class=\"n\">insulator_threshold</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">longdouble</span><span class=\"p\">(</span><span class=\"n\">insulator_threshold</span><span class=\"p\">)</span>\n                <span class=\"n\">perfect_conductor_threshold</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">longdouble</span><span class=\"p\">(</span><span class=\"n\">perfect_conductor_threshold</span><span class=\"p\">)</span>\n                <span class=\"n\">magnetic_threshold</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">longdouble</span><span class=\"p\">(</span><span class=\"n\">magnetic_threshold</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">SetMaterialThresholds</span><span class=\"p\">(</span><span class=\"n\">insulator_threshold</span><span class=\"p\">,</span> <span class=\"n\">perfect_conductor_threshold</span><span class=\"p\">,</span> <span class=\"n\">magnetic_threshold</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Q2d\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d/#pyaedt.q3d.Q2d\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Q2d</span><span class=\"p\">(</span><span class=\"n\">QExtractor</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Provides the Q2D app interface.</span>\n\n<span class=\"sd\">    This class allows you to create an instance of Q2D and link to an</span>\n<span class=\"sd\">    existing project or create a new one.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    projectname : str, optional</span>\n<span class=\"sd\">        Name of the project to select or the full path to the project</span>\n<span class=\"sd\">        or AEDTZ archive to open. The default is ``None``, in which</span>\n<span class=\"sd\">        case an attempt is made to get an active project. If no</span>\n<span class=\"sd\">        projects are present, an empty project is created.</span>\n<span class=\"sd\">    designname : str, optional</span>\n<span class=\"sd\">        Name of the design to select. The default is ``None``, in</span>\n<span class=\"sd\">        which case an attempt is made to get an active design. If no</span>\n<span class=\"sd\">        designs are present, an empty design is created.</span>\n<span class=\"sd\">    solution_type : str, optional</span>\n<span class=\"sd\">        Solution type to apply to the design. The default is</span>\n<span class=\"sd\">        ``None``, in which case the default type is applied.</span>\n<span class=\"sd\">    setup_name : str, optional</span>\n<span class=\"sd\">        Name of the setup to use as the nominal. The default is</span>\n<span class=\"sd\">        ``None``, in which case the active setup is used or</span>\n<span class=\"sd\">        nothing is used.</span>\n<span class=\"sd\">    specified_version : str, optional</span>\n<span class=\"sd\">        Version of AEDT to use. The default is ``None``, in which case</span>\n<span class=\"sd\">        the active version or latest installed version is used.  This</span>\n<span class=\"sd\">        parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    non_graphical : bool, optional</span>\n<span class=\"sd\">        Whether to launch AEDT in non-graphical mode. The default</span>\n<span class=\"sd\">        is ``False``, in which case AEDT is launched in graphical mode.</span>\n<span class=\"sd\">        This parameter is ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    new_desktop_session : bool, optional</span>\n<span class=\"sd\">        Whether to launch an instance of AEDT in a new thread, even if</span>\n<span class=\"sd\">        another instance of the ``specified_version`` is active on the</span>\n<span class=\"sd\">        machine. The default is ``True``. This parameter is ignored</span>\n<span class=\"sd\">        when a script is launched within AEDT.</span>\n<span class=\"sd\">    close_on_exit : bool, optional</span>\n<span class=\"sd\">        Whether to release AEDT on exit. The default is ``False``.</span>\n<span class=\"sd\">    student_version : bool, optional</span>\n<span class=\"sd\">        Whether to open the AEDT student version. This parameter is</span>\n<span class=\"sd\">        ignored when a script is launched within AEDT.</span>\n<span class=\"sd\">    machine : str, optional</span>\n<span class=\"sd\">        Machine name to connect the oDesktop session to. This works only in 2022 R2</span>\n<span class=\"sd\">        and later. The remote server must be up and running with the command</span>\n<span class=\"sd\">        `&quot;ansysedt.exe -grpcsrv portnum&quot;`. If the machine is `&quot;localhost&quot;`,</span>\n<span class=\"sd\">        the server also starts if not present.</span>\n<span class=\"sd\">    port : int, optional</span>\n<span class=\"sd\">        Port number on which to start the oDesktop communication on an already existing server.</span>\n<span class=\"sd\">        This parameter is ignored when creating a new server. It works only in 2022 R2 or later.</span>\n<span class=\"sd\">        The remote server must be up and running with the command `&quot;ansysedt.exe -grpcsrv portnum&quot;`.</span>\n<span class=\"sd\">    aedt_process_id : int, optional</span>\n<span class=\"sd\">        Process ID for the instance of AEDT to point PyAEDT at. The default is</span>\n<span class=\"sd\">        ``None``. This parameter is only used when ``new_desktop_session = False``.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    Create an instance of Q2D and link to a project named</span>\n<span class=\"sd\">    ``projectname``. If this project does not exist, create one with</span>\n<span class=\"sd\">    this name.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt import Q2d</span>\n<span class=\"sd\">    &gt;&gt;&gt; app = Q2d(projectname)</span>\n\n<span class=\"sd\">    Create an instance of Q2D and link to a design named</span>\n<span class=\"sd\">    ``designname`` in a project named ``projectname``.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; app = Q2d(projectname,designame)</span>\n\n<span class=\"sd\">    Create an instance of Q2D and open the specified project,</span>\n<span class=\"sd\">    which is named ``myfile.aedt``.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; app = Q2d(&quot;myfile.aedt&quot;)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>  <span class=\"c1\"># for legacy purposes</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dim</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Dimension.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">dimension</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">projectname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">designname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solution_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">specified_version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_graphical</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">new_desktop_session</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_on_exit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">student_version</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">aedt_process_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">QExtractor</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;2D Extractor&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">projectname</span><span class=\"p\">,</span>\n            <span class=\"n\">designname</span><span class=\"p\">,</span>\n            <span class=\"n\">solution_type</span><span class=\"p\">,</span>\n            <span class=\"n\">setup_name</span><span class=\"p\">,</span>\n            <span class=\"n\">specified_version</span><span class=\"p\">,</span>\n            <span class=\"n\">non_graphical</span><span class=\"p\">,</span>\n            <span class=\"n\">new_desktop_session</span><span class=\"p\">,</span>\n            <span class=\"n\">close_on_exit</span><span class=\"p\">,</span>\n            <span class=\"n\">student_version</span><span class=\"p\">,</span>\n            <span class=\"n\">machine</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">aedt_process_id</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MATRIXOPERATIONS</span> <span class=\"o\">=</span> <span class=\"n\">MATRIXOPERATIONSQ2D</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Q2d.create_rectangle\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.create_rectangle/#pyaedt.q3d.Q2d.create_rectangle\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_rectangle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">dimension_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create a rectangle.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y]`` coordinates for the starting point of the rectangle.</span>\n<span class=\"sd\">        dimension_list : list</span>\n<span class=\"sd\">            List of ``[width, height]`` dimensions.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the rectangle. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default name is assigned.</span>\n<span class=\"sd\">        matname : str, optional</span>\n<span class=\"sd\">            Name of the material. The default is ``None``, in which case</span>\n<span class=\"sd\">            the default material is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.object3d.Object3d`</span>\n<span class=\"sd\">            3D object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.CreateRectangle</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">create_rectangle</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">dimension_list</span><span class=\"o\">=</span><span class=\"n\">dimension_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Q2d.assign_single_signal_line\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.assign_single_signal_line/#pyaedt.q3d.Q2d.assign_single_signal_line\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_single_signal_line</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target_objects</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">solve_option</span><span class=\"o\">=</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;um&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign the conductor type to sheets.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        target_objects : list</span>\n<span class=\"sd\">            List of Object3D.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the conductor. The default is ``&quot;&quot;``, in which case the default name is used.</span>\n<span class=\"sd\">        solve_option : str, optional</span>\n<span class=\"sd\">            Method for solving. Options are ``&quot;SolveInside&quot;``, ``&quot;SolveOnBoundary&quot;``, and ``&quot;Automatic&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;SolveInside&quot;``.</span>\n<span class=\"sd\">        thickness : float, optional</span>\n<span class=\"sd\">            Conductor thickness. The default is ``None``, in which case the conductor thickness</span>\n<span class=\"sd\">            is obtained by dividing the conductor&#39;s area by its perimeter (A/p). If multiple</span>\n<span class=\"sd\">            conductors are selected, the average conductor thickness is used.</span>\n<span class=\"sd\">        unit : str, optional</span>\n<span class=\"sd\">            Thickness unit. The default is ``&quot;um&quot;``.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSingleSignalLine</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSingleReferenceGround</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;`assign_single_signal_line` is deprecated. Use `assign_single_conductor` instead.&quot;</span><span class=\"p\">,</span> <span class=\"ne\">DeprecationWarning</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assign_single_conductor</span><span class=\"p\">(</span><span class=\"n\">target_objects</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SignalLine&quot;</span><span class=\"p\">,</span> <span class=\"n\">solve_option</span><span class=\"p\">,</span> <span class=\"n\">thickness</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Q2d.assign_single_conductor\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.assign_single_conductor/#pyaedt.q3d.Q2d.assign_single_conductor\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_single_conductor</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">target_objects</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">conductor_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;SignalLine&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">solve_option</span><span class=\"o\">=</span><span class=\"s2\">&quot;SolveInside&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;um&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Assign the conductor type to sheets.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        target_objects : list</span>\n<span class=\"sd\">            List of Object3D.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the conductor. The default is ``&quot;&quot;``, in which case the default name is used.</span>\n<span class=\"sd\">        conductor_type : str</span>\n<span class=\"sd\">            Type of the conductor. Options are ``&quot;SignalLine&quot;`` and ``&quot;ReferenceGround&quot;``. The default is</span>\n<span class=\"sd\">            ``&quot;SignalLine&quot;``.</span>\n<span class=\"sd\">        solve_option : str, optional</span>\n<span class=\"sd\">            Method for solving. Options are ``&quot;SolveInside&quot;``, ``&quot;SolveOnBoundary&quot;``, and ``&quot;Automatic&quot;``.</span>\n<span class=\"sd\">            The default is ``&quot;SolveInside&quot;``.</span>\n<span class=\"sd\">        thickness : float, optional</span>\n<span class=\"sd\">            Conductor thickness. The default is ``None``, in which case the conductor thickness is obtained by dividing</span>\n<span class=\"sd\">            the conductor&#39;s area by its perimeter (A/p). If multiple conductors are selected, the average conductor</span>\n<span class=\"sd\">            thickness is used.</span>\n<span class=\"sd\">        unit : str, optional</span>\n<span class=\"sd\">            Thickness unit. The default is ``&quot;um&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Source object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSingleSignalLine</span>\n<span class=\"sd\">        &gt;&gt;&gt; oModule.AssignSingleReferenceGround</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">target_objects</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">target_objects</span>\n            <span class=\"n\">obj_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">target_objects</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">target_objects</span><span class=\"p\">]</span>\n            <span class=\"n\">obj_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">target_objects</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">thickness</span><span class=\"p\">:</span>\n            <span class=\"n\">t_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">t_obj</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n                <span class=\"n\">perimeter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">for</span> <span class=\"n\">edge</span> <span class=\"ow\">in</span> <span class=\"n\">t_obj</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">:</span>\n                    <span class=\"n\">perimeter</span> <span class=\"o\">=</span> <span class=\"n\">perimeter</span> <span class=\"o\">+</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">length</span>\n                <span class=\"n\">t_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t_obj</span><span class=\"o\">.</span><span class=\"n\">faces</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">area</span> <span class=\"o\">/</span> <span class=\"n\">perimeter</span><span class=\"p\">)</span>\n            <span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">t_list</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">t_list</span><span class=\"p\">)</span>\n\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">obj_names</span><span class=\"p\">,</span> <span class=\"s2\">&quot;SolveOption&quot;</span><span class=\"p\">:</span> <span class=\"n\">solve_option</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Thickness&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">thickness</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span><span class=\"p\">})</span>\n\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">conductor_type</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q2d.assign_huray_finitecond_to_edges\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.assign_huray_finitecond_to_edges/#pyaedt.q3d.Q2d.assign_huray_finitecond_to_edges\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_huray_finitecond_to_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">&quot;um&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Assign the Huray surface roughness model to edges.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edges :</span>\n<span class=\"sd\">        radius :</span>\n<span class=\"sd\">        ratio :</span>\n<span class=\"sd\">        unit : str, optional</span>\n<span class=\"sd\">            The default is ``&quot;um&quot;``.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            The default is ``&quot;&quot;``, in which case the default name is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        :class:`pyaedt.modules.Boundary.BoundaryObject`</span>\n<span class=\"sd\">            Source object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oMdoule.AssignFiniteCond</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">generate_unique_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">ra</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">unit</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ra</span> <span class=\"o\">=</span> <span class=\"n\">radius</span>\n\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Edges&quot;</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s2\">&quot;UseCoating&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Radius&quot;</span><span class=\"p\">:</span> <span class=\"n\">ra</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Ratio&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ratio</span><span class=\"p\">)})</span>\n\n        <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Finite Conductivity&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"Q2d.auto_assign_conductors\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.auto_assign_conductors/#pyaedt.q3d.Q2d.auto_assign_conductors\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">auto_assign_conductors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Automatically assign conductors to signal lines.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">original_nets</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetExcitations</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">AutoAssignSignals</span><span class=\"p\">()</span>\n        <span class=\"n\">new_nets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetExcitations</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">original_nets</span><span class=\"p\">]</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">):</span>\n            <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modeler</span><span class=\"o\">.</span><span class=\"n\">convert_to_selections</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">GetExcitationAssignment</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))],</span> <span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">props</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">({</span><span class=\"s2\">&quot;Objects&quot;</span><span class=\"p\">:</span> <span class=\"n\">objects</span><span class=\"p\">})</span>\n            <span class=\"n\">bound</span> <span class=\"o\">=</span> <span class=\"n\">BoundaryObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_nets</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">props</span><span class=\"p\">,</span> <span class=\"n\">new_nets</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bound</span><span class=\"p\">)</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"n\">new_nets</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> Nets have been identified: </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">),</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">new_nets</span><span class=\"p\">)))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;No new nets identified&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Q2d.export_w_elements\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.export_w_elements/#pyaedt.q3d.Q2d.export_w_elements\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export_w_elements</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">analyze</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">export_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Export all W-elements to files.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        analyze : bool, optional</span>\n<span class=\"sd\">            Whether to analyze before export. Solutions must be present for the design.</span>\n<span class=\"sd\">            The default is ``False``.</span>\n<span class=\"sd\">        export_folder : str, optional</span>\n<span class=\"sd\">            Full path to the folder to export files to. The default is ``None``, in</span>\n<span class=\"sd\">            which case the working directory is used.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of all exported files.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">exported_files</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">export_folder</span><span class=\"p\">:</span>\n            <span class=\"n\">export_folder</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">working_directory</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">):</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">analyze</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">analyze_all</span><span class=\"p\">()</span>\n        <span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSetups</span><span class=\"p\">()</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">setups</span><span class=\"p\">:</span>\n            <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">GetSweeps</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                <span class=\"n\">sweeps</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;LastAdaptive&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">sweep</span> <span class=\"ow\">in</span> <span class=\"n\">sweeps</span><span class=\"p\">:</span>\n                <span class=\"n\">variation_array</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_of_variations</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">)</span>\n                <span class=\"n\">solution_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> : </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">variation_array</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">export_file</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">.sp&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">)</span>\n                        <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"n\">export_file</span><span class=\"p\">)</span>\n                        <span class=\"n\">subckt_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;w_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">ExportCircuit</span><span class=\"p\">(</span>\n                            <span class=\"n\">solution_name</span><span class=\"p\">,</span>\n                            <span class=\"n\">variation_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                            <span class=\"n\">export_path</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span>\n                                <span class=\"s2\">&quot;NAME:CircuitData&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;MatrixName:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;Original&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;NumberOfCells:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;UserHasChangedSettings:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;IncludeCap:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;IncludeCond:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CouplingLimits&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CouplingLimitType:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;None&quot;</span><span class=\"p\">],</span>\n                                <span class=\"s2\">&quot;IncludeR:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;IncludeL:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;ExportDistributed:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;LumpedLength:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;1meter&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;RiseTime:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;1e-09s&quot;</span><span class=\"p\">,</span>\n                            <span class=\"p\">],</span>\n                            <span class=\"n\">subckt_name</span><span class=\"p\">,</span>\n                            <span class=\"s2\">&quot;WElement&quot;</span><span class=\"p\">,</span>\n                            <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exported W-element: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export W-element failed&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">varCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">for</span> <span class=\"n\">variation</span> <span class=\"ow\">in</span> <span class=\"n\">variation_array</span><span class=\"p\">:</span>\n                        <span class=\"n\">varCount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">export_file</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">.sp&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">sweep</span><span class=\"p\">,</span> <span class=\"n\">varCount</span><span class=\"p\">)</span>\n                            <span class=\"n\">export_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">export_folder</span><span class=\"p\">,</span> <span class=\"n\">export_file</span><span class=\"p\">)</span>\n                            <span class=\"n\">subckt_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;w_</span><span class=\"si\">{}</span><span class=\"s2\">_</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_name</span><span class=\"p\">,</span> <span class=\"n\">varCount</span><span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oanalysis</span><span class=\"o\">.</span><span class=\"n\">ExportCircuit</span><span class=\"p\">(</span>\n                                <span class=\"n\">solution_name</span><span class=\"p\">,</span>\n                                <span class=\"n\">variation</span><span class=\"p\">,</span>\n                                <span class=\"n\">export_path</span><span class=\"p\">,</span>\n                                <span class=\"p\">[</span>\n                                    <span class=\"s2\">&quot;NAME:CircuitData&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;MatrixName:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;Original&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;NumberOfCells:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;UserHasChangedSettings:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;IncludeCap:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;IncludeCond:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                    <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CouplingLimits&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CouplingLimitType:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;None&quot;</span><span class=\"p\">],</span>\n                                    <span class=\"s2\">&quot;IncludeR:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;IncludeL:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">False</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;ExportDistributed:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;LumpedLength:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;1meter&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;RiseTime:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;1e-09s&quot;</span><span class=\"p\">,</span>\n                                <span class=\"p\">],</span>\n                                <span class=\"n\">subckt_name</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;WElement&quot;</span><span class=\"p\">,</span>\n                                <span class=\"mi\">0</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                            <span class=\"n\">exported_files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">export_path</span><span class=\"p\">)</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exported W-element: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"p\">)</span>\n                        <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Export W-element failed&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">exported_files</span></div>\n\n<div class=\"viewcode-block\" id=\"Q2d.toggle_conductor_type\"><a class=\"viewcode-back\" href=\"../../../API/_autosummary/pyaedt.q3d.Q2d.toggle_conductor_type/#pyaedt.q3d.Q2d.toggle_conductor_type\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">toggle_conductor_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conductor_name</span><span class=\"p\">,</span> <span class=\"n\">new_type</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Change the conductor type.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        conductor_name : str</span>\n<span class=\"sd\">            Name of the conductor to update.</span>\n<span class=\"sd\">        new_type : str</span>\n<span class=\"sd\">            New conductor type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">oboundary</span><span class=\"o\">.</span><span class=\"n\">ToggleConductor</span><span class=\"p\">(</span><span class=\"n\">conductor_name</span><span class=\"p\">,</span> <span class=\"n\">new_type</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">bound</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">conductor_name</span><span class=\"p\">:</span>\n                    <span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">new_type</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Conductor type correctly updated&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error in updating conductor type&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/q3d", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}