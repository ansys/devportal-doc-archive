{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.application.Variables", "body": "<h1>Source code for pyaedt.application.Variables</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains these classes: `CSVDataset`, `DataSet`, `Expression`, `Variable`, and `VariableManager`.</span>\n\n<span class=\"sd\">This module is used to create and edit design and project variables in the 3D tools.</span>\n\n<span class=\"sd\">Examples</span>\n<span class=\"sd\">--------</span>\n<span class=\"sd\">&gt;&gt;&gt; from pyaedt import Hfss</span>\n<span class=\"sd\">&gt;&gt;&gt; hfss = Hfss()</span>\n<span class=\"sd\">&gt;&gt;&gt; hfss[&quot;$d&quot;] = &quot;5mm&quot;</span>\n<span class=\"sd\">&gt;&gt;&gt; hfss[&quot;d&quot;] = &quot;5mm&quot;</span>\n<span class=\"sd\">&gt;&gt;&gt; hfss[&quot;postd&quot;] = &quot;1W&quot;</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>  <span class=\"c1\"># noreorder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">division</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AEDT_UNITS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SI_UNITS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">_resolve_unit_system</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">unit_system</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_array</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_number</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">open_file</span>\n\n\n<div class=\"viewcode-block\" id=\"CSVDataset\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.CSVDataset/#pyaedt.application.Variables.CSVDataset\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">CSVDataset</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Reads in a CSV file and extracts data, which can be augmented with constant values.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    csv_file : str, optional</span>\n<span class=\"sd\">        Input file consisting of delimited data with the first line as the header.</span>\n<span class=\"sd\">        The CSV value includes the header and data, which supports AEDT units information</span>\n<span class=\"sd\">        such as ``&quot;1.23Wb&quot;``. You can also augment the data with constant values.</span>\n<span class=\"sd\">    separator : str, optional</span>\n<span class=\"sd\">        Value to use for the delimiter. The default is``None`` in which case a comma is</span>\n<span class=\"sd\">        assumed.</span>\n<span class=\"sd\">    units_dict : dict, optional</span>\n<span class=\"sd\">        Dictionary consisting of ``{Variable Name: unit}`` to rescale the data</span>\n<span class=\"sd\">        if it is not in the desired unit system.</span>\n<span class=\"sd\">    append_dict : dict, optional</span>\n<span class=\"sd\">        Dictionary consisting of ``{New Variable Name: value}`` to add variables</span>\n<span class=\"sd\">        with constant values to all data points. This dictionary is used to add</span>\n<span class=\"sd\">        multiple sweeps to one result file.</span>\n<span class=\"sd\">    valid_solutions : bool, optional</span>\n<span class=\"sd\">        The default is ``True``.</span>\n<span class=\"sd\">    invalid_solutions : bool, optional</span>\n<span class=\"sd\">        The default is ``False``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">number_of_rows</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Number of rows.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">data_list</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data_list</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">number_of_columns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Number of columns.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Header.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Data.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_csv_file</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">csv_file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">units_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">append_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">valid_solutions</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">invalid_solutions</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unit_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_append_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"c1\"># Set the index counter explicitly to zero</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">separator</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_separator</span> <span class=\"o\">=</span> <span class=\"n\">separator</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_separator</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">units_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unit_dict</span> <span class=\"o\">=</span> <span class=\"n\">units_dict</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">append_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_append_dict</span> <span class=\"o\">=</span> <span class=\"n\">append_dict</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_csv_file</span> <span class=\"o\">=</span> <span class=\"n\">csv_file</span>\n        <span class=\"k\">if</span> <span class=\"n\">csv_file</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">csv_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fi</span><span class=\"p\">:</span>\n                <span class=\"n\">file_data</span> <span class=\"o\">=</span> <span class=\"n\">fi</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">file_data</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"p\">:</span>\n                        <span class=\"n\">line_data</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_separator</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># Check for invalid data in the line (fields with &#39;nan&#39;)</span>\n                        <span class=\"k\">if</span> <span class=\"s2\">&quot;nan&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">line_data</span><span class=\"p\">:</span>\n                            <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">line_data</span><span class=\"p\">):</span>\n                                <span class=\"n\">var_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n                                <span class=\"k\">if</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unit_dict</span><span class=\"p\">:</span>\n                                    <span class=\"n\">var_value</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rescale_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unit_dict</span><span class=\"p\">[</span><span class=\"n\">var_name</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n                                <span class=\"k\">else</span><span class=\"p\">:</span>\n                                    <span class=\"n\">var_value</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">var_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">var_value</span><span class=\"p\">)</span>\n\n                            <span class=\"c1\"># Add augmented quantities</span>\n                            <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_append_dict</span><span class=\"p\">:</span>\n                                <span class=\"n\">var_value_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_append_dict</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">]</span>\n                                <span class=\"n\">numeric_value</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">var_value_str</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n                                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">numeric_value</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">additional_quantity_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_append_dict</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">additional_quantity_name</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">quantity_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">quantity_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">variable_list</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">data_out</span> <span class=\"o\">=</span> <span class=\"n\">CSVDataset</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">variable</span> <span class=\"ow\">in</span> <span class=\"n\">variable_list</span><span class=\"p\">:</span>\n            <span class=\"n\">found_variable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">for</span> <span class=\"n\">key_string</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">variable</span> <span class=\"ow\">in</span> <span class=\"n\">key_string</span><span class=\"p\">:</span>\n                    <span class=\"n\">found_variable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">break</span>\n            <span class=\"k\">assert</span> <span class=\"n\">found_variable</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Input string </span><span class=\"si\">{}</span><span class=\"s2\"> is not a key of the data dictionary.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"p\">)</span>\n            <span class=\"n\">data_out</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">variable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">key_string</span><span class=\"p\">]</span>\n            <span class=\"n\">data_out</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">data_out</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_of_columns</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">number_of_columns</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Inconsistent number of columns&quot;</span>\n        <span class=\"c1\"># Create a new object to return, avoiding changing the original inputs</span>\n        <span class=\"n\">new_dataset</span> <span class=\"o\">=</span> <span class=\"n\">CSVDataset</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Add empty columns to new_dataset</span>\n        <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">:</span>\n            <span class=\"n\">new_dataset</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Add the data from &#39;self&#39; to a the new dataset</span>\n        <span class=\"k\">for</span> <span class=\"n\">column</span><span class=\"p\">,</span> <span class=\"n\">row_data</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">row_data</span><span class=\"p\">:</span>\n                <span class=\"n\">new_dataset</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Add the data from &#39;other&#39; to a the new dataset</span>\n        <span class=\"k\">for</span> <span class=\"n\">column</span><span class=\"p\">,</span> <span class=\"n\">row_data</span> <span class=\"ow\">in</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">row_data</span><span class=\"p\">:</span>\n                <span class=\"n\">new_dataset</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_dataset</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iadd__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Incrementally add the dataset in one CSV file to a dataset in another CSV file.</span>\n\n<span class=\"sd\">        .. note:</span>\n<span class=\"sd\">           This assumes that the number of columns in both datasets are the same,</span>\n<span class=\"sd\">           or that one of the datasets is empty. No checking is done for</span>\n<span class=\"sd\">           equivalency of units or variable names.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Handle the case of an empty data set and create empty lists for the column data</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_of_columns</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">header</span>\n            <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_of_columns</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">number_of_columns</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Inconsistent number of columns&quot;</span>\n\n        <span class=\"c1\"># Append the data from &#39;other&#39;</span>\n        <span class=\"k\">for</span> <span class=\"n\">column</span><span class=\"p\">,</span> <span class=\"n\">row_data</span> <span class=\"ow\">in</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">row_data</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"c1\"># Called when iteration is initialized</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"c1\"># Create an iterator to yield the row data as a string as we loop through the object</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__next__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_of_rows</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_header</span><span class=\"p\">:</span>\n                <span class=\"n\">evaluated_value</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span><span class=\"p\">])</span>\n                <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">evaluated_value</span><span class=\"p\">)</span>\n            <span class=\"n\">output_string</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">StopIteration</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">output_string</span>\n\n<div class=\"viewcode-block\" id=\"CSVDataset.next\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.CSVDataset.next/#pyaedt.application.Variables.CSVDataset.next\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Yield the next row.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__next__</span><span class=\"p\">()</span></div></div>\n\n\n<span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">_find_units_in_dependent_variables</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">,</span> <span class=\"n\">full_variables</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n    <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;[0-9.]+ *([a-z_A-Z]+)&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable_value</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">))</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">m2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">unit_system</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n                <span class=\"k\">return</span> <span class=\"n\">SI_UNITS</span><span class=\"p\">[</span><span class=\"n\">unit_system</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;(?&lt;=[/+-/*//^/(/[])([a-z_A-Z/$]\\w*)&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable_value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^([a-z_A-Z/$]\\w*)&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable_value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">full_variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">m</span> <span class=\"ow\">and</span> <span class=\"n\">_find_units_in_dependent_variables</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">_find_units_in_dependent_variables</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n\n<span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">,</span> <span class=\"n\">full_variables</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Decompose a variable value.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    variable_value : float</span>\n<span class=\"sd\">    full_variables : dict</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    -------</span>\n<span class=\"sd\">    tuples</span>\n<span class=\"sd\">        tuples made of the float value of the variable and the units exposed as a string.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># set default return values - then check for valid units</span>\n    <span class=\"n\">float_value</span> <span class=\"o\">=</span> <span class=\"n\">variable_value</span>\n    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">):</span>\n        <span class=\"n\">float_value</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">variable_value</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;nan&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle a numerical value in string form</span>\n            <span class=\"n\">float_value</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># search for a valid units string at the end of the variable_value</span>\n            <span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">&quot;[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable_value</span><span class=\"p\">)</span>\n            <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">_find_units_in_dependent_variables</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">,</span> <span class=\"n\">full_variables</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">loc</span><span class=\"p\">:</span>\n                <span class=\"n\">loc_units</span> <span class=\"o\">=</span> <span class=\"n\">loc</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">extract_units</span> <span class=\"o\">=</span> <span class=\"n\">variable_value</span><span class=\"p\">[</span><span class=\"n\">loc_units</span><span class=\"p\">:]</span>\n                <span class=\"n\">chars</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;+*/()[]&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">((</span><span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">chars</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">extract_units</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">variable_value</span><span class=\"p\">,</span> <span class=\"n\">units</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">float_value</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">variable_value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">loc_units</span><span class=\"p\">])</span>\n                    <span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">extract_units</span>\n                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                    <span class=\"n\">float_value</span> <span class=\"o\">=</span> <span class=\"n\">variable_value</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">float_value</span><span class=\"p\">,</span> <span class=\"n\">units</span>\n\n\n<div class=\"viewcode-block\" id=\"VariableManager\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.VariableManager/#pyaedt.application.Variables.VariableManager\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">VariableManager</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Manages design properties and project variables.</span>\n\n<span class=\"sd\">    Design properties are the local variables in a design. Project</span>\n<span class=\"sd\">    variables are defined at the project level and start with ``$``.</span>\n\n<span class=\"sd\">    This class provides access to all variables or a subset of the</span>\n<span class=\"sd\">    variables. Manipulation of the numerical or string definitions of</span>\n<span class=\"sd\">    variable values is provided in the</span>\n<span class=\"sd\">    :class:`pyaedt.application.Variables.Variable` class.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    variables : dict</span>\n<span class=\"sd\">        Dictionary of all design properties and project variables in</span>\n<span class=\"sd\">        the active design.</span>\n<span class=\"sd\">    design_variables : dict</span>\n<span class=\"sd\">        Dictionary of all design properties in the active design.</span>\n<span class=\"sd\">    project_variables : dict</span>\n<span class=\"sd\">        Dictionary of all project variables available to the active</span>\n<span class=\"sd\">        design (key by variable name).</span>\n<span class=\"sd\">    dependent_variables : dict</span>\n<span class=\"sd\">        Dictionary of all dependent variables available to the active</span>\n<span class=\"sd\">        design (key by variable name).</span>\n<span class=\"sd\">    independent_variables : dict</span>\n<span class=\"sd\">       Dictionary of all independent variables (constant numeric</span>\n<span class=\"sd\">       values) available to the active design (key by variable name).</span>\n<span class=\"sd\">    independent_design_variables : dict</span>\n\n<span class=\"sd\">    independent_project_variables : dict</span>\n\n<span class=\"sd\">    variable_names : str or list</span>\n<span class=\"sd\">        One or more variable names.</span>\n<span class=\"sd\">    project_variable_names : str or list</span>\n<span class=\"sd\">        One or more project variable names.</span>\n<span class=\"sd\">    design_variable_names : str or list</span>\n<span class=\"sd\">        One or more design variable names.</span>\n<span class=\"sd\">    dependent_variable_names : str or list</span>\n<span class=\"sd\">        All dependent variable names within the project.</span>\n<span class=\"sd\">    independent_variable_names : list of str</span>\n<span class=\"sd\">        All independent variable names within the project. These can</span>\n<span class=\"sd\">        be sweep variables for optimetrics.</span>\n<span class=\"sd\">    independent_project_variable_names : str or list</span>\n<span class=\"sd\">        All independent project variable names within the</span>\n<span class=\"sd\">        project. These can be sweep variables for optimetrics.</span>\n<span class=\"sd\">    independent_design_variable_names : str or list</span>\n<span class=\"sd\">        All independent design properties (local variables) within the</span>\n<span class=\"sd\">        project. These can be sweep variables for optimetrics.</span>\n\n<span class=\"sd\">    See Also</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    pyaedt.application.Variables.Variable</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.maxwell import Maxwell3d</span>\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.desktop import Desktop</span>\n<span class=\"sd\">    &gt;&gt;&gt; d = Desktop()</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp = Maxwell3d()</span>\n\n<span class=\"sd\">    Define some test variables.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp[&quot;Var1&quot;] = 3</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp[&quot;Var2&quot;] = &quot;12deg&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp[&quot;Var3&quot;] = &quot;Var1 * Var2&quot;</span>\n<span class=\"sd\">    &gt;&gt;&gt; aedtapp[&quot;$PrjVar1&quot;] = &quot;pi&quot;</span>\n\n<span class=\"sd\">    Get the variable manager for the active design.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v = aedtapp.variable_manager</span>\n\n<span class=\"sd\">    Get a dictionary of all project and design variables.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v.variables</span>\n<span class=\"sd\">    {&#39;Var1&#39;: &lt;pyaedt.application.Variables.Variable at 0x2661f34c448&gt;,</span>\n<span class=\"sd\">     &#39;Var2&#39;: &lt;pyaedt.application.Variables.Variable at 0x2661f34c308&gt;,</span>\n<span class=\"sd\">     &#39;Var3&#39;: &lt;pyaedt.application.Variables.Expression at 0x2661f34cb48&gt;,</span>\n<span class=\"sd\">     &#39;$PrjVar1&#39;: &lt;pyaedt.application.Variables.Expression at 0x2661f34cc48&gt;}</span>\n\n<span class=\"sd\">    Get a dictionary of only the design variables.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v.design_variables</span>\n<span class=\"sd\">    {&#39;Var1&#39;: &lt;pyaedt.application.Variables.Variable at 0x2661f339508&gt;,</span>\n<span class=\"sd\">     &#39;Var2&#39;: &lt;pyaedt.application.Variables.Variable at 0x2661f3415c8&gt;,</span>\n<span class=\"sd\">     &#39;Var3&#39;: &lt;pyaedt.application.Variables.Expression at 0x2661f341808&gt;}</span>\n\n<span class=\"sd\">    Get a dictionary of only the independent design variables.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v.independent_design_variables</span>\n<span class=\"sd\">    {&#39;Var1&#39;: &lt;pyaedt.application.Variables.Variable at 0x2661f335d08&gt;,</span>\n<span class=\"sd\">     &#39;Var2&#39;: &lt;pyaedt.application.Variables.Variable at 0x2661f3557c8&gt;}</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the `Variable` objects for each project variable and each</span>\n<span class=\"sd\">            design property in the active design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">design_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Design variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the design properties (local properties) in the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">project_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Project variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the project properties.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post_processing_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Post Processing variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the post processing variables (constant numeric</span>\n<span class=\"sd\">            values) available to the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">all_post_vars</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">GetPostProcessingVariables</span><span class=\"p\">())</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">all_post_vars</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_variables</span>\n        <span class=\"n\">post_vars</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">all_post_vars</span><span class=\"p\">:</span>\n                <span class=\"n\">post_vars</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"k\">return</span> <span class=\"n\">post_vars</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">independent_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Independent variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the independent variables (constant numeric</span>\n<span class=\"sd\">            values) available to the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"p\">],</span> <span class=\"n\">dependent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">independent_project_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Independent project variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the independent project variables available to the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"p\">],</span> <span class=\"n\">dependent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">independent_design_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Independent design variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the independent design properties (local</span>\n<span class=\"sd\">            variables) available to the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"p\">],</span> <span class=\"n\">dependent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dependent_variables</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Dependent variables.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the dependent design properties (local</span>\n<span class=\"sd\">            variables) and project variables available to the design.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_dict</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"p\">],</span> <span class=\"n\">independent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of variables.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">project_variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of project variables.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project_variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">independent_project_variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of independent project variables.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">independent_project_variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">design_variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of design variables.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">design_variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">independent_design_variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of independent design variables.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">independent_design_variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">independent_variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of independent variables.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">independent_variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dependent_variable_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of dependent variables.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariables</span>\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetChildObject(&quot;Variables&quot;).GetChildNames</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetChildObject(&quot;Variables&quot;).GetChildNames&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">var_name</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dependent_variables</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_oproject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Project.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_oproject</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_odesign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Design.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_logger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Logger.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Global Desktop Environment</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__delitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Implement del with array name or index.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete_variable</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">:</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable_name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"n\">variable_name</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_variable_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">dependent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">independent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the variable dictionary.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        object_list : list</span>\n<span class=\"sd\">            List of objects.</span>\n<span class=\"sd\">        dependent : bool, optional</span>\n<span class=\"sd\">             Whether to include dependent variables. The default is ``True``.</span>\n<span class=\"sd\">        independent : bool, optional</span>\n<span class=\"sd\">             Whether to include independent variables. The default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict</span>\n<span class=\"sd\">            Dictionary of the specified variables.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">all_names</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n            <span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_var_list_from_aedt</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">variable_name</span> <span class=\"ow\">in</span> <span class=\"n\">variables</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">variable_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_expression</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">):</span>\n                        <span class=\"n\">variable_expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_expression</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">)</span>\n                        <span class=\"n\">all_names</span><span class=\"p\">[</span><span class=\"n\">variable_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">variable_expression</span>\n                        <span class=\"n\">si_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_evaluated_value</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">)</span>\n                        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span>\n                            <span class=\"n\">variable_expression</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">si_value</span><span class=\"p\">,</span> <span class=\"n\">all_names</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">variable_name</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">is_number_flag</span> <span class=\"o\">=</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">_calculated_value</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">independent</span> <span class=\"ow\">and</span> <span class=\"n\">is_number_flag</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">[</span><span class=\"n\">variable_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n                        <span class=\"k\">elif</span> <span class=\"n\">dependent</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">is_number_flag</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">[</span><span class=\"n\">variable_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span>\n\n<div class=\"viewcode-block\" id=\"VariableManager.get_expression\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.VariableManager.get_expression/#pyaedt.application.Variables.VariableManager.get_expression\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_expression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the variable value of a project or design variable as a string.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.GetVariableValue</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.GetVariableValue</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">invalid_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;CosimDefinition&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CoSimulator&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CoSimulator/Choices&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;InstanceName&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ModelName&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">variable_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">invalid_names</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetVariableValue</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"VariableManager.aedt_object\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.VariableManager.aedt_object/#pyaedt.application.Variables.VariableManager.aedt_object\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">aedt_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve an AEDT object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        variable : str</span>\n<span class=\"sd\">        Name of the variable.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">variable</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;$&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span></div>\n\n<div class=\"viewcode-block\" id=\"VariableManager.set_variable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.VariableManager.set_variable/#pyaedt.application.Variables.VariableManager.set_variable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_variable</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">variable_name</span><span class=\"p\">,</span>\n        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">readonly</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">postprocessing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">circuit_parameter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Set the value of a design property or project variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        variable_name : str</span>\n<span class=\"sd\">            Name of the design property or project variable</span>\n<span class=\"sd\">            (``$var``). If this variable does not exist, a new one is</span>\n<span class=\"sd\">            created and a value is set.</span>\n<span class=\"sd\">        expression : str</span>\n<span class=\"sd\">            Valid string expression within the AEDT design and project</span>\n<span class=\"sd\">            structure.  For example, ``&quot;3*cos(34deg)&quot;``.</span>\n<span class=\"sd\">        readonly : bool, optional</span>\n<span class=\"sd\">            Whether to set the design property or project variable to</span>\n<span class=\"sd\">            read-only. The default is ``False``.</span>\n<span class=\"sd\">        hidden :  bool, optional</span>\n<span class=\"sd\">            Whether to hide the design property or project variable. The</span>\n<span class=\"sd\">            default is ``False``.</span>\n<span class=\"sd\">        description : str, optional</span>\n<span class=\"sd\">            Text to display for the design property or project variable in the</span>\n<span class=\"sd\">            ``Properties`` window. The default is ``None``.</span>\n<span class=\"sd\">        overwrite : bool, optional</span>\n<span class=\"sd\">            Whether to overwrite an existing value for the design</span>\n<span class=\"sd\">            property or project variable. The default is ``False``, in</span>\n<span class=\"sd\">            which case this method is ignored.</span>\n<span class=\"sd\">        postprocessing : bool, optional</span>\n<span class=\"sd\">            Whether to define a postprocessing variable.</span>\n<span class=\"sd\">             The default is ``False``, in which case the variable is not used in postprocessing.</span>\n<span class=\"sd\">        circuit_parameter : bool, optional</span>\n<span class=\"sd\">            Whether to define a parameter in a circuit design or a local parameter.</span>\n<span class=\"sd\">             The default is ``True``, in which case a circuit variable is created as a parameter default.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">             ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.ChangeProperty</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ChangeProperty</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Set the value of design property ``p1`` to ``&quot;10mm&quot;``,</span>\n<span class=\"sd\">        creating the property if it does not already eixst.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp.variable_manager.set_variable(&quot;p1&quot;, expression=&quot;10mm&quot;)</span>\n\n<span class=\"sd\">        Set the value of design property ``p1`` to ``&quot;20mm&quot;`` only if</span>\n<span class=\"sd\">        the property does not already exist.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp.variable_manager.set_variable(&quot;p1&quot;, expression=&quot;20mm&quot;, overwrite=False)</span>\n\n<span class=\"sd\">        Set the value of design property ``p2`` to ``&quot;10mm&quot;``,</span>\n<span class=\"sd\">        creating the property if it does not already exist. Also make</span>\n<span class=\"sd\">        it read-only and hidden and add a description.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp.variable_manager.set_variable(variable_name=&quot;p2&quot;, expression=&quot;10mm&quot;, readonly=True, hidden=True,</span>\n<span class=\"sd\">        ...                                       description=&quot;This is the description of this variable.&quot;)</span>\n\n<span class=\"sd\">        Set the value of the project variable ``$p1`` to ``&quot;30mm&quot;``,</span>\n<span class=\"sd\">        creating the variable if it does not exist.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; aedtapp.variable_manager.set_variable[&quot;$p1&quot;] == &quot;30mm&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">variable_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">:</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variables</span><span class=\"p\">[</span><span class=\"n\">variable_name</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">description</span><span class=\"p\">:</span>\n            <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n        <span class=\"n\">desktop_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">variable_name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">tab_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ProjectVariableTab&quot;</span>\n            <span class=\"n\">prop_server</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ProjectVariables&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">tab_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LocalVariableTab&quot;</span>\n            <span class=\"n\">prop_server</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LocalVariables&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">circuit_parameter</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">]:</span>\n                <span class=\"n\">tab_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DefinitionParameterTab&quot;</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">prop_server</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Instance:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n\n        <span class=\"n\">prop_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;VariableProp&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">postprocessing</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;post&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">variable_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n            <span class=\"n\">prop_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;PostProcessingVariableProp&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Handle string type variable (including arbitrary expression)# Handle input type variable</span>\n            <span class=\"n\">variable</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Handle input type variable</span>\n            <span class=\"n\">variable</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">evaluated_value</span>\n        <span class=\"k\">elif</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Handle input type int/float, etc (including numeric 0)</span>\n            <span class=\"n\">variable</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Handle None, &quot;&quot; as Separator</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">variable</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">expression</span><span class=\"p\">:</span>\n            <span class=\"n\">prop_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SeparatorProp&quot;</span>\n            <span class=\"n\">variable</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete_separator</span><span class=\"p\">(</span><span class=\"n\">variable_name</span><span class=\"p\">):</span>\n                    <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">Undo</span><span class=\"p\">()</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">clear_messages</span><span class=\"p\">()</span>\n                    <span class=\"k\">return</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unhandled input type to the design property or project variable.&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"c1\"># Get all design and project variables in lower case for a case-sensitive comparison</span>\n        <span class=\"n\">var_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_var_list_from_aedt</span><span class=\"p\">(</span><span class=\"n\">desktop_object</span><span class=\"p\">)</span>\n        <span class=\"n\">lower_case_vars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">var_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"n\">var_list</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">variable_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">lower_case_vars</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:</span><span class=\"si\">{0}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tab_name</span><span class=\"p\">),</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">prop_server</span><span class=\"p\">],</span>\n                            <span class=\"p\">[</span>\n                                <span class=\"s2\">&quot;NAME:NewProps&quot;</span><span class=\"p\">,</span>\n                                <span class=\"p\">[</span>\n                                    <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">variable_name</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;PropType:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"n\">prop_type</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;UserDef:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"n\">variable</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;Description:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"n\">description</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;ReadOnly:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"n\">readonly</span><span class=\"p\">,</span>\n                                    <span class=\"s2\">&quot;Hidden:=&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"n\">hidden</span><span class=\"p\">,</span>\n                                <span class=\"p\">],</span>\n                            <span class=\"p\">],</span>\n                        <span class=\"p\">],</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;;&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">prop_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;PostProcessingVariableProp&quot;</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;PostProcessing Variable exists already. Changing value.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span>\n                                <span class=\"s2\">&quot;NAME:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tab_name</span><span class=\"p\">),</span>\n                                <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">prop_server</span><span class=\"p\">],</span>\n                                <span class=\"p\">[</span>\n                                    <span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span>\n                                    <span class=\"p\">[</span>\n                                        <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">variable_name</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"n\">variable</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;Description:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"n\">description</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;ReadOnly:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"n\">readonly</span><span class=\"p\">,</span>\n                                        <span class=\"s2\">&quot;Hidden:=&quot;</span><span class=\"p\">,</span>\n                                        <span class=\"n\">hidden</span><span class=\"p\">,</span>\n                                    <span class=\"p\">],</span>\n                                <span class=\"p\">],</span>\n                            <span class=\"p\">],</span>\n                        <span class=\"p\">]</span>\n                    <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span>\n            <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">tab_name</span><span class=\"p\">),</span>\n                        <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"n\">prop_server</span><span class=\"p\">],</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span>\n                                <span class=\"s2\">&quot;NAME:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">variable_name</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">variable</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;Description:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">description</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;ReadOnly:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">readonly</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;Hidden:=&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">hidden</span><span class=\"p\">,</span>\n                            <span class=\"p\">],</span>\n                        <span class=\"p\">],</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">var_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_var_list_from_aedt</span><span class=\"p\">(</span><span class=\"n\">desktop_object</span><span class=\"p\">)</span>\n        <span class=\"n\">lower_case_vars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">var_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"n\">var_list</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">variable_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">lower_case_vars</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"VariableManager.delete_separator\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.VariableManager.delete_separator/#pyaedt.application.Variables.VariableManager.delete_separator\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_separator</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">separator_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete a separator from either the active project or design.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        separator_name : str</span>\n<span class=\"sd\">            Value to use for the delimiter.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when the separator exists and can be deleted, ``False`` otherwise.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.ChangeProperty</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ChangeProperty</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Local&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Project&quot;</span><span class=\"p\">)]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">object_tuple</span> <span class=\"ow\">in</span> <span class=\"n\">object_list</span><span class=\"p\">:</span>\n            <span class=\"n\">desktop_object</span> <span class=\"o\">=</span> <span class=\"n\">object_tuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">var_type</span> <span class=\"o\">=</span> <span class=\"n\">object_tuple</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:</span><span class=\"si\">{0}</span><span class=\"s2\">VariableTab&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">var_type</span><span class=\"p\">),</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">Variables&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">var_type</span><span class=\"p\">)],</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:DeletedProps&quot;</span><span class=\"p\">,</span> <span class=\"n\">separator_name</span><span class=\"p\">],</span>\n                        <span class=\"p\">],</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"VariableManager.delete_variable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.VariableManager.delete_variable/#pyaedt.application.Variables.VariableManager.delete_variable\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">var_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete a variable.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        var_name : str</span>\n<span class=\"sd\">            Name of the variable.</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.ChangeProperty</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ChangeProperty</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">desktop_object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aedt_object</span><span class=\"p\">(</span><span class=\"n\">var_name</span><span class=\"p\">)</span>\n        <span class=\"n\">var_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Project&quot;</span> <span class=\"k\">if</span> <span class=\"n\">desktop_object</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_oproject</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;Local&quot;</span>\n        <span class=\"n\">var_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_var_list_from_aedt</span><span class=\"p\">(</span><span class=\"n\">desktop_object</span><span class=\"p\">)</span>\n        <span class=\"n\">lower_case_vars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">var_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">var_name</span> <span class=\"ow\">in</span> <span class=\"n\">var_list</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">var_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">lower_case_vars</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">,</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"s2\">&quot;NAME:</span><span class=\"si\">{0}</span><span class=\"s2\">VariableTab&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">var_type</span><span class=\"p\">),</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{0}</span><span class=\"s2\">Variables&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">var_type</span><span class=\"p\">)],</span>\n                            <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:DeletedProps&quot;</span><span class=\"p\">,</span> <span class=\"n\">var_name</span><span class=\"p\">],</span>\n                        <span class=\"p\">],</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_var_list_from_aedt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">desktop_object</span><span class=\"p\">):</span>\n        <span class=\"n\">var_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_is_object_oriented_enabled</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># To retrieve local variables</span>\n            <span class=\"n\">var_list</span> <span class=\"o\">+=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"p\">,</span> <span class=\"s2\">&quot;LocalVariables&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropNames</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_is_object_oriented_enabled</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"c1\"># To retrieve Parameter Default Variables</span>\n            <span class=\"n\">var_list</span> <span class=\"o\">+=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DefinitionParameters&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropNames</span><span class=\"p\">())</span>\n\n        <span class=\"n\">var_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">desktop_object</span><span class=\"o\">.</span><span class=\"n\">GetVariables</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">var_list</span><span class=\"p\">]</span>\n        <span class=\"n\">var_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">oproject</span><span class=\"o\">.</span><span class=\"n\">GetArrayVariables</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">var_list</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">var_list</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Variable\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.Variable/#pyaedt.application.Variables.Variable\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Variable</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Stores design properties and project variables and provides operations to perform on them.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    value : float, str</span>\n<span class=\"sd\">        Numerical value of the variable in SI units.</span>\n<span class=\"sd\">    units : str</span>\n<span class=\"sd\">        Units for the value.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n\n<span class=\"sd\">    Define a variable using a string value consistent with the AEDT properties.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v = Variable(&quot;45mm&quot;)</span>\n\n<span class=\"sd\">    Define an unitless variable with a value of 3.0.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v = Variable(3.0)</span>\n\n<span class=\"sd\">    Define a variable defined by a numeric result and a unit string.</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; v = Variable(3.0 * 4.5, units=&quot;mm&quot;)</span>\n<span class=\"sd\">    &gt;&gt;&gt; assert v.numeric_value = 13.5</span>\n<span class=\"sd\">    &gt;&gt;&gt; assert v.units = &quot;mm&quot;</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">expression</span><span class=\"p\">,</span>\n        <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">si_value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">full_variables</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">readonly</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">postprocessing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">circuit_parameter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">full_variables</span><span class=\"p\">:</span>\n            <span class=\"n\">full_variables</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span> <span class=\"o\">=</span> <span class=\"n\">readonly</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span> <span class=\"o\">=</span> <span class=\"n\">hidden</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessing</span> <span class=\"o\">=</span> <span class=\"n\">postprocessing</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circuit_parameter</span> <span class=\"o\">=</span> <span class=\"n\">circuit_parameter</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span> <span class=\"o\">=</span> <span class=\"n\">description</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_optimization_included</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">units</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">unit_system</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"p\">):</span>\n                <span class=\"n\">specified_units</span> <span class=\"o\">=</span> <span class=\"n\">units</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span> <span class=\"o\">=</span> <span class=\"n\">expression</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_calculated_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span> <span class=\"o\">=</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">full_variables</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">si_value</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">si_value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_calculated_value</span>\n        <span class=\"c1\"># If units have been specified, check for a conflict and otherwise use the specified unit system</span>\n        <span class=\"k\">if</span> <span class=\"n\">units</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span><span class=\"p\">,</span> <span class=\"s2\">&quot;The unit specification </span><span class=\"si\">{}</span><span class=\"s2\"> is inconsistent with the identified units </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">specified_units</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span> <span class=\"o\">=</span> <span class=\"n\">specified_units</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">si_value</span> <span class=\"ow\">and</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"n\">scale</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">](</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">*</span> <span class=\"n\">scale</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_aedt_obj</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_oproject</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_update_var</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span><span class=\"p\">,</span>\n                <span class=\"n\">readonly</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span><span class=\"p\">,</span>\n                <span class=\"n\">postprocessing</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_postprocessing</span><span class=\"p\">,</span>\n                <span class=\"n\">circuit_parameter</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_circuit_parameter</span><span class=\"p\">,</span>\n                <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span><span class=\"p\">,</span>\n                <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_prop_val</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">n_times</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Variables&quot;</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DefinitionParameters&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropNames</span><span class=\"p\">()</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DefinitionParameters&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LocalVariables&quot;</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n_times</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;DefinitionParameters&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">SetPropValue</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">/</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">SetPropValue</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_prop_val</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prop</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Variables&quot;</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">odesign</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DefinitionParameters&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropNames</span><span class=\"p\">()</span>\n                <span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DefinitionParameters&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LocalVariables&quot;</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">get_oo_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">/</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Variable name.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">fallback_val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_var</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"o\">=</span> <span class=\"n\">fallback_val</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;Failed to update property &quot;name&quot;.&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_optimization_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Check if optimization is enabled.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optimization/Included&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@is_optimization_enabled</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_optimization_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optimization/Included&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">optimization_min_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Optimization min value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optimization/Min&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@optimization_min_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">optimization_min_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optimization/Min&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">optimization_max_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Optimization max value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optimization/Max&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@optimization_max_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">optimization_max_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Optimization/Max&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_sensitivity_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if Sensitivity is enabled.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/Included&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@is_sensitivity_enabled</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_sensitivity_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/Included&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sensitivity_min_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Sensitivity min value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/Min&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@sensitivity_min_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sensitivity_min_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/Min&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sensitivity_max_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Sensitivity max value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/Max&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@sensitivity_max_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sensitivity_max_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/Max&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sensitivity_initial_disp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Sensitivity initial value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/IDisp&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@sensitivity_initial_disp</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sensitivity_initial_disp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sensitivity/IDisp&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_tuning_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if tuning is enabled.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Included&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@is_tuning_enabled</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_tuning_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Included&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tuning_min_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Tuning min value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Min&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@tuning_min_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tuning_min_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Min&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tuning_max_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Tuning max value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Max&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@tuning_max_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tuning_max_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Max&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tuning_step_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot;Tuning Step value.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Step&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@tuning_step_value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tuning_step_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tuning/Step&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_statistical_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if statistical is enabled.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Statistical/Included&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@is_statistical_enabled</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_statistical_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Statistical/Included&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_only</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Read-only flag value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;ReadOnly&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span>\n\n    <span class=\"nd\">@read_only</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_only</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">fallback_val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_var</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_readonly</span> <span class=\"o\">=</span> <span class=\"n\">fallback_val</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Failed to update property &quot;read_only&quot;.&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hidden</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Hidden flag value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hidden&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span>\n\n    <span class=\"nd\">@hidden</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hidden</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">fallback_val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_var</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hidden</span> <span class=\"o\">=</span> <span class=\"n\">fallback_val</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Failed to update property &quot;hidden&quot;.&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Description value.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_prop_val</span><span class=\"p\">(</span><span class=\"s2\">&quot;Description&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span>\n\n    <span class=\"nd\">@description</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">fallback_val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_var</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_description</span> <span class=\"o\">=</span> <span class=\"n\">fallback_val</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Failed to update property &quot;description&quot;.&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post_processing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Postprocessing flag value.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">post_processing_variables</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">circuit_parameter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Circuit parameter flag value.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">design_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;HFSS 3D Layout Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Circuit Design&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Maxwell Circuit&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Twin Builder&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">prop_server</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Instance:</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span>\n                <span class=\"kc\">True</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"o\">.</span><span class=\"n\">GetProperties</span><span class=\"p\">(</span><span class=\"s2\">&quot;DefinitionParameterTab&quot;</span><span class=\"p\">,</span> <span class=\"n\">prop_server</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Expression.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"o\">.</span><span class=\"n\">GetVariableValue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"nd\">@expression</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">expression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">fallback_val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_var</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_expression</span> <span class=\"o\">=</span> <span class=\"n\">fallback_val</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to update property Expression.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">numeric_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Numeric part of the expression as a float value.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">))</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">var_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">)</span>\n            <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">var_obj</span><span class=\"o\">.</span><span class=\"n\">GetPropEvaluatedValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;EvaluatedValue&quot;</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">val</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">):</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">AEDT_UNITS</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">scale</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">](</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span> <span class=\"o\">/</span> <span class=\"n\">scale</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Unit system of the expression as a string.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">unit_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">units</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Units.&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">var_obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_aedt_obj</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_variable_name</span><span class=\"p\">)</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span> <span class=\"o\">=</span> <span class=\"n\">decompose_variable_value</span><span class=\"p\">(</span><span class=\"n\">var_obj</span><span class=\"o\">.</span><span class=\"n\">GetPropEvaluatedValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;EvaluatedValue&quot;</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Value.&quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">evaluated_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;String value.</span>\n\n<span class=\"sd\">        The numeric value with the unit is concatenated and returned as a string. The numeric display</span>\n<span class=\"sd\">        in the modeler and the string value can differ. For example, you might see ``10mm`` in the</span>\n<span class=\"sd\">        modeler and see ``10.0mm`` returned as the string value.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Variable.rescale_to\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.Variable.rescale_to/#pyaedt.application.Variables.Variable.rescale_to\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rescale_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rescale the expression to a new unit within the current unit system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        units : str</span>\n<span class=\"sd\">            Units to rescale to.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; v = Variable(&quot;10W&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.numeric_value == 10</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.units == &quot;W&quot;</span>\n<span class=\"sd\">        &gt;&gt;&gt; v.rescale_to(&quot;kW&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.numeric_value == 0.01</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.units == &quot;kW&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_unit_system</span> <span class=\"o\">=</span> <span class=\"n\">unit_system</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"p\">(</span>\n            <span class=\"n\">new_unit_system</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span>\n        <span class=\"p\">),</span> <span class=\"s2\">&quot;New unit system </span><span class=\"si\">{0}</span><span class=\"s2\"> is inconsistent with the current unit system </span><span class=\"si\">{1}</span><span class=\"s2\">.&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span> <span class=\"o\">=</span> <span class=\"n\">units</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Variable.format\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.Variable.format/#pyaedt.application.Variables.Variable.format\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the string value with the specified numerical formatting.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        format : str</span>\n<span class=\"sd\">            Format for the numeric value of the string. For example, ``&#39;06.2f&#39;``. For</span>\n<span class=\"sd\">            more information, see the `PyFormat documentation &lt;https://pyformat.info/&gt;`_.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            String value with the specified numerical formatting.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; v = Variable(&quot;10W&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.format(&quot;f&quot;) == &#39;10.000000W&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.format(&quot;06.2f&quot;) == &#39;010.00W&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; assert v.format(&quot;6.2f&quot;) == &#39; 10.00W&#39;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s2\">&quot;{0:&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">format</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;}</span><span class=\"si\">{1}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_units</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Multiply the variable with a number or another variable and return a new object.</span>\n\n<span class=\"sd\">                Parameters</span>\n<span class=\"sd\">                ---------</span>\n<span class=\"sd\">                other : numbers.Number or variable</span>\n<span class=\"sd\">                    Object to be multiplied.</span>\n\n<span class=\"sd\">                Returns</span>\n<span class=\"sd\">                -------</span>\n<span class=\"sd\">                type</span>\n<span class=\"sd\">                    Variable.</span>\n\n<span class=\"sd\">                Examples</span>\n<span class=\"sd\">                --------</span>\n<span class=\"sd\">                &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n\n<span class=\"sd\">                Multiply ``&#39;Length1&#39;`` by unitless ``&#39;None&#39;``` to obtain ``&#39;Length&#39;``.</span>\n<span class=\"sd\">                A numerical value is also considered to be unitless.</span>\n\n<span class=\"sd\">        import pyaedt.generic.constants        &gt;&gt;&gt; v1 = Variable(&quot;10mm&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; v2 = Variable(3)</span>\n<span class=\"sd\">                &gt;&gt;&gt; result_1 = v1 * v2</span>\n<span class=\"sd\">                &gt;&gt;&gt; result_2 = v1 * 3</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_1.numeric_value == 30.0</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_1.unit_system == &quot;Length&quot;</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_2.numeric_value == result_1.numeric_value</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_2.unit_system == &quot;Length&quot;</span>\n\n<span class=\"sd\">                Multiply voltage times current to obtain power.</span>\n\n<span class=\"sd\">        import pyaedt.generic.constants        &gt;&gt;&gt; v3 = Variable(&quot;3mA&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; v4 = Variable(&quot;40V&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; result_3 = v3 * v4</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_3.numeric_value == 0.12</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_3.units == &quot;W&quot;</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_3.unit_system == &quot;Power&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">),</span> <span class=\"s2\">&quot;Multiplier must be a scalar quantity or a variable.&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">*</span> <span class=\"n\">other</span>\n            <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;None&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">*</span> <span class=\"n\">other</span>\n            <span class=\"k\">elif</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;None&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">*</span> <span class=\"bp\">self</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">_resolve_unit_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;multiply&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result_units</span><span class=\"p\">:</span>\n                    <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">_resolve_unit_system</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;multiply&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result_value</span><span class=\"p\">,</span> <span class=\"n\">result_units</span><span class=\"p\">))</span>\n\n    <span class=\"fm\">__rmul__</span> <span class=\"o\">=</span> <span class=\"fm\">__mul__</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add the variable to another variable to return a new object.</span>\n\n<span class=\"sd\">                Parameters</span>\n<span class=\"sd\">                ---------</span>\n<span class=\"sd\">                other : Variable</span>\n<span class=\"sd\">                    Object to be multiplied.</span>\n\n<span class=\"sd\">                Returns</span>\n<span class=\"sd\">                -------</span>\n<span class=\"sd\">                type</span>\n<span class=\"sd\">                    Variable.</span>\n\n<span class=\"sd\">                Examples</span>\n<span class=\"sd\">                --------</span>\n<span class=\"sd\">                &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n\n<span class=\"sd\">        import pyaedt.generic.constants        &gt;&gt;&gt; v1 = Variable(&quot;3mA&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; v2 = Variable(&quot;10A&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; result = v1 + v2</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result.numeric_value == 10.003</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result.units == &quot;A&quot;</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result.unit_system == &quot;Current&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">),</span> <span class=\"s2\">&quot;You can only add a variable with another variable.&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span>\n        <span class=\"p\">),</span> <span class=\"s2\">&quot;Only ``Variable`` objects with the same unit system can be added.&quot;</span>\n        <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">SI_UNITS</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">]</span>\n        <span class=\"c1\"># If the units of the two operands are different, return SI-Units</span>\n        <span class=\"n\">result_variable</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result_value</span><span class=\"p\">,</span> <span class=\"n\">result_units</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># If the units of both operands are the same, return those units</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">:</span>\n            <span class=\"n\">result_variable</span><span class=\"o\">.</span><span class=\"n\">rescale_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result_variable</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__sub__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Subtract another variable from the variable to return a new object.</span>\n\n<span class=\"sd\">                Parameters</span>\n<span class=\"sd\">                ---------</span>\n<span class=\"sd\">                other : Variable</span>\n<span class=\"sd\">                    Object to be subtracted.</span>\n\n<span class=\"sd\">                Returns</span>\n<span class=\"sd\">                -------</span>\n<span class=\"sd\">                type</span>\n<span class=\"sd\">                    Variable.</span>\n\n<span class=\"sd\">                Examples</span>\n<span class=\"sd\">                --------</span>\n\n<span class=\"sd\">        import pyaedt.generic.constants        &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n<span class=\"sd\">                &gt;&gt;&gt; v3 = Variable(&quot;3mA&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; v4 = Variable(&quot;10A&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; result_2 = v3 - v4</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_2.numeric_value == -9.997</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_2.units == &quot;A&quot;</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_2.unit_system == &quot;Current&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">),</span> <span class=\"s2\">&quot;You can only subtract a variable from another variable.&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span>\n        <span class=\"p\">),</span> <span class=\"s2\">&quot;Only ``Variable`` objects with the same unit system can be subtracted.&quot;</span>\n        <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">SI_UNITS</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">]</span>\n        <span class=\"c1\"># If the units of the two operands are different, return SI-Units</span>\n        <span class=\"n\">result_variable</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result_value</span><span class=\"p\">,</span> <span class=\"n\">result_units</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># If the units of both operands are the same, return those units</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">:</span>\n            <span class=\"n\">result_variable</span><span class=\"o\">.</span><span class=\"n\">rescale_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result_variable</span>\n\n    <span class=\"c1\"># Python 3.x version</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__truediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Divide the variable by a number or another variable to return a new object.</span>\n\n<span class=\"sd\">                Parameters</span>\n<span class=\"sd\">                ---------</span>\n<span class=\"sd\">                other : numbers.Number or variable</span>\n<span class=\"sd\">                    Object by which to divide.</span>\n\n<span class=\"sd\">                Returns</span>\n<span class=\"sd\">                -------</span>\n<span class=\"sd\">                type</span>\n<span class=\"sd\">                    Variable.</span>\n\n<span class=\"sd\">                Examples</span>\n<span class=\"sd\">                --------</span>\n<span class=\"sd\">                Divide a variable with units ``&quot;W&quot;`` by a variable with units ``&quot;V&quot;`` and automatically</span>\n<span class=\"sd\">                resolve the new units to ``&quot;A&quot;``.</span>\n\n<span class=\"sd\">                &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n\n<span class=\"sd\">        import pyaedt.generic.constants        &gt;&gt;&gt; v1 = Variable(&quot;10W&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; v2 = Variable(&quot;40V&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; result = v1 / v2</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_1.numeric_value == 0.25</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_1.units == &quot;A&quot;</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result_1.unit_system == &quot;Current&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">),</span> <span class=\"s2\">&quot;Divisor must be a scalar quantity or a variable.&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">/</span> <span class=\"n\">other</span>\n            <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">units</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">/</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span>\n            <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">_resolve_unit_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;divide&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result_value</span><span class=\"p\">,</span> <span class=\"n\">result_units</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Python 2.7 version</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__div__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__truediv__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__rtruediv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Divide another object by this object.</span>\n\n<span class=\"sd\">                Parameters</span>\n<span class=\"sd\">                ---------</span>\n<span class=\"sd\">                other : numbers.Number or variable</span>\n<span class=\"sd\">                    Object to divide by.</span>\n\n<span class=\"sd\">                Returns</span>\n<span class=\"sd\">                -------</span>\n<span class=\"sd\">                type</span>\n<span class=\"sd\">                    Variable.</span>\n\n<span class=\"sd\">                Examples</span>\n<span class=\"sd\">                --------</span>\n<span class=\"sd\">                Divide a number by a variable with units ``&quot;s&quot;`` and automatically determine that</span>\n<span class=\"sd\">                the result is in ``&quot;Hz&quot;``.</span>\n\n<span class=\"sd\">        import pyaedt.generic.constants        &gt;&gt;&gt; from pyaedt.application.Variables import Variable</span>\n<span class=\"sd\">                &gt;&gt;&gt; v = Variable(&quot;1s&quot;)</span>\n<span class=\"sd\">                &gt;&gt;&gt; result = 3.0 / v</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result.numeric_value == 3.0</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result.units == &quot;Hz&quot;</span>\n<span class=\"sd\">                &gt;&gt;&gt; assert result.unit_system == &quot;Freq&quot;</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"n\">other</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n            <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">_resolve_unit_system</span><span class=\"p\">(</span><span class=\"s2\">&quot;None&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;divide&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n            <span class=\"n\">result_units</span> <span class=\"o\">=</span> <span class=\"n\">_resolve_unit_system</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;divide&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result_value</span><span class=\"p\">,</span> <span class=\"n\">result_units</span><span class=\"p\">))</span></div>\n\n    <span class=\"c1\"># # Python 2.7 version</span>\n    <span class=\"c1\"># @pyaedt_function_handler()</span>\n    <span class=\"c1\"># def __div__(self, other):</span>\n    <span class=\"c1\">#     return self.__rtruediv__(other)</span>\n\n\n<div class=\"viewcode-block\" id=\"DataSet\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet/#pyaedt.application.Variables.DataSet\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DataSet</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Manages datasets.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    app :</span>\n<span class=\"sd\">    name :</span>\n<span class=\"sd\">    x : list</span>\n<span class=\"sd\">        List of X-axis values for the dataset.</span>\n<span class=\"sd\">    y : list</span>\n<span class=\"sd\">        List of Y-axis values for the dataset.</span>\n<span class=\"sd\">    z : list, optional</span>\n<span class=\"sd\">        List of Z-axis values for a 3D dataset only. The default is ``None``.</span>\n<span class=\"sd\">    v : list, optional</span>\n<span class=\"sd\">        List of V-axis values for a 3D dataset only. The default is ``None``.</span>\n<span class=\"sd\">    xunit : str, optional</span>\n<span class=\"sd\">        Units for the X axis. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">    yunit : str, optional</span>\n<span class=\"sd\">        Units for the Y axis. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">    zunit : str, optional</span>\n<span class=\"sd\">        Units for the Z axis for a 3D dataset only. The default is ``&quot;&quot;``.</span>\n<span class=\"sd\">    vunit : str, optional</span>\n<span class=\"sd\">        Units for the V axis for a 3D dataset only. The default is ``&quot;&quot;``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">xunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">yunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">zunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">vunit</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span> <span class=\"o\">=</span> <span class=\"n\">app</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">z</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">xunit</span> <span class=\"o\">=</span> <span class=\"n\">xunit</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">yunit</span> <span class=\"o\">=</span> <span class=\"n\">yunit</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zunit</span> <span class=\"o\">=</span> <span class=\"n\">zunit</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vunit</span> <span class=\"o\">=</span> <span class=\"n\">vunit</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_args</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve arguments.&quot;&quot;&quot;</span>\n        <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name:&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Name:Coordinates&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:DimUnits&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">xunit</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">yunit</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:DimUnits&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">xunit</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">yunit</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zunit</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vunit</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))))</span>\n        <span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_aedt_version</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">ver</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2022.1&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">arg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Point&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">:</span>\n                    <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                    <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg3</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">arg3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;NAME:Coordinate&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">arg4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:CoordPoint&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">arg4</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                <span class=\"n\">arg4</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">:</span>\n                    <span class=\"n\">arg4</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                    <span class=\"n\">arg4</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n                <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg4</span><span class=\"p\">)</span>\n                <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg3</span><span class=\"p\">)</span>\n        <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">arg</span>\n\n<div class=\"viewcode-block\" id=\"DataSet.create\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.create/#pyaedt.application.Variables.DataSet.create\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a dataset.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.AddDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.AddDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;$&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"o\">.</span><span class=\"n\">AddDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">AddDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"DataSet.add_point\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.add_point/#pyaedt.application.Variables.DataSet.add_point\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add a point to the dataset.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x : float</span>\n<span class=\"sd\">        y : float</span>\n<span class=\"sd\">        z : float, optional</span>\n<span class=\"sd\">            The default is ``None``.</span>\n<span class=\"sd\">        v : float, optional</span>\n<span class=\"sd\">            The default is ``None``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.EditDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.EditDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"DataSet.remove_point_from_x\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.remove_point_from_x/#pyaedt.application.Variables.DataSet.remove_point_from_x\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_point_from_x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove a point from an X-axis value.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x : float</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.EditDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.EditDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value </span><span class=\"si\">{}</span><span class=\"s2\"> is not found.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">id_to_remove</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remove_point_from_index</span><span class=\"p\">(</span><span class=\"n\">id_to_remove</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DataSet.remove_point_from_index\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.remove_point_from_index/#pyaedt.application.Variables.DataSet.remove_point_from_index\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_point_from_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_to_remove</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove a point from an index.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        id_to_remove : int</span>\n<span class=\"sd\">            ID of the index.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.EditDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.EditDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">id_to_remove</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">id_to_remove</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">id_to_remove</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">id_to_remove</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">id_to_remove</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;cannot Remove </span><span class=\"si\">{}</span><span class=\"s2\"> index.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">id_to_remove</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"DataSet.update\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.update/#pyaedt.application.Variables.DataSet.update\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update the dataset.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.EditDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.EditDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;$&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"o\">.</span><span class=\"n\">EditDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">EditDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"DataSet.delete\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.delete/#pyaedt.application.Variables.DataSet.delete\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the dataset.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.DeleteDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.DeleteDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;$&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"o\">.</span><span class=\"n\">DeleteDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_datasets</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">DeleteDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">project_datasets</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"DataSet.export\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.application.Variables.DataSet.export/#pyaedt.application.Variables.DataSet.export\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">export</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dataset_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Export the dataset.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        dataset_path : str, optional</span>\n<span class=\"sd\">            Path to export the dataset to. The default is ``None``, in which</span>\n<span class=\"sd\">            case the dataset is exported to the working_directory path.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oProject.ExportDataset</span>\n<span class=\"sd\">        &gt;&gt;&gt; oDesign.ExportDataset</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dataset_path</span><span class=\"p\">:</span>\n            <span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">working_directory</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.tab&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;$&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_oproject</span><span class=\"o\">.</span><span class=\"n\">ExportDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dataset_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_odesign</span><span class=\"o\">.</span><span class=\"n\">ExportDataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dataset_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/application/Variables", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}