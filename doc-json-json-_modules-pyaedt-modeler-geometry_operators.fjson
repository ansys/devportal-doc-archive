{"parents": [{"link": "../../../", "title": "Module code"}], "title": "pyaedt.modeler.geometry_operators", "body": "<h1>Source code for pyaedt.modeler.geometry_operators</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">AXIS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">PLANE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">SWEEPDRAFT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.constants</span> <span class=\"kn\">import</span> <span class=\"n\">scale_units</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n\n\n<div class=\"viewcode-block\" id=\"GeometryOperators\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators/#pyaedt.modeler.geometry_operators.GeometryOperators\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GeometryOperators</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Manages geometry operators.&quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.List2list\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.List2list/#pyaedt.modeler.geometry_operators.GeometryOperators.List2list\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">List2list</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a C# list object to a Python list.</span>\n\n<span class=\"sd\">        This function performs a deep conversion.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_list : List</span>\n<span class=\"sd\">            C# list to convert to a Python list.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            Converted Python list.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">output_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">input_list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;List&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)):</span>\n                <span class=\"n\">output_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">List2list</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">output_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">output_list</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.parse_dim_arg\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.parse_dim_arg/#pyaedt.modeler.geometry_operators.GeometryOperators.parse_dim_arg\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parse_dim_arg</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">scale_to_unit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">variable_manager</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a number and unit to a float.</span>\n<span class=\"sd\">        Angles are converted in radians.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        string : str</span>\n<span class=\"sd\">            String to convert. For example, ``&quot;2mm&quot;``.</span>\n<span class=\"sd\">        scale_to_unit : str</span>\n<span class=\"sd\">            Units for the value to convert. For example, ``&quot;mm&quot;``.</span>\n<span class=\"sd\">        variable_manager : :class:`pyaedt.application.Variables.VariableManager`, optional</span>\n<span class=\"sd\">            Try to parse formula and returns numeric value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Value for the converted value and units. For example, ``0.002``.</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Parse `&#39;&quot;2mm&quot;&#39;`.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from pyaedt.modeler.geometry_operators import GeometryOperators as go</span>\n<span class=\"sd\">        &gt;&gt;&gt; go.parse_dim_arg(&#39;2mm&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; 0.002</span>\n\n<span class=\"sd\">        Use the optional argument ``scale_to_unit`` to specify the destination unit.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; go.parse_dim_arg(&#39;2mm&#39;, scale_to_unit=&#39;mm&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; 2.0</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Input argument is not string nor number&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sunit</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"k\">if</span> <span class=\"n\">scale_to_unit</span><span class=\"p\">:</span>\n            <span class=\"n\">sunit</span> <span class=\"o\">=</span> <span class=\"n\">scale_units</span><span class=\"p\">(</span><span class=\"n\">scale_to_unit</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;number&gt;[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)\\s*(?P&lt;unit&gt;[a-z_A-Z]*)&quot;</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">m</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">string</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">variable_manager</span><span class=\"p\">:</span>\n                    <span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">string</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">numeric_value</span>\n                    <span class=\"k\">del</span> <span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span>\n                    <span class=\"k\">return</span> <span class=\"n\">value</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">string</span>\n            <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;unit&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">scaling_factor</span> <span class=\"o\">=</span> <span class=\"n\">scale_units</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;unit&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">scaling_factor</span> <span class=\"o\">/</span> <span class=\"n\">sunit</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">variable_manager</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">variable_manager</span><span class=\"o\">.</span><span class=\"n\">set_variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">postprocessing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n                        <span class=\"k\">return</span> <span class=\"n\">string</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">/</span> <span class=\"n\">sunit</span>\n                <span class=\"k\">del</span> <span class=\"n\">variable_manager</span><span class=\"p\">[</span><span class=\"s2\">&quot;temp_var&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">return</span> <span class=\"n\">value</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.cs_plane_to_axis_str\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_axis_str/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_axis_str\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cs_plane_to_axis_str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve a string for a coordinate system plane.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        val :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">           String for the coordinate system plane.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span> <span class=\"ow\">or</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Z&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">YZ</span> <span class=\"ow\">or</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;X&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Y&quot;</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.cs_plane_to_plane_str\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_plane_str/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_plane_to_plane_str\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cs_plane_to_plane_str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve a string for a coordinate system plane.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        val :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">           String for the coordinate system plane.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span> <span class=\"ow\">or</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;XY&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">YZ</span> <span class=\"ow\">or</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;YZ&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;ZX&quot;</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.cs_axis_str\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.cs_axis_str/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_axis_str\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cs_axis_str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve a string for a coordinate system axis.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        val :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            String for the coordinate system axis.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">AXIS</span><span class=\"o\">.</span><span class=\"n\">X</span> <span class=\"ow\">or</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;X&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;X&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">AXIS</span><span class=\"o\">.</span><span class=\"n\">Y</span> <span class=\"ow\">or</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Y&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Y&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Z&quot;</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.draft_type_str\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.draft_type_str/#pyaedt.modeler.geometry_operators.GeometryOperators.draft_type_str\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">draft_type_str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the draft type.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        val :</span>\n\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">           Type of the draft.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">SWEEPDRAFT</span><span class=\"o\">.</span><span class=\"n\">Extended</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Extended&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">SWEEPDRAFT</span><span class=\"o\">.</span><span class=\"n\">Round</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Round&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Natural&quot;</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.get_mid_point\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.get_mid_point/#pyaedt.modeler.geometry_operators.GeometryOperators.get_mid_point\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_mid_point</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the midpoint between two points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        v1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point.</span>\n<span class=\"sd\">        v2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the midpoint.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">[((</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">m</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.get_triangle_area\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.get_triangle_area/#pyaedt.modeler.geometry_operators.GeometryOperators.get_triangle_area\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_triangle_area</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the area of a triangle defined by its three vertices.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        v1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vertex.</span>\n<span class=\"sd\">        v2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vertex.</span>\n<span class=\"sd\">        v3 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the third vertex.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Area of the triangle.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v3</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v3</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">v3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">area</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">):</span>\n            <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">area</span><span class=\"o\">.</span><span class=\"n\">real</span>\n        <span class=\"k\">return</span> <span class=\"n\">area</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_cross\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_cross/#pyaedt.modeler.geometry_operators.GeometryOperators.v_cross\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_cross</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the cross product of two geometry vectors.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the result vector.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the dot product between two geometry vectors.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Result of the dot product.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">c</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">c</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_dot\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_dot/#pyaedt.modeler.geometry_operators.GeometryOperators.v_dot\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the dot product between two geometry vectors.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Result of the dot product.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_prod\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_prod/#pyaedt.modeler.geometry_operators.GeometryOperators.v_prod\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_prod</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the product between a scalar value and a vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        s : float</span>\n<span class=\"sd\">            Scalar value.</span>\n<span class=\"sd\">        v : List</span>\n<span class=\"sd\">            List of values for the vector in the format ``[v1, v2,..., vn]``.</span>\n<span class=\"sd\">            The vector can be any length.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of values for the result vector. This list is the</span>\n<span class=\"sd\">            same length as the list for the input vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">r</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_sub\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_sub/#pyaedt.modeler.geometry_operators.GeometryOperators.v_sub\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_sub</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate two geometry vectors by subtracting them (a-b).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the result vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_sum\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_sum/#pyaedt.modeler.geometry_operators.GeometryOperators.v_sum\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate two geometry vectors by adding them (a+b).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the result vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_norm\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_norm/#pyaedt.modeler.geometry_operators.GeometryOperators.v_norm\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_norm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the Euclidean norm of a geometry vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">         a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Evaluated norm in the same unit as the coordinates for the input vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">**</span><span class=\"mf\">0.5</span>\n        <span class=\"k\">return</span> <span class=\"n\">m</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.normalize_vector\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.normalize_vector/#pyaedt.modeler.geometry_operators.GeometryOperators.normalize_vector\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">normalize_vector</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Normalize a geometry vector.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        v : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the normalized vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># normalize a vector to its norm</span>\n        <span class=\"n\">norm</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"n\">vn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">norm</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">vn</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_points\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_points/#pyaedt.modeler.geometry_operators.GeometryOperators.v_points\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_points</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Vector from one point to another point.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p1 : List</span>\n<span class=\"sd\">            Coordinates ``[x1,y1,z1]`` for the first point.</span>\n<span class=\"sd\">        p2 : List</span>\n<span class=\"sd\">            Coordinates ``[x2,y2,z2]`` for second point.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            Coordinates ``[vx, vy, vz]`` for the vector from the first point to the second point.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.points_distance\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.points_distance/#pyaedt.modeler.geometry_operators.GeometryOperators.points_distance\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the distance between two points expressed as their Cartesian coordinates.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p1 : List</span>\n<span class=\"sd\">            List of ``[x1,y1,z1]`` coordinates for the first point.</span>\n<span class=\"sd\">        p2 : List</span>\n<span class=\"sd\">            List of ``[x2,y2,z2]`` coordinates for the second ppint.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Distance between the two points in the same unit as the coordinates for the points.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n        <span class=\"c1\"># fmt: on</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.find_point_on_plane\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.find_point_on_plane/#pyaedt.modeler.geometry_operators.GeometryOperators.find_point_on_plane\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_point_on_plane</span><span class=\"p\">(</span><span class=\"n\">pointlists</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Find a point on a plane.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pointlists : List</span>\n<span class=\"sd\">            List of points.</span>\n<span class=\"sd\">        direction : int, optional</span>\n<span class=\"sd\">             The default is ``0``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">direction</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"mf\">1e6</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pointlists</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">point</span><span class=\"p\">:</span>\n                    <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">direction</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1e6</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pointlists</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">direction</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">point</span><span class=\"p\">:</span>\n                    <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">direction</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">point</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.distance_vector\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.distance_vector/#pyaedt.modeler.geometry_operators.GeometryOperators.distance_vector\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">distance_vector</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the vector distance between point ``p`` and a line defined by two points, ``a`` and ``b``.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            he formula is  ``d = (a-p)-((a-p)dot p)n``, where ``a`` is a point of the line (either ``a`` or ``b``)</span>\n<span class=\"sd\">            and ``n`` is the unit vector in the direction of the line.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the reference point.</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the segment.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the segment.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the distance vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">v1</span><span class=\"p\">]</span>\n        <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n        <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">s1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">n</span><span class=\"p\">]</span>\n        <span class=\"n\">vd</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">vd</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_between_points\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_between_points/#pyaedt.modeler.geometry_operators.GeometryOperators.is_between_points\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_between_points</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if a point lies on the segment defined by two points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the reference point ``p``.</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the segment.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the segment.</span>\n<span class=\"sd\">        tol : float</span>\n<span class=\"sd\">            Linear tolerance. The default value is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when the point lies on the segment defined by the two points, ``False`` otherwise.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)))</span> <span class=\"o\">&gt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>  <span class=\"c1\"># not collinear</span>\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n        <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">t1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">t1</span> <span class=\"o\">&gt;</span> <span class=\"n\">t2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_parallel\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_parallel/#pyaedt.modeler.geometry_operators.GeometryOperators.is_parallel\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_parallel</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if a segment defined by two points is parallel to a segment defined by two other points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the fiirst segment.</span>\n<span class=\"sd\">        a2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the first segment.</span>\n<span class=\"sd\">        b1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the second segment.</span>\n<span class=\"sd\">        b2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the second segment.</span>\n<span class=\"sd\">        tol : float</span>\n<span class=\"sd\">            Linear tolerance. The default value is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">parallel_coeff</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"o\">*</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.parallel_coeff\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.parallel_coeff/#pyaedt.modeler.geometry_operators.GeometryOperators.parallel_coeff\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parallel_coeff</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;ADD DESCRIPTION.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the first segment.</span>\n<span class=\"sd\">        a2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the first segment.</span>\n<span class=\"sd\">        b1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the second segment.</span>\n<span class=\"sd\">        b2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the second segment.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            _vdot of 4 vertices of 2 segments.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">va</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">)</span>\n        <span class=\"n\">vb</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">)</span>\n        <span class=\"n\">an</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">)</span>\n        <span class=\"n\">bn</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">vb</span><span class=\"p\">)</span>\n        <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">an</span> <span class=\"o\">*</span> <span class=\"n\">bn</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_collinear\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_collinear/#pyaedt.modeler.geometry_operators.GeometryOperators.is_collinear\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_collinear</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if two vectors are collinear (parallel or anti-parallel).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n<span class=\"sd\">        tol : float</span>\n<span class=\"sd\">            Linear tolerance. The default value is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if vectors are collinear, ``False`` otherwise.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">an</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"n\">bn</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">an</span> <span class=\"o\">*</span> <span class=\"n\">bn</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"o\">*</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_projection_inside\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_projection_inside/#pyaedt.modeler.geometry_operators.GeometryOperators.is_projection_inside\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_projection_inside</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Project a segment onto another segment and check if the projected segment is inside it.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the projected segment.</span>\n<span class=\"sd\">        a2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the projected segment.</span>\n<span class=\"sd\">        b1 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the other segment.</span>\n<span class=\"sd\">        b2 : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the other segment.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when the projected segment is inside the other segmennt, ``False`` otherwise.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_parallel</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">distance_vector</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">)</span>\n        <span class=\"n\">a1n</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"n\">a2n</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_between_points</span><span class=\"p\">(</span><span class=\"n\">a1n</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_between_points</span><span class=\"p\">(</span><span class=\"n\">a2n</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.arrays_positions_sum\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.arrays_positions_sum/#pyaedt.modeler.geometry_operators.GeometryOperators.arrays_positions_sum\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">arrays_positions_sum</span><span class=\"p\">(</span><span class=\"n\">vertlist1</span><span class=\"p\">,</span> <span class=\"n\">vertlist2</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;ADD DESCRIPTION.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        vertlist1 : List</span>\n\n<span class=\"sd\">        vertlist2 : List</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">vertlist1</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">el1</span> <span class=\"ow\">in</span> <span class=\"n\">vertlist2</span><span class=\"p\">:</span>\n                <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">el1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertlist1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">vertlist2</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_angle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_angle/#pyaedt.modeler.geometry_operators.GeometryOperators.v_angle\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_angle</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the angle between two geometry vectors.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Angle in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">an</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"n\">bn</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">an</span> <span class=\"o\">*</span> <span class=\"n\">bn</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mf\">0.0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">d</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">an</span> <span class=\"o\">*</span> <span class=\"n\">bn</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.pointing_to_axis\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.pointing_to_axis/#pyaedt.modeler.geometry_operators.GeometryOperators.pointing_to_axis\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pointing_to_axis</span><span class=\"p\">(</span><span class=\"n\">x_pointing</span><span class=\"p\">,</span> <span class=\"n\">y_pointing</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the axes from the HFSS X axis and Y pointing axis as per</span>\n<span class=\"sd\">        the definition of the AEDT interface coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x_pointing : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the X axis.</span>\n\n<span class=\"sd\">        y_pointing : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the Y pointing axis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            ``[Xx, Xy, Xz], [Yx, Yy, Yz], [Zx, Zy, Zz]`` of the three axes (normalized).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">zpt</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">x_pointing</span><span class=\"p\">,</span> <span class=\"n\">y_pointing</span><span class=\"p\">)</span>\n        <span class=\"n\">ypt</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">zpt</span><span class=\"p\">,</span> <span class=\"n\">x_pointing</span><span class=\"p\">)</span>\n\n        <span class=\"n\">xp</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">(</span><span class=\"n\">x_pointing</span><span class=\"p\">)</span>\n        <span class=\"n\">zp</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">(</span><span class=\"n\">zpt</span><span class=\"p\">)</span>\n        <span class=\"n\">yp</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">(</span><span class=\"n\">ypt</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">xp</span><span class=\"p\">,</span> <span class=\"n\">yp</span><span class=\"p\">,</span> <span class=\"n\">zp</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.axis_to_euler_zxz\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zxz/#pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zxz\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">axis_to_euler_zxz</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve Euler angles of a frame following the rotation sequence ZXZ.</span>\n\n<span class=\"sd\">        Provides assumption for the gimbal lock problem.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x : List</span>\n<span class=\"sd\">            List of ``[Xx, Xy, Xz]`` coordinates for the X axis.</span>\n<span class=\"sd\">        y : List</span>\n<span class=\"sd\">            List of ``[Yx, Yy, Yz]`` coordinates for the Y axis.</span>\n<span class=\"sd\">        z : List</span>\n<span class=\"sd\">            List of ``[Zx, Zy, Zz]`` coordinates for the Z axis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            (phi, theta, psi) containing the Euler angles in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-16</span>\n        <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">y3</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">z3</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">elif</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">z1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">z2</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"p\">)</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">x3</span><span class=\"p\">,</span> <span class=\"n\">y3</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">psi</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.axis_to_euler_zyz\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zyz/#pyaedt.modeler.geometry_operators.GeometryOperators.axis_to_euler_zyz\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">axis_to_euler_zyz</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve Euler angles of a frame following the rotation sequence ZYZ.</span>\n\n<span class=\"sd\">        Provides assumption for the gimbal lock problem.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x : List</span>\n<span class=\"sd\">            List of ``[Xx, Xy, Xz]`` coordinates for the X axis.</span>\n<span class=\"sd\">        y : List</span>\n<span class=\"sd\">            List of ``[Yx, Yy, Yz]`` coordinates for the Y axis.</span>\n<span class=\"sd\">        z : List</span>\n<span class=\"sd\">            List of ``[Zx, Zy, Zz]`` coordinates for the Z axis.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            (phi, theta, psi) containing the Euler angles in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-16</span>\n        <span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">y3</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">z3</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"k\">elif</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">z2</span><span class=\"p\">,</span> <span class=\"n\">z1</span><span class=\"p\">)</span>\n            <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"p\">)</span>\n            <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">y3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x3</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">psi</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.quaternion_to_axis\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">quaternion_to_axis</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a quaternion to a rotated frame defined by X, Y, and Z axes.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            [Xx, Xy, Xz], [Yx, Yy, Yz], [Zx, Zy, Zz] of the three axes (normalized).</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n        <span class=\"n\">m11</span> <span class=\"o\">=</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q1</span> <span class=\"o\">+</span> <span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q2</span> <span class=\"o\">-</span> <span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">-</span> <span class=\"n\">q4</span> <span class=\"o\">*</span> <span class=\"n\">q4</span>\n        <span class=\"n\">m12</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q4</span><span class=\"p\">)</span>\n        <span class=\"n\">m13</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q3</span><span class=\"p\">)</span>\n\n        <span class=\"n\">m21</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q4</span><span class=\"p\">)</span>\n        <span class=\"n\">m22</span> <span class=\"o\">=</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q1</span> <span class=\"o\">-</span> <span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q2</span> <span class=\"o\">+</span> <span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">-</span> <span class=\"n\">q4</span> <span class=\"o\">*</span> <span class=\"n\">q4</span>\n        <span class=\"n\">m23</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">m31</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q3</span><span class=\"p\">)</span>\n        <span class=\"n\">m32</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n        <span class=\"n\">m33</span> <span class=\"o\">=</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q1</span> <span class=\"o\">-</span> <span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q2</span> <span class=\"o\">-</span> <span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">+</span> <span class=\"n\">q4</span> <span class=\"o\">*</span> <span class=\"n\">q4</span>\n\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">([</span><span class=\"n\">m11</span><span class=\"p\">,</span> <span class=\"n\">m21</span><span class=\"p\">,</span> <span class=\"n\">m31</span><span class=\"p\">])</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">([</span><span class=\"n\">m12</span><span class=\"p\">,</span> <span class=\"n\">m22</span><span class=\"p\">,</span> <span class=\"n\">m32</span><span class=\"p\">])</span>\n        <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">([</span><span class=\"n\">m13</span><span class=\"p\">,</span> <span class=\"n\">m23</span><span class=\"p\">,</span> <span class=\"n\">m33</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.quaternion_to_axis_angle\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis_angle/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_axis_angle\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">quaternion_to_axis_angle</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a quaternion to the axis angle rotation formulation.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            ([ux, uy, uz], theta) containing the rotation axes expressed as X, Y, Z components of</span>\n<span class=\"sd\">            the unit vector ``u`` and the rotation angle theta expressed in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q2</span> <span class=\"o\">+</span> <span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">+</span> <span class=\"n\">q4</span> <span class=\"o\">*</span> <span class=\"n\">q4</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n        <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">q2</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q3</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q4</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">]</span>\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">theta</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.axis_angle_to_quaternion\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.axis_angle_to_quaternion/#pyaedt.modeler.geometry_operators.GeometryOperators.axis_angle_to_quaternion\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">axis_angle_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert the axis angle rotation formulation to a quaternion.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        u : List</span>\n<span class=\"sd\">            List of ``[ux, uy, uz]`` coordinates for the rotation axis.</span>\n\n<span class=\"sd\">        theta : float</span>\n<span class=\"sd\">            Angle of rotation in radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">un</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">un</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">un</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">un</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">s</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">q1</span><span class=\"p\">,</span> <span class=\"n\">q2</span><span class=\"p\">,</span> <span class=\"n\">q3</span><span class=\"p\">,</span> <span class=\"n\">q4</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.quaternion_to_euler_zxz\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zxz/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zxz\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">quaternion_to_euler_zxz</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a quaternion to Euler angles following rotation sequence ZXZ.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            (phi, theta, psi) containing the Euler angles in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">m13</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q3</span><span class=\"p\">)</span>\n        <span class=\"n\">m23</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n        <span class=\"n\">m33</span> <span class=\"o\">=</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q1</span> <span class=\"o\">-</span> <span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q2</span> <span class=\"o\">-</span> <span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">+</span> <span class=\"n\">q4</span> <span class=\"o\">*</span> <span class=\"n\">q4</span>\n        <span class=\"n\">m31</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q3</span><span class=\"p\">)</span>\n        <span class=\"n\">m32</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n        <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">m13</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">m23</span><span class=\"p\">)</span>\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">((</span><span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">m33</span> <span class=\"o\">*</span> <span class=\"n\">m33</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">m33</span><span class=\"p\">)</span>\n        <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">m31</span><span class=\"p\">,</span> <span class=\"n\">m32</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">psi</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.euler_zxz_to_quaternion\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.euler_zxz_to_quaternion/#pyaedt.modeler.geometry_operators.GeometryOperators.euler_zxz_to_quaternion\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">euler_zxz_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">psi</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert the Euler angles following rotation sequence ZXZ to a quaternion.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        phi : float</span>\n<span class=\"sd\">            Euler angle psi in radians.</span>\n<span class=\"sd\">        theta : float</span>\n<span class=\"sd\">            Euler angle theta in radians.</span>\n<span class=\"sd\">        psi : float</span>\n<span class=\"sd\">            Euler angle phi in radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">phi</span>\n        <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">theta</span>\n        <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"n\">psi</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">+</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">+</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">q1</span><span class=\"p\">,</span> <span class=\"n\">q2</span><span class=\"p\">,</span> <span class=\"n\">q3</span><span class=\"p\">,</span> <span class=\"n\">q4</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.quaternion_to_euler_zyz\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zyz/#pyaedt.modeler.geometry_operators.GeometryOperators.quaternion_to_euler_zyz\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">quaternion_to_euler_zyz</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a quaternion to Euler angles following rotation sequence ZYZ.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        tuple</span>\n<span class=\"sd\">            (phi, theta, psi) containing the Euler angles in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">m13</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q3</span><span class=\"p\">)</span>\n        <span class=\"n\">m23</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n        <span class=\"n\">m33</span> <span class=\"o\">=</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q1</span> <span class=\"o\">-</span> <span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q2</span> <span class=\"o\">-</span> <span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q3</span> <span class=\"o\">+</span> <span class=\"n\">q4</span> <span class=\"o\">*</span> <span class=\"n\">q4</span>\n        <span class=\"n\">m31</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q2</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">-</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q3</span><span class=\"p\">)</span>\n        <span class=\"n\">m32</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">q3</span> <span class=\"o\">*</span> <span class=\"n\">q4</span> <span class=\"o\">+</span> <span class=\"n\">q1</span> <span class=\"o\">*</span> <span class=\"n\">q2</span><span class=\"p\">)</span>\n        <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">m23</span><span class=\"p\">,</span> <span class=\"n\">m13</span><span class=\"p\">)</span>\n        <span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">((</span><span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">m33</span> <span class=\"o\">*</span> <span class=\"n\">m33</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">m33</span><span class=\"p\">)</span>\n        <span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">m32</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">m31</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">psi</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.euler_zyz_to_quaternion\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.euler_zyz_to_quaternion/#pyaedt.modeler.geometry_operators.GeometryOperators.euler_zyz_to_quaternion\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">euler_zyz_to_quaternion</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">psi</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert the Euler angles following rotation sequence ZYZ to a quaternion.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        phi : float</span>\n<span class=\"sd\">            Euler angle psi in radians.</span>\n<span class=\"sd\">        theta : float</span>\n<span class=\"sd\">            Euler angle theta in radians.</span>\n<span class=\"sd\">        psi : float</span>\n<span class=\"sd\">            Euler angle phi in radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">phi</span>\n        <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">theta</span>\n        <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"n\">psi</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">+</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"n\">q4</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">((</span><span class=\"n\">t1</span> <span class=\"o\">+</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">q1</span><span class=\"p\">,</span> <span class=\"n\">q2</span><span class=\"p\">,</span> <span class=\"n\">q3</span><span class=\"p\">,</span> <span class=\"n\">q4</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.deg2rad\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.deg2rad/#pyaedt.modeler.geometry_operators.GeometryOperators.deg2rad\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">deg2rad</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert the angle from degrees to radians.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle in degrees.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Angle in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n        <span class=\"k\">return</span> <span class=\"n\">angle</span> <span class=\"o\">/</span> <span class=\"mf\">180.0</span> <span class=\"o\">*</span> <span class=\"n\">pi</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.rad2deg\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.rad2deg/#pyaedt.modeler.geometry_operators.GeometryOperators.rad2deg\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert the angle from radians to degrees.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle in radians.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Angle in degrees.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n        <span class=\"k\">return</span> <span class=\"n\">angle</span> <span class=\"o\">*</span> <span class=\"mf\">180.0</span> <span class=\"o\">/</span> <span class=\"n\">pi</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.atan2\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.atan2/#pyaedt.modeler.geometry_operators.GeometryOperators.atan2\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">atan2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Implementation of atan2 that does not suffer from the following issues:</span>\n<span class=\"sd\">        math.atan2(0.0, 0.0) = 0.0</span>\n<span class=\"sd\">        math.atan2(-0.0, 0.0) = -0.0</span>\n<span class=\"sd\">        math.atan2(0.0, -0.0) = 3.141592653589793</span>\n<span class=\"sd\">        math.atan2(-0.0, -0.0) = -3.141592653589793</span>\n<span class=\"sd\">        and returns always 0.0.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        y : float</span>\n<span class=\"sd\">            Y-axis value for atan2.</span>\n\n<span class=\"sd\">        x : float</span>\n<span class=\"sd\">            X-axis value for atan2.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">eps</span> <span class=\"o\">=</span> <span class=\"mf\">7.0</span> <span class=\"o\">/</span> <span class=\"mf\">3.0</span> <span class=\"o\">-</span> <span class=\"mf\">4.0</span> <span class=\"o\">/</span> <span class=\"mf\">3.0</span> <span class=\"o\">-</span> <span class=\"mf\">1.0</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">eps</span><span class=\"p\">:</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">eps</span><span class=\"p\">:</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.q_prod\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.q_prod/#pyaedt.modeler.geometry_operators.GeometryOperators.q_prod\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">q_prod</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the product of two quaternions, ``p`` and ``q``, defined as:</span>\n<span class=\"sd\">        p = p0 + p&#39; = p0 + ip1 + jp2 + kp3.</span>\n<span class=\"sd\">        q = q0 + q&#39; = q0 + iq1 + jq2 + kq3.</span>\n<span class=\"sd\">        r = pq = p0q0 - p&#39; \u2022 q&#39; + p0q&#39; + q0p&#39; + p&#39; x q&#39;.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p : List</span>\n<span class=\"sd\">            List of ``[p1, p2, p3, p4]`` coordinates for quaternion ``p``.</span>\n\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[p1, p2, p3, p4]`` coordinates for quaternion ``q``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of [r1, r2, r3, r4] coordinates for the result quaternion.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">p0</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">pv</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"n\">q0</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">qv</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n\n        <span class=\"n\">r0</span> <span class=\"o\">=</span> <span class=\"n\">p0</span> <span class=\"o\">*</span> <span class=\"n\">q0</span> <span class=\"o\">-</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">pv</span><span class=\"p\">,</span> <span class=\"n\">qv</span><span class=\"p\">)</span>\n\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_prod</span><span class=\"p\">(</span><span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"n\">qv</span><span class=\"p\">)</span>\n        <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_prod</span><span class=\"p\">(</span><span class=\"n\">q0</span><span class=\"p\">,</span> <span class=\"n\">pv</span><span class=\"p\">)</span>\n        <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">pv</span><span class=\"p\">,</span> <span class=\"n\">qv</span><span class=\"p\">)</span>\n        <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">t3</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">r0</span><span class=\"p\">,</span> <span class=\"n\">rv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">rv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">rv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.q_rotation\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation/#pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">q_rotation</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the rotation of a vector, defined by a quaternion.</span>\n<span class=\"sd\">        Evaluated as:</span>\n<span class=\"sd\">        ``&quot;q = q0 + q&#39; = q0 + iq1 + jq2 + kq3&quot;``,</span>\n<span class=\"sd\">        ``&quot;w = qvq* = (q0^2 - |q&#39;|^2)v + 2(q&#39; \u2022 v)q&#39; + 2q0(q&#39; x v)&quot;``.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        v : List</span>\n<span class=\"sd\">            List of ``[v1, v2, v3]`` coordinates for the vector.</span>\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[w1, w2, w3]`` coordinates for the result vector ``w``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q0</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">qv</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n\n        <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">q0</span> <span class=\"o\">*</span> <span class=\"n\">q0</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">qv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">qv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">qv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">qv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">qv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">qv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_prod</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n\n        <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">qv</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_prod</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">qv</span><span class=\"p\">)</span>\n\n        <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">qv</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"n\">t4</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_prod</span><span class=\"p\">(</span><span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"n\">q0</span><span class=\"p\">,</span> <span class=\"n\">t3</span><span class=\"p\">)</span>\n\n        <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"n\">t4</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">w</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.q_rotation_inv\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation_inv/#pyaedt.modeler.geometry_operators.GeometryOperators.q_rotation_inv\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">q_rotation_inv</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the inverse rotation of a vector that is defined by a quaternion.</span>\n\n<span class=\"sd\">        It can also be the rotation of the coordinate frame with respect to the vector.</span>\n\n<span class=\"sd\">            q = q0 + q&#39; = q0 + iq1 + jq2 + kq3</span>\n<span class=\"sd\">            q* = q0 - q&#39; = q0 - iq1 - jq2 - kq3</span>\n<span class=\"sd\">            w = q*vq</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        v : List</span>\n<span class=\"sd\">            List of ``[v1, v2, v3]`` coordinates for the vector.</span>\n\n<span class=\"sd\">        q : List</span>\n<span class=\"sd\">            List of ``[q1, q2, q3, q4]`` coordinates for the quaternion.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of ``[w1, w2, w3]`` coordinates for the vector.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]]</span>\n        <span class=\"k\">return</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">q_rotation</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">q1</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.get_polygon_centroid\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.get_polygon_centroid/#pyaedt.modeler.geometry_operators.GeometryOperators.get_polygon_centroid\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_polygon_centroid</span><span class=\"p\">(</span><span class=\"n\">pts</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the centroid of a polygon defined by its points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        pts : List</span>\n<span class=\"sd\">            List of points, with each point defined by its ``[x,y,z]`` coordinates.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List</span>\n<span class=\"sd\">            List of [x,y,z] coordinates for the centroid of the polygon.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pts</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;pts must contain at list one point&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sx</span> <span class=\"o\">=</span> <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">sl2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"n\">pts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pts</span><span class=\"p\">)):</span>  <span class=\"c1\"># counts from 0 to len(points)-1</span>\n            <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"n\">z0</span> <span class=\"o\">=</span> <span class=\"n\">pts</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># in Python points[-1] is last element of points</span>\n            <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"n\">pts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">x1</span> <span class=\"o\">-</span> <span class=\"n\">x0</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">y1</span> <span class=\"o\">-</span> <span class=\"n\">y0</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n            <span class=\"n\">sx</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">x0</span> <span class=\"o\">+</span> <span class=\"n\">x1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">L</span>\n            <span class=\"n\">sy</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">y0</span> <span class=\"o\">+</span> <span class=\"n\">y1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">L</span>\n            <span class=\"n\">L2</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">z1</span> <span class=\"o\">-</span> <span class=\"n\">z0</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x1</span> <span class=\"o\">-</span> <span class=\"n\">x0</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mf\">0.5</span>\n            <span class=\"n\">sz</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">z0</span> <span class=\"o\">+</span> <span class=\"n\">z1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">L2</span>\n            <span class=\"n\">sl</span> <span class=\"o\">+=</span> <span class=\"n\">L</span>\n            <span class=\"n\">sl2</span> <span class=\"o\">+=</span> <span class=\"n\">L2</span>\n        <span class=\"n\">xc</span> <span class=\"o\">=</span> <span class=\"n\">sx</span> <span class=\"o\">/</span> <span class=\"n\">sl</span> <span class=\"k\">if</span> <span class=\"n\">sl</span> <span class=\"o\">!=</span> <span class=\"mf\">0.0</span> <span class=\"k\">else</span> <span class=\"n\">x1</span>\n        <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">sy</span> <span class=\"o\">/</span> <span class=\"n\">sl</span> <span class=\"k\">if</span> <span class=\"n\">sl</span> <span class=\"o\">!=</span> <span class=\"mf\">0.0</span> <span class=\"k\">else</span> <span class=\"n\">y1</span>\n        <span class=\"n\">zc</span> <span class=\"o\">=</span> <span class=\"n\">sz</span> <span class=\"o\">/</span> <span class=\"n\">sl2</span> <span class=\"k\">if</span> <span class=\"n\">sl2</span> <span class=\"o\">!=</span> <span class=\"mf\">0.0</span> <span class=\"k\">else</span> <span class=\"n\">z1</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">xc</span><span class=\"p\">,</span> <span class=\"n\">yc</span><span class=\"p\">,</span> <span class=\"n\">zc</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.cs_xy_pointing_expression\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.cs_xy_pointing_expression/#pyaedt.modeler.geometry_operators.GeometryOperators.cs_xy_pointing_expression\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cs_xy_pointing_expression</span><span class=\"p\">(</span><span class=\"n\">yaw</span><span class=\"p\">,</span> <span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"n\">roll</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return x_pointing and y_pointing vectors as expressions from</span>\n<span class=\"sd\">        the yaw, ptich, and roll input (as strings).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        yaw : str, required</span>\n<span class=\"sd\">            String expression for the yaw angle (rotation about Z-axis)</span>\n<span class=\"sd\">        pitch : str</span>\n<span class=\"sd\">            String expression for the pitch angle (rotation about Y-axis)</span>\n<span class=\"sd\">        roll : str</span>\n<span class=\"sd\">            String expression for the roll angle (rotation about X-axis)</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        [x_pointing, y_pointing] vector expressions.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># X-Pointing</span>\n        <span class=\"n\">xx</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">yaw</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pitch</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n        <span class=\"n\">xy</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">yaw</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pitch</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n        <span class=\"n\">xz</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pitch</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n\n        <span class=\"c1\"># Y-Pointing</span>\n        <span class=\"n\">yx</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">roll</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pitch</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">yaw</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;) - &quot;</span>\n        <span class=\"n\">yx</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">yaw</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">roll</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n\n        <span class=\"n\">yy</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">roll</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">yaw</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pitch</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;) + &quot;</span>\n        <span class=\"n\">yy</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">roll</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)*cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">yaw</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n\n        <span class=\"n\">yz</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sin(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">roll</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; + pi)*cos(&quot;</span> <span class=\"o\">+</span> <span class=\"n\">pitch</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>  <span class=\"c1\"># use pi to avoid negative sign.</span>\n\n        <span class=\"c1\"># x, y pointing vectors for CS</span>\n        <span class=\"n\">x_pointing</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">xx</span><span class=\"p\">,</span> <span class=\"n\">xy</span><span class=\"p\">,</span> <span class=\"n\">xz</span><span class=\"p\">]</span>\n        <span class=\"n\">y_pointing</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">yx</span><span class=\"p\">,</span> <span class=\"n\">yy</span><span class=\"p\">,</span> <span class=\"n\">yz</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">x_pointing</span><span class=\"p\">,</span> <span class=\"n\">y_pointing</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.get_numeric\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.get_numeric/#pyaedt.modeler.geometry_operators.GeometryOperators.get_numeric\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_numeric</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert a string to a numeric value. Discard the suffix.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"mf\">0.0</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">s</span> <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"n\">s</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_small\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_small/#pyaedt.modeler.geometry_operators.GeometryOperators.is_small\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_small</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return True if the number represented by s is zero (i.e very small).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        s, numeric or str</span>\n<span class=\"sd\">            Variable value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">get_numeric</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">fabs</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mf\">2.0</span> <span class=\"o\">*</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">float_info</span><span class=\"o\">.</span><span class=\"n\">epsilon</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.numeric_cs\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.numeric_cs/#pyaedt.modeler.geometry_operators.GeometryOperators.numeric_cs\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">numeric_cs</span><span class=\"p\">(</span><span class=\"n\">cs_in</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return a list of [x,y,z] numeric values given a coordinate system as input.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        cs_in : List of str or str</span>\n<span class=\"sd\">            ``[&quot;x&quot;, &quot;y&quot;, &quot;z&quot;]`` or &quot;Global&quot;.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">cs_in</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">cs_in</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Global&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">cs_in</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cs_in</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">get_numeric</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">str</span> <span class=\"k\">else</span> <span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">cs_in</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.orient_polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.orient_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.orient_polygon\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">orient_polygon</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">clockwise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Orient a polygon clockwise or counterclockwise. The vertices should be already ordered either way.</span>\n<span class=\"sd\">        Use this function to change the orientation.</span>\n<span class=\"sd\">        The polygon is represented by its vertices coordinates.</span>\n\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        x : List</span>\n<span class=\"sd\">            List of x coordinates of the vertices. Length must be &gt;= 1.</span>\n<span class=\"sd\">            Degenerate polygon with only 2 points is also accepted, in this case the points are returned unchanged.</span>\n<span class=\"sd\">        y : List</span>\n<span class=\"sd\">            List of y coordinates of the vertices. Must be of the same length as x.</span>\n<span class=\"sd\">        clockwise : bool</span>\n<span class=\"sd\">            If ``True`` the polygon is oriented clockwise, if ``False`` it is oriented counterclockwise.</span>\n<span class=\"sd\">            Default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of List</span>\n<span class=\"sd\">            Lists of oriented vertices.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">x_ret</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[:]</span>\n        <span class=\"n\">y_ret</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[:]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;x&#39; length must be &gt;= 2&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;y&#39; must be same length as &#39;x&#39;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">x_ret</span><span class=\"p\">,</span> <span class=\"n\">y_ret</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"c1\"># select a vertex on the hull</span>\n        <span class=\"n\">xmin</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">ixmin</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">xmin</span> <span class=\"o\">==</span> <span class=\"n\">el</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ixmin</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">imin</span> <span class=\"o\">=</span> <span class=\"n\">ixmin</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># searching for the minimum y</span>\n            <span class=\"n\">tmpy</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">ixmin</span><span class=\"p\">]</span>\n            <span class=\"n\">min_tmpy</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">tmpy</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">imin</span> <span class=\"o\">=</span> <span class=\"n\">min_tmpy</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">imin</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>  <span class=\"c1\"># the minimum is the first point of the polygon</span>\n            <span class=\"n\">xa</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">ya</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">xb</span> <span class=\"o\">=</span> <span class=\"n\">xmin</span>\n            <span class=\"n\">yb</span> <span class=\"o\">=</span> <span class=\"n\">ymin</span>\n            <span class=\"n\">xc</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">imin</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># the minimum is the last point of the polygon</span>\n            <span class=\"n\">xa</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">ya</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">xb</span> <span class=\"o\">=</span> <span class=\"n\">xmin</span>\n            <span class=\"n\">yb</span> <span class=\"o\">=</span> <span class=\"n\">ymin</span>\n            <span class=\"n\">xc</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">xa</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">ya</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">xb</span> <span class=\"o\">=</span> <span class=\"n\">xmin</span>\n            <span class=\"n\">yb</span> <span class=\"o\">=</span> <span class=\"n\">ymin</span>\n            <span class=\"n\">xc</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">yc</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">imin</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">det</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">xb</span><span class=\"o\">-</span><span class=\"n\">xa</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">yc</span><span class=\"o\">-</span><span class=\"n\">ya</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">xc</span><span class=\"o\">-</span><span class=\"n\">xa</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">yb</span><span class=\"o\">-</span><span class=\"n\">ya</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">det</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>  <span class=\"c1\"># counterclockwise</span>\n            <span class=\"n\">is_CW</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>   <span class=\"c1\"># clockwise</span>\n            <span class=\"n\">is_CW</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># fmt: on</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">clockwise</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">is_CW</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">clockwise</span> <span class=\"ow\">and</span> <span class=\"n\">is_CW</span><span class=\"p\">):</span>\n            <span class=\"n\">x_ret</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n            <span class=\"n\">y_ret</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">x_ret</span><span class=\"p\">,</span> <span class=\"n\">y_ret</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_angle_sign\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign/#pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_angle_sign</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">,</span> <span class=\"n\">right_handed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the signed angle between two geometry vectors.</span>\n<span class=\"sd\">        The sign is evaluated respect to the normal to the plane containing the two vectors as per the following rule.</span>\n<span class=\"sd\">        In case of opposite vectors, it returns an angle equal to 180deg (always positive).</span>\n<span class=\"sd\">        Assuming that the plane normal is normalized (vb == 1), the signed angle is simplified.</span>\n<span class=\"sd\">        For the right-handed rotation from Va to Vb:</span>\n<span class=\"sd\">        - atan2((va x Vb) . vn, va . vb).</span>\n<span class=\"sd\">        For the left-handed rotation from Va to Vb:</span>\n<span class=\"sd\">        - atan2((Vb x va) . vn, va . vb).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        va : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        vb : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n<span class=\"sd\">        vn : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the plane normal.</span>\n<span class=\"sd\">        right_handed : bool</span>\n<span class=\"sd\">            Whether to consider the right-handed rotation from va to vb. The default is ``True``.</span>\n<span class=\"sd\">            When ``False``, left-hand rotation from va to vb is considered.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Angle in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-12</span>\n        <span class=\"n\">cross</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">cross</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span>\n        <span class=\"k\">assert</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_collinear</span><span class=\"p\">(</span><span class=\"n\">cross</span><span class=\"p\">,</span> <span class=\"n\">vn</span><span class=\"p\">),</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;vn must be the normal to the &quot;</span> <span class=\"s2\">&quot;plane containing va and vb.&quot;</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"n\">vnn</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">normalize_vector</span><span class=\"p\">(</span><span class=\"n\">vn</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">right_handed</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">cross</span><span class=\"p\">,</span> <span class=\"n\">vnn</span><span class=\"p\">),</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">mcross</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_cross</span><span class=\"p\">(</span><span class=\"n\">vb</span><span class=\"p\">,</span> <span class=\"n\">va</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">mcross</span><span class=\"p\">,</span> <span class=\"n\">vnn</span><span class=\"p\">),</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.v_angle_sign_2D\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign_2D/#pyaedt.modeler.geometry_operators.GeometryOperators.v_angle_sign_2D\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">v_angle_sign_2D</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">,</span> <span class=\"n\">right_handed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Evaluate the signed angle between two 2D geometry vectors.</span>\n<span class=\"sd\">        Iit the 2D version of the ``GeometryOperators.v_angle_sign`` considering vn = [0,0,1].</span>\n<span class=\"sd\">        In case of opposite vectors, it returns an angle equal to 180deg (always positive).</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        va : List</span>\n<span class=\"sd\">            List of ``[x, y]`` coordinates for the first vector.</span>\n<span class=\"sd\">        vb : List</span>\n<span class=\"sd\">            List of ``[x, y]`` coordinates for the second vector.</span>\n<span class=\"sd\">        right_handed : bool</span>\n<span class=\"sd\">            Whether to consider the right-handed rotation from Va to Vb. The default is ``True``.</span>\n<span class=\"sd\">            When ``False``, left-hand rotation from Va to Vb is considered.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Angle in radians.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">va</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">vb</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">va</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">vb</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">right_handed</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_dot</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">vb</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.point_in_polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.point_in_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.point_in_polygon\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Determine if a point is inside or outside a polygon, both located on the same plane.</span>\n\n<span class=\"sd\">        The method implements the radial algorithm (https://es.wikipedia.org/wiki/Algoritmo_radial)</span>\n\n<span class=\"sd\">        point : List</span>\n<span class=\"sd\">            List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        polygon : List</span>\n<span class=\"sd\">            [[x1, x2, ..., xn],[y1, y2, ..., yn]]</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            - ``-1`` When the point is outside the polygon.</span>\n<span class=\"sd\">            - ``0`` When the point is exactly on one of the sides of the polygon.</span>\n<span class=\"sd\">            - ``1`` When the point is inside the polygon.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"n\">tol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-8</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;point must be a list in the form [x, y]&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"n\">pl</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Polygon x and y lists must be the same length&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">asum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">pl</span><span class=\"p\">):</span>\n            <span class=\"n\">vj</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n            <span class=\"n\">vi</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n            <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">vi</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span>  <span class=\"c1\"># point is one of polyline vertices</span>\n            <span class=\"n\">vpj</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">vj</span><span class=\"p\">)</span>\n            <span class=\"n\">vpi</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">vi</span><span class=\"p\">)</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_angle_sign_2D</span><span class=\"p\">(</span><span class=\"n\">vpj</span><span class=\"p\">,</span> <span class=\"n\">vpi</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span>\n            <span class=\"n\">asum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">asum</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">asum</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unexpected error!&quot;</span><span class=\"p\">)</span></div>\n        <span class=\"c1\"># fmt: on</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_point_in_polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_point_in_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.is_point_in_polygon\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Determine if a point is inside or outside a polygon, both located on the same plane.</span>\n\n<span class=\"sd\">        The method implements the radial algorithm (https://es.wikipedia.org/wiki/Algoritmo_radial)</span>\n\n<span class=\"sd\">        point : List</span>\n<span class=\"sd\">            List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        polygon : List</span>\n<span class=\"sd\">            [[x1, x2, ..., xn],[y1, y2, ..., yn]]</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if the point is inside the polygon or exactly on one of its sides.</span>\n<span class=\"sd\">            ``False`` otherwise.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.are_segments_intersecting\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.are_segments_intersecting/#pyaedt.modeler.geometry_operators.GeometryOperators.are_segments_intersecting\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">are_segments_intersecting</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">include_collinear</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Determine if the two segments a and b are intersecting.</span>\n\n<span class=\"sd\">        a1 : List</span>\n<span class=\"sd\">            First point of segment a. List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        a2 : List</span>\n<span class=\"sd\">            Second point of segment a. List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        b1 : List</span>\n<span class=\"sd\">            First point of segment b. List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        b2 : List</span>\n<span class=\"sd\">            Second point of segment b. List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        include_collinear : bool</span>\n<span class=\"sd\">            If ``True`` two segments are considered intersecting also if just one end lies on the other segment.</span>\n<span class=\"sd\">            Default is ``True``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if the segments are intersecting.</span>\n<span class=\"sd\">            ``False`` otherwise.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">def</span> <span class=\"nf\">on_segment</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Given three collinear points p, q, r, the function checks if point q lies on line-segment &#39;pr&#39;</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"ow\">and</span>\n               <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">orientation</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Find the orientation of an ordered triplet (p,q,r) using the slope evaluation.</span>\n            <span class=\"c1\"># The function returns the following values:</span>\n            <span class=\"c1\"># 0 : Collinear points</span>\n            <span class=\"c1\"># 1 : Clockwise points</span>\n            <span class=\"c1\"># -1 : Counterclockwise</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">1</span>  <span class=\"c1\"># Clockwise orientation</span>\n            <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>  <span class=\"c1\"># Counterclockwise orientation</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"mi\">0</span>   <span class=\"c1\"># Collinear orientation</span>\n\n        <span class=\"c1\"># MAIN</span>\n        <span class=\"c1\"># Find the 4 orientations</span>\n        <span class=\"n\">o1</span> <span class=\"o\">=</span> <span class=\"n\">orientation</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">)</span>\n        <span class=\"n\">o2</span> <span class=\"o\">=</span> <span class=\"n\">orientation</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">)</span>\n        <span class=\"n\">o3</span> <span class=\"o\">=</span> <span class=\"n\">orientation</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">)</span>\n        <span class=\"n\">o4</span> <span class=\"o\">=</span> <span class=\"n\">orientation</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># General case</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o1</span> <span class=\"o\">!=</span> <span class=\"n\">o2</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">o3</span> <span class=\"o\">!=</span> <span class=\"n\">o4</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">include_collinear</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># a1 , a2 and b1 are collinear and b1 lies on segment a1a2</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o1</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"c1\"># a1 , a2 and b2 are collinear and b2 lies on segment a1a2</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"c1\"># b1 , b2 and a1 are collinear and a1 lies on segment b1b2</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"c1\"># b1 , b2 and a2 are collinear and a2 lies on segment b1b2</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o4</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># Special Cases</span>\n        <span class=\"c1\"># a1 , a2 and b1 are collinear and b1 lies on segment a1a2</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o1</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">include_collinear</span>\n        <span class=\"c1\"># a1 , a2 and b2 are collinear and b2 lies on segment a1a2</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">include_collinear</span>\n        <span class=\"c1\"># b1 , b2 and a1 are collinear and a1 lies on segment b1b2</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">include_collinear</span>\n        <span class=\"c1\"># b1 , b2 and a2 are collinear and a2 lies on segment b1b2</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o4</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">on_segment</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">include_collinear</span>\n        <span class=\"c1\"># If none of the cases</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n        <span class=\"c1\"># fmt: on</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_segment_intersecting_polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_segment_intersecting_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.is_segment_intersecting_polygon\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_segment_intersecting_polygon</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Determine if a segment defined by two points ``a`` and ``b`` intersects a polygon.</span>\n<span class=\"sd\">        Points on the vertices and on the polygon boundaries are not considered intersecting.</span>\n\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            First point of the segment. List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            Second point of the segment. List of ``[x, y]`` coordinates.</span>\n<span class=\"sd\">        polygon : List</span>\n<span class=\"sd\">            [[x1, x2, ..., xn],[y1, y2, ..., yn]]</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            ``True`` if the segment intersect the polygon. ``False`` otherwise.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;point must be a list in the form [x, y]&quot;</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;point must be a list in the form [x, y]&quot;</span>\n        <span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"n\">pl</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Polygon x and y lists must be the same length&quot;</span>\n\n        <span class=\"n\">a_in</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">)</span>\n        <span class=\"n\">b_in</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">a_in</span> <span class=\"o\">!=</span> <span class=\"n\">b_in</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>  <span class=\"c1\"># one point is inside and one is outside, no need for further investigation.</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">pl</span><span class=\"p\">):</span>\n            <span class=\"n\">vj</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n            <span class=\"n\">vi</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">polygon</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n            <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">are_segments_intersecting</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">vi</span><span class=\"p\">,</span> <span class=\"n\">vj</span><span class=\"p\">,</span> <span class=\"n\">include_collinear</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_perpendicular\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_perpendicular/#pyaedt.modeler.geometry_operators.GeometryOperators.is_perpendicular\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_perpendicular</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if two vectors are perpendicular.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first vector.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second vector.</span>\n<span class=\"sd\">        tol : float</span>\n<span class=\"sd\">            Linear tolerance. The default value is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if vectors are perpendicular, ``False`` otherwise.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">_v_dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span> <span class=\"o\">*</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.is_point_projection_in_segment\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.is_point_projection_in_segment/#pyaedt.modeler.geometry_operators.GeometryOperators.is_point_projection_in_segment\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_point_projection_in_segment</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if a point projection lies on the segment defined by two points.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the reference point ``p``.</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the segment.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the segment.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when the projection point lies on the segment defined by the two points, ``False`` otherwise.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">dy</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">inner_product</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">*</span><span class=\"n\">dx</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">*</span><span class=\"n\">dy</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">inner_product</span> <span class=\"o\">&lt;=</span> <span class=\"n\">dx</span><span class=\"o\">*</span><span class=\"n\">dx</span> <span class=\"o\">+</span> <span class=\"n\">dy</span><span class=\"o\">*</span><span class=\"n\">dy</span></div>\n        <span class=\"c1\"># fmt: on</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.point_segment_distance\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.point_segment_distance/#pyaedt.modeler.geometry_operators.GeometryOperators.point_segment_distance\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">point_segment_distance</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Calculate the distance between a point ``p`` and a segment defined by two points ``a`` and ``b``.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        p : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the reference point ``p``.</span>\n<span class=\"sd\">        a : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the first point of the segment.</span>\n<span class=\"sd\">        b : List</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates for the second point of the segment.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Distance between the point and the segment.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"n\">den</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">den</span>\n        <span class=\"k\">return</span> <span class=\"n\">d</span></div>\n        <span class=\"c1\"># fmt: on</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.find_largest_rectangle_inside_polygon\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.find_largest_rectangle_inside_polygon/#pyaedt.modeler.geometry_operators.GeometryOperators.find_largest_rectangle_inside_polygon\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_largest_rectangle_inside_polygon</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">,</span> <span class=\"n\">partition_max_order</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Find the largest area rectangles of arbitrary orientation in a polygon.</span>\n\n<span class=\"sd\">        Implements the algorithm described by Rub\u00e9n Molano, et al.</span>\n<span class=\"sd\">        *&quot;Finding the largest area rectangle of arbitrary orientation in a closed contour&quot;*, published in</span>\n<span class=\"sd\">        *Applied Mathematics and Computation*.</span>\n<span class=\"sd\">        https://doi.org/10.1016/j.amc.2012.03.063.</span>\n<span class=\"sd\">        (https://www.sciencedirect.com/science/article/pii/S0096300312003207)</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        polygon : List</span>\n<span class=\"sd\">            [[x1, x2, ..., xn],[y1, y2, ..., yn]]</span>\n<span class=\"sd\">        partition_max_order : float, optional</span>\n<span class=\"sd\">            Order of the lattice partition used to find the quasi-lattice polygon that approximates ``polygon``.</span>\n<span class=\"sd\">            Default is ``16``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of List</span>\n<span class=\"sd\">            List containing the rectangles points. Return all rectangles found.</span>\n<span class=\"sd\">            List is in the form: [[[x1, y1],[x2, y2],...],[[x1, y1],[x2, y2],...],...].</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">def</span> <span class=\"nf\">evaluate_partition_size</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">,</span> <span class=\"n\">partition_max_order</span><span class=\"p\">):</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">polygon</span>\n            <span class=\"n\">max_size</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n            <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">max_size</span><span class=\"o\">/</span><span class=\"n\">partition_max_order</span>\n            <span class=\"k\">return</span> <span class=\"n\">L</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">build_s_ploygon_points</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">):</span>\n            <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">vertices</span>\n\n            <span class=\"c1\"># build the lattice</span>\n            <span class=\"n\">xmin</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">xmin</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">L</span><span class=\"p\">))</span>\n            <span class=\"n\">ymin</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">ymin</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">L</span><span class=\"p\">))</span>\n\n            <span class=\"c1\"># get the lattice points S inside the polygon</span>\n            <span class=\"n\">Spoints</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">xi</span> <span class=\"o\">=</span> <span class=\"n\">xmin</span> <span class=\"o\">+</span> <span class=\"n\">L</span> <span class=\"o\">*</span> <span class=\"n\">i</span>\n                <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">yj</span> <span class=\"o\">=</span> <span class=\"n\">ymin</span> <span class=\"o\">+</span> <span class=\"n\">L</span> <span class=\"o\">*</span> <span class=\"n\">j</span>\n                    <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_point_in_polygon</span><span class=\"p\">([</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">yj</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">]):</span>\n                        <span class=\"n\">Spoints</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">xi</span><span class=\"p\">,</span> <span class=\"n\">yj</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">Spoints</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">build_u_matrix</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">):</span>\n            <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n            <span class=\"c1\"># preallocate the matrix</span>\n            <span class=\"n\">Umatrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"kc\">None</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n                        <span class=\"n\">Umatrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_segment_intersecting_polygon</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">polygon</span><span class=\"p\">):</span>\n                            <span class=\"n\">Umatrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">get_mid_point</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\n                            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_point_in_polygon</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">):</span>\n                                <span class=\"n\">Umatrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                            <span class=\"k\">else</span><span class=\"p\">:</span>\n                                <span class=\"n\">Umatrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_points</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\n            <span class=\"k\">return</span> <span class=\"n\">Umatrix</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">inside</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">U</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"kc\">False</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">compute_largest_rectangle</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">):</span>\n            <span class=\"n\">max_area</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">rectangles</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">inside</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n                        <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                            <span class=\"k\">if</span> <span class=\"n\">inside</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">is_perpendicular</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">U</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]):</span>\n                                <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sum</span><span class=\"p\">(</span><span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_sub</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n                                <span class=\"k\">try</span><span class=\"p\">:</span>\n                                    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"p\">)</span>\n                                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                                    <span class=\"k\">break</span>\n                                <span class=\"k\">if</span> <span class=\"n\">inside</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">inside</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n                                    <span class=\"n\">area</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">v_norm</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">])</span>\n                                    <span class=\"k\">if</span> <span class=\"n\">area</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_area</span><span class=\"p\">:</span>\n                                        <span class=\"n\">max_area</span> <span class=\"o\">=</span> <span class=\"n\">area</span>\n                                        <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]]</span>\n                                        <span class=\"n\">rectangles</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">R</span><span class=\"p\">]</span>\n                                    <span class=\"k\">elif</span> <span class=\"n\">area</span> <span class=\"o\">==</span> <span class=\"n\">max_area</span><span class=\"p\">:</span>\n                                        <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">],</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]]</span>\n                                        <span class=\"n\">rectangles</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">rectangles</span>\n\n        <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">evaluate_partition_size</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">,</span> <span class=\"n\">partition_max_order</span><span class=\"o\">=</span><span class=\"n\">partition_max_order</span><span class=\"p\">)</span>\n        <span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">build_s_ploygon_points</span><span class=\"p\">(</span><span class=\"n\">polygon</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n        <span class=\"n\">U</span> <span class=\"o\">=</span> <span class=\"n\">build_u_matrix</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">polygon</span><span class=\"p\">)</span>\n        <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">compute_largest_rectangle</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">R</span></div>\n        <span class=\"c1\"># fmt: on</span>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.degrees_over_rounded\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.degrees_over_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.degrees_over_rounded\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">degrees_over_rounded</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Ceil of angle.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle in radians which will be converted to degrees and will be over-rounded to the next &quot;digits&quot; decimal.</span>\n<span class=\"sd\">        digits : int</span>\n<span class=\"sd\">            Integer number which is the number of decimals.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.radians_over_rounded\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.radians_over_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.radians_over_rounded\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">radians_over_rounded</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Radian angle ceiling.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle in degrees which will be converted to radians and will be over-rounded to the  next &quot;digits&quot; decimal.</span>\n<span class=\"sd\">        digits : int</span>\n<span class=\"sd\">            Integer number which is the number of decimals.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.degrees_default_rounded\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.degrees_default_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.degrees_default_rounded\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">degrees_default_rounded</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert angle to degree with given digits rounding.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle in radians which will be converted to degrees and will be under-rounded to the next &quot;digits&quot; decimal.</span>\n<span class=\"sd\">        digits : int</span>\n<span class=\"sd\">            Integer number which is the number of decimals.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">degrees</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.radians_default_rounded\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.radians_default_rounded/#pyaedt.modeler.geometry_operators.GeometryOperators.radians_default_rounded\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">radians_default_rounded</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Convert to radians with given round.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        angle : float</span>\n<span class=\"sd\">            Angle in degrees which will be converted to radians and will be under-rounded to the next &quot;digits&quot; decimal.</span>\n<span class=\"sd\">        digits : int</span>\n<span class=\"sd\">            Integer number which is the number of decimals.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">radians</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">digits</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"GeometryOperators.find_closest_points\"><a class=\"viewcode-back\" href=\"../../../../API/_autosummary/pyaedt.modeler.geometry_operators.GeometryOperators.find_closest_points/#pyaedt.modeler.geometry_operators.GeometryOperators.find_closest_points\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_closest_points</span><span class=\"p\">(</span><span class=\"n\">points_list</span><span class=\"p\">,</span> <span class=\"n\">reference_point</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Given a list of points, finds the closest points to a reference point.</span>\n<span class=\"sd\">        It returns a list of points because more than one can be found.</span>\n<span class=\"sd\">        It works with 2D or 3D points. The tolerance used to evaluate the distance</span>\n<span class=\"sd\">        to the reference point can be specified.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        points_list : List of List</span>\n<span class=\"sd\">            List of points. The points can be defined in 2D or 3D space.</span>\n<span class=\"sd\">        reference_point : List</span>\n<span class=\"sd\">            The reference point. The point can be defined in 2D or 3D space (same as points_list).</span>\n<span class=\"sd\">        tol : float, optional</span>\n<span class=\"sd\">            The tolerance used to evaluate the distance. Default is ``1e-6``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List of List</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># fmt: off</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">points_list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">points_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;points_list must be a list of points&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">points_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">points_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;points must be defined in either 2D or 3D space.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">points_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">reference_point</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Points in points_list attribute and reference_point must have the same length.&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># make copy of the input points</span>\n        <span class=\"n\">pl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">[:]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">points_list</span><span class=\"p\">]</span>\n        <span class=\"n\">pr</span> <span class=\"o\">=</span> <span class=\"n\">reference_point</span><span class=\"p\">[:]</span>\n        <span class=\"c1\"># find the closest points</span>\n        <span class=\"n\">dm</span> <span class=\"o\">=</span> <span class=\"mf\">1e12</span>\n        <span class=\"n\">close_points</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pl</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pr</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">-</span><span class=\"n\">dm</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">tol</span><span class=\"p\">:</span>\n                <span class=\"n\">close_points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"n\">dm</span><span class=\"p\">:</span>\n                <span class=\"n\">dm</span> <span class=\"o\">=</span> <span class=\"n\">d</span>\n                <span class=\"n\">close_points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">close_points</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">close_points</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span></div></div>\n        <span class=\"c1\"># fmt: on</span>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/geometry_operators", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "theme_show_toc_level": 1, "theme_logo": {}}