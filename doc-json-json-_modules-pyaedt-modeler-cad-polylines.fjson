{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "pyaedt.modeler.cad.polylines", "body": "<h1>Source code for pyaedt.modeler.cad.polylines</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">_retry_ntimes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">_dim_arg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.cad.object3d</span> <span class=\"kn\">import</span> <span class=\"n\">Object3d</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.modeler.geometry_operators</span> <span class=\"kn\">import</span> <span class=\"n\">GeometryOperators</span>\n\n\n<div class=\"viewcode-block\" id=\"PolylineSegment\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.PolylineSegment/#pyaedt.modeler.cad.polylines.PolylineSegment\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PolylineSegment</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Creates and manipulates a segment of a polyline.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    type : str</span>\n<span class=\"sd\">        Type of the object. Choices are ``&quot;Line&quot;``, ``&quot;Arc&quot;``, ``&quot;Spline&quot;``,</span>\n<span class=\"sd\">        and ``&quot;AngularArc&quot;``.</span>\n<span class=\"sd\">    num_seg : int, optional</span>\n<span class=\"sd\">        Number of segments for the types ``&quot;Arc&quot;``, ``&quot;Spline&quot;``, and</span>\n<span class=\"sd\">        ``&quot;AngularArc&quot;``.  The default is ``0``. For the type</span>\n<span class=\"sd\">        ``Line``, this parameter is ignored.</span>\n<span class=\"sd\">    num_points : int, optional</span>\n<span class=\"sd\">        Number of control points for the type ``Spline``. For other</span>\n<span class=\"sd\">        types, this parameter</span>\n<span class=\"sd\">        is defined automatically.</span>\n<span class=\"sd\">    arc_angle : float or str, optional</span>\n<span class=\"sd\">        Sweep angle in radians or a valid value string. For example,</span>\n<span class=\"sd\">        ``&quot;35deg&quot;`` or ``&quot;Specific</span>\n<span class=\"sd\">        to type AngularArc&quot;``.</span>\n<span class=\"sd\">    arc_center : list or str, optional</span>\n<span class=\"sd\">        List of values in model units or a valid value string. For</span>\n<span class=\"sd\">        example, a list of ``[x, y, z]`` coordinates or ``&quot;Specific to</span>\n<span class=\"sd\">        type AngularArc&quot;``.</span>\n<span class=\"sd\">    arc_plane : str, int optional</span>\n<span class=\"sd\">        Plane in which the arc sweep is performed in the active</span>\n<span class=\"sd\">        coordinate system ``&quot;XY&quot;``, ``&quot;YZ&quot;`` or ``&quot;ZX&quot;``. The default is</span>\n<span class=\"sd\">        ``None``, in which case the plane is determined automatically</span>\n<span class=\"sd\">        by the first coordinate for which the starting point and</span>\n<span class=\"sd\">        center point have the same value.</span>\n\n<span class=\"sd\">    Examples</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    See :class:`pyaedt.Primitives.Polyline`.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arc_angle</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arc_center</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">arc_plane</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n        <span class=\"n\">valid_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Arc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">type</span> <span class=\"ow\">in</span> <span class=\"n\">valid_types</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Segment type must be in </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">valid_types</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_seg</span> <span class=\"o\">=</span> <span class=\"n\">num_seg</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"n\">num_points</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Arc&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">type</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"k\">if</span> <span class=\"nb\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_angle</span> <span class=\"o\">=</span> <span class=\"n\">arc_angle</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">arc_center</span><span class=\"p\">:</span>\n                <span class=\"n\">arc_center</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arc_center</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Arc center must be a list of length 3.&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_center</span> <span class=\"o\">=</span> <span class=\"n\">arc_center</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arc_plane</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">arc_plane</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">XY</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;XY&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">arc_plane</span> <span class=\"o\">==</span> <span class=\"n\">PLANE</span><span class=\"o\">.</span><span class=\"n\">ZX</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ZX&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YZ&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span> <span class=\"o\">=</span> <span class=\"n\">arc_plane</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Polyline\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.Polyline/#pyaedt.modeler.cad.polylines.Polyline\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Polyline</span><span class=\"p\">(</span><span class=\"n\">Object3d</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Creates and manipulates a polyline.</span>\n\n<span class=\"sd\">    The constructor for this class is intended to be called from the</span>\n<span class=\"sd\">    :func:`pyaedt.modeler.Primitives.Primitives.create_polyline` method.</span>\n<span class=\"sd\">    The documentation is provided there.</span>\n\n<span class=\"sd\">    The returned Polyline object exposes the methods for manipulating the polyline.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    primitives : :class:`pyaedt.modeler.Primitives3D.Primitives3D`</span>\n<span class=\"sd\">        Pointer to the parent Primitives object.</span>\n<span class=\"sd\">    src_object : optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    position_list : list, optional</span>\n<span class=\"sd\">        List of positions in the ``[x, y, z]`` format. The default is ``None``.</span>\n<span class=\"sd\">    segment_type : str or list, optional</span>\n<span class=\"sd\">        Define the list of segment types.</span>\n<span class=\"sd\">        Valid arguments are  ``&quot;Line&quot;``, ``&quot;Arc&quot;``, ``&quot;Spline&quot;``, ``&quot;AngularArc&quot;``.</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    cover_surface : bool, optional</span>\n<span class=\"sd\">        The default is ``False``.</span>\n<span class=\"sd\">    close_surface : bool, optional</span>\n<span class=\"sd\">        The default is ``False``.</span>\n<span class=\"sd\">    name : str, optional</span>\n<span class=\"sd\">        The default is ``None``.</span>\n<span class=\"sd\">    matname : str, optional</span>\n<span class=\"sd\">        Name of the material. The default is ``None``.</span>\n<span class=\"sd\">    xsection_type : str, optional</span>\n<span class=\"sd\">        Type of the cross-section. Options are ``&quot;Line&quot;``, ``&quot;Circle&quot;``, ``&quot;Rectangle&quot;``,</span>\n<span class=\"sd\">        and ``&quot;Isosceles Trapezoid&quot;``. The default is ``None``.</span>\n<span class=\"sd\">    xsection_orient : str, optional</span>\n<span class=\"sd\">        Direction of the normal vector to the width of the cross-section.</span>\n<span class=\"sd\">        Options are ``&quot;X&quot;``, ``&quot;Y&quot;``, ``&quot;Z&quot;``, and ``&quot;Auto&quot;``. The</span>\n<span class=\"sd\">        default is ``None``.</span>\n<span class=\"sd\">    xsection_width : float or str, optional</span>\n<span class=\"sd\">        Width or diameter of the cross-section for all types. The default is</span>\n<span class=\"sd\">        ``1``.</span>\n<span class=\"sd\">    xsection_topwidth : float or str, optional</span>\n<span class=\"sd\">        Top width of the cross-section for the type ``&quot;Isosceles Trapezoid&quot;`` only.</span>\n<span class=\"sd\">        The default is ``1``.</span>\n<span class=\"sd\">    xsection_height : float or str, optional</span>\n<span class=\"sd\">        Height of the cross-section for the types ``&quot;Rectangle&quot;`` and ``&quot;Isosceles</span>\n<span class=\"sd\">        Trapezoid&quot;`` only. The default is ``1``.</span>\n<span class=\"sd\">    xsection_num_seg : int, optional</span>\n<span class=\"sd\">        Number of segments in the cross-section surface for the types ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">        ``&quot;Rectangle&quot;`` and ``&quot;Isosceles Trapezoid&quot;``. The default is ``0``.</span>\n<span class=\"sd\">        The value must be ``0`` or greater than ``2``.</span>\n<span class=\"sd\">    xsection_bend_type : str, optional</span>\n<span class=\"sd\">        Type of the bend. The default is ``None``, in which case the bend type</span>\n<span class=\"sd\">        is set to ``&quot;Corner&quot;``. For the type ``&quot;Circle&quot;``, the bend type</span>\n<span class=\"sd\">        should be set to ``&quot;Curved&quot;``.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">primitives</span><span class=\"p\">,</span>\n        <span class=\"n\">src_object</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">position_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">segment_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cover_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">close_surface</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_orient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_width</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_topwidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_height</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">xsection_bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">non_model</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span> <span class=\"o\">=</span> <span class=\"n\">primitives</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">src_object</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span> <span class=\"o\">=</span> <span class=\"n\">src_object</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>  <span class=\"c1\"># This is conimg from</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"n\">src_object</span><span class=\"o\">.</span><span class=\"n\">id</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">=</span> <span class=\"n\">src_object</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_xsection</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_crosssection_arguments</span><span class=\"p\">(</span>\n                <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">xsection_type</span><span class=\"p\">,</span>\n                <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"n\">xsection_orient</span><span class=\"p\">,</span>\n                <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">xsection_width</span><span class=\"p\">,</span>\n                <span class=\"n\">topwidth</span><span class=\"o\">=</span><span class=\"n\">xsection_topwidth</span><span class=\"p\">,</span>\n                <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">xsection_height</span><span class=\"p\">,</span>\n                <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"n\">xsection_num_seg</span><span class=\"p\">,</span>\n                <span class=\"n\">bend_type</span><span class=\"o\">=</span><span class=\"n\">xsection_bend_type</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">position_list</span><span class=\"p\">]</span>\n            <span class=\"c1\"># When close surface or cover_surface are set to True, ensure the start point and end point are coincident,</span>\n            <span class=\"c1\"># and insert a line segment to achieve this if necessary</span>\n            <span class=\"k\">if</span> <span class=\"n\">cover_surface</span><span class=\"p\">:</span>\n                <span class=\"n\">close_surface</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span> <span class=\"o\">=</span> <span class=\"n\">close_surface</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_covered</span> <span class=\"o\">=</span> <span class=\"n\">cover_surface</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">segment_type</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_type</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n                    <span class=\"c1\"># self._segment_types = copy(segment_type)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">segment_type</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span> <span class=\"o\">=</span> <span class=\"n\">segment_type</span>\n\n            <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_point_segment_string_array</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">non_model</span><span class=\"p\">:</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;NonModel#&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_default_object_attributes</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matname</span><span class=\"o\">=</span><span class=\"n\">matname</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">flag</span><span class=\"p\">)</span>\n\n            <span class=\"n\">new_object_name</span> <span class=\"o\">=</span> <span class=\"n\">_retry_ntimes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">m_Editor</span><span class=\"o\">.</span><span class=\"n\">CreatePolyline</span><span class=\"p\">,</span> <span class=\"n\">varg1</span><span class=\"p\">,</span> <span class=\"n\">varg2</span><span class=\"p\">)</span>\n\n            <span class=\"n\">Object3d</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">primitives</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">new_object_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">start_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of the ``[x, y, z]`` coordinates for the starting point in the polyline</span>\n<span class=\"sd\">        object in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the starting point in the polyline</span>\n<span class=\"sd\">            object.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">end_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of the ``[x, y, z]`` coordinates for the ending point in the polyline</span>\n<span class=\"sd\">        object in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for the ending point in the polyline</span>\n<span class=\"sd\">            object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromObject</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">position</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">points</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Polyline Points.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positions</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">vertex_positions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List of the ``[x, y, z]`` coordinates for all vertex positions in the</span>\n<span class=\"sd\">        polyline object in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of the ``[x, y, z]`` coordinates for all vertex positions in the</span>\n<span class=\"sd\">            polyline object.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexIDsFromObject</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.GetVertexPosition</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">id_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">get_object_vertices</span><span class=\"p\">(</span><span class=\"n\">partID</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n        <span class=\"n\">position_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">get_vertex_position</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">id_list</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">position_list</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_pl_point</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pt</span><span class=\"p\">):</span>\n        <span class=\"n\">pt_data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PLPoint&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;X:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">))</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Y:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">))</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Z:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">pt_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">pt_data</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_point_segment_string_array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve the parameter arrays for specifying the points and segments of a polyline</span>\n<span class=\"sd\">        used in the :class:`pyaedt.modeler.Primitives.Polyline` constructor.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">position_list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_positions</span>\n        <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span>\n\n        <span class=\"k\">assert</span> <span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"p\">),</span> <span class=\"s2\">&quot;The ``position_list`` argument must be a list of positions with at least one point.&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">segment_types</span><span class=\"p\">:</span>\n            <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">))]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">):</span>\n            <span class=\"n\">segment_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">segment_types</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Convert all string-type entries in the segment_types list to PolylineSegments</span>\n            <span class=\"k\">for</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">seg</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                    <span class=\"n\">segment_types</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Invalid segment_types input of type </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">)))</span>\n\n        <span class=\"c1\"># Add a closing point if needed</span>\n        <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylineParameters&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsPolylineCovered:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_covered</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;IsPolylineClosed:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># PointsArray</span>\n        <span class=\"n\">points_str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylinePoints&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">points_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n        <span class=\"c1\"># Segments Array</span>\n        <span class=\"n\">segment_str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylineSegments&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">pos_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">vertex_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">index_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">vertex_count</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">current_segment</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">if</span> <span class=\"n\">vertex_count</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">segment_types</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># Check the special case of a closed polyline needing an additional Line segment</span>\n                        <span class=\"k\">if</span> <span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                            <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                            <span class=\"n\">current_segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">break</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">current_segment</span> <span class=\"o\">=</span> <span class=\"n\">segment_types</span><span class=\"p\">[</span><span class=\"n\">vertex_count</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Number of segments inconsistent with the number of points!&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">current_segment</span><span class=\"p\">:</span>\n                <span class=\"n\">seg_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_array</span><span class=\"p\">(</span>\n                    <span class=\"n\">current_segment</span><span class=\"p\">,</span> <span class=\"n\">start_index</span><span class=\"o\">=</span><span class=\"n\">index_count</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"n\">pos_count</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">segment_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">seg_str</span><span class=\"p\">)</span>\n\n                <span class=\"n\">pos_count_incr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">num_points</span><span class=\"p\">):</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n                        <span class=\"n\">points_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">extra_points</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n                        <span class=\"n\">index_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pos_count</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">):</span>\n                            <span class=\"k\">if</span> <span class=\"n\">current_segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Arc&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_closed</span><span class=\"p\">:</span>\n                                <span class=\"n\">position_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                            <span class=\"k\">else</span><span class=\"p\">:</span>\n                                <span class=\"n\">err_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Insufficient points in position_list to complete the specified segment list&quot;</span>\n                                <span class=\"k\">raise</span> <span class=\"ne\">IndexError</span><span class=\"p\">(</span><span class=\"n\">err_str</span><span class=\"p\">)</span>\n                        <span class=\"n\">points_str</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"n\">pos_count</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">]))</span>\n                        <span class=\"n\">pos_count_incr</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">index_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">pos_count</span> <span class=\"o\">+=</span> <span class=\"n\">pos_count_incr</span>\n                <span class=\"n\">vertex_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">points_str</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">segment_str</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Poly Line Cross Section</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_xsection</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">varg1</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_segment_array</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">segment_data</span><span class=\"p\">,</span> <span class=\"n\">start_index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve a property array for a polyline segment for use in the</span>\n<span class=\"sd\">        :class:`pyaedt.modeler.Primitives.Polyline` constructor.</span>\n\n<span class=\"sd\">         Parameters</span>\n<span class=\"sd\">         ----------</span>\n<span class=\"sd\">         segment_data : :class:`pyaedt.modeler.Primitives.PolylineSegment` or str</span>\n<span class=\"sd\">             Pointer to the calling object that provides additional functionality</span>\n<span class=\"sd\">             or a string with the segment type ``Line`` or ``Arc``.</span>\n<span class=\"sd\">         start_index : int, string</span>\n<span class=\"sd\">             Starting vertex index of the segment within a compound polyline. The</span>\n<span class=\"sd\">             default is ``0``.</span>\n<span class=\"sd\">         start_point : list, optional</span>\n<span class=\"sd\">             Position of the first point for type ``AngularArc``. The default is</span>\n<span class=\"sd\">             ``None``. Float values are considered in model units.</span>\n\n<span class=\"sd\">         Returns</span>\n<span class=\"sd\">         ------</span>\n<span class=\"sd\">         list</span>\n<span class=\"sd\">             List of properties defining a polyline segment.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">segment_data</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">seg</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;NAME:PLSegment&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;SegmentType:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;StartIndex:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">start_index</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;NoOfPoints:=&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">num_points</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">seg</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NoOfSegments:=&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">num_seg</span><span class=\"p\">)]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># from start-point and angle, calculate the mid- and end-points</span>\n            <span class=\"c1\"># Also identify the plane of the arc (&quot;YZ&quot;, &quot;ZX&quot;, &quot;XY&quot;)</span>\n            <span class=\"n\">plane_axes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s2\">&quot;ZX&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]}</span>\n            <span class=\"k\">assert</span> <span class=\"n\">start_point</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Start-point must be defined for an AngularArc Segment&quot;</span>\n            <span class=\"n\">c_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">)</span>\n            <span class=\"n\">p0_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Accept the user input for the plane of rotation - let the modeler fail if invalid</span>\n                <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_plane</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Compare the numeric values of start-point and center-point to determine the orientation plane</span>\n                <span class=\"k\">if</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n                    <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"s2\">&quot;YZ&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">elif</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                    <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;ZX&quot;</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"s2\">&quot;ZX&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">elif</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n                    <span class=\"n\">plane_def</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">,</span> <span class=\"n\">plane_axes</span><span class=\"p\">[</span><span class=\"s2\">&quot;XY&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Start point and arc-center do not lie on a common base plane.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">mod_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n            <span class=\"n\">seg</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;ArcAngle:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_angle</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ArcCenterX:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">mod_units</span><span class=\"p\">)),</span>\n                <span class=\"s2\">&quot;ArcCenterY:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">mod_units</span><span class=\"p\">)),</span>\n                <span class=\"s2\">&quot;ArcCenterZ:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_center</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">mod_units</span><span class=\"p\">)),</span>\n                <span class=\"s2\">&quot;ArcPlane:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">plane_def</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"c1\"># Calculate the extra two points of the angular arc in the alpha-beta plane</span>\n            <span class=\"n\">alph_index</span> <span class=\"o\">=</span> <span class=\"n\">plane_def</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">beta_index</span> <span class=\"o\">=</span> <span class=\"n\">plane_def</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">c_alph</span> <span class=\"o\">=</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span>\n            <span class=\"n\">c_beta</span> <span class=\"o\">=</span> <span class=\"n\">c_xyz</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span>\n            <span class=\"n\">p0_alph</span> <span class=\"o\">=</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p0_beta</span> <span class=\"o\">=</span> <span class=\"n\">p0_xyz</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">c_beta</span>\n\n            <span class=\"c1\"># rotate to generate the new points</span>\n            <span class=\"n\">arc_ang_rad</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">evaluate_expression</span><span class=\"p\">(</span><span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">arc_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">rot_angle</span> <span class=\"o\">=</span> <span class=\"n\">arc_ang_rad</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span>\n            <span class=\"n\">p1_alph</span> <span class=\"o\">=</span> <span class=\"n\">p0_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">p0_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">p1_beta</span> <span class=\"o\">=</span> <span class=\"n\">p0_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">p0_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">p2_alph</span> <span class=\"o\">=</span> <span class=\"n\">p1_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">p1_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n            <span class=\"n\">p2_beta</span> <span class=\"o\">=</span> <span class=\"n\">p1_beta</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">p1_alph</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">rot_angle</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Generate the  2 new points in XYZ</span>\n            <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p0_xyz</span><span class=\"p\">)</span>\n            <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p1_alph</span> <span class=\"o\">+</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p1</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p1_beta</span> <span class=\"o\">+</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p0_xyz</span><span class=\"p\">)</span>\n            <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"n\">alph_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p2_alph</span> <span class=\"o\">+</span> <span class=\"n\">c_alph</span>\n            <span class=\"n\">p2</span><span class=\"p\">[</span><span class=\"n\">beta_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p2_beta</span> <span class=\"o\">+</span> <span class=\"n\">c_beta</span>\n            <span class=\"n\">segment_data</span><span class=\"o\">.</span><span class=\"n\">extra_points</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">seg</span>\n\n<div class=\"viewcode-block\" id=\"Polyline.clone\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.Polyline.clone/#pyaedt.modeler.cad.polylines.Polyline.clone\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Clone a polyline object.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        pyaedt.modeler.polylines.Polyline</span>\n<span class=\"sd\">            Polyline object that was created.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Copy</span>\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.Paste</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; primitives = self.aedtapp.modeler</span>\n<span class=\"sd\">        &gt;&gt;&gt; P1 = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P2 = P1.clone()</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">vArg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Selections&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">vArg1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">Paste</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_new_polyline</span><span class=\"p\">()</span></div>\n\n    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_add_new_polyline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">new_objects</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">find_new_objects</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_objects</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n        <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">new_objects</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">new_polyline</span> <span class=\"o\">=</span> <span class=\"n\">Polyline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"p\">,</span> <span class=\"n\">src_object</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">new_name</span><span class=\"p\">)</span>\n        <span class=\"n\">new_polyline</span><span class=\"o\">.</span><span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"n\">new_polyline</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_polyline</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">object_id_dict</span><span class=\"p\">[</span><span class=\"n\">new_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_polyline</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_polyline</span>\n\n<div class=\"viewcode-block\" id=\"Polyline.remove_vertex\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.Polyline.remove_vertex/#pyaedt.modeler.cad.polylines.Polyline.remove_vertex\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_vertex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">abstol</span><span class=\"o\">=</span><span class=\"mf\">1e-9</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove a vertex from an existing polyline by position.</span>\n\n<span class=\"sd\">        You must enter the exact position of the vertex as a list</span>\n<span class=\"sd\">        of ``[x, y, z]`` coordinates in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position : list</span>\n<span class=\"sd\">            List of ``[x, y, z]`` coordinates specifying the vertex to remove.</span>\n<span class=\"sd\">        abstol : float, optional</span>\n<span class=\"sd\">            Absolute tolerance of the comparison of a specified position to the</span>\n<span class=\"sd\">            vertex positions. The default is ``1e-9``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DeletePolylinePoint</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        Use floating point values for the vertex positions.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_vertex([0, 1, 2])</span>\n\n<span class=\"sd\">        Use string expressions for the vertex position.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_vertex([&quot;0mm&quot;, &quot;1mm&quot;, &quot;2mm&quot;])</span>\n\n<span class=\"sd\">        Use string expressions for the vertex position and include an absolute</span>\n<span class=\"sd\">        tolerance when searching for the vertex to be removed.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_vertex([&quot;0mm&quot;, &quot;1mm&quot;, &quot;2mm&quot;], abstol=1e-6)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">_app</span><span class=\"o\">.</span><span class=\"n\">_is_object_oriented_enabled</span><span class=\"p\">():</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"s2\">&quot;CreatePolyline:1&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">segments</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">GetChildNames</span><span class=\"p\">()</span>\n            <span class=\"n\">seg_id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">for</span> <span class=\"n\">seg</span> <span class=\"ow\">in</span> <span class=\"n\">segments</span><span class=\"p\">:</span>\n                <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Point1&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">([</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]])</span>\n                <span class=\"n\">pos_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n                <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pos_xyz</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">abstol</span>\n                <span class=\"k\">if</span> <span class=\"n\">found_vertex</span><span class=\"p\">:</span>\n                    <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">GetChildObject</span><span class=\"p\">(</span><span class=\"n\">seg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetPropValue</span><span class=\"p\">(</span><span class=\"s2\">&quot;Point2&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">([</span><span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">point</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]])</span>\n                <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pos_xyz</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">abstol</span>\n                <span class=\"k\">if</span> <span class=\"n\">found_vertex</span><span class=\"p\">:</span>\n                    <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"k\">break</span>\n                <span class=\"n\">seg_id</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">pos_xyz</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">vertex_pos</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertex_positions</span><span class=\"p\">):</span>\n                <span class=\"c1\"># compare the specified point with the vertex data using an absolute tolerance</span>\n                <span class=\"c1\"># (default of math.isclose is 1e-9 which should be ok in almost all cases)</span>\n                <span class=\"n\">found_vertex</span> <span class=\"o\">=</span> <span class=\"n\">GeometryOperators</span><span class=\"o\">.</span><span class=\"n\">points_distance</span><span class=\"p\">(</span><span class=\"n\">vertex_pos</span><span class=\"p\">,</span> <span class=\"n\">pos_xyz</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">abstol</span>\n                <span class=\"k\">if</span> <span class=\"n\">found_vertex</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">ind</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertex_positions</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">seg_id</span> <span class=\"o\">=</span> <span class=\"n\">ind</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">seg_id</span> <span class=\"o\">=</span> <span class=\"n\">ind</span>\n                        <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                    <span class=\"k\">break</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">found_vertex</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Specified vertex </span><span class=\"si\">{}</span><span class=\"s2\"> not found in polyline </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DeletePolylinePoint</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;NAME:Delete Point&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Segment Indices:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"n\">seg_id</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;At Start:=&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">at_start</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Polyline.remove_edges\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.Polyline.remove_edges/#pyaedt.modeler.cad.polylines.Polyline.remove_edges\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remove_edges</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edge_id</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove a vertex from an existing polyline by position.</span>\n\n<span class=\"sd\">        You must enter the exact position of the vertex as a list</span>\n<span class=\"sd\">        of ``[x, y, z]`` coordinates in the object&#39;s coordinate system.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        edge_id : int or list of int</span>\n<span class=\"sd\">            One or more edge IDs within the total number of edges within the polyline.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.DeletePolylinePoint</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.remove_edges(edge_id=0)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">edge_id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">edge_id</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">DeletePolylinePoint</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;NAME:Delete Point&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Segment Indices:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">edge_id</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;At Start:=&quot;</span><span class=\"p\">,</span>\n                    <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid edge ID </span><span class=\"si\">{}</span><span class=\"s2\"> is specified on polyline </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">edge_id</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Polyline.set_crosssection_properties\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.Polyline.set_crosssection_properties/#pyaedt.modeler.cad.polylines.Polyline.set_crosssection_properties\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_crosssection_properties</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">topwidth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bend_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Set the properties of an existing polyline object.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        type : str, optional</span>\n<span class=\"sd\">            Types of the cross-sections. Options are ``&quot;Line&quot;``, ``&quot;Circle&quot;``, ``&quot;Rectangle&quot;``,</span>\n<span class=\"sd\">            and ``&quot;Isosceles Trapezoid&quot;``. The default is ``None``.</span>\n<span class=\"sd\">        orient : str, optional</span>\n<span class=\"sd\">            Direction of the normal vector to the width of the cross-section.</span>\n<span class=\"sd\">            Options are ``&quot;X&quot;``, ``&quot;Y&quot;``, ``&quot;Z&quot;``, and ``&quot;Auto&quot;``. The default</span>\n<span class=\"sd\">            is ``None``, which sets the orientation to ``&quot;Auto&quot;``.</span>\n<span class=\"sd\">        width : float or str, optional</span>\n<span class=\"sd\">           Width or diameter of the cross-section for all types. The default is</span>\n<span class=\"sd\">           ``0``.</span>\n<span class=\"sd\">        topwidth : float or str</span>\n<span class=\"sd\">           Top width of the cross-section for the type ``&quot;Isosceles Trapezoid&quot;``</span>\n<span class=\"sd\">           only. The default is ``0``.</span>\n<span class=\"sd\">        height : float or str</span>\n<span class=\"sd\">            Height of the cross-section for the types ``&quot;Rectangle&quot;`` and `&quot;Isosceles</span>\n<span class=\"sd\">            Trapezoid&quot;`` only. The default is ``0``.</span>\n<span class=\"sd\">        num_seg : int, optional</span>\n<span class=\"sd\">            Number of segments in the cross-section surface for the types ``&quot;Circle&quot;``,</span>\n<span class=\"sd\">            ``&quot;Rectangle&quot;``, and ``&quot;Isosceles Trapezoid&quot;``. The default is ``0``.</span>\n<span class=\"sd\">            The value must be ``0`` or greater than ``2``.</span>\n<span class=\"sd\">        bend_type : str, optional</span>\n<span class=\"sd\">            Type of the bend. The default is ``None``, in which case the bend type</span>\n<span class=\"sd\">            is set to ``&quot;Corner&quot;``. For the type ``&quot;Circle&quot;``, the bend type should be</span>\n<span class=\"sd\">            set to ``&quot;Curved&quot;``.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.ChangeProperty</span>\n\n<span class=\"sd\">        Examples</span>\n<span class=\"sd\">        --------</span>\n<span class=\"sd\">        &gt;&gt;&gt; P = modeler.create_polyline([[0, 1, 2], [0, 2, 3], [2, 1, 4]])</span>\n<span class=\"sd\">        &gt;&gt;&gt; P.set_crosssection_properties(type=&quot;Circle&quot;, width=&quot;1mm&quot;)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Set the default section type to &quot;None&quot;</span>\n        <span class=\"n\">section_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_type</span><span class=\"p\">:</span>\n            <span class=\"n\">section_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;None&quot;</span>\n\n        <span class=\"c1\"># Set the default orientation to &quot;Auto&quot;</span>\n        <span class=\"n\">section_orient</span> <span class=\"o\">=</span> <span class=\"n\">orient</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_orient</span><span class=\"p\">:</span>\n            <span class=\"n\">section_orient</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Auto&quot;</span>\n\n        <span class=\"c1\"># Set the default bend-type to &quot;Corner&quot;</span>\n        <span class=\"n\">section_bend</span> <span class=\"o\">=</span> <span class=\"n\">bend_type</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section_bend</span><span class=\"p\">:</span>\n            <span class=\"n\">section_bend</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Corner&quot;</span>\n\n        <span class=\"c1\"># Ensure number-of segments is valid</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_seg</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">num_seg</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Number of segments for a cross-section must be 0 or greater than 2.&quot;</span>\n\n        <span class=\"n\">model_units</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">model_units</span>\n\n        <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DCmdTab&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">arg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_type</span><span class=\"p\">])</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Orientation&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_orient</span><span class=\"p\">])</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Bend Type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">section_bend</span><span class=\"p\">])</span>\n        <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Width/Diameter&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n        <span class=\"k\">if</span> <span class=\"n\">section_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Rectangle&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Height&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n        <span class=\"k\">elif</span> <span class=\"n\">section_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Circle&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Number of Segments&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_seg</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"n\">section_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Isosceles Trapezoid&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Top Width&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">topwidth</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n            <span class=\"n\">arg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;NAME:Height&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">,</span> <span class=\"n\">_dim_arg</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">model_units</span><span class=\"p\">)])</span>\n        <span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg3</span><span class=\"p\">)</span>\n        <span class=\"n\">arg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg2</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Polyline.insert_segment\"><a class=\"viewcode-back\" href=\"../../../../../API/_autosummary/pyaedt.modeler.cad.polylines.Polyline.insert_segment/#pyaedt.modeler.cad.polylines.Polyline.insert_segment\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">insert_segment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">position_list</span><span class=\"p\">,</span> <span class=\"n\">segment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">segment_number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add a segment to an existing polyline.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        position_list : list</span>\n<span class=\"sd\">            List of positions of the points that define the segment to insert.</span>\n<span class=\"sd\">            Either the starting point or ending point of the segment list must</span>\n<span class=\"sd\">            match one of the vertices of the existing polyline.</span>\n<span class=\"sd\">        segment : str or :class:`pyaedt.modeler.Primitives.PolylineSegment`</span>\n<span class=\"sd\">            Definition of the segment to insert. For the types ``&quot;Line&quot;`` and ``&quot;Arc&quot;``,</span>\n<span class=\"sd\">            use their string values ``&quot;Line&quot;`` and ``&quot;Arc&quot;``. For the types ``&quot;AngularArc&quot;``</span>\n<span class=\"sd\">            and ``&quot;Spline&quot;``, use the :class:`pyaedt.modeler.Primitives.PolylineSegment`</span>\n<span class=\"sd\">            object to define the segment precisely.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` when successful, ``False`` when failed.</span>\n\n<span class=\"sd\">        References</span>\n<span class=\"sd\">        ----------</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; oEditor.InsertPolylineSegment</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Check for a valid number of points</span>\n        <span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># define the segment type from the number of points given</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">segment</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">num_points</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Line&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">num_points</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Arc&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"o\">=</span><span class=\"n\">num_points</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">)</span>\n            <span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">num_points</span>\n\n        <span class=\"c1\"># Check whether start-point of the segment is in the existing vertices</span>\n        <span class=\"n\">start_point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># End point does not exist e.g. for an AngularArc</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">value_in_object_units</span><span class=\"p\">(</span><span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"n\">num_points</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">end_point</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">segment_id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">segment_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">num_vertices</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">vertex</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">==</span> <span class=\"n\">end_point</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">segment_id</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"n\">segment_id</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">break</span>\n            <span class=\"c1\"># If start_point=[0, 0, 0] (a list of integers provided by the user), it won&#39;t be equal to vertex.position</span>\n            <span class=\"c1\"># that returns a list of float: [0., 0., 0.]. Thus we cast start_point as a list of floats.</span>\n            <span class=\"k\">elif</span> <span class=\"n\">vertex</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">start_point</span><span class=\"p\">]:</span>\n                <span class=\"n\">at_start</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">segment_index</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">segment_index</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">break</span>\n            <span class=\"n\">segment_index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">id_v</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">s_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">s_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_types</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">s_types</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"n\">PolylineSegment</span><span class=\"p\">):</span>\n                <span class=\"n\">id_v</span> <span class=\"o\">+=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">num_seg</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">id_v</span> <span class=\"o\">&gt;</span> <span class=\"n\">segment_index</span><span class=\"p\">:</span>\n                    <span class=\"n\">id_v</span> <span class=\"o\">-=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">num_seg</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">break</span>\n        <span class=\"n\">segment_index</span> <span class=\"o\">-=</span> <span class=\"n\">id_v</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">segment_index</span> <span class=\"o\">&lt;</span> <span class=\"n\">num_vertices</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Vertex for the insert is not found.&quot;</span>\n        <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span>\n\n        <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Insert Polyline Segment&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Selections:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Segment Indices:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">segment_index</span><span class=\"p\">])</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;At Start:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">at_start</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;SegmentType:=&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Points and segment data</span>\n        <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PolylinePoints&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Line&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spline&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Arc&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">pt</span> <span class=\"ow\">in</span> <span class=\"n\">position_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">num_points</span><span class=\"p\">]:</span>\n                <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">))</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AngularArc&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">seg_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_segment_array</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">,</span> <span class=\"n\">start_point</span><span class=\"o\">=</span><span class=\"n\">start_point</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">start_point</span><span class=\"p\">))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">extra_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pl_point</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">extra_points</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n            <span class=\"n\">varg1</span> <span class=\"o\">+=</span> <span class=\"n\">seg_str</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">:]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">InsertPolylineSegment</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Spline&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">varg1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:AllTabs&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Geometry3DPolylineTab&quot;</span><span class=\"p\">]</span>\n\n            <span class=\"n\">varg3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:PropServers&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg3</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_m_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:CreatePolyline:1&quot;</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;:Segment&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">segment_id</span><span class=\"p\">))</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg3</span><span class=\"p\">)</span>\n\n            <span class=\"n\">varg4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:ChangedProps&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg5</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME:Number of Segments&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">varg5</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Value:=&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">varg5</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">segment_number</span><span class=\"p\">))</span>\n\n            <span class=\"n\">varg4</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg5</span><span class=\"p\">)</span>\n            <span class=\"n\">varg2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg4</span><span class=\"p\">)</span>\n            <span class=\"n\">varg1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">varg2</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_primitives</span><span class=\"o\">.</span><span class=\"n\">oeditor</span><span class=\"o\">.</span><span class=\"n\">ChangeProperty</span><span class=\"p\">(</span><span class=\"n\">varg1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/modeler/cad/polylines", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}