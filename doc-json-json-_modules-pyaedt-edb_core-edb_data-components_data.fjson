{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "pyaedt.edb_core.edb_data.components_data", "body": "<h1>Source code for pyaedt.edb_core.edb_data.components_data</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.edb_core.edb_data.padstacks_data</span> <span class=\"kn\">import</span> <span class=\"n\">EDBPadstackInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">is_ironpython</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_ironpython</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;The NumPy module is required to run some functionalities of EDB.</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"s2\">&quot;Install with </span><span class=\"se\">\\n\\n</span><span class=\"s2\">pip install numpy</span><span class=\"se\">\\n\\n</span><span class=\"s2\">Requires CPython.&quot;</span>\n        <span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">get_filename_without_extension</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyaedt.generic.general_methods</span> <span class=\"kn\">import</span> <span class=\"n\">pyaedt_function_handler</span>\n\n\n<div class=\"viewcode-block\" id=\"EDBComponentDef\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponentDef/#pyaedt.edb_core.edb_data.components_data.EDBComponentDef\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EDBComponentDef</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages EDB functionalities for component definitions.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    parent : :class:`pyaedt.edb_core.components.Components`</span>\n<span class=\"sd\">        Inherited AEDT object.</span>\n<span class=\"sd\">    comp_def : object</span>\n<span class=\"sd\">        Edb ComponentDef Object</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"n\">comp_def</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span> <span class=\"o\">=</span> <span class=\"n\">components</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_def</span> <span class=\"o\">=</span> <span class=\"n\">comp_def</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_comp_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_def</span><span class=\"o\">.</span><span class=\"n\">GetComponentModels</span><span class=\"p\">())</span>  <span class=\"c1\"># pragma: no cover</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">part_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve component definition name.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_def</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@part_name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">part_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_def</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the component definition type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"k\">for</span> <span class=\"n\">refdes</span><span class=\"p\">,</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">elif</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">type</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;mixed&quot;</span>  <span class=\"c1\"># pragma: no cover</span>\n\n    <span class=\"nd\">@type</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the list of components belonging to this component definition.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dict of :class:`pyaedt.edb_core.edb_data.components_data.EDBComponent`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">comp_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">EDBComponent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">Component</span><span class=\"o\">.</span><span class=\"n\">FindByComponentDef</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">part_name</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">refdes</span><span class=\"p\">:</span> <span class=\"n\">comp</span> <span class=\"k\">for</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"n\">comp_list</span><span class=\"p\">}</span>\n\n<div class=\"viewcode-block\" id=\"EDBComponentDef.assign_rlc_model\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponentDef.assign_rlc_model/#pyaedt.edb_core.edb_data.components_data.EDBComponentDef.assign_rlc_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_rlc_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">cap</span><span class=\"p\">,</span> <span class=\"n\">is_parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign RLC to all components under this part name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        res : int, float</span>\n<span class=\"sd\">            Resistance.</span>\n<span class=\"sd\">        ind : int, float</span>\n<span class=\"sd\">            Inductance.</span>\n<span class=\"sd\">        cap : int, float</span>\n<span class=\"sd\">            Capacitance.</span>\n<span class=\"sd\">        is_parallel : bool, optional</span>\n<span class=\"sd\">            Whether it is parallel or series RLC component.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">cap</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">cap</span>\n            <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">assign_rlc_model</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">cap</span><span class=\"p\">,</span> <span class=\"n\">is_parallel</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBComponentDef.assign_s_param_model\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponentDef.assign_s_param_model/#pyaedt.edb_core.edb_data.components_data.EDBComponentDef.assign_s_param_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_s_param_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reference_net</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign S-parameter to all components under this part name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_path : str</span>\n<span class=\"sd\">            File path of the S-parameter model.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the S-parameter model.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">assign_s_param_model</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"p\">,</span> <span class=\"n\">reference_net</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBComponentDef.assign_spice_model\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponentDef.assign_spice_model/#pyaedt.edb_core.edb_data.components_data.EDBComponentDef.assign_spice_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_spice_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign Spice model to all components under this part name.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_path : str</span>\n<span class=\"sd\">            File path of the Spice model.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the Spice model.</span>\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">comp</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"n\">comp</span><span class=\"o\">.</span><span class=\"n\">assign_spice_model</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"EDBComponent\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponent/#pyaedt.edb_core.edb_data.components_data.EDBComponent\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EDBComponent</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Manages EDB functionalities for components.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    parent : :class:`pyaedt.edb_core.components.Components`</span>\n<span class=\"sd\">        Inherited AEDT object.</span>\n<span class=\"sd\">    component : object</span>\n<span class=\"sd\">        Edb Component Object</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">_PinPair</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pcomp</span><span class=\"p\">,</span> <span class=\"n\">edb_comp</span><span class=\"p\">,</span> <span class=\"n\">edb_comp_prop</span><span class=\"p\">,</span> <span class=\"n\">edb_model</span><span class=\"p\">,</span> <span class=\"n\">edb_pin_pair</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb_comp</span> <span class=\"o\">=</span> <span class=\"n\">pcomp</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp</span> <span class=\"o\">=</span> <span class=\"n\">edb_comp</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_prop</span> <span class=\"o\">=</span> <span class=\"n\">edb_comp_prop</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span> <span class=\"o\">=</span> <span class=\"n\">edb_model</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_pair</span> <span class=\"o\">=</span> <span class=\"n\">edb_pin_pair</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_edb_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb_comp</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">is_parallel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">IsParallel</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@is_parallel</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">is_parallel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">IsParallel</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_comp_prop</span><span class=\"p\">()</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_pin_pair_rlc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetPinPairRlc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_pair</span><span class=\"p\">)</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">rlc_enable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">REnabled</span><span class=\"p\">,</span> <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">LEnabled</span><span class=\"p\">,</span> <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">CEnabled</span><span class=\"p\">]</span>\n\n        <span class=\"nd\">@rlc_enable</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">rlc_enable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">REnabled</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">LEnabled</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">CEnabled</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_comp_prop</span><span class=\"p\">()</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">resistance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@resistance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">resistance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_comp_prop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inductance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@inductance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inductance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_comp_prop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">capacitance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@capacitance</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">capacitance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_comp_prop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"p\">)</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">rlc_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n\n        <span class=\"nd\">@rlc_values</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n        <span class=\"k\">def</span> <span class=\"nf\">rlc_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">rlc</span><span class=\"o\">.</span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_value</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_comp_prop</span><span class=\"p\">()</span>  <span class=\"c1\"># pragma: no cover</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_set_comp_prop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">SetPinPairRlc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_pin_pair</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pair_rlc</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_prop</span><span class=\"o\">.</span><span class=\"n\">SetModel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp</span><span class=\"o\">.</span><span class=\"n\">SetComponentProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_comp_prop</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">_SpiceModel</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edb_model</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span> <span class=\"o\">=</span> <span class=\"n\">edb_model</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">file_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetSPICEFilePath</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetSPICEName</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">_SparamModel</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edb_model</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span> <span class=\"o\">=</span> <span class=\"n\">edb_model</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetComponentModelName</span><span class=\"p\">()</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">reference_net</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetReferenceNet</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">_NetlistModel</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">edb_model</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span> <span class=\"o\">=</span> <span class=\"n\">edb_model</span>\n\n        <span class=\"nd\">@property</span>\n        <span class=\"k\">def</span> <span class=\"nf\">netlist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetNetlist</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"n\">cmp</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span> <span class=\"o\">=</span> <span class=\"n\">components</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span> <span class=\"o\">=</span> <span class=\"n\">cmp</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layout_instance</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_comp_instance</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">layout_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Edb layout instance object.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layout_instance</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layout_instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">layout_instance</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_layout_instance</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">component_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Edb component instance.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_comp_instance</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_comp_instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout_instance</span><span class=\"o\">.</span><span class=\"n\">GetLayoutObjInstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_comp_instance</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_pedb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_pedb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_active_layout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"o\">.</span><span class=\"n\">active_layout</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">component_property</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;``ComponentProperty`` object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"o\">.</span><span class=\"n\">GetModel</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>  <span class=\"c1\"># pragma: no cover</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_pin_pairs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">edb_comp_prop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span>\n        <span class=\"n\">edb_model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_PinPair</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"p\">,</span> <span class=\"n\">edb_comp_prop</span><span class=\"p\">,</span> <span class=\"n\">edb_model</span><span class=\"p\">,</span> <span class=\"n\">pin_pair</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">pin_pair</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">edb_model</span><span class=\"o\">.</span><span class=\"n\">PinPairs</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">spice_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get assigned Spice model properties.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SPICEModel&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_SpiceModel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">s_param_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get assigned S-parameter model properties.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SParameterModel&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_SparamModel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">netlist_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get assigned netlist model properties.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;NetlistModel&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_NetlistModel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solder_ball_height</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Solder ball height if available.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;GetSolderBallProperty&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"o\">.</span><span class=\"n\">GetSolderBallProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetHeight</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solder_ball_placement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Solder ball placement if available..&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;GetSolderBallProperty&quot;</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"o\">.</span><span class=\"n\">GetSolderBallProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetPlacement</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"mi\">2</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refdes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Reference Designator Name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Reference Designator Name.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@refdes</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refdes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check if the current object is enabled.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if current object is enabled, ``False`` otherwise.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Resistor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Capacitor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Inductor&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"o\">.</span><span class=\"n\">IsEnabled</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@is_enabled</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_enabled</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Enables the current object.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Resistor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Capacitor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Inductor&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">component_property</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span>\n            <span class=\"n\">component_property</span><span class=\"o\">.</span><span class=\"n\">SetEnabled</span><span class=\"p\">(</span><span class=\"n\">enabled</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">SetComponentProperty</span><span class=\"p\">(</span><span class=\"n\">component_property</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve assigned model type.&quot;&quot;&quot;</span>\n        <span class=\"n\">_model_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">_model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;PinPairModel&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;RLC&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">_model_type</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rlc_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get component rlc values.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pairs</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n        <span class=\"n\">pin_pair</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pairs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">pin_pair</span><span class=\"o\">.</span><span class=\"n\">rlc_values</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve discrete component value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Value. ``None`` if not an RLC Type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;RLC&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">pin_pair</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pairs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pin_pair</span><span class=\"o\">.</span><span class=\"n\">rlc_enable</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">pin_pair</span><span class=\"o\">.</span><span class=\"n\">rlc_values</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pin_pair</span><span class=\"o\">.</span><span class=\"n\">rlc_enable</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">pin_pair</span><span class=\"o\">.</span><span class=\"n\">rlc_values</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SPICEModel&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spice_model</span><span class=\"o\">.</span><span class=\"n\">file_path</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SParameterModel&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s_param_model</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">netlist_model</span><span class=\"o\">.</span><span class=\"n\">netlist</span>\n\n    <span class=\"nd\">@value</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">rlc_enabled</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">True</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"k\">else</span> <span class=\"kc\">False</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Resistor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Inductor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Capacitor&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">rlc_values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">value</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Resistor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Inductor&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Capacitor&quot;</span><span class=\"p\">]]</span>\n        <span class=\"n\">rlc_values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">rlc_values</span><span class=\"p\">]</span>\n\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">PinPairModel</span><span class=\"p\">()</span>\n        <span class=\"n\">pin_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pins</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pin_names</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)):</span>\n            <span class=\"n\">pin_pair</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">PinPair</span><span class=\"p\">(</span><span class=\"n\">pin_names</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">pin_names</span><span class=\"p\">[</span><span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Rlc</span><span class=\"p\">(</span>\n                <span class=\"n\">rlc_values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">rlc_enabled</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">rlc_values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">rlc_enabled</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">rlc_values</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">rlc_enabled</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pin_pair</span><span class=\"p\">,</span> <span class=\"n\">rlc</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">res_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Resistance value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Resistance value or ``None`` if not an RLC type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmp_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentType</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">cmp_type</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">componentProperty</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentProperty</span><span class=\"p\">()</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">componentProperty</span><span class=\"o\">.</span><span class=\"n\">GetModel</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n            <span class=\"n\">pinpairs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">PinPairs</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pinpairs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;0&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">pinpair</span> <span class=\"ow\">in</span> <span class=\"n\">pinpairs</span><span class=\"p\">:</span>\n                <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">GetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pinpair</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cap_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Capacitance Value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Capacitance Value. ``None`` if not an RLC Type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmp_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentType</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">cmp_type</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">componentProperty</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentProperty</span><span class=\"p\">()</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">componentProperty</span><span class=\"o\">.</span><span class=\"n\">GetModel</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n            <span class=\"n\">pinpairs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">PinPairs</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pinpairs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;0&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">pinpair</span> <span class=\"ow\">in</span> <span class=\"n\">pinpairs</span><span class=\"p\">:</span>\n                <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">GetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pinpair</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ind_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Inductance Value.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Inductance Value. ``None`` if not an RLC Type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmp_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentType</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">cmp_type</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">componentProperty</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentProperty</span><span class=\"p\">()</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">componentProperty</span><span class=\"o\">.</span><span class=\"n\">GetModel</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n            <span class=\"n\">pinpairs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">PinPairs</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pinpairs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;0&quot;</span>\n            <span class=\"k\">for</span> <span class=\"n\">pinpair</span> <span class=\"ow\">in</span> <span class=\"n\">pinpairs</span><span class=\"p\">:</span>\n                <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">GetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pinpair</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">ToString</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_parallel_rlc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Define if model is Parallel or Series.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        bool</span>\n<span class=\"sd\">            ``True`` if it is a parallel rlc model. ``False`` for series RLC. ``None`` if not an RLC Type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmp_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentType</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">cmp_type</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span><span class=\"o\">.</span><span class=\"n\">GetModel</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span>\n            <span class=\"n\">pinpairs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">PinPairs</span>\n            <span class=\"k\">for</span> <span class=\"n\">pinpair</span> <span class=\"ow\">in</span> <span class=\"n\">pinpairs</span><span class=\"p\">:</span>\n                <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">GetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pinpair</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">IsParallel</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@is_parallel_rlc</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_parallel_rlc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pairs</span><span class=\"p\">):</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refdes</span><span class=\"p\">,</span> <span class=\"s2\">&quot; has no pin pair.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pin_pair</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pin_pairs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">pin_pair_rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span><span class=\"o\">.</span><span class=\"n\">GetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pin_pair</span><span class=\"p\">)</span>\n            <span class=\"n\">pin_pair_rlc</span><span class=\"o\">.</span><span class=\"n\">IsParallel</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"n\">pin_pair_model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb_model</span>\n            <span class=\"n\">pin_pair_model</span><span class=\"o\">.</span><span class=\"n\">SetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pin_pair</span><span class=\"p\">,</span> <span class=\"n\">pin_pair_rlc</span><span class=\"p\">)</span>\n            <span class=\"n\">comp_prop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span>\n            <span class=\"n\">comp_prop</span><span class=\"o\">.</span><span class=\"n\">SetModel</span><span class=\"p\">(</span><span class=\"n\">pin_pair_model</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">SetComponentProperty</span><span class=\"p\">(</span><span class=\"n\">comp_prop</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">center</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Compute the component center.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_instance</span><span class=\"o\">.</span><span class=\"n\">GetCenter</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">center</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">center</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bounding_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component&#39;s bounding box.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        List[float]</span>\n<span class=\"sd\">            List of coordinates for the component&#39;s bounding box, with the list of</span>\n<span class=\"sd\">            coordinates in this order: [X lower left corner, Y lower left corner,</span>\n<span class=\"sd\">            X upper right corner, Y upper right corner].</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_instance</span><span class=\"o\">.</span><span class=\"n\">GetBBox</span><span class=\"p\">()</span>\n        <span class=\"n\">pt1</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span><span class=\"o\">.</span><span class=\"n\">Item1</span>\n        <span class=\"n\">pt2</span> <span class=\"o\">=</span> <span class=\"n\">bbox</span><span class=\"o\">.</span><span class=\"n\">Item2</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">pt1</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">pt1</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">pt2</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">(),</span> <span class=\"n\">pt2</span><span class=\"o\">.</span><span class=\"n\">Y</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rotation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Compute the component rotation in radian.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetTransform</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Rotation</span><span class=\"o\">.</span><span class=\"n\">ToDouble</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pinlist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Pins of the component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of Pins of Component.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">p</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">LayoutObjs</span>\n            <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">GetObjType</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">LayoutObjType</span><span class=\"o\">.</span><span class=\"n\">PadstackInstance</span>\n            <span class=\"ow\">and</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">IsLayoutPin</span><span class=\"p\">()</span>\n            <span class=\"ow\">and</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">GetComponent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refdes</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">pins</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">nets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Nets of Component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        list</span>\n<span class=\"sd\">            List of Nets of Component.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">netlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">pin</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pinlist</span><span class=\"p\">:</span>\n            <span class=\"n\">netlist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"o\">.</span><span class=\"n\">GetNet</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">netlist</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;EDBPadstackInstance of Component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        dic[str, :class:`pyaedt.edb_core.edb_data.padstacks.EDBPadstackInstance`]</span>\n<span class=\"sd\">            Dictionary of EDBPadstackInstance Components.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pinlist</span><span class=\"p\">:</span>\n            <span class=\"n\">pins</span><span class=\"p\">[</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">EDBPadstackInstance</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_pedb</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">pins</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component type.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Component type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmp_type</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentType</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Resistor&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Inductor&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Capacitor&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;IC&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;IO&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">cmp_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Other&quot;</span>\n\n    <span class=\"nd\">@type</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_type</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set component type</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        new_type : str</span>\n<span class=\"sd\">            Type of the component. Options are ``&quot;Resistor&quot;``,  ``&quot;Inductor&quot;``, ``&quot;Capacitor&quot;``,</span>\n<span class=\"sd\">            ``&quot;IC&quot;``, ``&quot;IO&quot;`` and ``&quot;Other&quot;``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">new_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Resistor&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">Resistor</span>\n        <span class=\"k\">elif</span> <span class=\"n\">new_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Inductor&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">Inductor</span>\n        <span class=\"k\">elif</span> <span class=\"n\">new_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Capacitor&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">Capacitor</span>\n        <span class=\"k\">elif</span> <span class=\"n\">new_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;IC&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">IC</span>\n        <span class=\"k\">elif</span> <span class=\"n\">new_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;IO&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">IO</span>\n        <span class=\"k\">elif</span> <span class=\"n\">new_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Other&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">type_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">ComponentType</span><span class=\"o\">.</span><span class=\"n\">Other</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">SetComponentType</span><span class=\"p\">(</span><span class=\"n\">type_id</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">numpins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Number of Pins of Component.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            Number of Pins of Component.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetNumberOfPins</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">partname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component part name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Component Part Name.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">part_name</span>\n\n    <span class=\"nd\">@partname</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">partname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set component part name.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">part_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">part_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Component part name.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">            Component part name.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentDef</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@part_name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">part_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set component part name.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentDef</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">SetName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_edb</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_edb</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">placement_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Placement layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        str</span>\n<span class=\"sd\">           Name of the placement layer.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetPlacementLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetName</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lower_elevation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Lower elevation of the placement layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Lower elevation of the placement layer.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetPlacementLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetLowerElevation</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">upper_elevation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Upper elevation of the placement layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        float</span>\n<span class=\"sd\">            Upper elevation of the placement layer.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetPlacementLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Clone</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetUpperElevation</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">top_bottom_association</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Top/bottom association of the placement layer.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        int</span>\n<span class=\"sd\">            Top/bottom association of the placement layer, where:</span>\n\n<span class=\"sd\">            * 0 - Top associated</span>\n<span class=\"sd\">            * 1 - No association</span>\n<span class=\"sd\">            * 2 - Bottom associated</span>\n<span class=\"sd\">            * 4 - Number of top/bottom associations.</span>\n<span class=\"sd\">            * -1 - Undefined</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetPlacementLayer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetTopBottomAssociation</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_edb_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pcomponents</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_set_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">):</span>  <span class=\"c1\"># pragma: no cover</span>\n        <span class=\"n\">comp_prop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">component_property</span>\n        <span class=\"n\">comp_prop</span><span class=\"o\">.</span><span class=\"n\">SetModel</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">SetComponentProperty</span><span class=\"p\">(</span><span class=\"n\">comp_prop</span><span class=\"p\">):</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Fail to assign model on </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refdes</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<div class=\"viewcode-block\" id=\"EDBComponent.assign_spice_model\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponent.assign_spice_model/#pyaedt.edb_core.edb_data.components_data.EDBComponent.assign_spice_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_spice_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign Spice model to this component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_path : str</span>\n<span class=\"sd\">            File path of the Spice model.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the Spice model.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">get_filename_without_extension</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;subckt&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n                    <span class=\"n\">pinNames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; |</span><span class=\"se\">\\t</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">pinNames</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pinNames</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"n\">pinNames</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pinNames</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                    <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pinNames</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numpins</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">SPICEModel</span><span class=\"p\">()</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SetModelPath</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SetModelName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">terminal</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">for</span> <span class=\"n\">pn</span> <span class=\"ow\">in</span> <span class=\"n\">pinNames</span><span class=\"p\">:</span>\n                <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">AddTerminalPinPair</span><span class=\"p\">(</span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">terminal</span><span class=\"p\">))</span>\n                <span class=\"n\">terminal</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># pragma: no cover</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wrong number of Pins&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBComponent.assign_s_param_model\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponent.assign_s_param_model/#pyaedt.edb_core.edb_data.components_data.EDBComponent.assign_s_param_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_s_param_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reference_net</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign S-parameter to this component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        file_path : str</span>\n<span class=\"sd\">            File path of the S-parameter model.</span>\n<span class=\"sd\">        name : str, optional</span>\n<span class=\"sd\">            Name of the S-parameter model.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">get_filename_without_extension</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n        <span class=\"n\">edbComponentDef</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">edbcomponent</span><span class=\"o\">.</span><span class=\"n\">GetComponentDef</span><span class=\"p\">()</span>\n        <span class=\"n\">nPortModel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">NPortComponentModel</span><span class=\"o\">.</span><span class=\"n\">FindByName</span><span class=\"p\">(</span><span class=\"n\">edbComponentDef</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">nPortModel</span><span class=\"o\">.</span><span class=\"n\">IsNull</span><span class=\"p\">():</span>\n            <span class=\"n\">nPortModel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Definition</span><span class=\"o\">.</span><span class=\"n\">NPortComponentModel</span><span class=\"o\">.</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"n\">nPortModel</span><span class=\"o\">.</span><span class=\"n\">SetReferenceFile</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n            <span class=\"n\">edbComponentDef</span><span class=\"o\">.</span><span class=\"n\">AddComponentModel</span><span class=\"p\">(</span><span class=\"n\">nPortModel</span><span class=\"p\">)</span>\n\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">SParameterModel</span><span class=\"p\">()</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SetComponentModelName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">reference_net</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SetReferenceNet</span><span class=\"p\">(</span><span class=\"n\">reference_net</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EDBComponent.assign_rlc_model\"><a class=\"viewcode-back\" href=\"../../../../../EDBAPI/_autosummary/pyaedt.edb_core.edb_data.components_data.EDBComponent.assign_rlc_model/#pyaedt.edb_core.edb_data.components_data.EDBComponent.assign_rlc_model\">[docs]</a>    <span class=\"nd\">@pyaedt_function_handler</span>\n    <span class=\"k\">def</span> <span class=\"nf\">assign_rlc_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">cap</span><span class=\"p\">,</span> <span class=\"n\">is_parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Assign RLC to this component.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        res : int, float</span>\n<span class=\"sd\">            Resistance.</span>\n<span class=\"sd\">        ind : int, float</span>\n<span class=\"sd\">            Inductance.</span>\n<span class=\"sd\">        cap : int, float</span>\n<span class=\"sd\">            Capacitance.</span>\n<span class=\"sd\">        is_parallel : bool, optional</span>\n<span class=\"sd\">            Whether it is a parallel or series RLC component. The default is ``False``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"n\">cap</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">ind</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_edb_value</span><span class=\"p\">(</span><span class=\"n\">cap</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">Hierarchy</span><span class=\"o\">.</span><span class=\"n\">PinPairModel</span><span class=\"p\">()</span>\n\n        <span class=\"n\">pin_names</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pins</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pin_names</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)):</span>\n            <span class=\"n\">pin_pair</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">PinPair</span><span class=\"p\">(</span><span class=\"n\">pin_names</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">pin_names</span><span class=\"p\">[</span><span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">rlc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_edb</span><span class=\"o\">.</span><span class=\"n\">Utility</span><span class=\"o\">.</span><span class=\"n\">Rlc</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ind</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cap</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">is_parallel</span><span class=\"p\">)</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">SetPinPairRlc</span><span class=\"p\">(</span><span class=\"n\">pin_pair</span><span class=\"p\">,</span> <span class=\"n\">rlc</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/pyaedt/edb_core/edb_data/components_data", "sidebars": ["search-field.html", "sidebar-nav-bs.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "theme_show_toc_level": 1, "theme_logo": {}}